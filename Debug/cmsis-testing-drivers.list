
cmsis-testing-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000528  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006bc  080006c4  000106c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006bc  080006bc  000106c4  2**0
                  CONTENTS
  4 .ARM          00000000  080006bc  080006bc  000106c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006bc  080006c4  000106c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006bc  080006bc  000106bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006c0  080006c0  000106c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080006c4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080006c4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000106c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f9a  00000000  00000000  000106f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000427  00000000  00000000  0001168e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00011ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  00011b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00000d7a  00000000  00000000  00011bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0004f4fc  00000000  00000000  0001296a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00061e66  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000001a8  00000000  00000000  00061ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000dbf0  00000000  00000000  00062064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006a4 	.word	0x080006a4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080006a4 	.word	0x080006a4

080001d4 <main>:
#include "stm32f401xe.h"
#include "stm32f401xe_GPIO.h"
#include "stdint.h"

int main()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0



	GPIO_Handle_t GPIOx;
	GPIOx.PinConfig.PinNumber = GPIO_PIN_5;
 80001da:	2305      	movs	r3, #5
 80001dc:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_OUTPUT;
 80001de:	2301      	movs	r3, #1
 80001e0:	727b      	strb	r3, [r7, #9]
	GPIOx.PinConfig.OutputType = GPIO_PIN_OT_PP;
 80001e2:	2300      	movs	r3, #0
 80001e4:	72bb      	strb	r3, [r7, #10]
	GPIOx.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 80001e6:	2300      	movs	r3, #0
 80001e8:	733b      	strb	r3, [r7, #12]
	GPIOx.pGPIOx = GPIOA;
 80001ea:	4b08      	ldr	r3, [pc, #32]	; (800020c <main+0x38>)
 80001ec:	607b      	str	r3, [r7, #4]

	GPIO_InitPin(&GPIOx);
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 f8b3 	bl	800035c <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_13;
 80001f6:	230d      	movs	r3, #13
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_EXTI_FT;
 80001fa:	2304      	movs	r3, #4
 80001fc:	727b      	strb	r3, [r7, #9]
	GPIOx.pGPIOx = GPIOC;
 80001fe:	4b04      	ldr	r3, [pc, #16]	; (8000210 <main+0x3c>)
 8000200:	607b      	str	r3, [r7, #4]

	GPIO_InitPin(&GPIOx);
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	4618      	mov	r0, r3
 8000206:	f000 f8a9 	bl	800035c <GPIO_InitPin>


	while(1)
 800020a:	e7fe      	b.n	800020a <main+0x36>
 800020c:	40020000 	.word	0x40020000
 8000210:	40020800 	.word	0x40020800

08000214 <EXTI15_10_IRQHandler>:

	}
}

void EXTI15_10_IRQHandler()
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0

	GPIO_ClearPendingEXTIFlag(GPIO_PIN_13);
 8000218:	200d      	movs	r0, #13
 800021a:	f000 fa07 	bl	800062c <GPIO_ClearPendingEXTIFlag>
	GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800021e:	2105      	movs	r1, #5
 8000220:	4802      	ldr	r0, [pc, #8]	; (800022c <EXTI15_10_IRQHandler+0x18>)
 8000222:	f000 f9ed 	bl	8000600 <GPIO_TogglePin>
}
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40020000 	.word	0x40020000

08000230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <SystemInit+0x20>)
 8000236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800023a:	4a05      	ldr	r2, [pc, #20]	; (8000250 <SystemInit+0x20>)
 800023c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800028c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000258:	480d      	ldr	r0, [pc, #52]	; (8000290 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800025a:	490e      	ldr	r1, [pc, #56]	; (8000294 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800025c:	4a0e      	ldr	r2, [pc, #56]	; (8000298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000260:	e002      	b.n	8000268 <LoopCopyDataInit>

08000262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000266:	3304      	adds	r3, #4

08000268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800026c:	d3f9      	bcc.n	8000262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026e:	4a0b      	ldr	r2, [pc, #44]	; (800029c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000270:	4c0b      	ldr	r4, [pc, #44]	; (80002a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000274:	e001      	b.n	800027a <LoopFillZerobss>

08000276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000278:	3204      	adds	r2, #4

0800027a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800027c:	d3fb      	bcc.n	8000276 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800027e:	f7ff ffd7 	bl	8000230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000282:	f000 f9eb 	bl	800065c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000286:	f7ff ffa5 	bl	80001d4 <main>
  bx  lr    
 800028a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800028c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000294:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000298:	080006c4 	.word	0x080006c4
  ldr r2, =_sbss
 800029c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002a4:	e7fe      	b.n	80002a4 <ADC_IRQHandler>
	...

080002a8 <GPIO_ClockEnable>:
 *
 * @param[*GPIO] - base address of gpiox peripheral
 * @return - void
 */
void GPIO_ClockEnable(GPIO_TypeDef *GPIO)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	if (GPIO == GPIOA)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a23      	ldr	r2, [pc, #140]	; (8000340 <GPIO_ClockEnable+0x98>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d106      	bne.n	80002c6 <GPIO_ClockEnable+0x1e>
	{
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002b8:	4b22      	ldr	r3, [pc, #136]	; (8000344 <GPIO_ClockEnable+0x9c>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a21      	ldr	r2, [pc, #132]	; (8000344 <GPIO_ClockEnable+0x9c>)
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30
	else if (GPIO == GPIOH)
	{
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
	}

}
 80002c4:	e035      	b.n	8000332 <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOB)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a1f      	ldr	r2, [pc, #124]	; (8000348 <GPIO_ClockEnable+0xa0>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_ClockEnable+0x34>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80002ce:	4b1d      	ldr	r3, [pc, #116]	; (8000344 <GPIO_ClockEnable+0x9c>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a1c      	ldr	r2, [pc, #112]	; (8000344 <GPIO_ClockEnable+0x9c>)
 80002d4:	f043 0302 	orr.w	r3, r3, #2
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002da:	e02a      	b.n	8000332 <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOC)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a1b      	ldr	r2, [pc, #108]	; (800034c <GPIO_ClockEnable+0xa4>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <GPIO_ClockEnable+0x4a>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80002e4:	4b17      	ldr	r3, [pc, #92]	; (8000344 <GPIO_ClockEnable+0x9c>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a16      	ldr	r2, [pc, #88]	; (8000344 <GPIO_ClockEnable+0x9c>)
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f0:	e01f      	b.n	8000332 <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOD)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a16      	ldr	r2, [pc, #88]	; (8000350 <GPIO_ClockEnable+0xa8>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_ClockEnable+0x60>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80002fa:	4b12      	ldr	r3, [pc, #72]	; (8000344 <GPIO_ClockEnable+0x9c>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a11      	ldr	r2, [pc, #68]	; (8000344 <GPIO_ClockEnable+0x9c>)
 8000300:	f043 0308 	orr.w	r3, r3, #8
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000306:	e014      	b.n	8000332 <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOE)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a12      	ldr	r2, [pc, #72]	; (8000354 <GPIO_ClockEnable+0xac>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_ClockEnable+0x76>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <GPIO_ClockEnable+0x9c>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a0b      	ldr	r2, [pc, #44]	; (8000344 <GPIO_ClockEnable+0x9c>)
 8000316:	f043 0310 	orr.w	r3, r3, #16
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031c:	e009      	b.n	8000332 <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOH)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <GPIO_ClockEnable+0xb0>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d105      	bne.n	8000332 <GPIO_ClockEnable+0x8a>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8000326:	4b07      	ldr	r3, [pc, #28]	; (8000344 <GPIO_ClockEnable+0x9c>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a06      	ldr	r2, [pc, #24]	; (8000344 <GPIO_ClockEnable+0x9c>)
 800032c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40020000 	.word	0x40020000
 8000344:	40023800 	.word	0x40023800
 8000348:	40020400 	.word	0x40020400
 800034c:	40020800 	.word	0x40020800
 8000350:	40020c00 	.word	0x40020c00
 8000354:	40021000 	.word	0x40021000
 8000358:	40021c00 	.word	0x40021c00

0800035c <GPIO_InitPin>:
 *
 * @param[*hGPIO] - handler to GPIO structure that contains peripheral base address and pin configuration
 * @return - void
 */
void GPIO_InitPin(GPIO_Handle_t *hGPIO)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]

	//enable clock
	GPIO_ClockEnable(hGPIO->pGPIOx);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4618      	mov	r0, r3
 800036a:	f7ff ff9d 	bl	80002a8 <GPIO_ClockEnable>

	// mode selection
	if (hGPIO->PinConfig.Mode < GPIO_PIN_MODE_EXTI_FT)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	795b      	ldrb	r3, [r3, #5]
 8000372:	2b03      	cmp	r3, #3
 8000374:	d81f      	bhi.n	80003b6 <GPIO_InitPin+0x5a>
	{
		// non IRQ mode
	hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	791b      	ldrb	r3, [r3, #4]
 8000380:	005b      	lsls	r3, r3, #1
 8000382:	2103      	movs	r1, #3
 8000384:	fa01 f303 	lsl.w	r3, r1, r3
 8000388:	43db      	mvns	r3, r3
 800038a:	4619      	mov	r1, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	400a      	ands	r2, r1
 8000392:	601a      	str	r2, [r3, #0]
	hGPIO->pGPIOx->MODER |= hGPIO->PinConfig.Mode << (hGPIO->PinConfig.PinNumber * 2);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	795b      	ldrb	r3, [r3, #5]
 800039e:	4619      	mov	r1, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	791b      	ldrb	r3, [r3, #4]
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	fa01 f303 	lsl.w	r3, r1, r3
 80003aa:	4619      	mov	r1, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	430a      	orrs	r2, r1
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	e0a9      	b.n	800050a <GPIO_InitPin+0x1ae>
	else
	{
		//IRQ mode

		//set as input
		hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	791b      	ldrb	r3, [r3, #4]
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	2103      	movs	r1, #3
 80003c4:	fa01 f303 	lsl.w	r3, r1, r3
 80003c8:	43db      	mvns	r3, r3
 80003ca:	4619      	mov	r1, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	400a      	ands	r2, r1
 80003d2:	601a      	str	r2, [r3, #0]
		//interrupt mask
		EXTI->IMR |= (0b1 << hGPIO->PinConfig.PinNumber);
 80003d4:	4b80      	ldr	r3, [pc, #512]	; (80005d8 <GPIO_InitPin+0x27c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	7912      	ldrb	r2, [r2, #4]
 80003dc:	4611      	mov	r1, r2
 80003de:	2201      	movs	r2, #1
 80003e0:	408a      	lsls	r2, r1
 80003e2:	4611      	mov	r1, r2
 80003e4:	4a7c      	ldr	r2, [pc, #496]	; (80005d8 <GPIO_InitPin+0x27c>)
 80003e6:	430b      	orrs	r3, r1
 80003e8:	6013      	str	r3, [r2, #0]

		//rising/falling trigger
		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	795b      	ldrb	r3, [r3, #5]
 80003ee:	2b04      	cmp	r3, #4
 80003f0:	d003      	beq.n	80003fa <GPIO_InitPin+0x9e>
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	795b      	ldrb	r3, [r3, #5]
 80003f6:	2b06      	cmp	r3, #6
 80003f8:	d10a      	bne.n	8000410 <GPIO_InitPin+0xb4>
		{
			EXTI->FTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 80003fa:	4b77      	ldr	r3, [pc, #476]	; (80005d8 <GPIO_InitPin+0x27c>)
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	7912      	ldrb	r2, [r2, #4]
 8000402:	4611      	mov	r1, r2
 8000404:	2201      	movs	r2, #1
 8000406:	408a      	lsls	r2, r1
 8000408:	4611      	mov	r1, r2
 800040a:	4a73      	ldr	r2, [pc, #460]	; (80005d8 <GPIO_InitPin+0x27c>)
 800040c:	430b      	orrs	r3, r1
 800040e:	60d3      	str	r3, [r2, #12]
		}

		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_RT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	795b      	ldrb	r3, [r3, #5]
 8000414:	2b05      	cmp	r3, #5
 8000416:	d003      	beq.n	8000420 <GPIO_InitPin+0xc4>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	795b      	ldrb	r3, [r3, #5]
 800041c:	2b06      	cmp	r3, #6
 800041e:	d10a      	bne.n	8000436 <GPIO_InitPin+0xda>
		{
			EXTI->RTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000420:	4b6d      	ldr	r3, [pc, #436]	; (80005d8 <GPIO_InitPin+0x27c>)
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	7912      	ldrb	r2, [r2, #4]
 8000428:	4611      	mov	r1, r2
 800042a:	2201      	movs	r2, #1
 800042c:	408a      	lsls	r2, r1
 800042e:	4611      	mov	r1, r2
 8000430:	4a69      	ldr	r2, [pc, #420]	; (80005d8 <GPIO_InitPin+0x27c>)
 8000432:	430b      	orrs	r3, r1
 8000434:	6093      	str	r3, [r2, #8]
		}

		//enable NVIC interrupt
		if (hGPIO->PinConfig.PinNumber < GPIO_PIN_5)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	791b      	ldrb	r3, [r3, #4]
 800043a:	2b04      	cmp	r3, #4
 800043c:	d80c      	bhi.n	8000458 <GPIO_InitPin+0xfc>
		{
			// positions for EXTI interrupts in NVIC vector table are 6-10
			NVIC->ISER[0] |= (0b1 << (hGPIO->PinConfig.PinNumber + 6));
 800043e:	4b67      	ldr	r3, [pc, #412]	; (80005dc <GPIO_InitPin+0x280>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	7912      	ldrb	r2, [r2, #4]
 8000446:	3206      	adds	r2, #6
 8000448:	2101      	movs	r1, #1
 800044a:	fa01 f202 	lsl.w	r2, r1, r2
 800044e:	4611      	mov	r1, r2
 8000450:	4a62      	ldr	r2, [pc, #392]	; (80005dc <GPIO_InitPin+0x280>)
 8000452:	430b      	orrs	r3, r1
 8000454:	6013      	str	r3, [r2, #0]
 8000456:	e010      	b.n	800047a <GPIO_InitPin+0x11e>
		}
		else if (hGPIO->PinConfig.PinNumber < GPIO_PIN_10)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	791b      	ldrb	r3, [r3, #4]
 800045c:	2b09      	cmp	r3, #9
 800045e:	d806      	bhi.n	800046e <GPIO_InitPin+0x112>
		{
			// position for EXTI9_5 is 23
			NVIC->ISER[0] |= (0b1 << 23);
 8000460:	4b5e      	ldr	r3, [pc, #376]	; (80005dc <GPIO_InitPin+0x280>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a5d      	ldr	r2, [pc, #372]	; (80005dc <GPIO_InitPin+0x280>)
 8000466:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800046a:	6013      	str	r3, [r2, #0]
 800046c:	e005      	b.n	800047a <GPIO_InitPin+0x11e>
		}
		else
		{
			// position for EXTI15_10 is 40
			NVIC->ISER[1] |= (0b1 << 8);
 800046e:	4b5b      	ldr	r3, [pc, #364]	; (80005dc <GPIO_InitPin+0x280>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	4a5a      	ldr	r2, [pc, #360]	; (80005dc <GPIO_InitPin+0x280>)
 8000474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000478:	6053      	str	r3, [r2, #4]
		}

		// set SYSCFG for external IRQ
		// enable clock
		RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800047a:	4b59      	ldr	r3, [pc, #356]	; (80005e0 <GPIO_InitPin+0x284>)
 800047c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800047e:	4a58      	ldr	r2, [pc, #352]	; (80005e0 <GPIO_InitPin+0x284>)
 8000480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000484:	6453      	str	r3, [r2, #68]	; 0x44
		// get 4 bits code for certain port
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(hGPIO->pGPIOx);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a56      	ldr	r2, [pc, #344]	; (80005e4 <GPIO_InitPin+0x288>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d024      	beq.n	80004da <GPIO_InitPin+0x17e>
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a54      	ldr	r2, [pc, #336]	; (80005e8 <GPIO_InitPin+0x28c>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d01d      	beq.n	80004d6 <GPIO_InitPin+0x17a>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a53      	ldr	r2, [pc, #332]	; (80005ec <GPIO_InitPin+0x290>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d016      	beq.n	80004d2 <GPIO_InitPin+0x176>
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a51      	ldr	r2, [pc, #324]	; (80005f0 <GPIO_InitPin+0x294>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d00f      	beq.n	80004ce <GPIO_InitPin+0x172>
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a50      	ldr	r2, [pc, #320]	; (80005f4 <GPIO_InitPin+0x298>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d008      	beq.n	80004ca <GPIO_InitPin+0x16e>
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a4e      	ldr	r2, [pc, #312]	; (80005f8 <GPIO_InitPin+0x29c>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d101      	bne.n	80004c6 <GPIO_InitPin+0x16a>
 80004c2:	2307      	movs	r3, #7
 80004c4:	e00a      	b.n	80004dc <GPIO_InitPin+0x180>
 80004c6:	2300      	movs	r3, #0
 80004c8:	e008      	b.n	80004dc <GPIO_InitPin+0x180>
 80004ca:	2304      	movs	r3, #4
 80004cc:	e006      	b.n	80004dc <GPIO_InitPin+0x180>
 80004ce:	2303      	movs	r3, #3
 80004d0:	e004      	b.n	80004dc <GPIO_InitPin+0x180>
 80004d2:	2302      	movs	r3, #2
 80004d4:	e002      	b.n	80004dc <GPIO_InitPin+0x180>
 80004d6:	2301      	movs	r3, #1
 80004d8:	e000      	b.n	80004dc <GPIO_InitPin+0x180>
 80004da:	2300      	movs	r3, #0
 80004dc:	73fb      	strb	r3, [r7, #15]
		// put it in syscfg register
		SYSCFG->EXTICR[hGPIO->PinConfig.PinNumber / 4] |= (portcode << ((hGPIO->PinConfig.PinNumber % 4) * 4));
 80004de:	4a47      	ldr	r2, [pc, #284]	; (80005fc <GPIO_InitPin+0x2a0>)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	791b      	ldrb	r3, [r3, #4]
 80004e4:	089b      	lsrs	r3, r3, #2
 80004e6:	b2d8      	uxtb	r0, r3
 80004e8:	4603      	mov	r3, r0
 80004ea:	3302      	adds	r3, #2
 80004ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f0:	7bf9      	ldrb	r1, [r7, #15]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	7912      	ldrb	r2, [r2, #4]
 80004f6:	f002 0203 	and.w	r2, r2, #3
 80004fa:	0092      	lsls	r2, r2, #2
 80004fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000500:	493e      	ldr	r1, [pc, #248]	; (80005fc <GPIO_InitPin+0x2a0>)
 8000502:	431a      	orrs	r2, r3
 8000504:	1c83      	adds	r3, r0, #2
 8000506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	// set speed and output type for mode output or AF
	if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_OUTPUT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF))
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	795b      	ldrb	r3, [r3, #5]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d003      	beq.n	800051a <GPIO_InitPin+0x1be>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	795b      	ldrb	r3, [r3, #5]
 8000516:	2b02      	cmp	r3, #2
 8000518:	d13b      	bne.n	8000592 <GPIO_InitPin+0x236>
	{
		//speed selection
		hGPIO->pGPIOx->OSPEEDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	689a      	ldr	r2, [r3, #8]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	791b      	ldrb	r3, [r3, #4]
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	2103      	movs	r1, #3
 8000528:	fa01 f303 	lsl.w	r3, r1, r3
 800052c:	43db      	mvns	r3, r3
 800052e:	4619      	mov	r1, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	400a      	ands	r2, r1
 8000536:	609a      	str	r2, [r3, #8]
		hGPIO->pGPIOx->OSPEEDR |= hGPIO->PinConfig.OutputSpeed << (hGPIO->PinConfig.PinNumber * 2);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	689a      	ldr	r2, [r3, #8]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	79db      	ldrb	r3, [r3, #7]
 8000542:	4619      	mov	r1, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	791b      	ldrb	r3, [r3, #4]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	4619      	mov	r1, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	430a      	orrs	r2, r1
 8000556:	609a      	str	r2, [r3, #8]

		//output type selection
		hGPIO->pGPIOx->OTYPER &= ~(0b1 << (hGPIO->PinConfig.PinNumber));
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	685a      	ldr	r2, [r3, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	791b      	ldrb	r3, [r3, #4]
 8000562:	4619      	mov	r1, r3
 8000564:	2301      	movs	r3, #1
 8000566:	408b      	lsls	r3, r1
 8000568:	43db      	mvns	r3, r3
 800056a:	4619      	mov	r1, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	400a      	ands	r2, r1
 8000572:	605a      	str	r2, [r3, #4]
		hGPIO->pGPIOx->OTYPER |= hGPIO->PinConfig.OutputType << (hGPIO->PinConfig.PinNumber);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	685a      	ldr	r2, [r3, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	799b      	ldrb	r3, [r3, #6]
 800057e:	4619      	mov	r1, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	fa01 f303 	lsl.w	r3, r1, r3
 8000588:	4619      	mov	r1, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	430a      	orrs	r2, r1
 8000590:	605a      	str	r2, [r3, #4]
	}

	// pull ups pull downs
	hGPIO->pGPIOx->PUPDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	68da      	ldr	r2, [r3, #12]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	2103      	movs	r1, #3
 80005a0:	fa01 f303 	lsl.w	r3, r1, r3
 80005a4:	43db      	mvns	r3, r3
 80005a6:	4619      	mov	r1, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	400a      	ands	r2, r1
 80005ae:	60da      	str	r2, [r3, #12]
	hGPIO->pGPIOx->PUPDR |= (hGPIO->PinConfig.PullUpPullDown << (hGPIO->PinConfig.PinNumber * 2));
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	68da      	ldr	r2, [r3, #12]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	7a1b      	ldrb	r3, [r3, #8]
 80005ba:	4619      	mov	r1, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	fa01 f303 	lsl.w	r3, r1, r3
 80005c6:	4619      	mov	r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	430a      	orrs	r2, r1
 80005ce:	60da      	str	r2, [r3, #12]

}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40013c00 	.word	0x40013c00
 80005dc:	e000e100 	.word	0xe000e100
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020000 	.word	0x40020000
 80005e8:	40020400 	.word	0x40020400
 80005ec:	40020800 	.word	0x40020800
 80005f0:	40020c00 	.word	0x40020c00
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40021c00 	.word	0x40021c00
 80005fc:	40013800 	.word	0x40013800

08000600 <GPIO_TogglePin>:
 * @param[*GPIO] - base address of gpiox peripheral
 * @param[PinNumber] - GPIO_PIN_x @PinNumber
 * @return - void
 */
void GPIO_TogglePin(GPIO_TypeDef *GPIO, uint8_t PinNumber)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]
	GPIO->ODR ^= 0b1 << PinNumber;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	78fa      	ldrb	r2, [r7, #3]
 8000612:	2101      	movs	r1, #1
 8000614:	fa01 f202 	lsl.w	r2, r1, r2
 8000618:	405a      	eors	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	615a      	str	r2, [r3, #20]
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
	...

0800062c <GPIO_ClearPendingEXTIFlag>:
 *
 * @param[PinNumber] - GPIO_PIN_x @PinNumber
 * @return - void
 */
void GPIO_ClearPendingEXTIFlag(uint8_t PinNumber)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= (0b1 << PinNumber);
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <GPIO_ClearPendingEXTIFlag+0x2c>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	79fa      	ldrb	r2, [r7, #7]
 800063c:	2101      	movs	r1, #1
 800063e:	fa01 f202 	lsl.w	r2, r1, r2
 8000642:	4611      	mov	r1, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <GPIO_ClearPendingEXTIFlag+0x2c>)
 8000646:	430b      	orrs	r3, r1
 8000648:	6153      	str	r3, [r2, #20]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40013c00 	.word	0x40013c00

0800065c <__libc_init_array>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	4d0d      	ldr	r5, [pc, #52]	; (8000694 <__libc_init_array+0x38>)
 8000660:	4c0d      	ldr	r4, [pc, #52]	; (8000698 <__libc_init_array+0x3c>)
 8000662:	1b64      	subs	r4, r4, r5
 8000664:	10a4      	asrs	r4, r4, #2
 8000666:	2600      	movs	r6, #0
 8000668:	42a6      	cmp	r6, r4
 800066a:	d109      	bne.n	8000680 <__libc_init_array+0x24>
 800066c:	4d0b      	ldr	r5, [pc, #44]	; (800069c <__libc_init_array+0x40>)
 800066e:	4c0c      	ldr	r4, [pc, #48]	; (80006a0 <__libc_init_array+0x44>)
 8000670:	f000 f818 	bl	80006a4 <_init>
 8000674:	1b64      	subs	r4, r4, r5
 8000676:	10a4      	asrs	r4, r4, #2
 8000678:	2600      	movs	r6, #0
 800067a:	42a6      	cmp	r6, r4
 800067c:	d105      	bne.n	800068a <__libc_init_array+0x2e>
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f855 3b04 	ldr.w	r3, [r5], #4
 8000684:	4798      	blx	r3
 8000686:	3601      	adds	r6, #1
 8000688:	e7ee      	b.n	8000668 <__libc_init_array+0xc>
 800068a:	f855 3b04 	ldr.w	r3, [r5], #4
 800068e:	4798      	blx	r3
 8000690:	3601      	adds	r6, #1
 8000692:	e7f2      	b.n	800067a <__libc_init_array+0x1e>
 8000694:	080006bc 	.word	0x080006bc
 8000698:	080006bc 	.word	0x080006bc
 800069c:	080006bc 	.word	0x080006bc
 80006a0:	080006c0 	.word	0x080006c0

080006a4 <_init>:
 80006a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a6:	bf00      	nop
 80006a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006aa:	bc08      	pop	{r3}
 80006ac:	469e      	mov	lr, r3
 80006ae:	4770      	bx	lr

080006b0 <_fini>:
 80006b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b2:	bf00      	nop
 80006b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006b6:	bc08      	pop	{r3}
 80006b8:	469e      	mov	lr, r3
 80006ba:	4770      	bx	lr
