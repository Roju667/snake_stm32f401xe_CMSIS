
cmsis-testing-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dcc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  08004f6c  08004f6c  00014f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005568  08005568  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005568  08005568  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005568  08005568  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005568  08005568  00015568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800556c  0800556c  0001556c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  20000068  080055d8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  080055d8  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bb0  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018eb  00000000  00000000  00028c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000500  00000000  00000000  0002a538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000428  00000000  00000000  0002aa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000518e  00000000  00000000  0002ae60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00051c2c  00000000  00000000  0002ffee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00081c1a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001d30  00000000  00000000  00081c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000e340  00000000  00000000  000839a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004f54 	.word	0x08004f54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004f54 	.word	0x08004f54

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000298:	4a04      	ldr	r2, [pc, #16]	; (80002ac <GFX_SetFont+0x1c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	6013      	str	r3, [r2, #0]
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000570 	.word	0x20000570

080002b0 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b089      	sub	sp, #36	; 0x24
 80002b4:	af02      	add	r7, sp, #8
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	4611      	mov	r1, r2
 80002bc:	461a      	mov	r2, r3
 80002be:	460b      	mov	r3, r1
 80002c0:	71fb      	strb	r3, [r7, #7]
 80002c2:	4613      	mov	r3, r2
 80002c4:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	2b7e      	cmp	r3, #126	; 0x7e
 80002ca:	f200 80a3 	bhi.w	8000414 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80002ce:	2300      	movs	r3, #0
 80002d0:	75fb      	strb	r3, [r7, #23]
 80002d2:	e096      	b.n	8000402 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80002d4:	4b51      	ldr	r3, [pc, #324]	; (800041c <GFX_DrawChar+0x16c>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	3b20      	subs	r3, #32
 80002dc:	494f      	ldr	r1, [pc, #316]	; (800041c <GFX_DrawChar+0x16c>)
 80002de:	6809      	ldr	r1, [r1, #0]
 80002e0:	3101      	adds	r1, #1
 80002e2:	7809      	ldrb	r1, [r1, #0]
 80002e4:	fb01 f103 	mul.w	r1, r1, r3
 80002e8:	7dfb      	ldrb	r3, [r7, #23]
 80002ea:	440b      	add	r3, r1
 80002ec:	3302      	adds	r3, #2
 80002ee:	4413      	add	r3, r2
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80002f4:	2300      	movs	r3, #0
 80002f6:	757b      	strb	r3, [r7, #21]
 80002f8:	e078      	b.n	80003ec <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 80002fa:	7dbb      	ldrb	r3, [r7, #22]
 80002fc:	f003 0301 	and.w	r3, r3, #1
 8000300:	2b00      	cmp	r3, #0
 8000302:	d032      	beq.n	800036a <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8000304:	4b46      	ldr	r3, [pc, #280]	; (8000420 <GFX_DrawChar+0x170>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d113      	bne.n	8000334 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 800030c:	7dfb      	ldrb	r3, [r7, #23]
 800030e:	b29a      	uxth	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	b29b      	uxth	r3, r3
 8000314:	4413      	add	r3, r2
 8000316:	b29b      	uxth	r3, r3
 8000318:	b218      	sxth	r0, r3
 800031a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800031e:	b29a      	uxth	r2, r3
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	b29b      	uxth	r3, r3
 8000324:	4413      	add	r3, r2
 8000326:	b29b      	uxth	r3, r3
 8000328:	b21b      	sxth	r3, r3
 800032a:	79ba      	ldrb	r2, [r7, #6]
 800032c:	4619      	mov	r1, r3
 800032e:	f000 fbb7 	bl	8000aa0 <SSD1306_DrawPixel>
 8000332:	e052      	b.n	80003da <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8000334:	7dfb      	ldrb	r3, [r7, #23]
 8000336:	4a3a      	ldr	r2, [pc, #232]	; (8000420 <GFX_DrawChar+0x170>)
 8000338:	7812      	ldrb	r2, [r2, #0]
 800033a:	fb02 f203 	mul.w	r2, r2, r3
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	18d0      	adds	r0, r2, r3
 8000342:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000346:	4a36      	ldr	r2, [pc, #216]	; (8000420 <GFX_DrawChar+0x170>)
 8000348:	7812      	ldrb	r2, [r2, #0]
 800034a:	fb02 f203 	mul.w	r2, r2, r3
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	18d1      	adds	r1, r2, r3
 8000352:	4b33      	ldr	r3, [pc, #204]	; (8000420 <GFX_DrawChar+0x170>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	b29a      	uxth	r2, r3
 8000358:	4b31      	ldr	r3, [pc, #196]	; (8000420 <GFX_DrawChar+0x170>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	b29c      	uxth	r4, r3
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	4623      	mov	r3, r4
 8000364:	f000 f9e9 	bl	800073a <GFX_DrawFillRectangle>
 8000368:	e037      	b.n	80003da <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800036a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800036e:	2b00      	cmp	r3, #0
 8000370:	d133      	bne.n	80003da <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8000372:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <GFX_DrawChar+0x170>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d114      	bne.n	80003a4 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 800037a:	7dfb      	ldrb	r3, [r7, #23]
 800037c:	b29a      	uxth	r2, r3
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	b29b      	uxth	r3, r3
 8000382:	4413      	add	r3, r2
 8000384:	b29b      	uxth	r3, r3
 8000386:	b218      	sxth	r0, r3
 8000388:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800038c:	b29a      	uxth	r2, r3
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	b29b      	uxth	r3, r3
 8000392:	4413      	add	r3, r2
 8000394:	b29b      	uxth	r3, r3
 8000396:	b21b      	sxth	r3, r3
 8000398:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800039c:	4619      	mov	r1, r3
 800039e:	f000 fb7f 	bl	8000aa0 <SSD1306_DrawPixel>
 80003a2:	e01a      	b.n	80003da <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80003a4:	7dfb      	ldrb	r3, [r7, #23]
 80003a6:	4a1e      	ldr	r2, [pc, #120]	; (8000420 <GFX_DrawChar+0x170>)
 80003a8:	7812      	ldrb	r2, [r2, #0]
 80003aa:	fb02 f203 	mul.w	r2, r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	18d0      	adds	r0, r2, r3
 80003b2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80003b6:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <GFX_DrawChar+0x170>)
 80003b8:	7812      	ldrb	r2, [r2, #0]
 80003ba:	fb02 f203 	mul.w	r2, r2, r3
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	18d1      	adds	r1, r2, r3
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <GFX_DrawChar+0x170>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <GFX_DrawChar+0x170>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	b29c      	uxth	r4, r3
 80003ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80003d2:	9300      	str	r3, [sp, #0]
 80003d4:	4623      	mov	r3, r4
 80003d6:	f000 f9b0 	bl	800073a <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80003da:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	3301      	adds	r3, #1
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	757b      	strb	r3, [r7, #21]
 80003e6:	7dbb      	ldrb	r3, [r7, #22]
 80003e8:	085b      	lsrs	r3, r3, #1
 80003ea:	75bb      	strb	r3, [r7, #22]
 80003ec:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80003f0:	4a0a      	ldr	r2, [pc, #40]	; (800041c <GFX_DrawChar+0x16c>)
 80003f2:	6812      	ldr	r2, [r2, #0]
 80003f4:	7812      	ldrb	r2, [r2, #0]
 80003f6:	4293      	cmp	r3, r2
 80003f8:	f6ff af7f 	blt.w	80002fa <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80003fc:	7dfb      	ldrb	r3, [r7, #23]
 80003fe:	3301      	adds	r3, #1
 8000400:	75fb      	strb	r3, [r7, #23]
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <GFX_DrawChar+0x16c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	3301      	adds	r3, #1
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	7dfa      	ldrb	r2, [r7, #23]
 800040c:	429a      	cmp	r2, r3
 800040e:	f4ff af61 	bcc.w	80002d4 <GFX_DrawChar+0x24>
 8000412:	e000      	b.n	8000416 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8000414:	bf00      	nop
            }
        }
    }
}
 8000416:	371c      	adds	r7, #28
 8000418:	46bd      	mov	sp, r7
 800041a:	bd90      	pop	{r4, r7, pc}
 800041c:	20000570 	.word	0x20000570
 8000420:	20000000 	.word	0x20000000

08000424 <GFX_DrawString>:


void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af02      	add	r7, sp, #8
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	607a      	str	r2, [r7, #4]
 8000430:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 800043c:	e03e      	b.n	80004bc <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 800043e:	78f9      	ldrb	r1, [r7, #3]
 8000440:	7cfa      	ldrb	r2, [r7, #19]
 8000442:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000446:	9300      	str	r3, [sp, #0]
 8000448:	460b      	mov	r3, r1
 800044a:	68b9      	ldr	r1, [r7, #8]
 800044c:	6978      	ldr	r0, [r7, #20]
 800044e:	f7ff ff2f 	bl	80002b0 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8000452:	4b20      	ldr	r3, [pc, #128]	; (80004d4 <GFX_DrawString+0xb0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	461a      	mov	r2, r3
 800045c:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <GFX_DrawString+0xb4>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	fb03 f302 	mul.w	r3, r3, r2
 8000464:	3301      	adds	r3, #1
 8000466:	697a      	ldr	r2, [r7, #20]
 8000468:	4413      	add	r3, r2
 800046a:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 800046c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d120      	bne.n	80004b6 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8000474:	2300      	movs	r3, #0
 8000476:	74bb      	strb	r3, [r7, #18]
 8000478:	e012      	b.n	80004a0 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	b29b      	uxth	r3, r3
 800047e:	3b01      	subs	r3, #1
 8000480:	b29b      	uxth	r3, r3
 8000482:	b218      	sxth	r0, r3
 8000484:	7cbb      	ldrb	r3, [r7, #18]
 8000486:	b29a      	uxth	r2, r3
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	b29b      	uxth	r3, r3
 800048c:	4413      	add	r3, r2
 800048e:	b29b      	uxth	r3, r3
 8000490:	b21b      	sxth	r3, r3
 8000492:	2200      	movs	r2, #0
 8000494:	4619      	mov	r1, r3
 8000496:	f000 fb03 	bl	8000aa0 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 800049a:	7cbb      	ldrb	r3, [r7, #18]
 800049c:	3301      	adds	r3, #1
 800049e:	74bb      	strb	r3, [r7, #18]
 80004a0:	7cba      	ldrb	r2, [r7, #18]
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <GFX_DrawString+0xb0>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	4619      	mov	r1, r3
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <GFX_DrawString+0xb4>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	fb03 f301 	mul.w	r3, r3, r1
 80004b2:	429a      	cmp	r2, r3
 80004b4:	dbe1      	blt.n	800047a <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	607a      	str	r2, [r7, #4]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1ba      	bne.n	800043e <GFX_DrawString+0x1a>
	}
}
 80004c8:	bf00      	nop
 80004ca:	bf00      	nop
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000570 	.word	0x20000570
 80004d8:	20000000 	.word	0x20000000

080004dc <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08c      	sub	sp, #48	; 0x30
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
 80004e8:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80004ea:	683a      	ldr	r2, [r7, #0]
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80004f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80004f8:	6879      	ldr	r1, [r7, #4]
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	1acb      	subs	r3, r1, r3
 80004fe:	2b00      	cmp	r3, #0
 8000500:	bfb8      	it	lt
 8000502:	425b      	neglt	r3, r3
 8000504:	429a      	cmp	r2, r3
 8000506:	bfcc      	ite	gt
 8000508:	2301      	movgt	r3, #1
 800050a:	2300      	movle	r3, #0
 800050c:	b2db      	uxtb	r3, r3
 800050e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8000510:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000514:	2b00      	cmp	r3, #0
 8000516:	d00b      	beq.n	8000530 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000522:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	623b      	str	r3, [r7, #32]
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	6a3b      	ldr	r3, [r7, #32]
 800052e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dd0b      	ble.n	8000550 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	61fb      	str	r3, [r7, #28]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	61bb      	str	r3, [r7, #24]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	b29a      	uxth	r2, r3
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	b29b      	uxth	r3, r3
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	b29b      	uxth	r3, r3
 800055c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	bfb8      	it	lt
 8000568:	425b      	neglt	r3, r3
 800056a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 800056c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000570:	0fda      	lsrs	r2, r3, #31
 8000572:	4413      	add	r3, r2
 8000574:	105b      	asrs	r3, r3, #1
 8000576:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000578:	68ba      	ldr	r2, [r7, #8]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	da02      	bge.n	8000586 <GFX_WriteLine+0xaa>
	        ystep = 1;
 8000580:	2301      	movs	r3, #1
 8000582:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000584:	e030      	b.n	80005e8 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 8000586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800058a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 800058c:	e02c      	b.n	80005e8 <GFX_WriteLine+0x10c>
	        if (steep) {
 800058e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000592:	2b00      	cmp	r3, #0
 8000594:	d009      	beq.n	80005aa <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	b21b      	sxth	r3, r3
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	b211      	sxth	r1, r2
 800059e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fa7c 	bl	8000aa0 <SSD1306_DrawPixel>
 80005a8:	e008      	b.n	80005bc <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	b21b      	sxth	r3, r3
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	b211      	sxth	r1, r2
 80005b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fa72 	bl	8000aa0 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80005bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80005be:	8abb      	ldrh	r3, [r7, #20]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80005c6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	da09      	bge.n	80005e2 <GFX_WriteLine+0x106>
	            y_start += ystep;
 80005ce:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	4413      	add	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80005d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80005da:	8afb      	ldrh	r3, [r7, #22]
 80005dc:	4413      	add	r3, r2
 80005de:	b29b      	uxth	r3, r3
 80005e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	3301      	adds	r3, #1
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	ddce      	ble.n	800058e <GFX_WriteLine+0xb2>
	        }
	    }
}
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	3730      	adds	r7, #48	; 0x30
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b086      	sub	sp, #24
 80005fe:	af02      	add	r7, sp, #8
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
 8000606:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	1e5a      	subs	r2, r3, #1
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	4613      	mov	r3, r2
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	68b9      	ldr	r1, [r7, #8]
 800061a:	68f8      	ldr	r0, [r7, #12]
 800061c:	f7ff ff5e 	bl	80004dc <GFX_WriteLine>
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af02      	add	r7, sp, #8
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
 8000634:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4413      	add	r3, r2
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	78fb      	ldrb	r3, [r7, #3]
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	68b9      	ldr	r1, [r7, #8]
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f7ff ff48 	bl	80004dc <GFX_WriteLine>
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af02      	add	r7, sp, #8
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
 8000660:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	429a      	cmp	r2, r3
 8000668:	d114      	bne.n	8000694 <GFX_DrawLine+0x40>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	429a      	cmp	r2, r3
 8000670:	dd05      	ble.n	800067e <GFX_DrawLine+0x2a>
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	f897 3020 	ldrb.w	r3, [r7, #32]
 800068a:	68b9      	ldr	r1, [r7, #8]
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	f7ff ffb4 	bl	80005fa <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 8000692:	e021      	b.n	80006d8 <GFX_DrawLine+0x84>
	    } else if(y_start == y_end){
 8000694:	68ba      	ldr	r2, [r7, #8]
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	429a      	cmp	r2, r3
 800069a:	d114      	bne.n	80006c6 <GFX_DrawLine+0x72>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	dd05      	ble.n	80006b0 <GFX_DrawLine+0x5c>
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006bc:	68b9      	ldr	r1, [r7, #8]
 80006be:	68f8      	ldr	r0, [r7, #12]
 80006c0:	f7ff ffb2 	bl	8000628 <GFX_DrawFastHLine>
}
 80006c4:	e008      	b.n	80006d8 <GFX_DrawLine+0x84>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80006c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	f7ff ff02 	bl	80004dc <GFX_WriteLine>
}
 80006d8:	bf00      	nop
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <GFX_DrawRectangle>:
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	4611      	mov	r1, r2
 80006ec:	461a      	mov	r2, r3
 80006ee:	460b      	mov	r3, r1
 80006f0:	80fb      	strh	r3, [r7, #6]
 80006f2:	4613      	mov	r3, r2
 80006f4:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 80006f6:	88fa      	ldrh	r2, [r7, #6]
 80006f8:	7e3b      	ldrb	r3, [r7, #24]
 80006fa:	68b9      	ldr	r1, [r7, #8]
 80006fc:	68f8      	ldr	r0, [r7, #12]
 80006fe:	f7ff ff93 	bl	8000628 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 8000702:	88ba      	ldrh	r2, [r7, #4]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	4413      	add	r3, r2
 8000708:	1e59      	subs	r1, r3, #1
 800070a:	88fa      	ldrh	r2, [r7, #6]
 800070c:	7e3b      	ldrb	r3, [r7, #24]
 800070e:	68f8      	ldr	r0, [r7, #12]
 8000710:	f7ff ff8a 	bl	8000628 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 8000714:	88ba      	ldrh	r2, [r7, #4]
 8000716:	7e3b      	ldrb	r3, [r7, #24]
 8000718:	68b9      	ldr	r1, [r7, #8]
 800071a:	68f8      	ldr	r0, [r7, #12]
 800071c:	f7ff ff6d 	bl	80005fa <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 8000720:	88fa      	ldrh	r2, [r7, #6]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4413      	add	r3, r2
 8000726:	1e58      	subs	r0, r3, #1
 8000728:	88ba      	ldrh	r2, [r7, #4]
 800072a:	7e3b      	ldrb	r3, [r7, #24]
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	f7ff ff64 	bl	80005fa <GFX_DrawFastVLine>

}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b086      	sub	sp, #24
 800073e:	af00      	add	r7, sp, #0
 8000740:	60f8      	str	r0, [r7, #12]
 8000742:	60b9      	str	r1, [r7, #8]
 8000744:	4611      	mov	r1, r2
 8000746:	461a      	mov	r2, r3
 8000748:	460b      	mov	r3, r1
 800074a:	80fb      	strh	r3, [r7, #6]
 800074c:	4613      	mov	r3, r2
 800074e:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	e009      	b.n	800076a <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8000756:	88ba      	ldrh	r2, [r7, #4]
 8000758:	f897 3020 	ldrb.w	r3, [r7, #32]
 800075c:	68b9      	ldr	r1, [r7, #8]
 800075e:	6978      	ldr	r0, [r7, #20]
 8000760:	f7ff ff4b 	bl	80005fa <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	88fa      	ldrh	r2, [r7, #6]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4413      	add	r3, r2
 8000770:	697a      	ldr	r2, [r7, #20]
 8000772:	429a      	cmp	r2, r3
 8000774:	dbef      	blt.n	8000756 <GFX_DrawFillRectangle+0x1c>
    }

}
 8000776:	bf00      	nop
 8000778:	bf00      	nop
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <GFX_DrawFillCircleHelper>:
    }
}
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, uint8_t color)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	4611      	mov	r1, r2
 800078c:	461a      	mov	r2, r3
 800078e:	460b      	mov	r3, r1
 8000790:	80fb      	strh	r3, [r7, #6]
 8000792:	4613      	mov	r3, r2
 8000794:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	f1c3 0301 	rsb	r3, r3, #1
 800079c:	b29b      	uxth	r3, r3
 800079e:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 80007a4:	88fb      	ldrh	r3, [r7, #6]
 80007a6:	461a      	mov	r2, r3
 80007a8:	03d2      	lsls	r2, r2, #15
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 80007ba:	e077      	b.n	80008ac <GFX_DrawFillCircleHelper+0x12c>
        if (f >= 0) {
 80007bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	db0e      	blt.n	80007e2 <GFX_DrawFillCircleHelper+0x62>
            y--;
 80007c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	3b01      	subs	r3, #1
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80007d0:	8b7b      	ldrh	r3, [r7, #26]
 80007d2:	3302      	adds	r3, #2
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80007d8:	8bfa      	ldrh	r2, [r7, #30]
 80007da:	8b7b      	ldrh	r3, [r7, #26]
 80007dc:	4413      	add	r3, r2
 80007de:	b29b      	uxth	r3, r3
 80007e0:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80007e2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	3301      	adds	r3, #1
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80007ee:	8bbb      	ldrh	r3, [r7, #28]
 80007f0:	3302      	adds	r3, #2
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80007f6:	8bfa      	ldrh	r2, [r7, #30]
 80007f8:	8bbb      	ldrh	r3, [r7, #28]
 80007fa:	4413      	add	r3, r2
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	2b00      	cmp	r3, #0
 8000808:	d025      	beq.n	8000856 <GFX_DrawFillCircleHelper+0xd6>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 800080a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	18d0      	adds	r0, r2, r3
 8000812:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	1ad1      	subs	r1, r2, r3
 800081a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	1c5a      	adds	r2, r3, #1
 8000822:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000826:	441a      	add	r2, r3
 8000828:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800082c:	f7ff fee5 	bl	80005fa <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8000830:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	18d0      	adds	r0, r2, r3
 8000838:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	1ad1      	subs	r1, r2, r3
 8000840:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800084c:	441a      	add	r2, r3
 800084e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000852:	f7ff fed2 	bl	80005fa <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 8000856:	797b      	ldrb	r3, [r7, #5]
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	2b00      	cmp	r3, #0
 800085e:	d025      	beq.n	80008ac <GFX_DrawFillCircleHelper+0x12c>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8000860:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	1ad0      	subs	r0, r2, r3
 8000868:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800086c:	68ba      	ldr	r2, [r7, #8]
 800086e:	1ad1      	subs	r1, r2, r3
 8000870:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800087c:	441a      	add	r2, r3
 800087e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000882:	f7ff feba 	bl	80005fa <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8000886:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	1ad0      	subs	r0, r2, r3
 800088e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	1ad1      	subs	r1, r2, r3
 8000896:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	1c5a      	adds	r2, r3, #1
 800089e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80008a2:	441a      	add	r2, r3
 80008a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80008a8:	f7ff fea7 	bl	80005fa <GFX_DrawFastVLine>
    while (x<y) {
 80008ac:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80008b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	db81      	blt.n	80007bc <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3720      	adds	r7, #32
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <GFX_DrawFillRoundRectangle>:
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
}
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, uint8_t color)
{
 80008c2:	b590      	push	{r4, r7, lr}
 80008c4:	b087      	sub	sp, #28
 80008c6:	af02      	add	r7, sp, #8
 80008c8:	60f8      	str	r0, [r7, #12]
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	4611      	mov	r1, r2
 80008ce:	461a      	mov	r2, r3
 80008d0:	460b      	mov	r3, r1
 80008d2:	80fb      	strh	r3, [r7, #6]
 80008d4:	4613      	mov	r3, r2
 80008d6:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 80008d8:	8c3a      	ldrh	r2, [r7, #32]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	18d0      	adds	r0, r2, r3
 80008de:	8c3b      	ldrh	r3, [r7, #32]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	88fa      	ldrh	r2, [r7, #6]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	88b9      	ldrh	r1, [r7, #4]
 80008ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	460b      	mov	r3, r1
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	f7ff ff20 	bl	800073a <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 80008fa:	88fa      	ldrh	r2, [r7, #6]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	441a      	add	r2, r3
 8000900:	8c3b      	ldrh	r3, [r7, #32]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	1e58      	subs	r0, r3, #1
 8000906:	8c3a      	ldrh	r2, [r7, #32]
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	18d1      	adds	r1, r2, r3
 800090c:	8c3b      	ldrh	r3, [r7, #32]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	b29b      	uxth	r3, r3
 8000912:	88ba      	ldrh	r2, [r7, #4]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	b29b      	uxth	r3, r3
 8000918:	3b01      	subs	r3, #1
 800091a:	b29b      	uxth	r3, r3
 800091c:	b21b      	sxth	r3, r3
 800091e:	8c3c      	ldrh	r4, [r7, #32]
 8000920:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000924:	9201      	str	r2, [sp, #4]
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	2301      	movs	r3, #1
 800092a:	4622      	mov	r2, r4
 800092c:	f7ff ff28 	bl	8000780 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 8000930:	8c3a      	ldrh	r2, [r7, #32]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	18d0      	adds	r0, r2, r3
 8000936:	8c3a      	ldrh	r2, [r7, #32]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	18d1      	adds	r1, r2, r3
 800093c:	8c3b      	ldrh	r3, [r7, #32]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	b29b      	uxth	r3, r3
 8000942:	88ba      	ldrh	r2, [r7, #4]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	b29b      	uxth	r3, r3
 8000948:	3b01      	subs	r3, #1
 800094a:	b29b      	uxth	r3, r3
 800094c:	b21b      	sxth	r3, r3
 800094e:	8c3c      	ldrh	r4, [r7, #32]
 8000950:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000954:	9201      	str	r2, [sp, #4]
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2302      	movs	r3, #2
 800095a:	4622      	mov	r2, r4
 800095c:	f7ff ff10 	bl	8000780 <GFX_DrawFillCircleHelper>
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bd90      	pop	{r4, r7, pc}

08000968 <GFX_Image>:
	}
}
#endif
#if STM32_USING ==1
void GFX_Image(int x, int y, const uint8_t *img, uint8_t w, uint8_t h, uint8_t color)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
 8000974:	70fb      	strb	r3, [r7, #3]
	uint8_t i, j, byteWidth = (w+7)/8;
 8000976:	78fb      	ldrb	r3, [r7, #3]
 8000978:	3307      	adds	r3, #7
 800097a:	2b00      	cmp	r3, #0
 800097c:	da00      	bge.n	8000980 <GFX_Image+0x18>
 800097e:	3307      	adds	r3, #7
 8000980:	10db      	asrs	r3, r3, #3
 8000982:	757b      	strb	r3, [r7, #21]

	for(j = 0; j < h; j++)
 8000984:	2300      	movs	r3, #0
 8000986:	75bb      	strb	r3, [r7, #22]
 8000988:	e035      	b.n	80009f6 <GFX_Image+0x8e>
	{
		for(i = 0; i < w; i++)
 800098a:	2300      	movs	r3, #0
 800098c:	75fb      	strb	r3, [r7, #23]
 800098e:	e02b      	b.n	80009e8 <GFX_Image+0x80>
		{
			if(img[j *byteWidth + i /8] & (128 >> (i&7)) )
 8000990:	7dbb      	ldrb	r3, [r7, #22]
 8000992:	7d7a      	ldrb	r2, [r7, #21]
 8000994:	fb02 f303 	mul.w	r3, r2, r3
 8000998:	7dfa      	ldrb	r2, [r7, #23]
 800099a:	08d2      	lsrs	r2, r2, #3
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	4413      	add	r3, r2
 80009a0:	461a      	mov	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	7dfb      	ldrb	r3, [r7, #23]
 80009ac:	f003 0307 	and.w	r3, r3, #7
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	fa42 f303 	asr.w	r3, r2, r3
 80009b6:	400b      	ands	r3, r1
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d012      	beq.n	80009e2 <GFX_Image+0x7a>
				GFX_DrawPixel(x+i, y+j, color);
 80009bc:	7dfb      	ldrb	r3, [r7, #23]
 80009be:	b29a      	uxth	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	4413      	add	r3, r2
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	b218      	sxth	r0, r3
 80009ca:	7dbb      	ldrb	r3, [r7, #22]
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	4413      	add	r3, r2
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	b21b      	sxth	r3, r3
 80009d8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	f000 f85f 	bl	8000aa0 <SSD1306_DrawPixel>
		for(i = 0; i < w; i++)
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
 80009e4:	3301      	adds	r3, #1
 80009e6:	75fb      	strb	r3, [r7, #23]
 80009e8:	7dfa      	ldrb	r2, [r7, #23]
 80009ea:	78fb      	ldrb	r3, [r7, #3]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d3cf      	bcc.n	8000990 <GFX_Image+0x28>
	for(j = 0; j < h; j++)
 80009f0:	7dbb      	ldrb	r3, [r7, #22]
 80009f2:	3301      	adds	r3, #1
 80009f4:	75bb      	strb	r3, [r7, #22]
 80009f6:	7dba      	ldrb	r2, [r7, #22]
 80009f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d3c4      	bcc.n	800098a <GFX_Image+0x22>
		}
	}
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <SSD1306_Command>:

static uint8_t buffer [SSD1306_BUFFERSIZE];


void SSD1306_Command(uint8_t Command)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af02      	add	r7, sp, #8
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
	i2c_transmit(p_oled_i2c, (SSD1306_ADDRESS << 1), SSD1306_REG_COMMAND, &Command, 1);
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <SSD1306_Command+0x24>)
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	9200      	str	r2, [sp, #0]
 8000a20:	2200      	movs	r2, #0
 8000a22:	2178      	movs	r1, #120	; 0x78
 8000a24:	f002 fce8 	bl	80033f8 <i2c_transmit>

}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000574 	.word	0x20000574

08000a34 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]
	i2c_transmit(p_oled_i2c, (SSD1306_ADDRESS << 1), SSD1306_REG_DATA, Data, Size);
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <SSD1306_Data+0x28>)
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	887b      	ldrh	r3, [r7, #2]
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2240      	movs	r2, #64	; 0x40
 8000a4c:	2178      	movs	r1, #120	; 0x78
 8000a4e:	f002 fcd3 	bl	80033f8 <i2c_transmit>

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000574 	.word	0x20000574

08000a60 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d002      	beq.n	8000a76 <SSD1306_Clear+0x16>
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d007      	beq.n	8000a84 <SSD1306_Clear+0x24>

	case YELLOWBLUE:
		memset(buffer,0xFF,SSD1306_BUFFERSIZE);
		break;
	}
}
 8000a74:	e00d      	b.n	8000a92 <SSD1306_Clear+0x32>
		memset(buffer,0x00,SSD1306_BUFFERSIZE);
 8000a76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4807      	ldr	r0, [pc, #28]	; (8000a9c <SSD1306_Clear+0x3c>)
 8000a7e:	f003 f89b 	bl	8003bb8 <memset>
		break;
 8000a82:	e006      	b.n	8000a92 <SSD1306_Clear+0x32>
		memset(buffer,0xFF,SSD1306_BUFFERSIZE);
 8000a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a88:	21ff      	movs	r1, #255	; 0xff
 8000a8a:	4804      	ldr	r0, [pc, #16]	; (8000a9c <SSD1306_Clear+0x3c>)
 8000a8c:	f003 f894 	bl	8003bb8 <memset>
		break;
 8000a90:	bf00      	nop
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000084 	.word	0x20000084

08000aa0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t color) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	80fb      	strh	r3, [r7, #6]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	80bb      	strh	r3, [r7, #4]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	70fb      	strb	r3, [r7, #3]

	if ((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDWIDTH))
 8000ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f2c0 8087 	blt.w	8000bca <SSD1306_DrawPixel+0x12a>
 8000abc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac2:	f300 8082 	bgt.w	8000bca <SSD1306_DrawPixel+0x12a>
 8000ac6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	db7d      	blt.n	8000bca <SSD1306_DrawPixel+0x12a>
 8000ace:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ad4:	dc79      	bgt.n	8000bca <SSD1306_DrawPixel+0x12a>
		return;
    switch (color) {
 8000ad6:	78fb      	ldrb	r3, [r7, #3]
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d051      	beq.n	8000b80 <SSD1306_DrawPixel+0xe0>
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	dc75      	bgt.n	8000bcc <SSD1306_DrawPixel+0x12c>
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d026      	beq.n	8000b32 <SSD1306_DrawPixel+0x92>
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d171      	bne.n	8000bcc <SSD1306_DrawPixel+0x12c>
    case SSD1306_COLOR_YELLOWBLUE:
    //buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7)); // byte 0 on the left side near GND
    buffer[(y/8) * SSD1306_LCDWIDTH + (SSD1306_LCDWIDTH - 1 - x)] |= (1 << (y & 7)); //  byte 0 on the right side near SDA
 8000ae8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	da00      	bge.n	8000af2 <SSD1306_DrawPixel+0x52>
 8000af0:	3307      	adds	r3, #7
 8000af2:	10db      	asrs	r3, r3, #3
 8000af4:	b218      	sxth	r0, r3
 8000af6:	4603      	mov	r3, r0
 8000af8:	01da      	lsls	r2, r3, #7
 8000afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000afe:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000b02:	4413      	add	r3, r2
 8000b04:	4a34      	ldr	r2, [pc, #208]	; (8000bd8 <SSD1306_DrawPixel+0x138>)
 8000b06:	5cd3      	ldrb	r3, [r2, r3]
 8000b08:	b25a      	sxtb	r2, r3
 8000b0a:	88bb      	ldrh	r3, [r7, #4]
 8000b0c:	f003 0307 	and.w	r3, r3, #7
 8000b10:	2101      	movs	r1, #1
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b259      	sxtb	r1, r3
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	01da      	lsls	r2, r3, #7
 8000b20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b24:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000b28:	4413      	add	r3, r2
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	4a2a      	ldr	r2, [pc, #168]	; (8000bd8 <SSD1306_DrawPixel+0x138>)
 8000b2e:	54d1      	strb	r1, [r2, r3]

      break;
 8000b30:	e04c      	b.n	8000bcc <SSD1306_DrawPixel+0x12c>
    case SSD1306_COLOR_BLACK:
      //buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
    	buffer[(y/8) * SSD1306_LCDWIDTH + (SSD1306_LCDWIDTH - 1 - x)] &= ~(1 << (y & 7));
 8000b32:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	da00      	bge.n	8000b3c <SSD1306_DrawPixel+0x9c>
 8000b3a:	3307      	adds	r3, #7
 8000b3c:	10db      	asrs	r3, r3, #3
 8000b3e:	b218      	sxth	r0, r3
 8000b40:	4603      	mov	r3, r0
 8000b42:	01da      	lsls	r2, r3, #7
 8000b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b48:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <SSD1306_DrawPixel+0x138>)
 8000b50:	5cd3      	ldrb	r3, [r2, r3]
 8000b52:	b25a      	sxtb	r2, r3
 8000b54:	88bb      	ldrh	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b60:	b25b      	sxtb	r3, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	4013      	ands	r3, r2
 8000b68:	b259      	sxtb	r1, r3
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	01da      	lsls	r2, r3, #7
 8000b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b72:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000b76:	4413      	add	r3, r2
 8000b78:	b2c9      	uxtb	r1, r1
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <SSD1306_DrawPixel+0x138>)
 8000b7c:	54d1      	strb	r1, [r2, r3]
      break;
 8000b7e:	e025      	b.n	8000bcc <SSD1306_DrawPixel+0x12c>
    case SSD1306_INVERSE:
      //buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
    	buffer[(y/8) * SSD1306_LCDWIDTH + (SSD1306_LCDWIDTH - 1 - x)] ^= (1 << (y & 7));
 8000b80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	da00      	bge.n	8000b8a <SSD1306_DrawPixel+0xea>
 8000b88:	3307      	adds	r3, #7
 8000b8a:	10db      	asrs	r3, r3, #3
 8000b8c:	b218      	sxth	r0, r3
 8000b8e:	4603      	mov	r3, r0
 8000b90:	01da      	lsls	r2, r3, #7
 8000b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b96:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <SSD1306_DrawPixel+0x138>)
 8000b9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ba0:	b25a      	sxtb	r2, r3
 8000ba2:	88bb      	ldrh	r3, [r7, #4]
 8000ba4:	f003 0307 	and.w	r3, r3, #7
 8000ba8:	2101      	movs	r1, #1
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	4053      	eors	r3, r2
 8000bb2:	b259      	sxtb	r1, r3
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	01da      	lsls	r2, r3, #7
 8000bb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bbc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b2c9      	uxtb	r1, r1
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <SSD1306_DrawPixel+0x138>)
 8000bc6:	54d1      	strb	r1, [r2, r3]
      break;
 8000bc8:	e000      	b.n	8000bcc <SSD1306_DrawPixel+0x12c>
		return;
 8000bca:	bf00      	nop
    }
  }
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000084 	.word	0x20000084

08000bdc <SSD1306_Display>:


void SSD1306_Display(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

	  SSD1306_Command(SSD1306_PAGEADDR);
 8000be0:	2022      	movs	r0, #34	; 0x22
 8000be2:	f7ff ff13 	bl	8000a0c <SSD1306_Command>
	  SSD1306_Command(0);				// Page start address
 8000be6:	2000      	movs	r0, #0
 8000be8:	f7ff ff10 	bl	8000a0c <SSD1306_Command>
	  SSD1306_Command(0xFF);				// Page end (not really, but works here)
 8000bec:	20ff      	movs	r0, #255	; 0xff
 8000bee:	f7ff ff0d 	bl	8000a0c <SSD1306_Command>
	  SSD1306_Command(SSD1306_COLUMNADDR);
 8000bf2:	2021      	movs	r0, #33	; 0x21
 8000bf4:	f7ff ff0a 	bl	8000a0c <SSD1306_Command>
	  SSD1306_Command(0);				// Column start address
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff ff07 	bl	8000a0c <SSD1306_Command>
	  SSD1306_Command(SSD1306_LCDWIDTH - 1); 		// Column end address
 8000bfe:	207f      	movs	r0, #127	; 0x7f
 8000c00:	f7ff ff04 	bl	8000a0c <SSD1306_Command>

	  SSD1306_Data(buffer,SSD1306_BUFFERSIZE);
 8000c04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <SSD1306_Display+0x38>)
 8000c0a:	f7ff ff13 	bl	8000a34 <SSD1306_Data>


}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000084 	.word	0x20000084

08000c18 <SSD1306_Init>:
void SSD1306_Init(i2c_handle_t *i2c)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	p_oled_i2c = i2c;
 8000c20:	4a2a      	ldr	r2, [pc, #168]	; (8000ccc <SSD1306_Init+0xb4>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8000c26:	20ae      	movs	r0, #174	; 0xae
 8000c28:	f7ff fef0 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8000c2c:	20d5      	movs	r0, #213	; 0xd5
 8000c2e:	f7ff feed 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(0x80);
 8000c32:	2080      	movs	r0, #128	; 0x80
 8000c34:	f7ff feea 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(SSD1306_SETMULTIPLEX);
 8000c38:	20a8      	movs	r0, #168	; 0xa8
 8000c3a:	f7ff fee7 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8000c3e:	203f      	movs	r0, #63	; 0x3f
 8000c40:	f7ff fee4 	bl	8000a0c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8000c44:	20d3      	movs	r0, #211	; 0xd3
 8000c46:	f7ff fee1 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(0x00);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff fede 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(0x80);
 8000c50:	2080      	movs	r0, #128	; 0x80
 8000c52:	f7ff fedb 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(SSD1306_CHARGEPUMP);
 8000c56:	208d      	movs	r0, #141	; 0x8d
 8000c58:	f7ff fed8 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(0x14);
 8000c5c:	2014      	movs	r0, #20
 8000c5e:	f7ff fed5 	bl	8000a0c <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE);
 8000c62:	2020      	movs	r0, #32
 8000c64:	f7ff fed2 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(0x00);
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f7ff fecf 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP);
 8000c6e:	20a0      	movs	r0, #160	; 0xa0
 8000c70:	f7ff fecc 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 8000c74:	20c8      	movs	r0, #200	; 0xc8
 8000c76:	f7ff fec9 	bl	8000a0c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8000c7a:	20da      	movs	r0, #218	; 0xda
 8000c7c:	f7ff fec6 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(0x12);
 8000c80:	2012      	movs	r0, #18
 8000c82:	f7ff fec3 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8000c86:	2081      	movs	r0, #129	; 0x81
 8000c88:	f7ff fec0 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(0xFF);
 8000c8c:	20ff      	movs	r0, #255	; 0xff
 8000c8e:	f7ff febd 	bl	8000a0c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8000c92:	20d9      	movs	r0, #217	; 0xd9
 8000c94:	f7ff feba 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(0xF1);
 8000c98:	20f1      	movs	r0, #241	; 0xf1
 8000c9a:	f7ff feb7 	bl	8000a0c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT);
 8000c9e:	20db      	movs	r0, #219	; 0xdb
 8000ca0:	f7ff feb4 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(0x40);
 8000ca4:	2040      	movs	r0, #64	; 0x40
 8000ca6:	f7ff feb1 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME);
 8000caa:	20a4      	movs	r0, #164	; 0xa4
 8000cac:	f7ff feae 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);
 8000cb0:	20a6      	movs	r0, #166	; 0xa6
 8000cb2:	f7ff feab 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8000cb6:	202e      	movs	r0, #46	; 0x2e
 8000cb8:	f7ff fea8 	bl	8000a0c <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYON);
 8000cbc:	20af      	movs	r0, #175	; 0xaf
 8000cbe:	f7ff fea5 	bl	8000a0c <SSD1306_Command>


}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000574 	.word	0x20000574

08000cd0 <snek_ui_modify_speed>:
#include "stdio.h"
#include "Snek.h"

//  snek_ui - functions used to draw user interface
static void snek_ui_modify_speed(snek_game_t *p_snek_game)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	p_snek_game->p_game_tick_tim = TIM9;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <snek_ui_modify_speed+0x44>)
 8000cdc:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	p_snek_game->p_game_tick_tim->ARR = 9999 - (p_snek_game->game_config.speed * 1000);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <snek_ui_modify_speed+0x48>)
 8000cea:	fb03 f302 	mul.w	r3, r3, r2
 8000cee:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000cf2:	330f      	adds	r3, #15
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	f8d2 2138 	ldr.w	r2, [r2, #312]	; 0x138
 8000cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
	p_snek_game->p_game_tick_tim->CNT = 0;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40014000 	.word	0x40014000
 8000d18:	fffffc18 	.word	0xfffffc18

08000d1c <snek_ui_draw_mainmenu_button>:

static void snek_ui_draw_mainmenu_button(uint8_t *p_text, uint8_t pos, uint8_t select)
{
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af02      	add	r7, sp, #8
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	70bb      	strb	r3, [r7, #2]
	// lcd width - char size - spaces between chars
	uint8_t string_start_pos = ((SSD1306_LCDWIDTH - (strlen((char*) p_text) * 5) - strlen((char*) p_text))) / 2;
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff fa57 	bl	80001e0 <strlen>
 8000d32:	4602      	mov	r2, r0
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	189c      	adds	r4, r3, r2
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fa50 	bl	80001e0 <strlen>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4423      	add	r3, r4
 8000d44:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000d48:	085b      	lsrs	r3, r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]

	GFX_DrawFillRectangle(0, pos * SNEK_UI_BUTTON_OFFSET, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, BLACK);
 8000d4c:	78fb      	ldrb	r3, [r7, #3]
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	4619      	mov	r1, r3
 8000d52:	2300      	movs	r3, #0
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	230f      	movs	r3, #15
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff fced 	bl	800073a <GFX_DrawFillRectangle>
	//draw selected button
	if (select)
 8000d60:	78bb      	ldrb	r3, [r7, #2]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d015      	beq.n	8000d92 <snek_ui_draw_mainmenu_button+0x76>
	{
		GFX_DrawFillRectangle(0, pos * SNEK_UI_BUTTON_OFFSET, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, YELLOWBLUE);
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	011b      	lsls	r3, r3, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	230f      	movs	r3, #15
 8000d72:	2280      	movs	r2, #128	; 0x80
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff fce0 	bl	800073a <GFX_DrawFillRectangle>
		GFX_DrawString(string_start_pos, (pos * SNEK_UI_BUTTON_OFFSET) + SNEK_UI_CHAR_OFFSET, (char*) p_text, BLACK,
 8000d7a:	7bf8      	ldrb	r0, [r7, #15]
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	3304      	adds	r3, #4
 8000d82:	4619      	mov	r1, r3
 8000d84:	2301      	movs	r3, #1
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	f7ff fb4a 	bl	8000424 <GFX_DrawString>
		GFX_DrawRectangle(0, pos * SNEK_UI_BUTTON_OFFSET, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, YELLOWBLUE);
		GFX_DrawString(string_start_pos, (pos * SNEK_UI_BUTTON_OFFSET) + SNEK_UI_CHAR_OFFSET, (char*) p_text, YELLOWBLUE,
		BLACK);
	}

	return;
 8000d90:	e015      	b.n	8000dbe <snek_ui_draw_mainmenu_button+0xa2>
		GFX_DrawRectangle(0, pos * SNEK_UI_BUTTON_OFFSET, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, YELLOWBLUE);
 8000d92:	78fb      	ldrb	r3, [r7, #3]
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	4619      	mov	r1, r3
 8000d98:	2301      	movs	r3, #1
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	2280      	movs	r2, #128	; 0x80
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff fc9d 	bl	80006e0 <GFX_DrawRectangle>
		GFX_DrawString(string_start_pos, (pos * SNEK_UI_BUTTON_OFFSET) + SNEK_UI_CHAR_OFFSET, (char*) p_text, YELLOWBLUE,
 8000da6:	7bf8      	ldrb	r0, [r7, #15]
 8000da8:	78fb      	ldrb	r3, [r7, #3]
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	3304      	adds	r3, #4
 8000dae:	4619      	mov	r1, r3
 8000db0:	2300      	movs	r3, #0
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2301      	movs	r3, #1
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	f7ff fb34 	bl	8000424 <GFX_DrawString>
	return;
 8000dbc:	bf00      	nop
}
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd90      	pop	{r4, r7, pc}

08000dc4 <snek_ui_draw_ok_button>:

static void snek_ui_draw_ok_button(uint8_t highlight)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
	if (!highlight)
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d118      	bne.n	8000e06 <snek_ui_draw_ok_button+0x42>
	{
		// button highlight off
		GFX_DrawFillRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, BLACK);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	230b      	movs	r3, #11
 8000dda:	2214      	movs	r2, #20
 8000ddc:	2132      	movs	r1, #50	; 0x32
 8000dde:	206a      	movs	r0, #106	; 0x6a
 8000de0:	f7ff fcab 	bl	800073a <GFX_DrawFillRectangle>
		GFX_DrawRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, YELLOWBLUE);
 8000de4:	2301      	movs	r3, #1
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	230b      	movs	r3, #11
 8000dea:	2214      	movs	r2, #20
 8000dec:	2132      	movs	r1, #50	; 0x32
 8000dee:	206a      	movs	r0, #106	; 0x6a
 8000df0:	f7ff fc76 	bl	80006e0 <GFX_DrawRectangle>
		GFX_DrawString(SNEK_UI_OK_BUTTON_POS_X + 4, SNEK_UI_OK_BUTTON_POS_Y + 1, "OK", YELLOWBLUE, BLACK);
 8000df4:	2300      	movs	r3, #0
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	4a11      	ldr	r2, [pc, #68]	; (8000e40 <snek_ui_draw_ok_button+0x7c>)
 8000dfc:	2133      	movs	r1, #51	; 0x33
 8000dfe:	206e      	movs	r0, #110	; 0x6e
 8000e00:	f7ff fb10 	bl	8000424 <GFX_DrawString>
		// highlight ok button
		GFX_DrawFillRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, YELLOWBLUE);
		GFX_DrawRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, BLACK);
		GFX_DrawString(SNEK_UI_OK_BUTTON_POS_X + 4, SNEK_UI_OK_BUTTON_POS_Y + 1, "OK", BLACK, YELLOWBLUE);
	}
}
 8000e04:	e017      	b.n	8000e36 <snek_ui_draw_ok_button+0x72>
		GFX_DrawFillRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, YELLOWBLUE);
 8000e06:	2301      	movs	r3, #1
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	230b      	movs	r3, #11
 8000e0c:	2214      	movs	r2, #20
 8000e0e:	2132      	movs	r1, #50	; 0x32
 8000e10:	206a      	movs	r0, #106	; 0x6a
 8000e12:	f7ff fc92 	bl	800073a <GFX_DrawFillRectangle>
		GFX_DrawRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, BLACK);
 8000e16:	2300      	movs	r3, #0
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	230b      	movs	r3, #11
 8000e1c:	2214      	movs	r2, #20
 8000e1e:	2132      	movs	r1, #50	; 0x32
 8000e20:	206a      	movs	r0, #106	; 0x6a
 8000e22:	f7ff fc5d 	bl	80006e0 <GFX_DrawRectangle>
		GFX_DrawString(SNEK_UI_OK_BUTTON_POS_X + 4, SNEK_UI_OK_BUTTON_POS_Y + 1, "OK", BLACK, YELLOWBLUE);
 8000e26:	2301      	movs	r3, #1
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <snek_ui_draw_ok_button+0x7c>)
 8000e2e:	2133      	movs	r1, #51	; 0x33
 8000e30:	206e      	movs	r0, #110	; 0x6e
 8000e32:	f7ff faf7 	bl	8000424 <GFX_DrawString>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	08004f6c 	.word	0x08004f6c

08000e44 <snek_ui_updatescore>:

static void snek_ui_updatescore(snek_game_t *p_snek_game)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	6078      	str	r0, [r7, #4]
	uint8_t temp_msg[8];
	sprintf((char*) temp_msg, "%d", (p_snek_game->snek_lenght - 3));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8000e52:	1eda      	subs	r2, r3, #3
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	4908      	ldr	r1, [pc, #32]	; (8000e7c <snek_ui_updatescore+0x38>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 fef4 	bl	8003c48 <siprintf>
	GFX_DrawString(102, 0 + SNEK_UI_CHAR_OFFSET, (char*) temp_msg, YELLOWBLUE, BLACK);
 8000e60:	f107 0208 	add.w	r2, r7, #8
 8000e64:	2300      	movs	r3, #0
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	2066      	movs	r0, #102	; 0x66
 8000e6e:	f7ff fad9 	bl	8000424 <GFX_DrawString>
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	08004f70 	.word	0x08004f70

08000e80 <snek_ui_gameover_animation>:

static void snek_ui_gameover_animation(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af02      	add	r7, sp, #8
	for (uint8_t count = 0; count < SSD1306_LCDWIDTH; count++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	e012      	b.n	8000eb2 <snek_ui_gameover_animation+0x32>
	{
		GFX_DrawFillRectangle((count % 16) * 8, (count / 16) * 8, SNEK_UI_NODE_WIDTH, SNEK_UI_NODE_HEIGHT, YELLOWBLUE);
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	00d8      	lsls	r0, r3, #3
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	091b      	lsrs	r3, r3, #4
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	00d9      	lsls	r1, r3, #3
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	2208      	movs	r2, #8
 8000ea4:	f7ff fc49 	bl	800073a <GFX_DrawFillRectangle>

		SSD1306_Display();
 8000ea8:	f7ff fe98 	bl	8000bdc <SSD1306_Display>
	for (uint8_t count = 0; count < SSD1306_LCDWIDTH; count++)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	dae8      	bge.n	8000e8c <snek_ui_gameover_animation+0xc>
	}
}
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <snek_eeprom_erase>:

static void snek_eeprom_erase(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0a4      	sub	sp, #144	; 0x90
 8000ec8:	af00      	add	r7, sp, #0
	uint8_t temp_data[EEPROM_SIZE] = {'0'};
 8000eca:	2330      	movs	r3, #48	; 0x30
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	227c      	movs	r2, #124	; 0x7c
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 fe6e 	bl	8003bb8 <memset>
	uint8_t dummy[8] =
 8000edc:	4a25      	ldr	r2, [pc, #148]	; (8000f74 <snek_eeprom_erase+0xb0>)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ee4:	e883 0003 	stmia.w	r3, {r0, r1}
			{ 'd', 'u', 'm', 'm', 'y', '0', '0', '0' };

	//create 10 dummy names
	for (uint8_t i = 0; i < 10; i++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000eee:	e021      	b.n	8000f34 <snek_eeprom_erase+0x70>
	{
		//fill names
		dummy[7] = i + 48;
 8000ef0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000ef4:	3330      	adds	r3, #48	; 0x30
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	72fb      	strb	r3, [r7, #11]
		memcpy(&temp_data[i * EEPROM_PAGE_SIZE], dummy, 8);
 8000efa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	f107 020c 	add.w	r2, r7, #12
 8000f04:	4413      	add	r3, r2
 8000f06:	461a      	mov	r2, r3
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	cb03      	ldmia	r3!, {r0, r1}
 8000f0c:	6010      	str	r0, [r2, #0]
 8000f0e:	6051      	str	r1, [r2, #4]

		//fill scores
		temp_data[EEPROM_PAGE_SIZE * 10 + i] = 10 - i;
 8000f10:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000f14:	3350      	adds	r3, #80	; 0x50
 8000f16:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8000f1a:	f1c2 020a 	rsb	r2, r2, #10
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000f24:	440b      	add	r3, r1
 8000f26:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uint8_t i = 0; i < 10; i++)
 8000f2a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000f2e:	3301      	adds	r3, #1
 8000f30:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000f34:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000f38:	2b09      	cmp	r3, #9
 8000f3a:	d9d9      	bls.n	8000ef0 <snek_eeprom_erase+0x2c>
	}

	// earse game configuration to 0
	temp_data[96] = 0; // speed
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	temp_data[97] = 0; // color
 8000f42:	2300      	movs	r3, #0
 8000f44:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	Eeprom_SendData(0, temp_data, EEPROM_SIZE);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	4619      	mov	r1, r3
 8000f50:	2000      	movs	r0, #0
 8000f52:	f001 faf1 	bl	8002538 <Eeprom_SendData>

	delay(5000);
 8000f56:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f5a:	f001 fad7 	bl	800250c <delay>

	Eeprom_ReadData(0, temp_data, EEPROM_SIZE);
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2280      	movs	r2, #128	; 0x80
 8000f64:	4619      	mov	r1, r3
 8000f66:	2000      	movs	r0, #0
 8000f68:	f001 fb1a 	bl	80025a0 <Eeprom_ReadData>

}
 8000f6c:	bf00      	nop
 8000f6e:	3790      	adds	r7, #144	; 0x90
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	08004f74 	.word	0x08004f74

08000f78 <snek_eeprom_getconfig>:

static void snek_eeprom_getconfig(snek_game_t *p_snek_game)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	uint8_t temp_array[8] = {0};
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
	Eeprom_ReadData(96, temp_array, 8);
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	2060      	movs	r0, #96	; 0x60
 8000f92:	f001 fb05 	bl	80025a0 <Eeprom_ReadData>

	p_snek_game->game_config.speed = temp_array[0];
 8000f96:	7a3a      	ldrb	r2, [r7, #8]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	p_snek_game->game_config.color = temp_array[1];
 8000f9e:	7a7a      	ldrb	r2, [r7, #9]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137

	return;
 8000fa6:	bf00      	nop
}
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <snek_eeprom_setconfig>:

static void snek_eeprom_setconfig(snek_game_t *p_snek_game)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
	uint8_t temp_array[8];

	temp_array[0] = p_snek_game->game_config.speed;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8000fbc:	723b      	strb	r3, [r7, #8]
	temp_array[1] = p_snek_game->game_config.color;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8000fc4:	727b      	strb	r3, [r7, #9]

	Eeprom_SendData(96, temp_array, 8);
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	2208      	movs	r2, #8
 8000fcc:	4619      	mov	r1, r3
 8000fce:	2060      	movs	r0, #96	; 0x60
 8000fd0:	f001 fab2 	bl	8002538 <Eeprom_SendData>

	return;
 8000fd4:	bf00      	nop
}
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <snek_ui_mainmenu_check_update>:

static uint8_t snek_ui_mainmenu_check_update(snek_game_t *p_snek_game)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	// check if button down is clicked
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	885b      	ldrh	r3, [r3, #2]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d01c      	beq.n	800102c <snek_ui_mainmenu_check_update+0x50>
	{
		// move button cursor down
		p_snek_game->menu_buttons = (p_snek_game->menu_buttons + 1) % 4;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	785b      	ldrb	r3, [r3, #1]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	425a      	negs	r2, r3
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	f002 0203 	and.w	r2, r2, #3
 8001002:	bf58      	it	pl
 8001004:	4253      	negpl	r3, r2
 8001006:	b2da      	uxtb	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	705a      	strb	r2, [r3, #1]
		SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	885b      	ldrh	r3, [r3, #2]
 8001010:	b29b      	uxth	r3, r3
 8001012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001016:	b29a      	uxth	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	885b      	ldrh	r3, [r3, #2]
 8001020:	b29b      	uxth	r3, r3
 8001022:	f023 0301 	bic.w	r3, r3, #1
 8001026:	b29a      	uxth	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	805a      	strh	r2, [r3, #2]
	}

	// check if button up is clicked
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	885b      	ldrh	r3, [r3, #2]
 8001030:	b29b      	uxth	r3, r3
 8001032:	085b      	lsrs	r3, r3, #1
 8001034:	b29b      	uxth	r3, r3
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d01c      	beq.n	8001078 <snek_ui_mainmenu_check_update+0x9c>
	{
		// move button up
		p_snek_game->menu_buttons = (p_snek_game->menu_buttons + 3) % 4;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	3303      	adds	r3, #3
 8001044:	425a      	negs	r2, r3
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	f002 0203 	and.w	r2, r2, #3
 800104e:	bf58      	it	pl
 8001050:	4253      	negpl	r3, r2
 8001052:	b2da      	uxtb	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	705a      	strb	r2, [r3, #1]
		SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	885b      	ldrh	r3, [r3, #2]
 800105c:	b29b      	uxth	r3, r3
 800105e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001062:	b29a      	uxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	885b      	ldrh	r3, [r3, #2]
 800106c:	b29b      	uxth	r3, r3
 800106e:	f023 0302 	bic.w	r3, r3, #2
 8001072:	b29a      	uxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	805a      	strh	r2, [r3, #2]
	}

	// check if enter is clicked
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	885b      	ldrh	r3, [r3, #2]
 800107c:	b29b      	uxth	r3, r3
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	b29b      	uxth	r3, r3
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d03d      	beq.n	8001106 <snek_ui_mainmenu_check_update+0x12a>
	{
		// change menu screen
		if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_0))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	889b      	ldrh	r3, [r3, #4]
 800108e:	b29b      	uxth	r3, r3
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <snek_ui_mainmenu_check_update+0xc4>
		{
			p_snek_game->game_state = GAMESTATE_GAME;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2204      	movs	r2, #4
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	e025      	b.n	80010ec <snek_ui_mainmenu_check_update+0x110>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_1))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	889b      	ldrh	r3, [r3, #4]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	085b      	lsrs	r3, r3, #1
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <snek_ui_mainmenu_check_update+0xde>
		{
			p_snek_game->game_state = GAMESTATE_SCORES;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	e018      	b.n	80010ec <snek_ui_mainmenu_check_update+0x110>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_2))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	889b      	ldrh	r3, [r3, #4]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <snek_ui_mainmenu_check_update+0xf8>
		{
			p_snek_game->game_state = GAMESTATE_SETTINGS;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2203      	movs	r2, #3
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	e00b      	b.n	80010ec <snek_ui_mainmenu_check_update+0x110>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_3))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	889b      	ldrh	r3, [r3, #4]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	08db      	lsrs	r3, r3, #3
 80010dc:	b29b      	uxth	r3, r3
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <snek_ui_mainmenu_check_update+0x110>
		{
			p_snek_game->game_state = GAMESTATE_ABOUT;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2202      	movs	r2, #2
 80010ea:	701a      	strb	r2, [r3, #0]
		}

		//debounce delay
		delay(840000);
 80010ec:	4808      	ldr	r0, [pc, #32]	; (8001110 <snek_ui_mainmenu_check_update+0x134>)
 80010ee:	f001 fa0d 	bl	800250c <delay>
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	885b      	ldrh	r3, [r3, #2]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	f023 0310 	bic.w	r3, r3, #16
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	805a      	strh	r2, [r3, #2]

		return 1;
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <snek_ui_mainmenu_check_update+0x12c>

	}

	return 0;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	000cd140 	.word	0x000cd140

08001114 <snek_ui_settingsmenu_check_update>:

static uint8_t snek_ui_settingsmenu_check_update(snek_game_t *p_snek_game)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	// check if button down is clicked
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	885b      	ldrh	r3, [r3, #2]
 8001120:	b29b      	uxth	r3, r3
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d01c      	beq.n	8001164 <snek_ui_settingsmenu_check_update+0x50>
	{
		// move button cursor down
		p_snek_game->menu_buttons = (p_snek_game->menu_buttons + 1) % 4;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	785b      	ldrb	r3, [r3, #1]
 800112e:	3301      	adds	r3, #1
 8001130:	425a      	negs	r2, r3
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	f002 0203 	and.w	r2, r2, #3
 800113a:	bf58      	it	pl
 800113c:	4253      	negpl	r3, r2
 800113e:	b2da      	uxtb	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	705a      	strb	r2, [r3, #1]
		SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	885b      	ldrh	r3, [r3, #2]
 8001148:	b29b      	uxth	r3, r3
 800114a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114e:	b29a      	uxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	885b      	ldrh	r3, [r3, #2]
 8001158:	b29b      	uxth	r3, r3
 800115a:	f023 0301 	bic.w	r3, r3, #1
 800115e:	b29a      	uxth	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	805a      	strh	r2, [r3, #2]
	}

	// check if button up is clicked
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	885b      	ldrh	r3, [r3, #2]
 8001168:	b29b      	uxth	r3, r3
 800116a:	085b      	lsrs	r3, r3, #1
 800116c:	b29b      	uxth	r3, r3
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d01c      	beq.n	80011b0 <snek_ui_settingsmenu_check_update+0x9c>
	{
		// move button up
		p_snek_game->menu_buttons = (p_snek_game->menu_buttons + 3) % 4;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	785b      	ldrb	r3, [r3, #1]
 800117a:	3303      	adds	r3, #3
 800117c:	425a      	negs	r2, r3
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	f002 0203 	and.w	r2, r2, #3
 8001186:	bf58      	it	pl
 8001188:	4253      	negpl	r3, r2
 800118a:	b2da      	uxtb	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	705a      	strb	r2, [r3, #1]
		SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	885b      	ldrh	r3, [r3, #2]
 8001194:	b29b      	uxth	r3, r3
 8001196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119a:	b29a      	uxth	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	885b      	ldrh	r3, [r3, #2]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	f023 0302 	bic.w	r3, r3, #2
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	805a      	strh	r2, [r3, #2]
	}

	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	885b      	ldrh	r3, [r3, #2]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d03d      	beq.n	800123e <snek_ui_settingsmenu_check_update+0x12a>
	{
		// switch setting
		if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_0))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	889b      	ldrh	r3, [r3, #4]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d014      	beq.n	80011fa <snek_ui_settingsmenu_check_update+0xe6>
		{
			p_snek_game->game_config.speed = (p_snek_game->game_config.speed + 9) % 10;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 80011d6:	f103 0209 	add.w	r2, r3, #9
 80011da:	4b58      	ldr	r3, [pc, #352]	; (800133c <snek_ui_settingsmenu_check_update+0x228>)
 80011dc:	fb83 1302 	smull	r1, r3, r3, r2
 80011e0:	1099      	asrs	r1, r3, #2
 80011e2:	17d3      	asrs	r3, r2, #31
 80011e4:	1ac9      	subs	r1, r1, r3
 80011e6:	460b      	mov	r3, r1
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	1ad1      	subs	r1, r2, r3
 80011f0:	b2ca      	uxtb	r2, r1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 80011f8:	e011      	b.n	800121e <snek_ui_settingsmenu_check_update+0x10a>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_1))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	889b      	ldrh	r3, [r3, #4]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	085b      	lsrs	r3, r3, #1
 8001202:	b29b      	uxth	r3, r3
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d008      	beq.n	800121e <snek_ui_settingsmenu_check_update+0x10a>
		{
			p_snek_game->game_config.color ^= 0x01;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8001212:	f083 0301 	eor.w	r3, r3, #1
 8001216:	b2da      	uxtb	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
		}

		SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	885b      	ldrh	r3, [r3, #2]
 8001222:	b29b      	uxth	r3, r3
 8001224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001228:	b29a      	uxth	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	885b      	ldrh	r3, [r3, #2]
 8001232:	b29b      	uxth	r3, r3
 8001234:	f023 0304 	bic.w	r3, r3, #4
 8001238:	b29a      	uxth	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	805a      	strh	r2, [r3, #2]
	}

	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	885b      	ldrh	r3, [r3, #2]
 8001242:	b29b      	uxth	r3, r3
 8001244:	08db      	lsrs	r3, r3, #3
 8001246:	b29b      	uxth	r3, r3
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d03c      	beq.n	80012ca <snek_ui_settingsmenu_check_update+0x1b6>
	{
		// switch setting
		if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_0))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	889b      	ldrh	r3, [r3, #4]
 8001254:	b29b      	uxth	r3, r3
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d013      	beq.n	8001286 <snek_ui_settingsmenu_check_update+0x172>
		{
			p_snek_game->game_config.speed = (p_snek_game->game_config.speed + 1) % 10;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	4b35      	ldr	r3, [pc, #212]	; (800133c <snek_ui_settingsmenu_check_update+0x228>)
 8001268:	fb83 1302 	smull	r1, r3, r3, r2
 800126c:	1099      	asrs	r1, r3, #2
 800126e:	17d3      	asrs	r3, r2, #31
 8001270:	1ac9      	subs	r1, r1, r3
 8001272:	460b      	mov	r3, r1
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	1ad1      	subs	r1, r2, r3
 800127c:	b2ca      	uxtb	r2, r1
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 8001284:	e011      	b.n	80012aa <snek_ui_settingsmenu_check_update+0x196>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_1))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	889b      	ldrh	r3, [r3, #4]
 800128a:	b29b      	uxth	r3, r3
 800128c:	085b      	lsrs	r3, r3, #1
 800128e:	b29b      	uxth	r3, r3
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d008      	beq.n	80012aa <snek_ui_settingsmenu_check_update+0x196>
		{
			p_snek_game->game_config.color ^= 0x01;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 800129e:	f083 0301 	eor.w	r3, r3, #1
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
		}

		SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	885b      	ldrh	r3, [r3, #2]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	885b      	ldrh	r3, [r3, #2]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	f023 0308 	bic.w	r3, r3, #8
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	805a      	strh	r2, [r3, #2]
	}

	// check if enter is clicked
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	885b      	ldrh	r3, [r3, #2]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d02a      	beq.n	8001332 <snek_ui_settingsmenu_check_update+0x21e>
	{
		// change menu screen
		if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_2))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	889b      	ldrh	r3, [r3, #4]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <snek_ui_settingsmenu_check_update+0x1e6>
		{
			//erase eeprom
			snek_eeprom_erase();
 80012ee:	f7ff fde9 	bl	8000ec4 <snek_eeprom_erase>
			snek_eeprom_getconfig(p_snek_game);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fe40 	bl	8000f78 <snek_eeprom_getconfig>
 80012f8:	e00e      	b.n	8001318 <snek_ui_settingsmenu_check_update+0x204>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_3))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	889b      	ldrh	r3, [r3, #4]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	08db      	lsrs	r3, r3, #3
 8001302:	b29b      	uxth	r3, r3
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <snek_ui_settingsmenu_check_update+0x204>
		{
			//go back
			p_snek_game->game_state = GAMESTATE_MENU;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
			snek_eeprom_setconfig(p_snek_game);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fe4b 	bl	8000fae <snek_eeprom_setconfig>

		}

		//debounce delay
		delay(840000);
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <snek_ui_settingsmenu_check_update+0x22c>)
 800131a:	f001 f8f7 	bl	800250c <delay>
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	885b      	ldrh	r3, [r3, #2]
 8001322:	b29b      	uxth	r3, r3
 8001324:	f023 0310 	bic.w	r3, r3, #16
 8001328:	b29a      	uxth	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	805a      	strh	r2, [r3, #2]

		return 1;
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <snek_ui_settingsmenu_check_update+0x220>

	}

	return 0;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	66666667 	.word	0x66666667
 8001340:	000cd140 	.word	0x000cd140

08001344 <snek_map_clearmap>:
// snek_map - functions used during game to draw move snek, update fruity positions etc.

static void snek_map_clearmap(snek_game_t *p_snek_game)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	memset(p_snek_game->game_map, 0, sizeof(node_t) * SNEK_UI_NO_NODES);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3307      	adds	r3, #7
 8001350:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f002 fc2e 	bl	8003bb8 <memset>
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <snek_map_createnode>:

static void snek_map_createnode(snek_game_t *p_snek_game, uint8_t new_node_number)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	70fb      	strb	r3, [r7, #3]

	if (!(SNEK_CHECK_NODE_LIMITS(new_node_number)))
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	2b5f      	cmp	r3, #95	; 0x5f
 8001374:	d908      	bls.n	8001388 <snek_map_createnode+0x24>
	{
		SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ERROR_NODE);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	889b      	ldrh	r3, [r3, #4]
 800137a:	b29b      	uxth	r3, r3
 800137c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001380:	b29a      	uxth	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	809a      	strh	r2, [r3, #4]
		return;
 8001386:	e048      	b.n	800141a <snek_map_createnode+0xb6>
	}

	p_snek_game->game_map[new_node_number].node_taken = 1;
 8001388:	78fa      	ldrb	r2, [r7, #3]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	440b      	add	r3, r1
 8001394:	3307      	adds	r3, #7
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]

	// if this first node made
	if (p_snek_game->snek_lenght == 0)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10d      	bne.n	80013c0 <snek_map_createnode+0x5c>
	{
		// to first node assign null to last position
		p_snek_game->game_map[new_node_number].last_node_pos = SNEK_NULL_NODE;
 80013a4:	78fa      	ldrb	r2, [r7, #3]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	3308      	adds	r3, #8
 80013b2:	2264      	movs	r2, #100	; 0x64
 80013b4:	701a      	strb	r2, [r3, #0]

		p_snek_game->tail_address = new_node_number;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	78fa      	ldrb	r2, [r7, #3]
 80013ba:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 80013be:	e017      	b.n	80013f0 <snek_map_createnode+0x8c>
	}
	else
	{
		// to the next node assign position of last head
		p_snek_game->game_map[new_node_number].last_node_pos = p_snek_game->head_address;
 80013c0:	78fa      	ldrb	r2, [r7, #3]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 0127 	ldrb.w	r0, [r3, #295]	; 0x127
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	3308      	adds	r3, #8
 80013d4:	4602      	mov	r2, r0
 80013d6:	701a      	strb	r2, [r3, #0]
		// to the last head assign node that we are creating
		p_snek_game->game_map[p_snek_game->head_address].next_node_pos = new_node_number;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 80013de:	4619      	mov	r1, r3
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	460b      	mov	r3, r1
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	440b      	add	r3, r1
 80013e8:	4413      	add	r3, r2
 80013ea:	3309      	adds	r3, #9
 80013ec:	78fa      	ldrb	r2, [r7, #3]
 80013ee:	701a      	strb	r2, [r3, #0]

	}

	// we are creating head to next node is NULL
	p_snek_game->game_map[new_node_number].next_node_pos = SNEK_NULL_NODE;
 80013f0:	78fa      	ldrb	r2, [r7, #3]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	3309      	adds	r3, #9
 80013fe:	2264      	movs	r2, #100	; 0x64
 8001400:	701a      	strb	r2, [r3, #0]
	// node that we are creating is new head
	p_snek_game->head_address = new_node_number;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	78fa      	ldrb	r2, [r7, #3]
 8001406:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
	p_snek_game->snek_lenght++;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8001410:	3301      	adds	r3, #1
 8001412:	b29a      	uxth	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a

}
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <snek_map_deletenode>:

static void snek_map_deletenode(snek_game_t *p_snek_game, uint8_t last_node_number)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
	uint8_t temp_node_pos;

	if (!(SNEK_CHECK_NODE_LIMITS(last_node_number)))
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	2b5f      	cmp	r3, #95	; 0x5f
 8001434:	d908      	bls.n	8001448 <snek_map_deletenode+0x24>
	{
		SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ERROR_NODE);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	889b      	ldrh	r3, [r3, #4]
 800143a:	b29b      	uxth	r3, r3
 800143c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001440:	b29a      	uxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	809a      	strh	r2, [r3, #4]
		return;
 8001446:	e044      	b.n	80014d2 <snek_map_deletenode+0xae>
	}

	// save new tail to temporary buffer
	temp_node_pos = p_snek_game->game_map[p_snek_game->tail_address].next_node_pos;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800144e:	4619      	mov	r1, r3
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	460b      	mov	r3, r1
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	440b      	add	r3, r1
 8001458:	4413      	add	r3, r2
 800145a:	3309      	adds	r3, #9
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	73fb      	strb	r3, [r7, #15]

	// clear node
	p_snek_game->game_map[p_snek_game->tail_address].last_node_pos = 0;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8001466:	4619      	mov	r1, r3
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	440b      	add	r3, r1
 8001470:	4413      	add	r3, r2
 8001472:	3308      	adds	r3, #8
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
	p_snek_game->game_map[p_snek_game->tail_address].next_node_pos = 0;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800147e:	4619      	mov	r1, r3
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	440b      	add	r3, r1
 8001488:	4413      	add	r3, r2
 800148a:	3309      	adds	r3, #9
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
	p_snek_game->game_map[p_snek_game->tail_address].node_taken = 0;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8001496:	4619      	mov	r1, r3
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	440b      	add	r3, r1
 80014a0:	4413      	add	r3, r2
 80014a2:	3307      	adds	r3, #7
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]

	// assign new tail
	p_snek_game->tail_address = temp_node_pos;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
	p_snek_game->game_map[temp_node_pos].last_node_pos = SNEK_NULL_NODE;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	3308      	adds	r3, #8
 80014be:	2264      	movs	r2, #100	; 0x64
 80014c0:	701a      	strb	r2, [r3, #0]
	p_snek_game->snek_lenght--;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 80014c8:	3b01      	subs	r3, #1
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a

}
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <snek_map_drawnode>:

static void snek_map_drawnode(snek_game_t *p_snek_game, uint8_t new_node_number)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
	snek_map_createnode(p_snek_game, new_node_number);
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	4619      	mov	r1, r3
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff39 	bl	8001364 <snek_map_createnode>
	// draw node square
	uint8_t temp_x_pos = ((new_node_number % 16) * 8);
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	73fb      	strb	r3, [r7, #15]
	uint8_t temp_y_pos = 16 + ((new_node_number / 16) * 8);
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	091b      	lsrs	r3, r3, #4
 8001502:	b2db      	uxtb	r3, r3
 8001504:	3302      	adds	r3, #2
 8001506:	b2db      	uxtb	r3, r3
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	73bb      	strb	r3, [r7, #14]
	GFX_DrawFillRectangle(temp_x_pos, temp_y_pos, SNEK_UI_NODE_HEIGHT, SNEK_UI_NODE_WIDTH, YELLOWBLUE);
 800150c:	7bf8      	ldrb	r0, [r7, #15]
 800150e:	7bb9      	ldrb	r1, [r7, #14]
 8001510:	2301      	movs	r3, #1
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2308      	movs	r3, #8
 8001516:	2208      	movs	r2, #8
 8001518:	f7ff f90f 	bl	800073a <GFX_DrawFillRectangle>
}
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <snek_map_erasenode>:

static void snek_map_erasenode(snek_game_t *p_snek_game, uint8_t last_node_number)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af02      	add	r7, sp, #8
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
	snek_map_deletenode(p_snek_game, last_node_number);
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	4619      	mov	r1, r3
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff75 	bl	8001424 <snek_map_deletenode>
	// draw node square
	uint8_t temp_x_pos = ((last_node_number % 16) * 8);
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	f003 030f 	and.w	r3, r3, #15
 8001540:	b2db      	uxtb	r3, r3
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	73fb      	strb	r3, [r7, #15]
	uint8_t temp_y_pos = 16 + ((last_node_number / 16) * 8);
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	b2db      	uxtb	r3, r3
 800154c:	3302      	adds	r3, #2
 800154e:	b2db      	uxtb	r3, r3
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	73bb      	strb	r3, [r7, #14]
	GFX_DrawFillRectangle(temp_x_pos, temp_y_pos, SNEK_UI_NODE_HEIGHT, SNEK_UI_NODE_WIDTH, BLACK);
 8001554:	7bf8      	ldrb	r0, [r7, #15]
 8001556:	7bb9      	ldrb	r1, [r7, #14]
 8001558:	2300      	movs	r3, #0
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2308      	movs	r3, #8
 800155e:	2208      	movs	r2, #8
 8001560:	f7ff f8eb 	bl	800073a <GFX_DrawFillRectangle>
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <snek_map_drawfruity>:

static void snek_map_drawfruity(snek_game_t *p_snek_game, uint8_t fruity_node)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af02      	add	r7, sp, #8
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
	// draw node square
	uint8_t temp_x_pos = ((fruity_node % 16) * 8);
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	b2db      	uxtb	r3, r3
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	73fb      	strb	r3, [r7, #15]
	uint8_t temp_y_pos = 16 + ((fruity_node / 16) * 8);
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	b2db      	uxtb	r3, r3
 800158a:	3302      	adds	r3, #2
 800158c:	b2db      	uxtb	r3, r3
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	73bb      	strb	r3, [r7, #14]

	GFX_DrawFillRoundRectangle(temp_x_pos, temp_y_pos, SNEK_UI_NODE_HEIGHT, SNEK_UI_NODE_WIDTH, 1, YELLOWBLUE);
 8001592:	7bf8      	ldrb	r0, [r7, #15]
 8001594:	7bb9      	ldrb	r1, [r7, #14]
 8001596:	2301      	movs	r3, #1
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	2301      	movs	r3, #1
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2308      	movs	r3, #8
 80015a0:	2208      	movs	r2, #8
 80015a2:	f7ff f98e 	bl	80008c2 <GFX_DrawFillRoundRectangle>
	//GFX_DrawFillRectangle(temp_x_pos, temp_y_pos, SNEK_UI_NODE_HEIGHT, SNEK_UI_NODE_WIDTH, YELLOWBLUE);
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <snek_map_check_direction>:

static void snek_map_check_direction(snek_game_t *p_snek_game)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
	// if we are moving vertically
	if ((SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN)) || (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP)))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	889b      	ldrh	r3, [r3, #4]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	b29b      	uxth	r3, r3
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d108      	bne.n	80015da <snek_map_check_direction+0x2c>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	889b      	ldrh	r3, [r3, #4]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d064      	beq.n	80016a4 <snek_map_check_direction+0xf6>
	{
		// ignore up/down buttons and change snek new movement direction
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	885b      	ldrh	r3, [r3, #2]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	885b      	ldrh	r3, [r3, #2]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	f023 0302 	bic.w	r3, r3, #2
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	805a      	strh	r2, [r3, #2]

		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	885b      	ldrh	r3, [r3, #2]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	b29b      	uxth	r3, r3
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d020      	beq.n	800164e <snek_map_check_direction+0xa0>
		{
			// set new direction, reset old direction and button flag
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	889b      	ldrh	r3, [r3, #4]
 8001610:	b29b      	uxth	r3, r3
 8001612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001616:	b29a      	uxth	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_LEFT);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	889b      	ldrh	r3, [r3, #4]
 8001620:	b29b      	uxth	r3, r3
 8001622:	f023 0304 	bic.w	r3, r3, #4
 8001626:	b29a      	uxth	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	b29b      	uxth	r3, r3
 8001632:	f023 0310 	bic.w	r3, r3, #16
 8001636:	b29a      	uxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	889b      	ldrh	r3, [r3, #4]
 8001640:	b29b      	uxth	r3, r3
 8001642:	f023 0320 	bic.w	r3, r3, #32
 8001646:	b29a      	uxth	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	809a      	strh	r2, [r3, #4]
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 800164c:	e09e      	b.n	800178c <snek_map_check_direction+0x1de>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	885b      	ldrh	r3, [r3, #2]
 8001652:	b29b      	uxth	r3, r3
 8001654:	08db      	lsrs	r3, r3, #3
 8001656:	b29b      	uxth	r3, r3
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 8095 	beq.w	800178c <snek_map_check_direction+0x1de>
		{
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	889b      	ldrh	r3, [r3, #4]
 8001666:	b29b      	uxth	r3, r3
 8001668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800166c:	b29a      	uxth	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_RIGHT);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	889b      	ldrh	r3, [r3, #4]
 8001676:	b29b      	uxth	r3, r3
 8001678:	f023 0308 	bic.w	r3, r3, #8
 800167c:	b29a      	uxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	889b      	ldrh	r3, [r3, #4]
 8001686:	b29b      	uxth	r3, r3
 8001688:	f023 0310 	bic.w	r3, r3, #16
 800168c:	b29a      	uxth	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	889b      	ldrh	r3, [r3, #4]
 8001696:	b29b      	uxth	r3, r3
 8001698:	f023 0320 	bic.w	r3, r3, #32
 800169c:	b29a      	uxth	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	809a      	strh	r2, [r3, #4]
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 80016a2:	e073      	b.n	800178c <snek_map_check_direction+0x1de>
		}
	}
	else if ((SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT)) || (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT)))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	889b      	ldrh	r3, [r3, #4]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	099b      	lsrs	r3, r3, #6
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d108      	bne.n	80016c8 <snek_map_check_direction+0x11a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	889b      	ldrh	r3, [r3, #4]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	09db      	lsrs	r3, r3, #7
 80016be:	b29b      	uxth	r3, r3
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d062      	beq.n	800178e <snek_map_check_direction+0x1e0>
	{
		// same if we are in horizontal movement
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	885b      	ldrh	r3, [r3, #2]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	f023 0304 	bic.w	r3, r3, #4
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	885b      	ldrh	r3, [r3, #2]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	f023 0308 	bic.w	r3, r3, #8
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	805a      	strh	r2, [r3, #2]

		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	885b      	ldrh	r3, [r3, #2]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	085b      	lsrs	r3, r3, #1
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d020      	beq.n	800173c <snek_map_check_direction+0x18e>
		{
			// set new direction, reset old direction and button flag
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	889b      	ldrh	r3, [r3, #4]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	f043 0320 	orr.w	r3, r3, #32
 8001704:	b29a      	uxth	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_UP);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	889b      	ldrh	r3, [r3, #4]
 800170e:	b29b      	uxth	r3, r3
 8001710:	f023 0302 	bic.w	r3, r3, #2
 8001714:	b29a      	uxth	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	889b      	ldrh	r3, [r3, #4]
 800171e:	b29b      	uxth	r3, r3
 8001720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001724:	b29a      	uxth	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	889b      	ldrh	r3, [r3, #4]
 800172e:	b29b      	uxth	r3, r3
 8001730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001734:	b29a      	uxth	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_DOWN);
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT);
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
		}
	}
}
 800173a:	e028      	b.n	800178e <snek_map_check_direction+0x1e0>
		else if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	885b      	ldrh	r3, [r3, #2]
 8001740:	b29b      	uxth	r3, r3
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d021      	beq.n	800178e <snek_map_check_direction+0x1e0>
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	889b      	ldrh	r3, [r3, #4]
 800174e:	b29b      	uxth	r3, r3
 8001750:	f043 0310 	orr.w	r3, r3, #16
 8001754:	b29a      	uxth	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_DOWN);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	889b      	ldrh	r3, [r3, #4]
 800175e:	b29b      	uxth	r3, r3
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	b29a      	uxth	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	889b      	ldrh	r3, [r3, #4]
 800176e:	b29b      	uxth	r3, r3
 8001770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001774:	b29a      	uxth	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	889b      	ldrh	r3, [r3, #4]
 800177e:	b29b      	uxth	r3, r3
 8001780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001784:	b29a      	uxth	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	809a      	strh	r2, [r3, #4]
}
 800178a:	e000      	b.n	800178e <snek_map_check_direction+0x1e0>
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 800178c:	bf00      	nop
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <snek_map_check_fruity>:

static void snek_map_check_fruity(snek_game_t *p_snek_game)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_NO_FRUITY))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	889b      	ldrh	r3, [r3, #4]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	0a5b      	lsrs	r3, r3, #9
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d02a      	beq.n	800180c <snek_map_check_fruity+0x70>
	{
		// look for a place for a fruity node
		do
		{
			p_snek_game->fruity_node = rand() % 96;
 80017b6:	f002 fa07 	bl	8003bc8 <rand>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <snek_map_check_fruity+0x78>)
 80017be:	fb83 1302 	smull	r1, r3, r3, r2
 80017c2:	1119      	asrs	r1, r3, #4
 80017c4:	17d3      	asrs	r3, r2, #31
 80017c6:	1ac9      	subs	r1, r1, r3
 80017c8:	460b      	mov	r3, r1
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	440b      	add	r3, r1
 80017ce:	015b      	lsls	r3, r3, #5
 80017d0:	1ad1      	subs	r1, r2, r3
 80017d2:	b2ca      	uxtb	r2, r1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	719a      	strb	r2, [r3, #6]
		} while (p_snek_game->game_map[p_snek_game->fruity_node].node_taken);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	799b      	ldrb	r3, [r3, #6]
 80017dc:	4619      	mov	r1, r3
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	440b      	add	r3, r1
 80017e6:	4413      	add	r3, r2
 80017e8:	3307      	adds	r3, #7
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1e2      	bne.n	80017b6 <snek_map_check_fruity+0x1a>

		snek_map_drawfruity(p_snek_game, p_snek_game->fruity_node);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	799b      	ldrb	r3, [r3, #6]
 80017f4:	4619      	mov	r1, r3
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff feb8 	bl	800156c <snek_map_drawfruity>
		SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_NO_FRUITY);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	889b      	ldrh	r3, [r3, #4]
 8001800:	b29b      	uxth	r3, r3
 8001802:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001806:	b29a      	uxth	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	809a      	strh	r2, [r3, #4]
	}
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	2aaaaaab 	.word	0x2aaaaaab

08001818 <snek_map_compute_newposition>:

static uint8_t snek_map_compute_newposition(snek_game_t *p_snek_game)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	uint8_t temp_new_head;

	if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	889b      	ldrh	r3, [r3, #4]
 8001824:	b29b      	uxth	r3, r3
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	b29b      	uxth	r3, r3
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d01b      	beq.n	800186a <snek_map_compute_newposition+0x52>
	{
		// head = same column + new row
		temp_new_head = (p_snek_game->head_address) % 16 + ((((p_snek_game->head_address / 16) + 1) % 6 * 16));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	b2d8      	uxtb	r0, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	b2db      	uxtb	r3, r3
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	4b3c      	ldr	r3, [pc, #240]	; (800193c <snek_map_compute_newposition+0x124>)
 800184c:	fb83 3102 	smull	r3, r1, r3, r2
 8001850:	17d3      	asrs	r3, r2, #31
 8001852:	1ac9      	subs	r1, r1, r3
 8001854:	460b      	mov	r3, r1
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	440b      	add	r3, r1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	1ad1      	subs	r1, r2, r3
 800185e:	b2cb      	uxtb	r3, r1
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4403      	add	r3, r0
 8001866:	73fb      	strb	r3, [r7, #15]
 8001868:	e061      	b.n	800192e <snek_map_compute_newposition+0x116>
	}
	else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	889b      	ldrh	r3, [r3, #4]
 800186e:	b29b      	uxth	r3, r3
 8001870:	095b      	lsrs	r3, r3, #5
 8001872:	b29b      	uxth	r3, r3
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d01b      	beq.n	80018b4 <snek_map_compute_newposition+0x9c>
	{
		// head = same column + new row
		temp_new_head = (p_snek_game->head_address) % 16 + ((((p_snek_game->head_address / 16) + 5) % 6 * 16));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	b2d8      	uxtb	r0, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	b2db      	uxtb	r3, r3
 8001892:	1d5a      	adds	r2, r3, #5
 8001894:	4b29      	ldr	r3, [pc, #164]	; (800193c <snek_map_compute_newposition+0x124>)
 8001896:	fb83 3102 	smull	r3, r1, r3, r2
 800189a:	17d3      	asrs	r3, r2, #31
 800189c:	1ac9      	subs	r1, r1, r3
 800189e:	460b      	mov	r3, r1
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	440b      	add	r3, r1
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	1ad1      	subs	r1, r2, r3
 80018a8:	b2cb      	uxtb	r3, r1
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4403      	add	r3, r0
 80018b0:	73fb      	strb	r3, [r7, #15]
 80018b2:	e03c      	b.n	800192e <snek_map_compute_newposition+0x116>
	}
	else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	889b      	ldrh	r3, [r3, #4]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	099b      	lsrs	r3, r3, #6
 80018bc:	b29b      	uxth	r3, r3
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d015      	beq.n	80018f2 <snek_map_compute_newposition+0xda>
	{
		//head = new column + same row
		temp_new_head = (p_snek_game->head_address + 15) % 16 + ((p_snek_game->head_address / 16) * 16);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 80018cc:	330f      	adds	r3, #15
 80018ce:	425a      	negs	r2, r3
 80018d0:	f003 030f 	and.w	r3, r3, #15
 80018d4:	f002 020f 	and.w	r2, r2, #15
 80018d8:	bf58      	it	pl
 80018da:	4253      	negpl	r3, r2
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 80018e4:	091b      	lsrs	r3, r3, #4
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	73fb      	strb	r3, [r7, #15]
 80018f0:	e01d      	b.n	800192e <snek_map_compute_newposition+0x116>
	}
	else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	889b      	ldrh	r3, [r3, #4]
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	09db      	lsrs	r3, r3, #7
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d014      	beq.n	800192e <snek_map_compute_newposition+0x116>
	{
		//head = new column + same row
		temp_new_head = (p_snek_game->head_address + 1) % 16 + ((p_snek_game->head_address / 16) * 16);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 800190a:	3301      	adds	r3, #1
 800190c:	425a      	negs	r2, r3
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	f002 020f 	and.w	r2, r2, #15
 8001916:	bf58      	it	pl
 8001918:	4253      	negpl	r3, r2
 800191a:	b2da      	uxtb	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	b2db      	uxtb	r3, r3
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	b2db      	uxtb	r3, r3
 800192a:	4413      	add	r3, r2
 800192c:	73fb      	strb	r3, [r7, #15]
	}

	return temp_new_head;
 800192e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	2aaaaaab 	.word	0x2aaaaaab

08001940 <snek_gamestate_menu>:
// snek_gamestate - main state machine functions

static void snek_gamestate_menu(snek_game_t *p_snek_game)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

	// *** INIT SCREEN *** //
	SSD1306_Clear(BLACK);
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff f889 	bl	8000a60 <SSD1306_Clear>
	p_snek_game->menu_buttons = BUTTON_0_START_SPEED;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	705a      	strb	r2, [r3, #1]
	SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_0);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	889b      	ldrh	r3, [r3, #4]
 8001958:	b29b      	uxth	r3, r3
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	809a      	strh	r2, [r3, #4]
	// set bit to draw menu for the first time
	snek_eeprom_getconfig(p_snek_game);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff fb07 	bl	8000f78 <snek_eeprom_getconfig>
	SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	885b      	ldrh	r3, [r3, #2]
 800196e:	b29b      	uxth	r3, r3
 8001970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001974:	b29a      	uxth	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	805a      	strh	r2, [r3, #2]
	SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_ERROR_NODE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	889b      	ldrh	r3, [r3, #4]
 800197e:	b29b      	uxth	r3, r3
 8001980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001984:	b29a      	uxth	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	809a      	strh	r2, [r3, #4]

	// *** ACTIVE SCREEN *** //
	while (SCREEN_ACTIVE)
	{
		// update
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	885b      	ldrh	r3, [r3, #2]
 800198e:	b29b      	uxth	r3, r3
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	b29b      	uxth	r3, r3
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d06d      	beq.n	8001a78 <snek_gamestate_menu+0x138>
		{

			snek_ui_draw_mainmenu_button((uint8_t*) "Start", 0, 0);
 800199c:	2200      	movs	r2, #0
 800199e:	2100      	movs	r1, #0
 80019a0:	483b      	ldr	r0, [pc, #236]	; (8001a90 <snek_gamestate_menu+0x150>)
 80019a2:	f7ff f9bb 	bl	8000d1c <snek_ui_draw_mainmenu_button>
			snek_ui_draw_mainmenu_button((uint8_t*) "High scores", 1, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2101      	movs	r1, #1
 80019aa:	483a      	ldr	r0, [pc, #232]	; (8001a94 <snek_gamestate_menu+0x154>)
 80019ac:	f7ff f9b6 	bl	8000d1c <snek_ui_draw_mainmenu_button>
			snek_ui_draw_mainmenu_button((uint8_t*) "Settings", 2, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2102      	movs	r1, #2
 80019b4:	4838      	ldr	r0, [pc, #224]	; (8001a98 <snek_gamestate_menu+0x158>)
 80019b6:	f7ff f9b1 	bl	8000d1c <snek_ui_draw_mainmenu_button>
			snek_ui_draw_mainmenu_button((uint8_t*) "About", 3, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2103      	movs	r1, #3
 80019be:	4837      	ldr	r0, [pc, #220]	; (8001a9c <snek_gamestate_menu+0x15c>)
 80019c0:	f7ff f9ac 	bl	8000d1c <snek_ui_draw_mainmenu_button>
			// clear active buttons bits
			p_snek_game->SR1 &= ~(15U << SNEK_SR1_ACTIVE_BUTTON_0);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	889b      	ldrh	r3, [r3, #4]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	f023 030f 	bic.w	r3, r3, #15
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	809a      	strh	r2, [r3, #4]

			//draw selected button
			//set active window bit
			switch (p_snek_game->menu_buttons)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d843      	bhi.n	8001a64 <snek_gamestate_menu+0x124>
 80019dc:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <snek_gamestate_menu+0xa4>)
 80019de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e2:	bf00      	nop
 80019e4:	080019f5 	.word	0x080019f5
 80019e8:	08001a11 	.word	0x08001a11
 80019ec:	08001a2d 	.word	0x08001a2d
 80019f0:	08001a49 	.word	0x08001a49
			{
			case (BUTTON_0_START_SPEED):
				snek_ui_draw_mainmenu_button((uint8_t*) "Start", 0, 1);
 80019f4:	2201      	movs	r2, #1
 80019f6:	2100      	movs	r1, #0
 80019f8:	4825      	ldr	r0, [pc, #148]	; (8001a90 <snek_gamestate_menu+0x150>)
 80019fa:	f7ff f98f 	bl	8000d1c <snek_ui_draw_mainmenu_button>
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_0);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	889b      	ldrh	r3, [r3, #4]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	809a      	strh	r2, [r3, #4]
				break;
 8001a0e:	e029      	b.n	8001a64 <snek_gamestate_menu+0x124>

			case (BUTTON_1_SCORES_COLOR):
				snek_ui_draw_mainmenu_button((uint8_t*) "High scores", 1, 1);
 8001a10:	2201      	movs	r2, #1
 8001a12:	2101      	movs	r1, #1
 8001a14:	481f      	ldr	r0, [pc, #124]	; (8001a94 <snek_gamestate_menu+0x154>)
 8001a16:	f7ff f981 	bl	8000d1c <snek_ui_draw_mainmenu_button>
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_1);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	889b      	ldrh	r3, [r3, #4]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	809a      	strh	r2, [r3, #4]
				break;
 8001a2a:	e01b      	b.n	8001a64 <snek_gamestate_menu+0x124>

			case (BUTTON_2_SETTINGS_ERASE):
				snek_ui_draw_mainmenu_button((uint8_t*) "Settings", 2, 1);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	2102      	movs	r1, #2
 8001a30:	4819      	ldr	r0, [pc, #100]	; (8001a98 <snek_gamestate_menu+0x158>)
 8001a32:	f7ff f973 	bl	8000d1c <snek_ui_draw_mainmenu_button>
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_2);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	889b      	ldrh	r3, [r3, #4]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	809a      	strh	r2, [r3, #4]
				break;
 8001a46:	e00d      	b.n	8001a64 <snek_gamestate_menu+0x124>

			case (BUTTON_3_ABOUT_OK):
				snek_ui_draw_mainmenu_button((uint8_t*) "About", 3, 1);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2103      	movs	r1, #3
 8001a4c:	4813      	ldr	r0, [pc, #76]	; (8001a9c <snek_gamestate_menu+0x15c>)
 8001a4e:	f7ff f965 	bl	8000d1c <snek_ui_draw_mainmenu_button>
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_3);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	889b      	ldrh	r3, [r3, #4]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	809a      	strh	r2, [r3, #4]
				break;
 8001a62:	bf00      	nop
			}

			// sent data to OLED
			SSD1306_Display();
 8001a64:	f7ff f8ba 	bl	8000bdc <SSD1306_Display>
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	885b      	ldrh	r3, [r3, #2]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	805a      	strh	r2, [r3, #2]
		}

		// check for new update
		if (snek_ui_mainmenu_check_update(p_snek_game) == 1)
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff faaf 	bl	8000fdc <snek_ui_mainmenu_check_update>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d000      	beq.n	8001a86 <snek_gamestate_menu+0x146>
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED))
 8001a84:	e781      	b.n	800198a <snek_gamestate_menu+0x4a>
			return;
 8001a86:	bf00      	nop
	}
}
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	08004f7c 	.word	0x08004f7c
 8001a94:	08004f84 	.word	0x08004f84
 8001a98:	08004f90 	.word	0x08004f90
 8001a9c:	08004f9c 	.word	0x08004f9c

08001aa0 <snek_gamestate_about>:

static void snek_gamestate_about(snek_game_t *p_snek_game)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	6078      	str	r0, [r7, #4]

	// *** INIT SCREEN *** //
	SSD1306_Clear(BLACK);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7fe ffd9 	bl	8000a60 <SSD1306_Clear>
	snek_ui_draw_mainmenu_button((uint8_t*) "Snek loves fruity", 0, 1);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4822      	ldr	r0, [pc, #136]	; (8001b3c <snek_gamestate_about+0x9c>)
 8001ab4:	f7ff f932 	bl	8000d1c <snek_ui_draw_mainmenu_button>
	snek_ui_draw_mainmenu_button((uint8_t*) "a lot", 1, 1);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2101      	movs	r1, #1
 8001abc:	4820      	ldr	r0, [pc, #128]	; (8001b40 <snek_gamestate_about+0xa0>)
 8001abe:	f7ff f92d 	bl	8000d1c <snek_ui_draw_mainmenu_button>
	GFX_Image(30, 26, gImage_bitmap, 85, 48, YELLOWBLUE);
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	2330      	movs	r3, #48	; 0x30
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2355      	movs	r3, #85	; 0x55
 8001acc:	4a1d      	ldr	r2, [pc, #116]	; (8001b44 <snek_gamestate_about+0xa4>)
 8001ace:	211a      	movs	r1, #26
 8001ad0:	201e      	movs	r0, #30
 8001ad2:	f7fe ff49 	bl	8000968 <GFX_Image>
	snek_map_drawfruity(p_snek_game, 48);
 8001ad6:	2130      	movs	r1, #48	; 0x30
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fd47 	bl	800156c <snek_map_drawfruity>
	snek_map_drawfruity(p_snek_game, 66);
 8001ade:	2142      	movs	r1, #66	; 0x42
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fd43 	bl	800156c <snek_map_drawfruity>
	snek_map_drawfruity(p_snek_game, 81);
 8001ae6:	2151      	movs	r1, #81	; 0x51
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff fd3f 	bl	800156c <snek_map_drawfruity>
	SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	885b      	ldrh	r3, [r3, #2]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	f023 0310 	bic.w	r3, r3, #16
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	805a      	strh	r2, [r3, #2]
	SSD1306_Display();
 8001afe:	f7ff f86d 	bl	8000bdc <SSD1306_Display>

	while (SCREEN_ACTIVE)
	{
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	885b      	ldrh	r3, [r3, #2]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f6      	beq.n	8001b02 <snek_gamestate_about+0x62>
		{
			delay(840000);
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <snek_gamestate_about+0xa8>)
 8001b16:	f000 fcf9 	bl	800250c <delay>
			p_snek_game->game_state = GAMESTATE_MENU;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	885b      	ldrh	r3, [r3, #2]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	f023 0310 	bic.w	r3, r3, #16
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	805a      	strh	r2, [r3, #2]
			break;
 8001b30:	bf00      	nop
		}
	}
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	08004fa4 	.word	0x08004fa4
 8001b40:	08004fb8 	.word	0x08004fb8
 8001b44:	0800502c 	.word	0x0800502c
 8001b48:	000cd140 	.word	0x000cd140

08001b4c <snek_gamestate_settings>:

static void snek_gamestate_settings(snek_game_t *p_snek_game)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	// *** INIT SCREEN *** //
	SSD1306_Clear(BLACK);
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7fe ff83 	bl	8000a60 <SSD1306_Clear>
	SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	885b      	ldrh	r3, [r3, #2]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	f023 0310 	bic.w	r3, r3, #16
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	805a      	strh	r2, [r3, #2]
	snek_eeprom_getconfig(p_snek_game);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff fa04 	bl	8000f78 <snek_eeprom_getconfig>
	p_snek_game->menu_buttons = BUTTON_0_START_SPEED;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	705a      	strb	r2, [r3, #1]
	SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_0);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	889b      	ldrh	r3, [r3, #4]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	809a      	strh	r2, [r3, #4]
	SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	885b      	ldrh	r3, [r3, #2]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	805a      	strh	r2, [r3, #2]
	// *** ACTIVE SCREEN *** //

	while (SCREEN_ACTIVE)
	{
		// update
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	885b      	ldrh	r3, [r3, #2]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 8099 	beq.w	8001cdc <snek_gamestate_settings+0x190>
		{

			uint8_t text[16];
			sprintf((char*) text, "Speed <%d>", p_snek_game->game_config.speed);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	494f      	ldr	r1, [pc, #316]	; (8001cf4 <snek_gamestate_settings+0x1a8>)
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 f845 	bl	8003c48 <siprintf>
			snek_ui_draw_mainmenu_button((uint8_t*) text, 0, 0);
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff f8a8 	bl	8000d1c <snek_ui_draw_mainmenu_button>
			sprintf((char*) text, "Color <%d>", p_snek_game->game_config.color);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f107 0308 	add.w	r3, r7, #8
 8001bd8:	4947      	ldr	r1, [pc, #284]	; (8001cf8 <snek_gamestate_settings+0x1ac>)
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 f834 	bl	8003c48 <siprintf>
			snek_ui_draw_mainmenu_button((uint8_t*) text, 1, 0);
 8001be0:	f107 0308 	add.w	r3, r7, #8
 8001be4:	2200      	movs	r2, #0
 8001be6:	2101      	movs	r1, #1
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff f897 	bl	8000d1c <snek_ui_draw_mainmenu_button>
			snek_ui_draw_mainmenu_button((uint8_t*) "Erase scores", 2, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	4842      	ldr	r0, [pc, #264]	; (8001cfc <snek_gamestate_settings+0x1b0>)
 8001bf4:	f7ff f892 	bl	8000d1c <snek_ui_draw_mainmenu_button>
			snek_ui_draw_ok_button(OFF);
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f7ff f8e3 	bl	8000dc4 <snek_ui_draw_ok_button>
			// clear active buttons bits
			p_snek_game->SR1 &= ~(15U << SNEK_SR1_ACTIVE_BUTTON_0);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	889b      	ldrh	r3, [r3, #4]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	f023 030f 	bic.w	r3, r3, #15
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	809a      	strh	r2, [r3, #4]

			//draw selected button
			//set active window bit
			switch (p_snek_game->menu_buttons)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	785b      	ldrb	r3, [r3, #1]
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d858      	bhi.n	8001cc8 <snek_gamestate_settings+0x17c>
 8001c16:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <snek_gamestate_settings+0xd0>)
 8001c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1c:	08001c2d 	.word	0x08001c2d
 8001c20:	08001c61 	.word	0x08001c61
 8001c24:	08001c95 	.word	0x08001c95
 8001c28:	08001cb1 	.word	0x08001cb1
			{
			case (BUTTON_0_START_SPEED):
				sprintf((char*) text, "Speed <%d>", p_snek_game->game_config.speed);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8001c32:	461a      	mov	r2, r3
 8001c34:	f107 0308 	add.w	r3, r7, #8
 8001c38:	492e      	ldr	r1, [pc, #184]	; (8001cf4 <snek_gamestate_settings+0x1a8>)
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 f804 	bl	8003c48 <siprintf>
				snek_ui_draw_mainmenu_button((uint8_t*) text, 0, 1);
 8001c40:	f107 0308 	add.w	r3, r7, #8
 8001c44:	2201      	movs	r2, #1
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff f867 	bl	8000d1c <snek_ui_draw_mainmenu_button>
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_0);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	889b      	ldrh	r3, [r3, #4]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	809a      	strh	r2, [r3, #4]
				break;
 8001c5e:	e033      	b.n	8001cc8 <snek_gamestate_settings+0x17c>

			case (BUTTON_1_SCORES_COLOR):
				sprintf((char*) text, "Color <%d>", p_snek_game->game_config.color);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8001c66:	461a      	mov	r2, r3
 8001c68:	f107 0308 	add.w	r3, r7, #8
 8001c6c:	4922      	ldr	r1, [pc, #136]	; (8001cf8 <snek_gamestate_settings+0x1ac>)
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f001 ffea 	bl	8003c48 <siprintf>
				snek_ui_draw_mainmenu_button((uint8_t*) text, 1, 1);
 8001c74:	f107 0308 	add.w	r3, r7, #8
 8001c78:	2201      	movs	r2, #1
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f84d 	bl	8000d1c <snek_ui_draw_mainmenu_button>
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_1);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	889b      	ldrh	r3, [r3, #4]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	809a      	strh	r2, [r3, #4]
				break;
 8001c92:	e019      	b.n	8001cc8 <snek_gamestate_settings+0x17c>

			case (BUTTON_2_SETTINGS_ERASE):
				snek_ui_draw_mainmenu_button((uint8_t*) "Erase scores", 2, 1);
 8001c94:	2201      	movs	r2, #1
 8001c96:	2102      	movs	r1, #2
 8001c98:	4818      	ldr	r0, [pc, #96]	; (8001cfc <snek_gamestate_settings+0x1b0>)
 8001c9a:	f7ff f83f 	bl	8000d1c <snek_ui_draw_mainmenu_button>
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_2);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	889b      	ldrh	r3, [r3, #4]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	809a      	strh	r2, [r3, #4]
				break;
 8001cae:	e00b      	b.n	8001cc8 <snek_gamestate_settings+0x17c>

			case (BUTTON_3_ABOUT_OK):
				snek_ui_draw_ok_button(ON);
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f7ff f887 	bl	8000dc4 <snek_ui_draw_ok_button>
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_3);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	889b      	ldrh	r3, [r3, #4]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	f043 0308 	orr.w	r3, r3, #8
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	809a      	strh	r2, [r3, #4]
				break;
 8001cc6:	bf00      	nop
			}

			// sent data to OLED
			SSD1306_Display();
 8001cc8:	f7fe ff88 	bl	8000bdc <SSD1306_Display>
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	885b      	ldrh	r3, [r3, #2]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	805a      	strh	r2, [r3, #2]
		}

		// check for new update
		if (snek_ui_settingsmenu_check_update(p_snek_game) == 1)
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff fa19 	bl	8001114 <snek_ui_settingsmenu_check_update>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d000      	beq.n	8001cea <snek_gamestate_settings+0x19e>
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED))
 8001ce8:	e755      	b.n	8001b96 <snek_gamestate_settings+0x4a>
			return;
 8001cea:	bf00      	nop
	}
}
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	08004fc0 	.word	0x08004fc0
 8001cf8:	08004fcc 	.word	0x08004fcc
 8001cfc:	08004fd8 	.word	0x08004fd8

08001d00 <snek_gamestate_scores>:

static void snek_gamestate_scores(snek_game_t *p_snek_game)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b090      	sub	sp, #64	; 0x40
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	6078      	str	r0, [r7, #4]
	// *** INIT SCREEN *** //
	static uint8_t temp_array[128];
	uint8_t temp_name[16] =
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
			{ 0 };
	uint8_t temp_score;
	uint8_t display_text[24];
	uint8_t offset = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	SSD1306_Clear(YELLOWBLUE);
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f7fe fe9e 	bl	8000a60 <SSD1306_Clear>
	SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	885b      	ldrh	r3, [r3, #2]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	f023 0310 	bic.w	r3, r3, #16
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	805a      	strh	r2, [r3, #2]
	Eeprom_ReadData(0, temp_array, 128);
 8001d34:	2280      	movs	r2, #128	; 0x80
 8001d36:	494e      	ldr	r1, [pc, #312]	; (8001e70 <snek_gamestate_scores+0x170>)
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f000 fc31 	bl	80025a0 <Eeprom_ReadData>
	// *** ACTIVE SCREEN *** //
	while (SCREEN_ACTIVE)
	{

		// check if buttons are clicked
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	885b      	ldrh	r3, [r3, #2]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	085b      	lsrs	r3, r3, #1
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d014      	beq.n	8001d7a <snek_gamestate_scores+0x7a>
		{
			(offset == 0) ? (offset = 0) : (offset--);
 8001d50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d103      	bne.n	8001d60 <snek_gamestate_scores+0x60>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d5e:	e004      	b.n	8001d6a <snek_gamestate_scores+0x6a>
 8001d60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d64:	3b01      	subs	r3, #1
 8001d66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	885b      	ldrh	r3, [r3, #2]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	f023 0302 	bic.w	r3, r3, #2
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	805a      	strh	r2, [r3, #2]
		}

		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	885b      	ldrh	r3, [r3, #2]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d014      	beq.n	8001db2 <snek_gamestate_scores+0xb2>
		{
			(offset == 6) ? (offset = 6) : (offset++);
 8001d88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d8c:	2b06      	cmp	r3, #6
 8001d8e:	d103      	bne.n	8001d98 <snek_gamestate_scores+0x98>
 8001d90:	2306      	movs	r3, #6
 8001d92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d96:	e004      	b.n	8001da2 <snek_gamestate_scores+0xa2>
 8001d98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	885b      	ldrh	r3, [r3, #2]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	805a      	strh	r2, [r3, #2]
		}

		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	885b      	ldrh	r3, [r3, #2]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00e      	beq.n	8001de2 <snek_gamestate_scores+0xe2>
		{
			//debounce delay
			delay(840000);
 8001dc4:	482b      	ldr	r0, [pc, #172]	; (8001e74 <snek_gamestate_scores+0x174>)
 8001dc6:	f000 fba1 	bl	800250c <delay>
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	885b      	ldrh	r3, [r3, #2]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	f023 0310 	bic.w	r3, r3, #16
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	805a      	strh	r2, [r3, #2]
			p_snek_game->game_state = GAMESTATE_MENU;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
			break;
 8001de0:	e041      	b.n	8001e66 <snek_gamestate_scores+0x166>
		}

		// display 4 scores
		for (uint8_t i = 0; i < 4; i++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001de8:	e036      	b.n	8001e58 <snek_gamestate_scores+0x158>
		{
			memcpy(temp_name, &(temp_array[(i + offset) * 8]), 8);
 8001dea:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001dee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4a1e      	ldr	r2, [pc, #120]	; (8001e70 <snek_gamestate_scores+0x170>)
 8001df8:	1899      	adds	r1, r3, r2
 8001dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfe:	2208      	movs	r2, #8
 8001e00:	4618      	mov	r0, r3
 8001e02:	f001 fecb 	bl	8003b9c <memcpy>
			temp_score = temp_array[80 + i + offset];
 8001e06:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001e0a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8001e0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e12:	4413      	add	r3, r2
 8001e14:	4a16      	ldr	r2, [pc, #88]	; (8001e70 <snek_gamestate_scores+0x170>)
 8001e16:	5cd3      	ldrb	r3, [r2, r3]
 8001e18:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			sprintf((char*) display_text, "%d. %8s %d", (i + offset + 1), temp_name, temp_score);
 8001e1c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001e20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e24:	4413      	add	r3, r2
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e2c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001e30:	f107 000c 	add.w	r0, r7, #12
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	460b      	mov	r3, r1
 8001e38:	490f      	ldr	r1, [pc, #60]	; (8001e78 <snek_gamestate_scores+0x178>)
 8001e3a:	f001 ff05 	bl	8003c48 <siprintf>
			snek_ui_draw_mainmenu_button(display_text, i, 1);
 8001e3e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8001e42:	f107 030c 	add.w	r3, r7, #12
 8001e46:	2201      	movs	r2, #1
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe ff67 	bl	8000d1c <snek_ui_draw_mainmenu_button>
		for (uint8_t i = 0; i < 4; i++)
 8001e4e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001e52:	3301      	adds	r3, #1
 8001e54:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001e58:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d9c4      	bls.n	8001dea <snek_gamestate_scores+0xea>
		}

		SSD1306_Display();
 8001e60:	f7fe febc 	bl	8000bdc <SSD1306_Display>
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 8001e64:	e76b      	b.n	8001d3e <snek_gamestate_scores+0x3e>

	}

}
 8001e66:	bf00      	nop
 8001e68:	3738      	adds	r7, #56	; 0x38
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000484 	.word	0x20000484
 8001e74:	000cd140 	.word	0x000cd140
 8001e78:	08004fe8 	.word	0x08004fe8

08001e7c <snek_gamestate_game>:

static void snek_gamestate_game(snek_game_t *p_snek_game)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	6078      	str	r0, [r7, #4]

	// init parameters
	p_snek_game->snek_lenght = 0;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
	snek_map_clearmap(p_snek_game);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff fa59 	bl	8001344 <snek_map_clearmap>
	SSD1306_Clear(BLACK);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7fe fde4 	bl	8000a60 <SSD1306_Clear>

	// set speed
	snek_ui_modify_speed(p_snek_game);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7fe ff19 	bl	8000cd0 <snek_ui_modify_speed>
	// draw scorebox as a top button
	GFX_DrawRectangle(0, 0, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, YELLOWBLUE);
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	230f      	movs	r3, #15
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7fe fc19 	bl	80006e0 <GFX_DrawRectangle>
	GFX_DrawString(5, 0 + SNEK_UI_CHAR_OFFSET, "SNEK", YELLOWBLUE, BLACK);
 8001eae:	2300      	movs	r3, #0
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	4a3f      	ldr	r2, [pc, #252]	; (8001fb4 <snek_gamestate_game+0x138>)
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	2005      	movs	r0, #5
 8001eba:	f7fe fab3 	bl	8000424 <GFX_DrawString>
	GFX_DrawString(60, 0 + SNEK_UI_CHAR_OFFSET, "SCORE: 0", YELLOWBLUE, BLACK);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	4a3c      	ldr	r2, [pc, #240]	; (8001fb8 <snek_gamestate_game+0x13c>)
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	203c      	movs	r0, #60	; 0x3c
 8001eca:	f7fe faab 	bl	8000424 <GFX_DrawString>

	// create snake in game map
	snek_map_drawnode(p_snek_game, 40);
 8001ece:	2128      	movs	r1, #40	; 0x28
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff fb03 	bl	80014dc <snek_map_drawnode>
	snek_map_drawnode(p_snek_game, 41);
 8001ed6:	2129      	movs	r1, #41	; 0x29
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff faff 	bl	80014dc <snek_map_drawnode>
	snek_map_drawnode(p_snek_game, 42);
 8001ede:	212a      	movs	r1, #42	; 0x2a
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fafb 	bl	80014dc <snek_map_drawnode>

	// set first movement as right
	SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	889b      	ldrh	r3, [r3, #4]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	809a      	strh	r2, [r3, #4]
	SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_NO_FRUITY);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	889b      	ldrh	r3, [r3, #4]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	809a      	strh	r2, [r3, #4]
	SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_GAME_TICK);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	885b      	ldrh	r3, [r3, #2]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	f023 0320 	bic.w	r3, r3, #32
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	805a      	strh	r2, [r3, #2]

	SSD1306_Display();
 8001f16:	f7fe fe61 	bl	8000bdc <SSD1306_Display>

	while (SCREEN_ACTIVE)

	{
		// game tick
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_GAME_TICK))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	885b      	ldrh	r3, [r3, #2]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	095b      	lsrs	r3, r3, #5
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f6      	beq.n	8001f1a <snek_gamestate_game+0x9e>
		{
			// check if direction change is required
			snek_map_check_direction(p_snek_game);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff fb3e 	bl	80015ae <snek_map_check_direction>

			// check if new fruity is required
			snek_map_check_fruity(p_snek_game);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff fc32 	bl	800179c <snek_map_check_fruity>

			// calculate next node position in array
			uint8_t temp_new_head = snek_map_compute_newposition(p_snek_game);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff fc6d 	bl	8001818 <snek_map_compute_newposition>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	73fb      	strb	r3, [r7, #15]

			// check if new node is taken -> if yes then collision
			if (p_snek_game->game_map[temp_new_head].node_taken)
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3307      	adds	r3, #7
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <snek_gamestate_game+0xe2>
			{
				p_snek_game->game_state = GAMESTATE_OVER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2205      	movs	r2, #5
 8001f5a:	701a      	strb	r2, [r3, #0]
				return;
 8001f5c:	e027      	b.n	8001fae <snek_gamestate_game+0x132>
			}

			// check if next node is fruity node
			if (p_snek_game->fruity_node == temp_new_head)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	799b      	ldrb	r3, [r3, #6]
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d108      	bne.n	8001f7a <snek_gamestate_game+0xfe>
			{
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_NO_FRUITY);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	889b      	ldrh	r3, [r3, #4]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	809a      	strh	r2, [r3, #4]
 8001f78:	e006      	b.n	8001f88 <snek_gamestate_game+0x10c>

			}
			else
			{
				// erase tail
				snek_map_erasenode(p_snek_game, p_snek_game->tail_address);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8001f80:	4619      	mov	r1, r3
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff face 	bl	8001524 <snek_map_erasenode>
			}

			// draw new head
			snek_map_drawnode(p_snek_game, temp_new_head);
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff faa5 	bl	80014dc <snek_map_drawnode>

			snek_ui_updatescore(p_snek_game);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe ff56 	bl	8000e44 <snek_ui_updatescore>

			SSD1306_Display();
 8001f98:	f7fe fe20 	bl	8000bdc <SSD1306_Display>

			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_GAME_TICK);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	885b      	ldrh	r3, [r3, #2]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	f023 0320 	bic.w	r3, r3, #32
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	805a      	strh	r2, [r3, #2]
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_GAME_TICK))
 8001fac:	e7b5      	b.n	8001f1a <snek_gamestate_game+0x9e>
		}
	}

}
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	08004ff4 	.word	0x08004ff4
 8001fb8:	08004ffc 	.word	0x08004ffc

08001fbc <snek_gamestate_over>:

static void snek_gamestate_over(snek_game_t *p_snek_game)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	6078      	str	r0, [r7, #4]

	// *** INIT SCREEN *** //
	snek_ui_gameover_animation();
 8001fc4:	f7fe ff5c 	bl	8000e80 <snek_ui_gameover_animation>

	uint8_t msg[16];
	sprintf((char*) msg, "Score: %d", (p_snek_game->snek_lenght - SNEK_GAME_START_LENGHT + p_snek_game->game_config.speed));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8001fce:	461a      	mov	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8001fd6:	4413      	add	r3, r2
 8001fd8:	1eda      	subs	r2, r3, #3
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	49b1      	ldr	r1, [pc, #708]	; (80022a4 <snek_gamestate_over+0x2e8>)
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 fe31 	bl	8003c48 <siprintf>

	// draw buttons
	snek_ui_draw_mainmenu_button((uint8_t*) "Game over", 0, 1);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2100      	movs	r1, #0
 8001fea:	48af      	ldr	r0, [pc, #700]	; (80022a8 <snek_gamestate_over+0x2ec>)
 8001fec:	f7fe fe96 	bl	8000d1c <snek_ui_draw_mainmenu_button>
	snek_ui_draw_mainmenu_button((uint8_t*) msg, 1, 1);
 8001ff0:	f107 0308 	add.w	r3, r7, #8
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fe8f 	bl	8000d1c <snek_ui_draw_mainmenu_button>
	snek_ui_draw_mainmenu_button((uint8_t*) "Name:", 2, 1);
 8001ffe:	2201      	movs	r2, #1
 8002000:	2102      	movs	r1, #2
 8002002:	48aa      	ldr	r0, [pc, #680]	; (80022ac <snek_gamestate_over+0x2f0>)
 8002004:	f7fe fe8a 	bl	8000d1c <snek_ui_draw_mainmenu_button>
	snek_ui_draw_mainmenu_button((uint8_t*) "", 3, 0);
 8002008:	2200      	movs	r2, #0
 800200a:	2103      	movs	r1, #3
 800200c:	48a8      	ldr	r0, [pc, #672]	; (80022b0 <snek_gamestate_over+0x2f4>)
 800200e:	f7fe fe85 	bl	8000d1c <snek_ui_draw_mainmenu_button>

	// draw ok button
	snek_ui_draw_ok_button(OFF);
 8002012:	2000      	movs	r0, #0
 8002014:	f7fe fed6 	bl	8000dc4 <snek_ui_draw_ok_button>

	// init text editor values
	p_snek_game->txt_edit.pos = 0;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
	memset(p_snek_game->txt_edit.name, ' ', 8);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8002026:	2208      	movs	r2, #8
 8002028:	2120      	movs	r1, #32
 800202a:	4618      	mov	r0, r3
 800202c:	f001 fdc4 	bl	8003bb8 <memset>
	p_snek_game->txt_edit.val = 'A';
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2241      	movs	r2, #65	; 0x41
 8002034:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d

	SSD1306_Display();
 8002038:	f7fe fdd0 	bl	8000bdc <SSD1306_Display>

	// *** ACTIVE SCREEN *** //
	while (SCREEN_ACTIVE)
	{
		delay(840000);
 800203c:	489d      	ldr	r0, [pc, #628]	; (80022b4 <snek_gamestate_over+0x2f8>)
 800203e:	f000 fa65 	bl	800250c <delay>

		// check if there is a letter to change
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	885b      	ldrh	r3, [r3, #2]
 8002046:	b29b      	uxth	r3, r3
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	b29b      	uxth	r3, r3
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d022      	beq.n	800209a <snek_gamestate_over+0xde>
		{
			delay(840000);
 8002054:	4897      	ldr	r0, [pc, #604]	; (80022b4 <snek_gamestate_over+0x2f8>)
 8002056:	f000 fa59 	bl	800250c <delay>
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	885b      	ldrh	r3, [r3, #2]
 800205e:	b29b      	uxth	r3, r3
 8002060:	f023 0302 	bic.w	r3, r3, #2
 8002064:	b29a      	uxth	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	805a      	strh	r2, [r3, #2]

			if (p_snek_game->txt_edit.val >= 'Z' || p_snek_game->txt_edit.val < 'A')
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8002070:	2b59      	cmp	r3, #89	; 0x59
 8002072:	d804      	bhi.n	800207e <snek_gamestate_over+0xc2>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 800207a:	2b40      	cmp	r3, #64	; 0x40
 800207c:	d804      	bhi.n	8002088 <snek_gamestate_over+0xcc>
			{
				p_snek_game->txt_edit.val = 'A';
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2241      	movs	r2, #65	; 0x41
 8002082:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 8002086:	e031      	b.n	80020ec <snek_gamestate_over+0x130>
			}
			else
			{
				p_snek_game->txt_edit.val++;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 800208e:	3301      	adds	r3, #1
 8002090:	b2da      	uxtb	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 8002098:	e028      	b.n	80020ec <snek_gamestate_over+0x130>
			}
		}
		else if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	885b      	ldrh	r3, [r3, #2]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d021      	beq.n	80020ec <snek_gamestate_over+0x130>
		{
			delay(840000);
 80020a8:	4882      	ldr	r0, [pc, #520]	; (80022b4 <snek_gamestate_over+0x2f8>)
 80020aa:	f000 fa2f 	bl	800250c <delay>
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	885b      	ldrh	r3, [r3, #2]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	805a      	strh	r2, [r3, #2]

			if (p_snek_game->txt_edit.val > 'Z' || p_snek_game->txt_edit.val <= 'A')
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80020c4:	2b5a      	cmp	r3, #90	; 0x5a
 80020c6:	d804      	bhi.n	80020d2 <snek_gamestate_over+0x116>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80020ce:	2b41      	cmp	r3, #65	; 0x41
 80020d0:	d804      	bhi.n	80020dc <snek_gamestate_over+0x120>
			{
				p_snek_game->txt_edit.val = 'Z';
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	225a      	movs	r2, #90	; 0x5a
 80020d6:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 80020da:	e007      	b.n	80020ec <snek_gamestate_over+0x130>
			}
			else
			{
				p_snek_game->txt_edit.val--;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
			}
		}

		// check if there is position to change
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	885b      	ldrh	r3, [r3, #2]
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	08db      	lsrs	r3, r3, #3
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d028      	beq.n	8002150 <snek_gamestate_over+0x194>
		{
			delay(840000);
 80020fe:	486d      	ldr	r0, [pc, #436]	; (80022b4 <snek_gamestate_over+0x2f8>)
 8002100:	f000 fa04 	bl	800250c <delay>
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	885b      	ldrh	r3, [r3, #2]
 8002108:	b29b      	uxth	r3, r3
 800210a:	f023 0308 	bic.w	r3, r3, #8
 800210e:	b29a      	uxth	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	805a      	strh	r2, [r3, #2]
			(p_snek_game->txt_edit.pos == SNEK_UI_MAX_NAME_LENGHT) ? p_snek_game->txt_edit.pos = 0 : p_snek_game->txt_edit.pos++;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800211a:	2b08      	cmp	r3, #8
 800211c:	d104      	bne.n	8002128 <snek_gamestate_over+0x16c>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 8002126:	e007      	b.n	8002138 <snek_gamestate_over+0x17c>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800212e:	3301      	adds	r3, #1
 8002130:	b2da      	uxtb	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
			p_snek_game->txt_edit.val = p_snek_game->txt_edit.name[p_snek_game->txt_edit.pos];
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800213e:	461a      	mov	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	f893 212e 	ldrb.w	r2, [r3, #302]	; 0x12e
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 800214e:	e030      	b.n	80021b2 <snek_gamestate_over+0x1f6>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	885b      	ldrh	r3, [r3, #2]
 8002154:	b29b      	uxth	r3, r3
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	b29b      	uxth	r3, r3
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d027      	beq.n	80021b2 <snek_gamestate_over+0x1f6>
		{
			delay(840000);
 8002162:	4854      	ldr	r0, [pc, #336]	; (80022b4 <snek_gamestate_over+0x2f8>)
 8002164:	f000 f9d2 	bl	800250c <delay>
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	885b      	ldrh	r3, [r3, #2]
 800216c:	b29b      	uxth	r3, r3
 800216e:	f023 0304 	bic.w	r3, r3, #4
 8002172:	b29a      	uxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	805a      	strh	r2, [r3, #2]
			(p_snek_game->txt_edit.pos == 0) ? p_snek_game->txt_edit.pos = SNEK_UI_MAX_NAME_LENGHT : p_snek_game->txt_edit.pos--;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d104      	bne.n	800218c <snek_gamestate_over+0x1d0>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2208      	movs	r2, #8
 8002186:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 800218a:	e007      	b.n	800219c <snek_gamestate_over+0x1e0>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8002192:	3b01      	subs	r3, #1
 8002194:	b2da      	uxtb	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
			p_snek_game->txt_edit.val = p_snek_game->txt_edit.name[p_snek_game->txt_edit.pos];
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80021a2:	461a      	mov	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	f893 212e 	ldrb.w	r2, [r3, #302]	; 0x12e
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
		}

		GFX_DrawLine(40, 61, 48 + 45, 61, BLACK);
 80021b2:	2300      	movs	r3, #0
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	233d      	movs	r3, #61	; 0x3d
 80021b8:	225d      	movs	r2, #93	; 0x5d
 80021ba:	213d      	movs	r1, #61	; 0x3d
 80021bc:	2028      	movs	r0, #40	; 0x28
 80021be:	f7fe fa49 	bl	8000654 <GFX_DrawLine>
		// jump between letters
		if (p_snek_game->txt_edit.pos != SNEK_UI_MAX_NAME_LENGHT)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d038      	beq.n	800223e <snek_gamestate_over+0x282>
		{
			GFX_DrawLine((p_snek_game->txt_edit.pos * 6) + 40, 61, (p_snek_game->txt_edit.pos * 6) + 45, 61, YELLOWBLUE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80021d2:	461a      	mov	r2, r3
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80021e6:	461a      	mov	r2, r3
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 80021f4:	2301      	movs	r3, #1
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	233d      	movs	r3, #61	; 0x3d
 80021fa:	213d      	movs	r1, #61	; 0x3d
 80021fc:	f7fe fa2a 	bl	8000654 <GFX_DrawLine>
			GFX_DrawChar((p_snek_game->txt_edit.pos * 6) + SNEK_UI_TXT_EDITOR_OFFSET_LEFT, SSD1306_LCDHEIGHT - SNEK_UI_TXT_EDITOR_OFFSET_BOTTOM,
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8002206:	461a      	mov	r2, r3
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	3328      	adds	r3, #40	; 0x28
 8002212:	4618      	mov	r0, r3
					p_snek_game->txt_edit.val, YELLOWBLUE,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
			GFX_DrawChar((p_snek_game->txt_edit.pos * 6) + SNEK_UI_TXT_EDITOR_OFFSET_LEFT, SSD1306_LCDHEIGHT - SNEK_UI_TXT_EDITOR_OFFSET_BOTTOM,
 800221a:	2300      	movs	r3, #0
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2301      	movs	r3, #1
 8002220:	2134      	movs	r1, #52	; 0x34
 8002222:	f7fe f845 	bl	80002b0 <GFX_DrawChar>
					BLACK);
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	885b      	ldrh	r3, [r3, #2]
 800222a:	b29b      	uxth	r3, r3
 800222c:	f023 0310 	bic.w	r3, r3, #16
 8002230:	b29a      	uxth	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	805a      	strh	r2, [r3, #2]
			snek_ui_draw_ok_button(OFF);
 8002236:	2000      	movs	r0, #0
 8002238:	f7fe fdc4 	bl	8000dc4 <snek_ui_draw_ok_button>
 800223c:	e002      	b.n	8002244 <snek_gamestate_over+0x288>
		}
		else
		{
			snek_ui_draw_ok_button(ON);
 800223e:	2001      	movs	r0, #1
 8002240:	f7fe fdc0 	bl	8000dc4 <snek_ui_draw_ok_button>
		}

		p_snek_game->txt_edit.name[p_snek_game->txt_edit.pos] = p_snek_game->txt_edit.val;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800224a:	4619      	mov	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	440b      	add	r3, r1
 8002256:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e

		SSD1306_Display();
 800225a:	f7fe fcbf 	bl	8000bdc <SSD1306_Display>

		// check if button enter is clicked and go back to main menu
		if (SNEK_CHECK_BIT(p_snek_game->CR1,SNEK_CR1_BUTTON_ENTER) && (p_snek_game->txt_edit.pos == SNEK_UI_MAX_NAME_LENGHT))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	885b      	ldrh	r3, [r3, #2]
 8002262:	b29b      	uxth	r3, r3
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	b29b      	uxth	r3, r3
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	f43f aee5 	beq.w	800203c <snek_gamestate_over+0x80>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8002278:	2b08      	cmp	r3, #8
 800227a:	f47f aedf 	bne.w	800203c <snek_gamestate_over+0x80>
		{

			//debounce delay
			delay(840000);
 800227e:	480d      	ldr	r0, [pc, #52]	; (80022b4 <snek_gamestate_over+0x2f8>)
 8002280:	f000 f944 	bl	800250c <delay>
			// save data on eeprom
			p_snek_game->game_state = GAMESTATE_SAVE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2206      	movs	r2, #6
 8002288:	701a      	strb	r2, [r3, #0]
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	885b      	ldrh	r3, [r3, #2]
 800228e:	b29b      	uxth	r3, r3
 8002290:	f023 0310 	bic.w	r3, r3, #16
 8002294:	b29a      	uxth	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	805a      	strh	r2, [r3, #2]
			break;
 800229a:	bf00      	nop
		}

	}
}
 800229c:	bf00      	nop
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	08005008 	.word	0x08005008
 80022a8:	08005014 	.word	0x08005014
 80022ac:	08005020 	.word	0x08005020
 80022b0:	08005028 	.word	0x08005028
 80022b4:	000cd140 	.word	0x000cd140

080022b8 <snek_gamestate_save>:

static void snek_gamestate_save(snek_game_t *p_snek_game)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	uint8_t save_name[SNEK_UI_MAX_NAME_LENGHT] =
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]
			{ 0 };
	uint8_t save_score = p_snek_game->snek_lenght - SNEK_GAME_START_LENGHT + p_snek_game->game_config.speed;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 80022d6:	4413      	add	r3, r2
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	3b03      	subs	r3, #3
 80022dc:	74fb      	strb	r3, [r7, #19]
	uint8_t new_position = 99;
 80022de:	2363      	movs	r3, #99	; 0x63
 80022e0:	75fb      	strb	r3, [r7, #23]
	static uint8_t temp_buffer[EEPROM_SCORES_SIZE];

	// fill name
	for (uint8_t arr_count = 0; arr_count < SNEK_UI_MAX_NAME_LENGHT; arr_count++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	75bb      	strb	r3, [r7, #22]
 80022e6:	e00d      	b.n	8002304 <snek_gamestate_save+0x4c>
	{
		save_name[arr_count] = p_snek_game->txt_edit.name[arr_count];
 80022e8:	7dba      	ldrb	r2, [r7, #22]
 80022ea:	7dbb      	ldrb	r3, [r7, #22]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	440a      	add	r2, r1
 80022f0:	f892 212e 	ldrb.w	r2, [r2, #302]	; 0x12e
 80022f4:	f107 0118 	add.w	r1, r7, #24
 80022f8:	440b      	add	r3, r1
 80022fa:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t arr_count = 0; arr_count < SNEK_UI_MAX_NAME_LENGHT; arr_count++)
 80022fe:	7dbb      	ldrb	r3, [r7, #22]
 8002300:	3301      	adds	r3, #1
 8002302:	75bb      	strb	r3, [r7, #22]
 8002304:	7dbb      	ldrb	r3, [r7, #22]
 8002306:	2b07      	cmp	r3, #7
 8002308:	d9ee      	bls.n	80022e8 <snek_gamestate_save+0x30>
	}

	// read scores from eeprom

	Eeprom_ReadData(0, temp_buffer, EEPROM_SCORES_SIZE);
 800230a:	2260      	movs	r2, #96	; 0x60
 800230c:	492e      	ldr	r1, [pc, #184]	; (80023c8 <snek_gamestate_save+0x110>)
 800230e:	2000      	movs	r0, #0
 8002310:	f000 f946 	bl	80025a0 <Eeprom_ReadData>
	// check if score is qualifying to top
	for (uint8_t i = 0; i < 10; i++)
 8002314:	2300      	movs	r3, #0
 8002316:	757b      	strb	r3, [r7, #21]
 8002318:	e00c      	b.n	8002334 <snek_gamestate_save+0x7c>
	{
		if (save_score >= temp_buffer[80 + i])
 800231a:	7d7b      	ldrb	r3, [r7, #21]
 800231c:	3350      	adds	r3, #80	; 0x50
 800231e:	4a2a      	ldr	r2, [pc, #168]	; (80023c8 <snek_gamestate_save+0x110>)
 8002320:	5cd3      	ldrb	r3, [r2, r3]
 8002322:	7cfa      	ldrb	r2, [r7, #19]
 8002324:	429a      	cmp	r2, r3
 8002326:	d302      	bcc.n	800232e <snek_gamestate_save+0x76>
		{
			new_position = i;
 8002328:	7d7b      	ldrb	r3, [r7, #21]
 800232a:	75fb      	strb	r3, [r7, #23]
			break;
 800232c:	e005      	b.n	800233a <snek_gamestate_save+0x82>
	for (uint8_t i = 0; i < 10; i++)
 800232e:	7d7b      	ldrb	r3, [r7, #21]
 8002330:	3301      	adds	r3, #1
 8002332:	757b      	strb	r3, [r7, #21]
 8002334:	7d7b      	ldrb	r3, [r7, #21]
 8002336:	2b09      	cmp	r3, #9
 8002338:	d9ef      	bls.n	800231a <snek_gamestate_save+0x62>
		}
	}

	// if new score is outside high scores
	if (new_position > 10)
 800233a:	7dfb      	ldrb	r3, [r7, #23]
 800233c:	2b0a      	cmp	r3, #10
 800233e:	d903      	bls.n	8002348 <snek_gamestate_save+0x90>
	{
		p_snek_game->game_state = GAMESTATE_MENU;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
 8002346:	e03c      	b.n	80023c2 <snek_gamestate_save+0x10a>
		return;

	}

	// write scores in new order
	for (uint8_t i = 1; i < (10 - new_position); i++)
 8002348:	2301      	movs	r3, #1
 800234a:	753b      	strb	r3, [r7, #20]
 800234c:	e01c      	b.n	8002388 <snek_gamestate_save+0xd0>
	{
		//write names in new order
		memcpy(&temp_buffer[8 * (10 - i)], &temp_buffer[8 * (10 - i - 1)], EEPROM_PAGE_SIZE);
 800234e:	7d3b      	ldrb	r3, [r7, #20]
 8002350:	f1c3 030a 	rsb	r3, r3, #10
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4a1c      	ldr	r2, [pc, #112]	; (80023c8 <snek_gamestate_save+0x110>)
 8002358:	1898      	adds	r0, r3, r2
 800235a:	7d3b      	ldrb	r3, [r7, #20]
 800235c:	f1c3 0309 	rsb	r3, r3, #9
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4a19      	ldr	r2, [pc, #100]	; (80023c8 <snek_gamestate_save+0x110>)
 8002364:	4413      	add	r3, r2
 8002366:	2208      	movs	r2, #8
 8002368:	4619      	mov	r1, r3
 800236a:	f001 fc17 	bl	8003b9c <memcpy>
		//write scores in new order
		temp_buffer[80 + (10 - i)] = temp_buffer[80 + (10 - i - 1)];
 800236e:	7d3b      	ldrb	r3, [r7, #20]
 8002370:	f1c3 0259 	rsb	r2, r3, #89	; 0x59
 8002374:	7d3b      	ldrb	r3, [r7, #20]
 8002376:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800237a:	4913      	ldr	r1, [pc, #76]	; (80023c8 <snek_gamestate_save+0x110>)
 800237c:	5c89      	ldrb	r1, [r1, r2]
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <snek_gamestate_save+0x110>)
 8002380:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 1; i < (10 - new_position); i++)
 8002382:	7d3b      	ldrb	r3, [r7, #20]
 8002384:	3301      	adds	r3, #1
 8002386:	753b      	strb	r3, [r7, #20]
 8002388:	7d3a      	ldrb	r2, [r7, #20]
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	f1c3 030a 	rsb	r3, r3, #10
 8002390:	429a      	cmp	r2, r3
 8002392:	dbdc      	blt.n	800234e <snek_gamestate_save+0x96>
	}

	//add new score
	memcpy(&temp_buffer[new_position * 8], save_name, EEPROM_PAGE_SIZE);
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <snek_gamestate_save+0x110>)
 800239a:	4413      	add	r3, r2
 800239c:	461a      	mov	r2, r3
 800239e:	f107 0308 	add.w	r3, r7, #8
 80023a2:	cb03      	ldmia	r3!, {r0, r1}
 80023a4:	6010      	str	r0, [r2, #0]
 80023a6:	6051      	str	r1, [r2, #4]
	temp_buffer[80 + new_position] = save_score;
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	3350      	adds	r3, #80	; 0x50
 80023ac:	4906      	ldr	r1, [pc, #24]	; (80023c8 <snek_gamestate_save+0x110>)
 80023ae:	7cfa      	ldrb	r2, [r7, #19]
 80023b0:	54ca      	strb	r2, [r1, r3]

	// send new scores to eeprom

	Eeprom_SendData(0, temp_buffer, EEPROM_PAGE_SIZE * 12);
 80023b2:	2260      	movs	r2, #96	; 0x60
 80023b4:	4904      	ldr	r1, [pc, #16]	; (80023c8 <snek_gamestate_save+0x110>)
 80023b6:	2000      	movs	r0, #0
 80023b8:	f000 f8be 	bl	8002538 <Eeprom_SendData>

	p_snek_game->game_state = GAMESTATE_MENU;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
}
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20000504 	.word	0x20000504

080023cc <snek>:

// main function

void snek(snek_game_t *snek_game)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	switch (snek_game->game_state)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b06      	cmp	r3, #6
 80023da:	d82d      	bhi.n	8002438 <snek+0x6c>
 80023dc:	a201      	add	r2, pc, #4	; (adr r2, 80023e4 <snek+0x18>)
 80023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e2:	bf00      	nop
 80023e4:	08002401 	.word	0x08002401
 80023e8:	08002409 	.word	0x08002409
 80023ec:	08002411 	.word	0x08002411
 80023f0:	08002419 	.word	0x08002419
 80023f4:	08002421 	.word	0x08002421
 80023f8:	08002429 	.word	0x08002429
 80023fc:	08002431 	.word	0x08002431
	{

	case GAMESTATE_MENU:
		snek_gamestate_menu(snek_game);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff fa9d 	bl	8001940 <snek_gamestate_menu>
		break;
 8002406:	e018      	b.n	800243a <snek+0x6e>

	case GAMESTATE_SCORES:
		snek_gamestate_scores(snek_game);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff fc79 	bl	8001d00 <snek_gamestate_scores>
		break;
 800240e:	e014      	b.n	800243a <snek+0x6e>

	case GAMESTATE_ABOUT:
		snek_gamestate_about(snek_game);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff fb45 	bl	8001aa0 <snek_gamestate_about>
		break;
 8002416:	e010      	b.n	800243a <snek+0x6e>

	case GAMESTATE_SETTINGS:
		snek_gamestate_settings(snek_game);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fb97 	bl	8001b4c <snek_gamestate_settings>
		break;
 800241e:	e00c      	b.n	800243a <snek+0x6e>

	case GAMESTATE_GAME:
		snek_gamestate_game(snek_game);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff fd2b 	bl	8001e7c <snek_gamestate_game>
		break;
 8002426:	e008      	b.n	800243a <snek+0x6e>

	case GAMESTATE_OVER:
		snek_gamestate_over(snek_game);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff fdc7 	bl	8001fbc <snek_gamestate_over>
		break;
 800242e:	e004      	b.n	800243a <snek+0x6e>

	case GAMESTATE_SAVE:
		snek_gamestate_save(snek_game);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff ff41 	bl	80022b8 <snek_gamestate_save>
		break;
 8002436:	e000      	b.n	800243a <snek+0x6e>

	default:
		break;
 8002438:	bf00      	nop
	}
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop

08002444 <snek_button_callback>:

// callback to connect hardware buttons with snek game

void snek_button_callback(uint8_t GPIO_Pin, snek_game_t *snek_game)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	6039      	str	r1, [r7, #0]
 800244e:	71fb      	strb	r3, [r7, #7]

// set button clicked bit in CR1
	switch (GPIO_Pin)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	3b05      	subs	r3, #5
 8002454:	2b07      	cmp	r3, #7
 8002456:	d840      	bhi.n	80024da <snek_button_callback+0x96>
 8002458:	a201      	add	r2, pc, #4	; (adr r2, 8002460 <snek_button_callback+0x1c>)
 800245a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245e:	bf00      	nop
 8002460:	080024c9 	.word	0x080024c9
 8002464:	080024a5 	.word	0x080024a5
 8002468:	080024db 	.word	0x080024db
 800246c:	08002481 	.word	0x08002481
 8002470:	08002493 	.word	0x08002493
 8002474:	080024db 	.word	0x080024db
 8002478:	080024db 	.word	0x080024db
 800247c:	080024b7 	.word	0x080024b7
	{
	case SNEK_BUTTON_DOWN:
		SNEK_SET_BIT(snek_game->CR1, SNEK_CR1_BUTTON_DOWN);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	885b      	ldrh	r3, [r3, #2]
 8002484:	b29b      	uxth	r3, r3
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	805a      	strh	r2, [r3, #2]
		break;
 8002490:	e023      	b.n	80024da <snek_button_callback+0x96>

	case SNEK_BUTTON_UP:
		SNEK_SET_BIT(snek_game->CR1, SNEK_CR1_BUTTON_UP);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	885b      	ldrh	r3, [r3, #2]
 8002496:	b29b      	uxth	r3, r3
 8002498:	f043 0302 	orr.w	r3, r3, #2
 800249c:	b29a      	uxth	r2, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	805a      	strh	r2, [r3, #2]
		break;
 80024a2:	e01a      	b.n	80024da <snek_button_callback+0x96>

	case SNEK_BUTTON_LEFT:
		SNEK_SET_BIT(snek_game->CR1, SNEK_CR1_BUTTON_LEFT);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	885b      	ldrh	r3, [r3, #2]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	f043 0304 	orr.w	r3, r3, #4
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	805a      	strh	r2, [r3, #2]
		break;
 80024b4:	e011      	b.n	80024da <snek_button_callback+0x96>

	case SNEK_BUTTON_RIGHT:
		SNEK_SET_BIT(snek_game->CR1, SNEK_CR1_BUTTON_RIGHT);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	885b      	ldrh	r3, [r3, #2]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f043 0308 	orr.w	r3, r3, #8
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	805a      	strh	r2, [r3, #2]
		break;
 80024c6:	e008      	b.n	80024da <snek_button_callback+0x96>

	case SNEK_BUTTON_ENTER:
		SNEK_SET_BIT(snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	885b      	ldrh	r3, [r3, #2]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	f043 0310 	orr.w	r3, r3, #16
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	805a      	strh	r2, [r3, #2]
		break;
 80024d8:	bf00      	nop
	}

}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop

080024e8 <snek_gametick_callback>:

// gametick callback

void snek_gametick_callback(snek_game_t *snek_game)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	SNEK_SET_BIT(snek_game->CR1, SNEK_CR1_GAME_TICK);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	885b      	ldrh	r3, [r3, #2]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	f043 0320 	orr.w	r3, r3, #32
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	805a      	strh	r2, [r3, #2]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <delay>:

#include "stdint.h"
#include "delay.h"

void delay(uint32_t value)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < value; i++)
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e002      	b.n	8002520 <delay+0x14>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3301      	adds	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	d3f8      	bcc.n	800251a <delay+0xe>
	{

	}
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <Eeprom_SendData>:
#include "eeprom.h"

i2c_handle_t *p_eeprom_i2c;

void Eeprom_SendData(uint8_t first_page, uint8_t *data_buffer, uint32_t data_size)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af02      	add	r7, sp, #8
 800253e:	4603      	mov	r3, r0
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	73fb      	strb	r3, [r7, #15]
	uint8_t write_pages = data_size / EEPROM_PAGE_SIZE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	08db      	lsrs	r3, r3, #3
 800254a:	75bb      	strb	r3, [r7, #22]

	if (write_pages > EEPROM_NO_PAGES)
 800254c:	7dbb      	ldrb	r3, [r7, #22]
 800254e:	2b80      	cmp	r3, #128	; 0x80
 8002550:	d820      	bhi.n	8002594 <Eeprom_SendData+0x5c>
		//error
		return;
	}

	// save data in eeprom pages
	for (uint8_t transmit_count = 0; transmit_count < write_pages; transmit_count++)
 8002552:	2300      	movs	r3, #0
 8002554:	75fb      	strb	r3, [r7, #23]
 8002556:	e018      	b.n	800258a <Eeprom_SendData+0x52>
	{
		i2c_transmit(p_eeprom_i2c, (EEPROM_CONTORLBYTE << 1), first_page + (transmit_count * EEPROM_PAGE_SIZE),
 8002558:	4b10      	ldr	r3, [pc, #64]	; (800259c <Eeprom_SendData+0x64>)
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	b2da      	uxtb	r2, r3
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	4413      	add	r3, r2
 8002566:	b2d9      	uxtb	r1, r3
				&(data_buffer[transmit_count * EEPROM_PAGE_SIZE]),
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	00db      	lsls	r3, r3, #3
		i2c_transmit(p_eeprom_i2c, (EEPROM_CONTORLBYTE << 1), first_page + (transmit_count * EEPROM_PAGE_SIZE),
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	4413      	add	r3, r2
 8002570:	2208      	movs	r2, #8
 8002572:	9200      	str	r2, [sp, #0]
 8002574:	460a      	mov	r2, r1
 8002576:	21a0      	movs	r1, #160	; 0xa0
 8002578:	f000 ff3e 	bl	80033f8 <i2c_transmit>
				EEPROM_PAGE_SIZE);

		// need a delay between writing or a repeat sending
		delay(40000);
 800257c:	f649 4040 	movw	r0, #40000	; 0x9c40
 8002580:	f7ff ffc4 	bl	800250c <delay>
	for (uint8_t transmit_count = 0; transmit_count < write_pages; transmit_count++)
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	3301      	adds	r3, #1
 8002588:	75fb      	strb	r3, [r7, #23]
 800258a:	7dfa      	ldrb	r2, [r7, #23]
 800258c:	7dbb      	ldrb	r3, [r7, #22]
 800258e:	429a      	cmp	r2, r3
 8002590:	d3e2      	bcc.n	8002558 <Eeprom_SendData+0x20>
 8002592:	e000      	b.n	8002596 <Eeprom_SendData+0x5e>
		return;
 8002594:	bf00      	nop
	}


}
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000578 	.word	0x20000578

080025a0 <Eeprom_ReadData>:

void Eeprom_ReadData(uint8_t first_page, uint8_t *data_buffer, uint32_t data_size)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	4603      	mov	r3, r0
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	73fb      	strb	r3, [r7, #15]

	// transmit info that we are reading
	i2c_transmit(p_eeprom_i2c, (EEPROM_CONTORLBYTE << 1),first_page,0,0);
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <Eeprom_ReadData+0x38>)
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	7bfa      	ldrb	r2, [r7, #15]
 80025b4:	2300      	movs	r3, #0
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2300      	movs	r3, #0
 80025ba:	21a0      	movs	r1, #160	; 0xa0
 80025bc:	f000 ff1c 	bl	80033f8 <i2c_transmit>
	i2c_recieve(p_eeprom_i2c, (EEPROM_CONTORLBYTE << 1), data_buffer, data_size);
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <Eeprom_ReadData+0x38>)
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	21a0      	movs	r1, #160	; 0xa0
 80025ca:	f000 ff77 	bl	80034bc <i2c_recieve>

}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000578 	.word	0x20000578

080025dc <Eeprom_Init>:

void Eeprom_Init(i2c_handle_t *p_i2c)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	p_eeprom_i2c = p_i2c;
 80025e4:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <Eeprom_Init+0x1c>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6013      	str	r3, [r2, #0]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000578 	.word	0x20000578

080025fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	2b00      	cmp	r3, #0
 800260c:	db0b      	blt.n	8002626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	f003 021f 	and.w	r2, r3, #31
 8002614:	4907      	ldr	r1, [pc, #28]	; (8002634 <__NVIC_EnableIRQ+0x38>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	2001      	movs	r0, #1
 800261e:	fa00 f202 	lsl.w	r2, r0, r2
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000e100 	.word	0xe000e100

08002638 <main>:
void TIM9Config(TimerHandle_t *p_handle_tim);
void i2c1_config(i2c_handle_t *p_handle_i2c1);
snek_game_t snek_game;

int main()
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
	i2c_handle_t h_i2c1;
	TimerHandle_t h_tim9;

	// Configure RCC
	SysClockInit();
 800263e:	f000 f89d 	bl	800277c <SysClockInit>
	RCC_ClockFreqs freqs = {0};
 8002642:	463b      	mov	r3, r7
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
	RCC_GetClockFrequencies(&freqs);
 800264e:	463b      	mov	r3, r7
 8002650:	4618      	mov	r0, r3
 8002652:	f001 fa5b 	bl	8003b0c <RCC_GetClockFrequencies>

	// Configure peripherals
	GPIOConfig();
 8002656:	f000 f8b5 	bl	80027c4 <GPIOConfig>
	TIM9Config(&h_tim9);
 800265a:	f107 0310 	add.w	r3, r7, #16
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f90a 	bl	8002878 <TIM9Config>
	TIM_StartTimer(&h_tim9);
 8002664:	f107 0310 	add.w	r3, r7, #16
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fae0 	bl	8002c2e <TIM_StartTimer>
	i2c1_config(&h_i2c1);
 800266e:	f107 0318 	add.w	r3, r7, #24
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f8ea 	bl	800284c <i2c1_config>

	// Configure devices
	SSD1306_Init(&h_i2c1);
 8002678:	f107 0318 	add.w	r3, r7, #24
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe facb 	bl	8000c18 <SSD1306_Init>
	Eeprom_Init(&h_i2c1);
 8002682:	f107 0318 	add.w	r3, r7, #24
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ffa8 	bl	80025dc <Eeprom_Init>
	GFX_SetFont(font_8x5);
 800268c:	4804      	ldr	r0, [pc, #16]	; (80026a0 <main+0x68>)
 800268e:	f7fd fdff 	bl	8000290 <GFX_SetFont>

	// Enable IRQs
	NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002692:	2018      	movs	r0, #24
 8002694:	f7ff ffb2 	bl	80025fc <__NVIC_EnableIRQ>

	while(1)
	{
		snek(&snek_game);
 8002698:	4802      	ldr	r0, [pc, #8]	; (80026a4 <main+0x6c>)
 800269a:	f7ff fe97 	bl	80023cc <snek>
 800269e:	e7fb      	b.n	8002698 <main+0x60>
 80026a0:	0800523c 	.word	0x0800523c
 80026a4:	2000057c 	.word	0x2000057c

080026a8 <EXTI9_5_IRQHandler>:
	}
}

// handler for button DOWN
void EXTI9_5_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
	uint8_t temp_gpio_pin;

	if (EXTI->PR & (0b1 << SNEK_BUTTON_DOWN))
 80026ae:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <EXTI9_5_IRQHandler+0x78>)
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <EXTI9_5_IRQHandler+0x1e>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_DOWN);
 80026ba:	2008      	movs	r0, #8
 80026bc:	f000 fcb2 	bl	8003024 <GPIO_ClearPendingEXTIFlag>
		temp_gpio_pin = SNEK_BUTTON_DOWN;
 80026c0:	2308      	movs	r3, #8
 80026c2:	71fb      	strb	r3, [r7, #7]
 80026c4:	e022      	b.n	800270c <EXTI9_5_IRQHandler+0x64>
	}
	else if (EXTI->PR & (0b1 << SNEK_BUTTON_ENTER))
 80026c6:	4b16      	ldr	r3, [pc, #88]	; (8002720 <EXTI9_5_IRQHandler+0x78>)
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <EXTI9_5_IRQHandler+0x36>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_ENTER);
 80026d2:	2005      	movs	r0, #5
 80026d4:	f000 fca6 	bl	8003024 <GPIO_ClearPendingEXTIFlag>
		temp_gpio_pin = SNEK_BUTTON_ENTER;
 80026d8:	2305      	movs	r3, #5
 80026da:	71fb      	strb	r3, [r7, #7]
 80026dc:	e016      	b.n	800270c <EXTI9_5_IRQHandler+0x64>
	}
	else if (EXTI->PR & (0b1 << SNEK_BUTTON_UP))
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <EXTI9_5_IRQHandler+0x78>)
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <EXTI9_5_IRQHandler+0x4e>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_UP);
 80026ea:	2009      	movs	r0, #9
 80026ec:	f000 fc9a 	bl	8003024 <GPIO_ClearPendingEXTIFlag>
		temp_gpio_pin = SNEK_BUTTON_UP;
 80026f0:	2309      	movs	r3, #9
 80026f2:	71fb      	strb	r3, [r7, #7]
 80026f4:	e00a      	b.n	800270c <EXTI9_5_IRQHandler+0x64>
	}
	else if (EXTI->PR & (0b1 << SNEK_BUTTON_LEFT))
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <EXTI9_5_IRQHandler+0x78>)
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d004      	beq.n	800270c <EXTI9_5_IRQHandler+0x64>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_LEFT);
 8002702:	2006      	movs	r0, #6
 8002704:	f000 fc8e 	bl	8003024 <GPIO_ClearPendingEXTIFlag>
		temp_gpio_pin = SNEK_BUTTON_LEFT;
 8002708:	2306      	movs	r3, #6
 800270a:	71fb      	strb	r3, [r7, #7]
	}

	snek_button_callback(temp_gpio_pin, &snek_game);
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	4905      	ldr	r1, [pc, #20]	; (8002724 <EXTI9_5_IRQHandler+0x7c>)
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fe97 	bl	8002444 <snek_button_callback>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40013c00 	.word	0x40013c00
 8002724:	2000057c 	.word	0x2000057c

08002728 <EXTI15_10_IRQHandler>:

// handler for buttons up/left/enter
void EXTI15_10_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
	uint8_t temp_gpio_pin;
	// if button is clicked
	if (EXTI->PR & (0b1 << SNEK_BUTTON_RIGHT))
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <EXTI15_10_IRQHandler+0x30>)
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d004      	beq.n	8002744 <EXTI15_10_IRQHandler+0x1c>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_RIGHT);
 800273a:	200c      	movs	r0, #12
 800273c:	f000 fc72 	bl	8003024 <GPIO_ClearPendingEXTIFlag>
		temp_gpio_pin = SNEK_BUTTON_RIGHT;
 8002740:	230c      	movs	r3, #12
 8002742:	71fb      	strb	r3, [r7, #7]
	}

	snek_button_callback(temp_gpio_pin, &snek_game);
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	4905      	ldr	r1, [pc, #20]	; (800275c <EXTI15_10_IRQHandler+0x34>)
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fe7b 	bl	8002444 <snek_button_callback>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40013c00 	.word	0x40013c00
 800275c:	2000057c 	.word	0x2000057c

08002760 <TIM1_BRK_TIM9_IRQHandler>:

// game tick
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
	snek_gametick_callback(&snek_game);
 8002764:	4803      	ldr	r0, [pc, #12]	; (8002774 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002766:	f7ff febf 	bl	80024e8 <snek_gametick_callback>
	TIM_ClearUpdateFlag(TIM9);
 800276a:	4803      	ldr	r0, [pc, #12]	; (8002778 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800276c:	f000 fa4f 	bl	8002c0e <TIM_ClearUpdateFlag>
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	2000057c 	.word	0x2000057c
 8002778:	40014000 	.word	0x40014000

0800277c <SysClockInit>:

// system clock init function
void SysClockInit(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
	RCC_ClockInitTypeDef pClockInit;

	pClockInit.apb1_prescaler = RCC_ABP_PRESCALER_DIV2;
 8002782:	2304      	movs	r3, #4
 8002784:	713b      	strb	r3, [r7, #4]
	pClockInit.apb2_prescaler = RCC_ABP_PRESCALER_NODIV;
 8002786:	2300      	movs	r3, #0
 8002788:	717b      	strb	r3, [r7, #5]
	pClockInit.flash_latency = RCC_FLASHLATENCY_2WS;
 800278a:	2302      	movs	r3, #2
 800278c:	70bb      	strb	r3, [r7, #2]
	pClockInit.hpre_prescaler = RCC_HPRE_PRESCALER_NODIV;
 800278e:	2300      	movs	r3, #0
 8002790:	70fb      	strb	r3, [r7, #3]
	pClockInit.oscillator_type = RCC_OSCILLATORTYPE_HSI;
 8002792:	2300      	movs	r3, #0
 8002794:	703b      	strb	r3, [r7, #0]
	pClockInit.vos_scale = RCC_VOS_SCALE2;
 8002796:	2302      	movs	r3, #2
 8002798:	707b      	strb	r3, [r7, #1]

	// init pll
	pClockInit.pll.source = RCC_PLL_SOURCE_HSI;
 800279a:	2300      	movs	r3, #0
 800279c:	71fb      	strb	r3, [r7, #7]
	pClockInit.pll.state = RCC_PLL_STATE_ENABLE;
 800279e:	2301      	movs	r3, #1
 80027a0:	71bb      	strb	r3, [r7, #6]
	pClockInit.pll.pllm = 16;
 80027a2:	2310      	movs	r3, #16
 80027a4:	723b      	strb	r3, [r7, #8]
	pClockInit.pll.plln = 336;
 80027a6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80027aa:	817b      	strh	r3, [r7, #10]
	pClockInit.pll.pllp = RCC_PLLP_DIV4;
 80027ac:	2301      	movs	r3, #1
 80027ae:	733b      	strb	r3, [r7, #12]
	pClockInit.pll.pllq = 7;
 80027b0:	2307      	movs	r3, #7
 80027b2:	737b      	strb	r3, [r7, #13]

	RCC_InitClock(&pClockInit);
 80027b4:	463b      	mov	r3, r7
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 ff3e 	bl	8003638 <RCC_InitClock>
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <GPIOConfig>:

//configure GPIO used in the project
void GPIOConfig(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOx;
	GPIOx.PinConfig.PinNumber = GPIO_PIN_5;
 80027ca:	2305      	movs	r3, #5
 80027cc:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_OUTPUT;
 80027ce:	2301      	movs	r3, #1
 80027d0:	727b      	strb	r3, [r7, #9]
	GPIOx.PinConfig.OutputType = GPIO_PIN_OT_PP;
 80027d2:	2300      	movs	r3, #0
 80027d4:	72bb      	strb	r3, [r7, #10]
	GPIOx.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	733b      	strb	r3, [r7, #12]
	GPIOx.pGPIOx = GPIOA;
 80027da:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <GPIOConfig+0x80>)
 80027dc:	607b      	str	r3, [r7, #4]
	GPIO_InitPin(&GPIOx);
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fa91 	bl	8002d08 <GPIO_InitPin>

	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_EXTI_FT;
 80027e6:	2304      	movs	r3, #4
 80027e8:	727b      	strb	r3, [r7, #9]
	GPIOx.pGPIOx = SNEK_BUTTON_ENTER_PORT;
 80027ea:	4b17      	ldr	r3, [pc, #92]	; (8002848 <GPIOConfig+0x84>)
 80027ec:	607b      	str	r3, [r7, #4]
	GPIOx.PinConfig.PinNumber = SNEK_BUTTON_ENTER;
 80027ee:	2305      	movs	r3, #5
 80027f0:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 fa87 	bl	8002d08 <GPIO_InitPin>

	GPIOx.pGPIOx = SNEK_BUTTON_DOWN_PORT;
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <GPIOConfig+0x84>)
 80027fc:	607b      	str	r3, [r7, #4]
	GPIOx.PinConfig.PinNumber = SNEK_BUTTON_DOWN;
 80027fe:	2308      	movs	r3, #8
 8002800:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	4618      	mov	r0, r3
 8002806:	f000 fa7f 	bl	8002d08 <GPIO_InitPin>

	GPIOx.pGPIOx = SNEK_BUTTON_UP_PORT;
 800280a:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <GPIOConfig+0x84>)
 800280c:	607b      	str	r3, [r7, #4]
	GPIOx.PinConfig.PinNumber = SNEK_BUTTON_UP;
 800280e:	2309      	movs	r3, #9
 8002810:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fa77 	bl	8002d08 <GPIO_InitPin>

	GPIOx.pGPIOx = SNEK_BUTTON_LEFT_PORT;
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <GPIOConfig+0x84>)
 800281c:	607b      	str	r3, [r7, #4]
	GPIOx.PinConfig.PinNumber = SNEK_BUTTON_LEFT;
 800281e:	2306      	movs	r3, #6
 8002820:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fa6f 	bl	8002d08 <GPIO_InitPin>

	GPIOx.pGPIOx = SNEK_BUTTON_RIGHT_PORT;
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <GPIOConfig+0x80>)
 800282c:	607b      	str	r3, [r7, #4]
	GPIOx.PinConfig.PinNumber = SNEK_BUTTON_RIGHT;
 800282e:	230c      	movs	r3, #12
 8002830:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fa67 	bl	8002d08 <GPIO_InitPin>
	
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40020000 	.word	0x40020000
 8002848:	40020800 	.word	0x40020800

0800284c <i2c1_config>:

void i2c1_config(i2c_handle_t *p_handle_i2c1)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	p_handle_i2c1->p_i2cx = I2C1;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a07      	ldr	r2, [pc, #28]	; (8002874 <i2c1_config+0x28>)
 8002858:	601a      	str	r2, [r3, #0]
	p_handle_i2c1->i2c_config.abp1_freq_mhz = 42;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	222a      	movs	r2, #42	; 0x2a
 800285e:	711a      	strb	r2, [r3, #4]
	p_handle_i2c1->i2c_config.speed = I2C_SPEED_FAST_DUTY0;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	715a      	strb	r2, [r3, #5]

	i2c_init(p_handle_i2c1);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fca6 	bl	80031b8 <i2c_init>
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40005400 	.word	0x40005400

08002878 <TIM9Config>:

void TIM9Config(TimerHandle_t *p_handle_tim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

	p_handle_tim->p_timx = TIM9;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <TIM9Config+0x34>)
 8002884:	605a      	str	r2, [r3, #4]
	p_handle_tim->timer_config.prescaler = 4199;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f241 0267 	movw	r2, #4199	; 0x1067
 800288c:	801a      	strh	r2, [r3, #0]
	p_handle_tim->timer_config.autoreload = 9999;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f242 720f 	movw	r2, #9999	; 0x270f
 8002894:	805a      	strh	r2, [r3, #2]

	TIM_InitTimer(p_handle_tim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f97e 	bl	8002b98 <TIM_InitTimer>

	TIM_EnableIRQ(p_handle_tim, TIM_IRQFLAG_UIE);
 800289c:	2100      	movs	r1, #0
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f99d 	bl	8002bde <TIM_EnableIRQ>
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40014000 	.word	0x40014000

080028b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
	return 1;
 80028b4:	2301      	movs	r3, #1
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <_kill>:

int _kill(int pid, int sig)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028ca:	f001 f93d 	bl	8003b48 <__errno>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2216      	movs	r2, #22
 80028d2:	601a      	str	r2, [r3, #0]
	return -1;
 80028d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <_exit>:

void _exit (int status)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028e8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ffe7 	bl	80028c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80028f2:	e7fe      	b.n	80028f2 <_exit+0x12>

080028f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	e00a      	b.n	800291c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002906:	f3af 8000 	nop.w
 800290a:	4601      	mov	r1, r0
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	60ba      	str	r2, [r7, #8]
 8002912:	b2ca      	uxtb	r2, r1
 8002914:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3301      	adds	r3, #1
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	dbf0      	blt.n	8002906 <_read+0x12>
	}

return len;
 8002924:	687b      	ldr	r3, [r7, #4]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	e009      	b.n	8002954 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	60ba      	str	r2, [r7, #8]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	3301      	adds	r3, #1
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	429a      	cmp	r2, r3
 800295a:	dbf1      	blt.n	8002940 <_write+0x12>
	}
	return len;
 800295c:	687b      	ldr	r3, [r7, #4]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <_close>:

int _close(int file)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
	return -1;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800298e:	605a      	str	r2, [r3, #4]
	return 0;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <_isatty>:

int _isatty(int file)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
	return 1;
 80029a6:	2301      	movs	r3, #1
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
	return 0;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029d8:	4a14      	ldr	r2, [pc, #80]	; (8002a2c <_sbrk+0x5c>)
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <_sbrk+0x60>)
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <_sbrk+0x64>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d102      	bne.n	80029f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <_sbrk+0x64>)
 80029ee:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <_sbrk+0x68>)
 80029f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029f2:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <_sbrk+0x64>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4413      	add	r3, r2
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d207      	bcs.n	8002a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a00:	f001 f8a2 	bl	8003b48 <__errno>
 8002a04:	4603      	mov	r3, r0
 8002a06:	220c      	movs	r2, #12
 8002a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0e:	e009      	b.n	8002a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <_sbrk+0x64>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a16:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <_sbrk+0x64>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	4a05      	ldr	r2, [pc, #20]	; (8002a34 <_sbrk+0x64>)
 8002a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a22:	68fb      	ldr	r3, [r7, #12]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20018000 	.word	0x20018000
 8002a30:	00000400 	.word	0x00000400
 8002a34:	20000564 	.word	0x20000564
 8002a38:	200006c8 	.word	0x200006c8

08002a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <SystemInit+0x20>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	4a05      	ldr	r2, [pc, #20]	; (8002a5c <SystemInit+0x20>)
 8002a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a64:	480d      	ldr	r0, [pc, #52]	; (8002a9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a66:	490e      	ldr	r1, [pc, #56]	; (8002aa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a68:	4a0e      	ldr	r2, [pc, #56]	; (8002aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a6c:	e002      	b.n	8002a74 <LoopCopyDataInit>

08002a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a72:	3304      	adds	r3, #4

08002a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a78:	d3f9      	bcc.n	8002a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a7a:	4a0b      	ldr	r2, [pc, #44]	; (8002aa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a7c:	4c0b      	ldr	r4, [pc, #44]	; (8002aac <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a80:	e001      	b.n	8002a86 <LoopFillZerobss>

08002a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a84:	3204      	adds	r2, #4

08002a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a88:	d3fb      	bcc.n	8002a82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a8a:	f7ff ffd7 	bl	8002a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a8e:	f001 f861 	bl	8003b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a92:	f7ff fdd1 	bl	8002638 <main>
  bx  lr    
 8002a96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aa0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002aa4:	08005570 	.word	0x08005570
  ldr r2, =_sbss
 8002aa8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002aac:	200006c8 	.word	0x200006c8

08002ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ab0:	e7fe      	b.n	8002ab0 <ADC_IRQHandler>
	...

08002ab4 <TIM_ClockEnable>:
#include "stm32f401xe_rcc.h"
#include "stm32401xe_tim.h"


void TIM_ClockEnable(TIM_TypeDef *p_timx)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
	if (p_timx == TIM1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a2e      	ldr	r2, [pc, #184]	; (8002b78 <TIM_ClockEnable+0xc4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d106      	bne.n	8002ad2 <TIM_ClockEnable+0x1e>
	{
		RCC_CLOCK_TIM1_ENABLE();
 8002ac4:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <TIM_ClockEnable+0xc8>)
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	4a2c      	ldr	r2, [pc, #176]	; (8002b7c <TIM_ClockEnable+0xc8>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6453      	str	r3, [r2, #68]	; 0x44
		RCC_CLOCK_TIM10_ENABLE();
	}else if (p_timx == TIM11)
	{
		RCC_CLOCK_TIM11_ENABLE();
	}
}
 8002ad0:	e04b      	b.n	8002b6a <TIM_ClockEnable+0xb6>
	else if (p_timx == TIM2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad8:	d106      	bne.n	8002ae8 <TIM_ClockEnable+0x34>
		RCC_CLOCK_TIM2_ENABLE();
 8002ada:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <TIM_ClockEnable+0xc8>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4a27      	ldr	r2, [pc, #156]	; (8002b7c <TIM_ClockEnable+0xc8>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002ae6:	e040      	b.n	8002b6a <TIM_ClockEnable+0xb6>
	else if (p_timx == TIM3)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a25      	ldr	r2, [pc, #148]	; (8002b80 <TIM_ClockEnable+0xcc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d106      	bne.n	8002afe <TIM_ClockEnable+0x4a>
		RCC_CLOCK_TIM3_ENABLE();
 8002af0:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <TIM_ClockEnable+0xc8>)
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	4a21      	ldr	r2, [pc, #132]	; (8002b7c <TIM_ClockEnable+0xc8>)
 8002af6:	f043 0302 	orr.w	r3, r3, #2
 8002afa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002afc:	e035      	b.n	8002b6a <TIM_ClockEnable+0xb6>
	else if (p_timx == TIM4)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a20      	ldr	r2, [pc, #128]	; (8002b84 <TIM_ClockEnable+0xd0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d106      	bne.n	8002b14 <TIM_ClockEnable+0x60>
		RCC_CLOCK_TIM4_ENABLE();
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <TIM_ClockEnable+0xc8>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <TIM_ClockEnable+0xc8>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b12:	e02a      	b.n	8002b6a <TIM_ClockEnable+0xb6>
	else if (p_timx == TIM5)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a1c      	ldr	r2, [pc, #112]	; (8002b88 <TIM_ClockEnable+0xd4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d106      	bne.n	8002b2a <TIM_ClockEnable+0x76>
		RCC_CLOCK_TIM5_ENABLE();
 8002b1c:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <TIM_ClockEnable+0xc8>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	4a16      	ldr	r2, [pc, #88]	; (8002b7c <TIM_ClockEnable+0xc8>)
 8002b22:	f043 0308 	orr.w	r3, r3, #8
 8002b26:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b28:	e01f      	b.n	8002b6a <TIM_ClockEnable+0xb6>
	else if (p_timx == TIM9)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <TIM_ClockEnable+0xd8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d106      	bne.n	8002b40 <TIM_ClockEnable+0x8c>
		RCC_CLOCK_TIM9_ENABLE();
 8002b32:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <TIM_ClockEnable+0xc8>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	4a11      	ldr	r2, [pc, #68]	; (8002b7c <TIM_ClockEnable+0xc8>)
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3c:	6453      	str	r3, [r2, #68]	; 0x44
}
 8002b3e:	e014      	b.n	8002b6a <TIM_ClockEnable+0xb6>
	}else if (p_timx == TIM10)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a13      	ldr	r2, [pc, #76]	; (8002b90 <TIM_ClockEnable+0xdc>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d106      	bne.n	8002b56 <TIM_ClockEnable+0xa2>
		RCC_CLOCK_TIM10_ENABLE();
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <TIM_ClockEnable+0xc8>)
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <TIM_ClockEnable+0xc8>)
 8002b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b52:	6453      	str	r3, [r2, #68]	; 0x44
}
 8002b54:	e009      	b.n	8002b6a <TIM_ClockEnable+0xb6>
	}else if (p_timx == TIM11)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a0e      	ldr	r2, [pc, #56]	; (8002b94 <TIM_ClockEnable+0xe0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d105      	bne.n	8002b6a <TIM_ClockEnable+0xb6>
		RCC_CLOCK_TIM11_ENABLE();
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <TIM_ClockEnable+0xc8>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	4a06      	ldr	r2, [pc, #24]	; (8002b7c <TIM_ClockEnable+0xc8>)
 8002b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b68:	6453      	str	r3, [r2, #68]	; 0x44
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40010000 	.word	0x40010000
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40000400 	.word	0x40000400
 8002b84:	40000800 	.word	0x40000800
 8002b88:	40000c00 	.word	0x40000c00
 8002b8c:	40014000 	.word	0x40014000
 8002b90:	40014400 	.word	0x40014400
 8002b94:	40014800 	.word	0x40014800

08002b98 <TIM_InitTimer>:

void TIM_InitTimer(TimerHandle_t *p_handle_timer)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	TIM_ClockEnable(p_handle_timer->p_timx);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff85 	bl	8002ab4 <TIM_ClockEnable>
	// reset flags
	p_handle_timer->p_timx->SR = 0;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]

	// set prescaler
	p_handle_timer->p_timx->PSC = p_handle_timer->timer_config.prescaler;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	881a      	ldrh	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28

	// set arr
	p_handle_timer->p_timx->ARR = p_handle_timer->timer_config.autoreload;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	885a      	ldrh	r2, [r3, #2]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	62da      	str	r2, [r3, #44]	; 0x2c

	// start timer
	p_handle_timer->p_timx->CR1 |= TIM_CR1_CEN;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <TIM_EnableIRQ>:

void TIM_EnableIRQ(TimerHandle_t *p_handle_timer, uint8_t irq_flag)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	70fb      	strb	r3, [r7, #3]
	p_handle_timer->p_timx->DIER |= (0x01 << irq_flag);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	60da      	str	r2, [r3, #12]
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <TIM_ClearUpdateFlag>:

void TIM_ClearUpdateFlag(TIM_TypeDef *p_timx)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
	p_timx->SR &= ~(TIM_SR_UIF);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f023 0201 	bic.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	611a      	str	r2, [r3, #16]
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <TIM_StartTimer>:

void TIM_StartTimer(TimerHandle_t *p_handle_timer)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
	p_handle_timer->p_timx->CR1 |= TIM_CR1_CEN;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <GPIO_ClockEnable>:
 *
 * @param[*GPIO] - base address of gpiox peripheral
 * @return - void
 */
static void GPIO_ClockEnable(GPIO_TypeDef *GPIO)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	if (GPIO == GPIOA)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a23      	ldr	r2, [pc, #140]	; (8002cec <GPIO_ClockEnable+0x98>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d106      	bne.n	8002c72 <GPIO_ClockEnable+0x1e>
	{
		RCC_CLOCK_GPIOA_ENABLE();
 8002c64:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <GPIO_ClockEnable+0x9c>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	4a21      	ldr	r2, [pc, #132]	; (8002cf0 <GPIO_ClockEnable+0x9c>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6313      	str	r3, [r2, #48]	; 0x30
	else if (GPIO == GPIOH)
	{
		RCC_CLOCK_GPIOH_ENABLE();
	}

}
 8002c70:	e035      	b.n	8002cde <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOB)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <GPIO_ClockEnable+0xa0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d106      	bne.n	8002c88 <GPIO_ClockEnable+0x34>
		RCC_CLOCK_GPIOB_ENABLE();
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <GPIO_ClockEnable+0x9c>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a1c      	ldr	r2, [pc, #112]	; (8002cf0 <GPIO_ClockEnable+0x9c>)
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002c86:	e02a      	b.n	8002cde <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOC)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <GPIO_ClockEnable+0xa4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d106      	bne.n	8002c9e <GPIO_ClockEnable+0x4a>
		RCC_CLOCK_GPIOC_ENABLE();
 8002c90:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <GPIO_ClockEnable+0x9c>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	4a16      	ldr	r2, [pc, #88]	; (8002cf0 <GPIO_ClockEnable+0x9c>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002c9c:	e01f      	b.n	8002cde <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOD)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a16      	ldr	r2, [pc, #88]	; (8002cfc <GPIO_ClockEnable+0xa8>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d106      	bne.n	8002cb4 <GPIO_ClockEnable+0x60>
		RCC_CLOCK_GPIOD_ENABLE();
 8002ca6:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <GPIO_ClockEnable+0x9c>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <GPIO_ClockEnable+0x9c>)
 8002cac:	f043 0308 	orr.w	r3, r3, #8
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002cb2:	e014      	b.n	8002cde <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <GPIO_ClockEnable+0xac>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d106      	bne.n	8002cca <GPIO_ClockEnable+0x76>
		RCC_CLOCK_GPIOE_ENABLE();
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <GPIO_ClockEnable+0x9c>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	4a0b      	ldr	r2, [pc, #44]	; (8002cf0 <GPIO_ClockEnable+0x9c>)
 8002cc2:	f043 0310 	orr.w	r3, r3, #16
 8002cc6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002cc8:	e009      	b.n	8002cde <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOH)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <GPIO_ClockEnable+0xb0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d105      	bne.n	8002cde <GPIO_ClockEnable+0x8a>
		RCC_CLOCK_GPIOH_ENABLE();
 8002cd2:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <GPIO_ClockEnable+0x9c>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a06      	ldr	r2, [pc, #24]	; (8002cf0 <GPIO_ClockEnable+0x9c>)
 8002cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40020000 	.word	0x40020000
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40020400 	.word	0x40020400
 8002cf8:	40020800 	.word	0x40020800
 8002cfc:	40020c00 	.word	0x40020c00
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40021c00 	.word	0x40021c00

08002d08 <GPIO_InitPin>:
 *
 * @param[*hGPIO] - handler to GPIO structure that contains peripheral base address and pin configuration
 * @return - void
 */
void GPIO_InitPin(GPIO_Handle_t *hGPIO)
{
 8002d08:	b590      	push	{r4, r7, lr}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

	//enable clock
	GPIO_ClockEnable(hGPIO->pGPIOx);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff9d 	bl	8002c54 <GPIO_ClockEnable>

	// mode selection
	if (hGPIO->PinConfig.Mode < GPIO_PIN_MODE_EXTI_FT)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	795b      	ldrb	r3, [r3, #5]
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d81f      	bhi.n	8002d62 <GPIO_InitPin+0x5a>
	{
		// non IRQ mode
	hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	791b      	ldrb	r3, [r3, #4]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2103      	movs	r1, #3
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	4619      	mov	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	400a      	ands	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]
	hGPIO->pGPIOx->MODER |= hGPIO->PinConfig.Mode << (hGPIO->PinConfig.PinNumber * 2);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	795b      	ldrb	r3, [r3, #5]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	791b      	ldrb	r3, [r3, #4]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	4619      	mov	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e0a9      	b.n	8002eb6 <GPIO_InitPin+0x1ae>
	else
	{
		//IRQ mode

		//set as input
		hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	791b      	ldrb	r3, [r3, #4]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2103      	movs	r1, #3
 8002d70:	fa01 f303 	lsl.w	r3, r1, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	4619      	mov	r1, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	400a      	ands	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]
		//interrupt mask
		EXTI->IMR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8002d80:	4b9e      	ldr	r3, [pc, #632]	; (8002ffc <GPIO_InitPin+0x2f4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	7912      	ldrb	r2, [r2, #4]
 8002d88:	4611      	mov	r1, r2
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	408a      	lsls	r2, r1
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4a9a      	ldr	r2, [pc, #616]	; (8002ffc <GPIO_InitPin+0x2f4>)
 8002d92:	430b      	orrs	r3, r1
 8002d94:	6013      	str	r3, [r2, #0]

		//rising/falling trigger
		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	795b      	ldrb	r3, [r3, #5]
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d003      	beq.n	8002da6 <GPIO_InitPin+0x9e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	795b      	ldrb	r3, [r3, #5]
 8002da2:	2b06      	cmp	r3, #6
 8002da4:	d10a      	bne.n	8002dbc <GPIO_InitPin+0xb4>
		{
			EXTI->FTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8002da6:	4b95      	ldr	r3, [pc, #596]	; (8002ffc <GPIO_InitPin+0x2f4>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	7912      	ldrb	r2, [r2, #4]
 8002dae:	4611      	mov	r1, r2
 8002db0:	2201      	movs	r2, #1
 8002db2:	408a      	lsls	r2, r1
 8002db4:	4611      	mov	r1, r2
 8002db6:	4a91      	ldr	r2, [pc, #580]	; (8002ffc <GPIO_InitPin+0x2f4>)
 8002db8:	430b      	orrs	r3, r1
 8002dba:	60d3      	str	r3, [r2, #12]
		}

		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_RT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	795b      	ldrb	r3, [r3, #5]
 8002dc0:	2b05      	cmp	r3, #5
 8002dc2:	d003      	beq.n	8002dcc <GPIO_InitPin+0xc4>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	795b      	ldrb	r3, [r3, #5]
 8002dc8:	2b06      	cmp	r3, #6
 8002dca:	d10a      	bne.n	8002de2 <GPIO_InitPin+0xda>
		{
			EXTI->RTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8002dcc:	4b8b      	ldr	r3, [pc, #556]	; (8002ffc <GPIO_InitPin+0x2f4>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	7912      	ldrb	r2, [r2, #4]
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	408a      	lsls	r2, r1
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4a87      	ldr	r2, [pc, #540]	; (8002ffc <GPIO_InitPin+0x2f4>)
 8002dde:	430b      	orrs	r3, r1
 8002de0:	6093      	str	r3, [r2, #8]
		}

		//enable NVIC interrupt
		if (hGPIO->PinConfig.PinNumber < GPIO_PIN_5)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	791b      	ldrb	r3, [r3, #4]
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d80c      	bhi.n	8002e04 <GPIO_InitPin+0xfc>
		{
			// positions for EXTI interrupts in NVIC vector table are 6-10
			NVIC->ISER[0] |= (0b1 << (hGPIO->PinConfig.PinNumber + 6));
 8002dea:	4b85      	ldr	r3, [pc, #532]	; (8003000 <GPIO_InitPin+0x2f8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	7912      	ldrb	r2, [r2, #4]
 8002df2:	3206      	adds	r2, #6
 8002df4:	2101      	movs	r1, #1
 8002df6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4a80      	ldr	r2, [pc, #512]	; (8003000 <GPIO_InitPin+0x2f8>)
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e010      	b.n	8002e26 <GPIO_InitPin+0x11e>
		}
		else if (hGPIO->PinConfig.PinNumber < GPIO_PIN_10)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	791b      	ldrb	r3, [r3, #4]
 8002e08:	2b09      	cmp	r3, #9
 8002e0a:	d806      	bhi.n	8002e1a <GPIO_InitPin+0x112>
		{
			// position for EXTI9_5 is 23
			NVIC->ISER[0] |= (0b1 << 23);
 8002e0c:	4b7c      	ldr	r3, [pc, #496]	; (8003000 <GPIO_InitPin+0x2f8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a7b      	ldr	r2, [pc, #492]	; (8003000 <GPIO_InitPin+0x2f8>)
 8002e12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	e005      	b.n	8002e26 <GPIO_InitPin+0x11e>
		}
		else
		{
			// position for EXTI15_10 is 40
			NVIC->ISER[1] |= (0b1 << 8);
 8002e1a:	4b79      	ldr	r3, [pc, #484]	; (8003000 <GPIO_InitPin+0x2f8>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4a78      	ldr	r2, [pc, #480]	; (8003000 <GPIO_InitPin+0x2f8>)
 8002e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e24:	6053      	str	r3, [r2, #4]
		}

		// set SYSCFG for external IRQ
		// enable clock
		RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002e26:	4b77      	ldr	r3, [pc, #476]	; (8003004 <GPIO_InitPin+0x2fc>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	4a76      	ldr	r2, [pc, #472]	; (8003004 <GPIO_InitPin+0x2fc>)
 8002e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e30:	6453      	str	r3, [r2, #68]	; 0x44
		// get 4 bits code for certain port
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(hGPIO->pGPIOx);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a74      	ldr	r2, [pc, #464]	; (8003008 <GPIO_InitPin+0x300>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d024      	beq.n	8002e86 <GPIO_InitPin+0x17e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a72      	ldr	r2, [pc, #456]	; (800300c <GPIO_InitPin+0x304>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01d      	beq.n	8002e82 <GPIO_InitPin+0x17a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a71      	ldr	r2, [pc, #452]	; (8003010 <GPIO_InitPin+0x308>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d016      	beq.n	8002e7e <GPIO_InitPin+0x176>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a6f      	ldr	r2, [pc, #444]	; (8003014 <GPIO_InitPin+0x30c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00f      	beq.n	8002e7a <GPIO_InitPin+0x172>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a6e      	ldr	r2, [pc, #440]	; (8003018 <GPIO_InitPin+0x310>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d008      	beq.n	8002e76 <GPIO_InitPin+0x16e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a6c      	ldr	r2, [pc, #432]	; (800301c <GPIO_InitPin+0x314>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <GPIO_InitPin+0x16a>
 8002e6e:	2307      	movs	r3, #7
 8002e70:	e00a      	b.n	8002e88 <GPIO_InitPin+0x180>
 8002e72:	2300      	movs	r3, #0
 8002e74:	e008      	b.n	8002e88 <GPIO_InitPin+0x180>
 8002e76:	2304      	movs	r3, #4
 8002e78:	e006      	b.n	8002e88 <GPIO_InitPin+0x180>
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e004      	b.n	8002e88 <GPIO_InitPin+0x180>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e002      	b.n	8002e88 <GPIO_InitPin+0x180>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <GPIO_InitPin+0x180>
 8002e86:	2300      	movs	r3, #0
 8002e88:	73fb      	strb	r3, [r7, #15]
		// put it in syscfg register
		SYSCFG->EXTICR[hGPIO->PinConfig.PinNumber / 4] |= (portcode << ((hGPIO->PinConfig.PinNumber % 4) * 4));
 8002e8a:	4a65      	ldr	r2, [pc, #404]	; (8003020 <GPIO_InitPin+0x318>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	791b      	ldrb	r3, [r3, #4]
 8002e90:	089b      	lsrs	r3, r3, #2
 8002e92:	b2d8      	uxtb	r0, r3
 8002e94:	4603      	mov	r3, r0
 8002e96:	3302      	adds	r3, #2
 8002e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9c:	7bf9      	ldrb	r1, [r7, #15]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	7912      	ldrb	r2, [r2, #4]
 8002ea2:	f002 0203 	and.w	r2, r2, #3
 8002ea6:	0092      	lsls	r2, r2, #2
 8002ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eac:	495c      	ldr	r1, [pc, #368]	; (8003020 <GPIO_InitPin+0x318>)
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	1c83      	adds	r3, r0, #2
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	// set speed and output type for mode output or AF
	if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_OUTPUT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	795b      	ldrb	r3, [r3, #5]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d003      	beq.n	8002ec6 <GPIO_InitPin+0x1be>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	795b      	ldrb	r3, [r3, #5]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d13b      	bne.n	8002f3e <GPIO_InitPin+0x236>
	{
		//speed selection
		hGPIO->pGPIOx->OSPEEDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	791b      	ldrb	r3, [r3, #4]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	2103      	movs	r1, #3
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	4619      	mov	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	609a      	str	r2, [r3, #8]
		hGPIO->pGPIOx->OSPEEDR |= hGPIO->PinConfig.OutputSpeed << (hGPIO->PinConfig.PinNumber * 2);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	79db      	ldrb	r3, [r3, #7]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	791b      	ldrb	r3, [r3, #4]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	4619      	mov	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]

		//output type selection
		hGPIO->pGPIOx->OTYPER &= ~(0b1 << (hGPIO->PinConfig.PinNumber));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	791b      	ldrb	r3, [r3, #4]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	2301      	movs	r3, #1
 8002f12:	408b      	lsls	r3, r1
 8002f14:	43db      	mvns	r3, r3
 8002f16:	4619      	mov	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	400a      	ands	r2, r1
 8002f1e:	605a      	str	r2, [r3, #4]
		hGPIO->pGPIOx->OTYPER |= hGPIO->PinConfig.OutputType << (hGPIO->PinConfig.PinNumber);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	799b      	ldrb	r3, [r3, #6]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	791b      	ldrb	r3, [r3, #4]
 8002f30:	fa01 f303 	lsl.w	r3, r1, r3
 8002f34:	4619      	mov	r1, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
	}

	// set alternate function bits
	if (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	795b      	ldrb	r3, [r3, #5]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d137      	bne.n	8002fb6 <GPIO_InitPin+0x2ae>
	{
		// clear 4 AF bits and set new value
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] &= ~(15UL << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	7912      	ldrb	r2, [r2, #4]
 8002f4e:	08d2      	lsrs	r2, r2, #3
 8002f50:	b2d0      	uxtb	r0, r2
 8002f52:	4602      	mov	r2, r0
 8002f54:	3208      	adds	r2, #8
 8002f56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	791b      	ldrb	r3, [r3, #4]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	220f      	movs	r2, #15
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4011      	ands	r1, r2
 8002f72:	f100 0208 	add.w	r2, r0, #8
 8002f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] |= (hGPIO->PinConfig.AF << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	7912      	ldrb	r2, [r2, #4]
 8002f82:	08d2      	lsrs	r2, r2, #3
 8002f84:	b2d1      	uxtb	r1, r2
 8002f86:	460a      	mov	r2, r1
 8002f88:	3208      	adds	r2, #8
 8002f8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7a5b      	ldrb	r3, [r3, #9]
 8002f92:	4618      	mov	r0, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	791b      	ldrb	r3, [r3, #4]
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	fa00 f303 	lsl.w	r3, r0, r3
 8002fa2:	461c      	mov	r4, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4608      	mov	r0, r1
 8002faa:	ea42 0104 	orr.w	r1, r2, r4
 8002fae:	f100 0208 	add.w	r2, r0, #8
 8002fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	// pull ups pull downs
	hGPIO->pGPIOx->PUPDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	791b      	ldrb	r3, [r3, #4]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2103      	movs	r1, #3
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	4619      	mov	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	400a      	ands	r2, r1
 8002fd2:	60da      	str	r2, [r3, #12]
	hGPIO->pGPIOx->PUPDR |= (hGPIO->PinConfig.PullUpPullDown << (hGPIO->PinConfig.PinNumber * 2));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7a1b      	ldrb	r3, [r3, #8]
 8002fde:	4619      	mov	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	791b      	ldrb	r3, [r3, #4]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fea:	4619      	mov	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	60da      	str	r2, [r3, #12]

}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd90      	pop	{r4, r7, pc}
 8002ffc:	40013c00 	.word	0x40013c00
 8003000:	e000e100 	.word	0xe000e100
 8003004:	40023800 	.word	0x40023800
 8003008:	40020000 	.word	0x40020000
 800300c:	40020400 	.word	0x40020400
 8003010:	40020800 	.word	0x40020800
 8003014:	40020c00 	.word	0x40020c00
 8003018:	40021000 	.word	0x40021000
 800301c:	40021c00 	.word	0x40021c00
 8003020:	40013800 	.word	0x40013800

08003024 <GPIO_ClearPendingEXTIFlag>:
 *
 * @param[PinNumber] - GPIO_PIN_x @PinNumber
 * @return - void
 */
void GPIO_ClearPendingEXTIFlag(uint8_t PinNumber)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= (0b1 << PinNumber);
 800302e:	4b08      	ldr	r3, [pc, #32]	; (8003050 <GPIO_ClearPendingEXTIFlag+0x2c>)
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	79fa      	ldrb	r2, [r7, #7]
 8003034:	2101      	movs	r1, #1
 8003036:	fa01 f202 	lsl.w	r2, r1, r2
 800303a:	4611      	mov	r1, r2
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <GPIO_ClearPendingEXTIFlag+0x2c>)
 800303e:	430b      	orrs	r3, r1
 8003040:	6153      	str	r3, [r2, #20]
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40013c00 	.word	0x40013c00

08003054 <i2c_clock_enable>:
 *
 * @param[*p_i2cx] - base address of i2c peripheral
 * @return - void
 */
static void i2c_clock_enable(I2C_TypeDef *p_i2cx)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	if (p_i2cx == I2C1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <i2c_clock_enable+0x54>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d106      	bne.n	8003072 <i2c_clock_enable+0x1e>
	{
		RCC_CLOCK_I2C1_ENABLE();
 8003064:	4b11      	ldr	r3, [pc, #68]	; (80030ac <i2c_clock_enable+0x58>)
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	4a10      	ldr	r2, [pc, #64]	; (80030ac <i2c_clock_enable+0x58>)
 800306a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800306e:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else if (p_i2cx == I2C3)
	{
		RCC_CLOCK_I2C3_ENABLE();
	}
}
 8003070:	e014      	b.n	800309c <i2c_clock_enable+0x48>
	else if (p_i2cx == I2C2)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a0e      	ldr	r2, [pc, #56]	; (80030b0 <i2c_clock_enable+0x5c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d106      	bne.n	8003088 <i2c_clock_enable+0x34>
		RCC_CLOCK_I2C2_ENABLE();
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <i2c_clock_enable+0x58>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <i2c_clock_enable+0x58>)
 8003080:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003084:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003086:	e009      	b.n	800309c <i2c_clock_enable+0x48>
	else if (p_i2cx == I2C3)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <i2c_clock_enable+0x60>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d105      	bne.n	800309c <i2c_clock_enable+0x48>
		RCC_CLOCK_I2C3_ENABLE();
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <i2c_clock_enable+0x58>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	4a05      	ldr	r2, [pc, #20]	; (80030ac <i2c_clock_enable+0x58>)
 8003096:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800309a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40005400 	.word	0x40005400
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40005800 	.word	0x40005800
 80030b4:	40005c00 	.word	0x40005c00

080030b8 <i2c_init_gpio_pins>:
 * @param[*p_i2cx] - i2c address
 * @param[alternate_pos] - pins alternative positions select
 * @return - void
 */
static void i2c_init_gpio_pins(I2C_TypeDef *p_i2cx, uint8_t alternate_pos)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t gpio_sda, gpio_scl;

	if (p_i2cx == I2C1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a35      	ldr	r2, [pc, #212]	; (800319c <i2c_init_gpio_pins+0xe4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d112      	bne.n	80030f2 <i2c_init_gpio_pins+0x3a>
	{
		// PB6 SCL
		gpio_scl.pGPIOx = GPIOB;
 80030cc:	4b34      	ldr	r3, [pc, #208]	; (80031a0 <i2c_init_gpio_pins+0xe8>)
 80030ce:	60bb      	str	r3, [r7, #8]
		gpio_scl.PinConfig.PinNumber = GPIO_PIN_6;
 80030d0:	2306      	movs	r3, #6
 80030d2:	733b      	strb	r3, [r7, #12]

		// PB7 SDA
		gpio_sda.pGPIOx = GPIOB;
 80030d4:	4b32      	ldr	r3, [pc, #200]	; (80031a0 <i2c_init_gpio_pins+0xe8>)
 80030d6:	617b      	str	r3, [r7, #20]
		gpio_sda.PinConfig.PinNumber = GPIO_PIN_7;
 80030d8:	2307      	movs	r3, #7
 80030da:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		gpio_scl.PinConfig.AF = GPIO_PIN_AF_AF4;
 80030dc:	2304      	movs	r3, #4
 80030de:	747b      	strb	r3, [r7, #17]
		gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF4;
 80030e0:	2304      	movs	r3, #4
 80030e2:	777b      	strb	r3, [r7, #29]

		if (alternate_pos == 1)
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d103      	bne.n	80030f2 <i2c_init_gpio_pins+0x3a>
		{
			// PB8 SCL
			gpio_scl.PinConfig.PinNumber = GPIO_PIN_8;
 80030ea:	2308      	movs	r3, #8
 80030ec:	733b      	strb	r3, [r7, #12]
			// PB9 SDA
			gpio_sda.PinConfig.PinNumber = GPIO_PIN_9;
 80030ee:	2309      	movs	r3, #9
 80030f0:	763b      	strb	r3, [r7, #24]
		}

	}

	if (p_i2cx == I2C2)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a2b      	ldr	r2, [pc, #172]	; (80031a4 <i2c_init_gpio_pins+0xec>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d112      	bne.n	8003120 <i2c_init_gpio_pins+0x68>
	{

		// PB10 SCL
		gpio_scl.pGPIOx = GPIOB;
 80030fa:	4b29      	ldr	r3, [pc, #164]	; (80031a0 <i2c_init_gpio_pins+0xe8>)
 80030fc:	60bb      	str	r3, [r7, #8]
		gpio_scl.PinConfig.PinNumber = GPIO_PIN_10;
 80030fe:	230a      	movs	r3, #10
 8003100:	733b      	strb	r3, [r7, #12]

		// PB11 SDA
		gpio_sda.pGPIOx = GPIOB;
 8003102:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <i2c_init_gpio_pins+0xe8>)
 8003104:	617b      	str	r3, [r7, #20]
		gpio_sda.PinConfig.PinNumber = GPIO_PIN_11;
 8003106:	230b      	movs	r3, #11
 8003108:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		gpio_scl.PinConfig.AF = GPIO_PIN_AF_AF4;
 800310a:	2304      	movs	r3, #4
 800310c:	747b      	strb	r3, [r7, #17]
		gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF4;
 800310e:	2304      	movs	r3, #4
 8003110:	777b      	strb	r3, [r7, #29]

		if (alternate_pos == 1)
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d103      	bne.n	8003120 <i2c_init_gpio_pins+0x68>
		{
			// PB3 SDA
			gpio_sda.PinConfig.PinNumber = GPIO_PIN_3;
 8003118:	2303      	movs	r3, #3
 800311a:	763b      	strb	r3, [r7, #24]
			gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF9;
 800311c:	2309      	movs	r3, #9
 800311e:	777b      	strb	r3, [r7, #29]
		}

	}

	if (p_i2cx == I2C3)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a21      	ldr	r2, [pc, #132]	; (80031a8 <i2c_init_gpio_pins+0xf0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d11a      	bne.n	800315e <i2c_init_gpio_pins+0xa6>
	{

		// PA8 SCL
		gpio_scl.pGPIOx = GPIOA;
 8003128:	4b20      	ldr	r3, [pc, #128]	; (80031ac <i2c_init_gpio_pins+0xf4>)
 800312a:	60bb      	str	r3, [r7, #8]
		gpio_scl.PinConfig.PinNumber = GPIO_PIN_8;
 800312c:	2308      	movs	r3, #8
 800312e:	733b      	strb	r3, [r7, #12]

		// PB9 SDA
		gpio_sda.pGPIOx = GPIOB;
 8003130:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <i2c_init_gpio_pins+0xe8>)
 8003132:	617b      	str	r3, [r7, #20]
		gpio_sda.PinConfig.PinNumber = GPIO_PIN_4;
 8003134:	2304      	movs	r3, #4
 8003136:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		gpio_scl.PinConfig.AF = GPIO_PIN_AF_AF4;
 8003138:	2304      	movs	r3, #4
 800313a:	747b      	strb	r3, [r7, #17]
		gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF4;
 800313c:	2304      	movs	r3, #4
 800313e:	777b      	strb	r3, [r7, #29]

		if (alternate_pos == 1)
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d10b      	bne.n	800315e <i2c_init_gpio_pins+0xa6>
		{
			RCC_CLOCK_GPIOC_ENABLE();
 8003146:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <i2c_init_gpio_pins+0xf8>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	4a19      	ldr	r2, [pc, #100]	; (80031b0 <i2c_init_gpio_pins+0xf8>)
 800314c:	f043 0304 	orr.w	r3, r3, #4
 8003150:	6313      	str	r3, [r2, #48]	; 0x30
			// PC9 SDA
			gpio_sda.pGPIOx = GPIOC;
 8003152:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <i2c_init_gpio_pins+0xfc>)
 8003154:	617b      	str	r3, [r7, #20]
			gpio_sda.PinConfig.PinNumber = GPIO_PIN_9;
 8003156:	2309      	movs	r3, #9
 8003158:	763b      	strb	r3, [r7, #24]

			// Alternate Function
			gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF9;
 800315a:	2309      	movs	r3, #9
 800315c:	777b      	strb	r3, [r7, #29]
		}

	}

	// Mode AF
	gpio_scl.PinConfig.Mode = GPIO_PIN_MODE_AF;
 800315e:	2302      	movs	r3, #2
 8003160:	737b      	strb	r3, [r7, #13]
	gpio_sda.PinConfig.Mode = GPIO_PIN_MODE_AF;
 8003162:	2302      	movs	r3, #2
 8003164:	767b      	strb	r3, [r7, #25]

	// Output type open drain
	gpio_scl.PinConfig.OutputType = GPIO_PIN_OT_OD;
 8003166:	2301      	movs	r3, #1
 8003168:	73bb      	strb	r3, [r7, #14]
	gpio_sda.PinConfig.OutputType = GPIO_PIN_OT_OD;
 800316a:	2301      	movs	r3, #1
 800316c:	76bb      	strb	r3, [r7, #26]

	// Output speed very high
	gpio_scl.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 800316e:	2303      	movs	r3, #3
 8003170:	73fb      	strb	r3, [r7, #15]
	gpio_sda.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 8003172:	2303      	movs	r3, #3
 8003174:	76fb      	strb	r3, [r7, #27]

	// Pull ups
	gpio_scl.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	743b      	strb	r3, [r7, #16]
	gpio_sda.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	773b      	strb	r3, [r7, #28]

	GPIO_InitPin(&gpio_sda);
 800317e:	f107 0314 	add.w	r3, r7, #20
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fdc0 	bl	8002d08 <GPIO_InitPin>
	GPIO_InitPin(&gpio_scl);
 8003188:	f107 0308 	add.w	r3, r7, #8
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fdbb 	bl	8002d08 <GPIO_InitPin>

}
 8003192:	bf00      	nop
 8003194:	3720      	adds	r7, #32
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40005400 	.word	0x40005400
 80031a0:	40020400 	.word	0x40020400
 80031a4:	40005800 	.word	0x40005800
 80031a8:	40005c00 	.word	0x40005c00
 80031ac:	40020000 	.word	0x40020000
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40020800 	.word	0x40020800

080031b8 <i2c_init>:
 *
 * @param[*p_handle_i2c] - handler to i2c structure
 * @return - void
 */
uint8_t i2c_init(i2c_handle_t *p_handle_i2c)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
	// enable peripheral clock
	i2c_clock_enable(p_handle_i2c->p_i2cx);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff ff45 	bl	8003054 <i2c_clock_enable>

	// init GPIO pins
	i2c_init_gpio_pins(p_handle_i2c->p_i2cx, 1);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2101      	movs	r1, #1
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff71 	bl	80030b8 <i2c_init_gpio_pins>

	//reset I2C
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_SWRST;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031e4:	601a      	str	r2, [r3, #0]
	p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_SWRST);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031f4:	601a      	str	r2, [r3, #0]

	// check frequency limits
	if (p_handle_i2c->i2c_config.abp1_freq_mhz < I2C_FREQUENCY_MINIMUM || p_handle_i2c->i2c_config.abp1_freq_mhz > I2C_FREQUENCY_MAXIMUM)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	791b      	ldrb	r3, [r3, #4]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d903      	bls.n	8003206 <i2c_init+0x4e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	791b      	ldrb	r3, [r3, #4]
 8003202:	2b32      	cmp	r3, #50	; 0x32
 8003204:	d901      	bls.n	800320a <i2c_init+0x52>
	{
		return I2C_ERROR_WRONG_FREQUENCY;
 8003206:	2301      	movs	r3, #1
 8003208:	e0af      	b.n	800336a <i2c_init+0x1b2>
	}

	// set frequency (same as ABP1 frequency)
	p_handle_i2c->p_i2cx->CR2 &= ~(I2C_CR2_FREQ);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003218:	605a      	str	r2, [r3, #4]
	p_handle_i2c->p_i2cx->CR2 |= (p_handle_i2c->i2c_config.abp1_freq_mhz << I2C_CR2_FREQ_Pos);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	791b      	ldrb	r3, [r3, #4]
 8003224:	4619      	mov	r1, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]

	// set speed
	uint16_t temp_ccr, temp_trise;
	// set slow mode, reset DUTY
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_FS);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800323c:	61da      	str	r2, [r3, #28]
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_DUTY);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800324c:	61da      	str	r2, [r3, #28]

	// CCR calculation for slow mode -> values are coming from RM CCR register and result is in [ns]
	// (Thigh + Tlow) / (CEOFF * PCLK)
	temp_ccr = (I2C_CCR_SM_THIGH + I2C_CCR_SM_TLOW) / (I2C_CCR_SM_COEFF * (1000 / p_handle_i2c->i2c_config.abp1_freq_mhz));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	791b      	ldrb	r3, [r3, #4]
 8003252:	461a      	mov	r2, r3
 8003254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003258:	fb93 f3f2 	sdiv	r3, r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003262:	fbb2 f3f3 	udiv	r3, r2, r3
 8003266:	81fb      	strh	r3, [r7, #14]

	// TRISE calculation for slow mode -> equation is from RM
	temp_trise = ((I2C_CCR_SM_TR_SCL * p_handle_i2c->i2c_config.abp1_freq_mhz) / 1000) + 1;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	791b      	ldrb	r3, [r3, #4]
 800326c:	461a      	mov	r2, r3
 800326e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003272:	fb03 f302 	mul.w	r3, r3, r2
 8003276:	4a3f      	ldr	r2, [pc, #252]	; (8003374 <i2c_init+0x1bc>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	099b      	lsrs	r3, r3, #6
 800327e:	b29b      	uxth	r3, r3
 8003280:	3301      	adds	r3, #1
 8003282:	81bb      	strh	r3, [r7, #12]

	// fast mode
	if (p_handle_i2c->i2c_config.speed != I2C_SPEED_SLOW)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	795b      	ldrb	r3, [r3, #5]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d043      	beq.n	8003314 <i2c_init+0x15c>
	{
		// set fast mode
		p_handle_i2c->p_i2cx->CCR |= I2C_CCR_FS;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69da      	ldr	r2, [r3, #28]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800329a:	61da      	str	r2, [r3, #28]
		// calculate CCR for fast mode with DUTY 0
		temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW) / (I2C_CCR_FM_COEFF_DUTY0 * (1000 / p_handle_i2c->i2c_config.abp1_freq_mhz));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	791b      	ldrb	r3, [r3, #4]
 80032a0:	461a      	mov	r2, r3
 80032a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80032aa:	461a      	mov	r2, r3
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	81fb      	strh	r3, [r7, #14]
		// calculate TRISE for fast mode
		temp_trise = ((I2C_CCR_FM_TR_SCL * p_handle_i2c->i2c_config.abp1_freq_mhz) / 1000) + 1;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	791b      	ldrb	r3, [r3, #4]
 80032c0:	461a      	mov	r2, r3
 80032c2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80032c6:	fb03 f302 	mul.w	r3, r3, r2
 80032ca:	4a2a      	ldr	r2, [pc, #168]	; (8003374 <i2c_init+0x1bc>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	099b      	lsrs	r3, r3, #6
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3301      	adds	r3, #1
 80032d6:	81bb      	strh	r3, [r7, #12]
		if (p_handle_i2c->i2c_config.speed == I2C_SPEED_FAST_DUTY1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	795b      	ldrb	r3, [r3, #5]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d119      	bne.n	8003314 <i2c_init+0x15c>
		{
			// set DUTY flag
			p_handle_i2c->p_i2cx->CCR |= I2C_CCR_DUTY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ee:	61da      	str	r2, [r3, #28]
			// calculate CCR with fast mode DUTY1
			temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW) / (I2C_CCR_FM_COEFF_DUTY1 * (1000 / p_handle_i2c->i2c_config.abp1_freq_mhz));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	791b      	ldrb	r3, [r3, #4]
 80032f4:	461a      	mov	r2, r3
 80032f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80032fe:	461a      	mov	r2, r3
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	009a      	lsls	r2, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	81fb      	strh	r3, [r7, #14]
		}
	}
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_CCR);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003322:	f023 030f 	bic.w	r3, r3, #15
 8003326:	61d3      	str	r3, [r2, #28]
	p_handle_i2c->p_i2cx->CCR |= (temp_ccr << I2C_CCR_CCR_Pos);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	69d9      	ldr	r1, [r3, #28]
 800332e:	89fa      	ldrh	r2, [r7, #14]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	61da      	str	r2, [r3, #28]

	// write correct TRISE to the register
	p_handle_i2c->p_i2cx->TRISE &= ~(I2C_TRISE_TRISE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6a1a      	ldr	r2, [r3, #32]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003346:	621a      	str	r2, [r3, #32]
	p_handle_i2c->p_i2cx->TRISE |= (temp_trise << I2C_TRISE_TRISE_Pos);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6a19      	ldr	r1, [r3, #32]
 800334e:	89ba      	ldrh	r2, [r7, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	621a      	str	r2, [r3, #32]

	// enable I2c
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_PE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]

	return 0;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	10624dd3 	.word	0x10624dd3

08003378 <i2c_send_address>:
 * @param[slave_address] - address to slave in 7 bit addressing mode
 * @param[mode] - send information if master is in reciever or transmitter mode @Mode
 * @return - void
 */
static void i2c_send_address(i2c_handle_t *p_handle_i2c, uint8_t slave_address, uint8_t mode, uint32_t timeout)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	460b      	mov	r3, r1
 8003384:	72fb      	strb	r3, [r7, #11]
 8003386:	4613      	mov	r3, r2
 8003388:	72bb      	strb	r3, [r7, #10]
	uint8_t temp_byte;
	uint32_t temp_timeout = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
	//1.0 Set START BIT
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_ACK;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800339c:	601a      	str	r2, [r3, #0]
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_START;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ac:	601a      	str	r2, [r3, #0]

	//1.1 Wait until SB flag is set
	while (!(I2C_SR1_SB & p_handle_i2c->p_i2cx->SR1))
 80033ae:	e003      	b.n	80033b8 <i2c_send_address+0x40>
		if (temp_timeout > timeout)
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d807      	bhi.n	80033c8 <i2c_send_address+0x50>
	while (!(I2C_SR1_SB & p_handle_i2c->p_i2cx->SR1))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f4      	beq.n	80033b0 <i2c_send_address+0x38>
 80033c6:	e000      	b.n	80033ca <i2c_send_address+0x52>
			break;
 80033c8:	bf00      	nop
		;
	//1.2 Clear SB by reading SR1
	temp_byte = p_handle_i2c->p_i2cx->SR1;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	74fb      	strb	r3, [r7, #19]
	// If transmitting set slave addres LSB to 0, reciever 1
	slave_address &= (~1U);
 80033d2:	7afb      	ldrb	r3, [r7, #11]
 80033d4:	f023 0301 	bic.w	r3, r3, #1
 80033d8:	72fb      	strb	r3, [r7, #11]
	slave_address |= mode;
 80033da:	7afa      	ldrb	r2, [r7, #11]
 80033dc:	7abb      	ldrb	r3, [r7, #10]
 80033de:	4313      	orrs	r3, r2
 80033e0:	72fb      	strb	r3, [r7, #11]
	//2. Put slave address in DR register -
	p_handle_i2c->p_i2cx->DR = slave_address;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	7afa      	ldrb	r2, [r7, #11]
 80033e8:	611a      	str	r2, [r3, #16]


}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <i2c_transmit>:
 * @param[p_data_buffer] - pointer to data buffer that has to be send
 * @param[data_size] - amount of data to be send [in bytes]
 * @return - uint8_t - to return error
 */
uint8_t i2c_transmit(i2c_handle_t *p_handle_i2c, uint8_t slave_address, uint8_t mem_address, uint8_t *p_tx_data_buffer, uint32_t data_size)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	607b      	str	r3, [r7, #4]
 8003402:	460b      	mov	r3, r1
 8003404:	72fb      	strb	r3, [r7, #11]
 8003406:	4613      	mov	r3, r2
 8003408:	72bb      	strb	r3, [r7, #10]

	uint32_t tx_data_to_send = data_size;
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	61fb      	str	r3, [r7, #28]
	uint32_t tx_data_index = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	61bb      	str	r3, [r7, #24]
	uint8_t temp_byte;

	i2c_send_address(p_handle_i2c, slave_address, I2C_MODE_TRANSMITTER, 400000);
 8003412:	7af9      	ldrb	r1, [r7, #11]
 8003414:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <i2c_transmit+0xc0>)
 8003416:	2200      	movs	r2, #0
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7ff ffad 	bl	8003378 <i2c_send_address>

	// wait until ADDR is set
	while (!(I2C_SR1_ADDR & p_handle_i2c->p_i2cx->SR1))
 800341e:	bf00      	nop
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f8      	beq.n	8003420 <i2c_transmit+0x28>
		;
	//4. ADDR is cleared by reading SR1 , Read SR2
	temp_byte = p_handle_i2c->p_i2cx->SR1;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	75fb      	strb	r3, [r7, #23]
	temp_byte = p_handle_i2c->p_i2cx->SR2;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	75fb      	strb	r3, [r7, #23]

//5. TxE bit is set when acknowledge bit is sent
	while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_TXE))
 800343e:	bf00      	nop
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f8      	beq.n	8003440 <i2c_transmit+0x48>
		;
//6. Write memory address to DR to clear TxE
	p_handle_i2c->p_i2cx->DR = mem_address;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	7aba      	ldrb	r2, [r7, #10]
 8003454:	611a      	str	r2, [r3, #16]

//7. Data transfer
	while (tx_data_to_send > 0)
 8003456:	e027      	b.n	80034a8 <i2c_transmit+0xb0>
	{
		// wait until data register is empty
		while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_TXE))
 8003458:	bf00      	nop
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f8      	beq.n	800345a <i2c_transmit+0x62>
			;

		// put data in data register
		p_handle_i2c->p_i2cx->DR = p_tx_data_buffer[tx_data_index];
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	4413      	add	r3, r2
 800346e:	781a      	ldrb	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	611a      	str	r2, [r3, #16]

		//change counters
		tx_data_to_send--;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3b01      	subs	r3, #1
 800347a:	61fb      	str	r3, [r7, #28]
		tx_data_index++;
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	3301      	adds	r3, #1
 8003480:	61bb      	str	r3, [r7, #24]

//8. After last bit is written to DR register , Set STOP bit  and interface is going back to slave mode
		if (tx_data_to_send == 0)
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10f      	bne.n	80034a8 <i2c_transmit+0xb0>
		{
			// check if data transfer is finsihed
			while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_BTF))
 8003488:	bf00      	nop
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f8      	beq.n	800348a <i2c_transmit+0x92>
				;
			// stop transfer
			p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a6:	601a      	str	r2, [r3, #0]
	while (tx_data_to_send > 0)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1d4      	bne.n	8003458 <i2c_transmit+0x60>

		}

	}

	return 0;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3720      	adds	r7, #32
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	00061a80 	.word	0x00061a80

080034bc <i2c_recieve>:

uint8_t i2c_recieve(i2c_handle_t *p_handle_i2c, uint8_t slave_address, uint8_t *p_rx_data_buffer, uint32_t data_size)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	460b      	mov	r3, r1
 80034ca:	72fb      	strb	r3, [r7, #11]

	uint32_t rx_data_to_get = data_size;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	617b      	str	r3, [r7, #20]
	uint8_t temp_byte;
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_ACK;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034de:	601a      	str	r2, [r3, #0]
	i2c_send_address(p_handle_i2c, slave_address, I2C_MODE_RECIEVER, 400000);
 80034e0:	7af9      	ldrb	r1, [r7, #11]
 80034e2:	4b54      	ldr	r3, [pc, #336]	; (8003634 <i2c_recieve+0x178>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f7ff ff46 	bl	8003378 <i2c_send_address>

	while (!(I2C_SR1_ADDR & p_handle_i2c->p_i2cx->SR1))
 80034ec:	bf00      	nop
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f8      	beq.n	80034ee <i2c_recieve+0x32>
		;

	// single byte recieve
	if (data_size == 1)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	f040 808f 	bne.w	8003622 <i2c_recieve+0x166>
	{
		// Disable acknowledge
		p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_ACK);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003512:	601a      	str	r2, [r3, #0]
		//4. ADDR is cleared by reading SR1 , Read SR2
		temp_byte = p_handle_i2c->p_i2cx->SR1;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	74fb      	strb	r3, [r7, #19]
		temp_byte = p_handle_i2c->p_i2cx->SR2;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	74fb      	strb	r3, [r7, #19]

		// stop comm
		p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003532:	601a      	str	r2, [r3, #0]

		// wait for a byte recieved
		while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 8003534:	bf00      	nop
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f8      	beq.n	8003536 <i2c_recieve+0x7a>
			;

		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6919      	ldr	r1, [r3, #16]
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	4413      	add	r3, r2
 8003554:	b2ca      	uxtb	r2, r1
 8003556:	701a      	strb	r2, [r3, #0]

		return 0;
 8003558:	2300      	movs	r3, #0
 800355a:	e066      	b.n	800362a <i2c_recieve+0x16e>
	// multiple bytes recieve
	while (rx_data_to_get > 2)
	{

		//4. ADDR is cleared by reading SR1 , Read SR2
		temp_byte = p_handle_i2c->p_i2cx->SR1;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	74fb      	strb	r3, [r7, #19]
		temp_byte = p_handle_i2c->p_i2cx->SR2;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	74fb      	strb	r3, [r7, #19]

		// read all the bytes until second last
		while (rx_data_to_get > 2)
 800356c:	e01c      	b.n	80035a8 <i2c_recieve+0xec>
		{
			while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 800356e:	bf00      	nop
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f8      	beq.n	8003570 <i2c_recieve+0xb4>
				;
			p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6919      	ldr	r1, [r3, #16]
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	b2ca      	uxtb	r2, r1
 8003590:	701a      	strb	r2, [r3, #0]
			rx_data_to_get--;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	3b01      	subs	r3, #1
 8003596:	617b      	str	r3, [r7, #20]

			// ack recieve
			p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_ACK;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035a6:	601a      	str	r2, [r3, #0]
		while (rx_data_to_get > 2)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d8df      	bhi.n	800356e <i2c_recieve+0xb2>
		}

		// read second last byte
		while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 80035ae:	bf00      	nop
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f8      	beq.n	80035b0 <i2c_recieve+0xf4>
			;
		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6919      	ldr	r1, [r3, #16]
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	b2ca      	uxtb	r2, r1
 80035d0:	701a      	strb	r2, [r3, #0]
		rx_data_to_get--;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	617b      	str	r3, [r7, #20]

		// after second last byte clear ACK and set stop
		p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_ACK);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e6:	601a      	str	r2, [r3, #0]
		p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f6:	601a      	str	r2, [r3, #0]

		// recieve last byte
		while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 80035f8:	bf00      	nop
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f8      	beq.n	80035fa <i2c_recieve+0x13e>
			;
		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6919      	ldr	r1, [r3, #16]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	b2ca      	uxtb	r2, r1
 800361a:	701a      	strb	r2, [r3, #0]
		rx_data_to_get--;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	3b01      	subs	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
	while (rx_data_to_get > 2)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d899      	bhi.n	800355c <i2c_recieve+0xa0>

	}
	return 0;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	00061a80 	.word	0x00061a80

08003638 <RCC_InitClock>:
 * 7. Select system clock
 * @param[*GPIO] - base address of gpiox peripheral
 * @return - void
 */
uint8_t RCC_InitClock(RCC_ClockInitTypeDef *p_clock_init)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]

	/* 1. Enable HSI/HSE as main source RCC->CR */

	//enable HSI/HSE
	if (p_clock_init->oscillator_type == RCC_OSCILLATORTYPE_HSI)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10d      	bne.n	8003664 <RCC_InitClock+0x2c>
	{
		// set HSI flag
		RCC->CR |= RCC_CR_HSION;
 8003648:	4b94      	ldr	r3, [pc, #592]	; (800389c <RCC_InitClock+0x264>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a93      	ldr	r2, [pc, #588]	; (800389c <RCC_InitClock+0x264>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6013      	str	r3, [r2, #0]
		// wait until HSI is on
		while (!(RCC->CR & RCC_CR_HSIRDY))
 8003654:	bf00      	nop
 8003656:	4b91      	ldr	r3, [pc, #580]	; (800389c <RCC_InitClock+0x264>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f9      	beq.n	8003656 <RCC_InitClock+0x1e>
 8003662:	e010      	b.n	8003686 <RCC_InitClock+0x4e>
			;
	}
	else if (p_clock_init->oscillator_type == RCC_OSCILLATORTYPE_HSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d10c      	bne.n	8003686 <RCC_InitClock+0x4e>
	{
		// set HSE flag
		RCC->CR |= RCC_CR_HSEON;
 800366c:	4b8b      	ldr	r3, [pc, #556]	; (800389c <RCC_InitClock+0x264>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a8a      	ldr	r2, [pc, #552]	; (800389c <RCC_InitClock+0x264>)
 8003672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003676:	6013      	str	r3, [r2, #0]
		// wait until HSE is on
		while (!(RCC->CR & RCC_CR_HSERDY))
 8003678:	bf00      	nop
 800367a:	4b88      	ldr	r3, [pc, #544]	; (800389c <RCC_InitClock+0x264>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f9      	beq.n	800367a <RCC_InitClock+0x42>
			;
	}

	/* 2. Set regulator scaling PWR->VOS if necessary before PLL is ON */
	PWR->CR &= ~(PWR_CR_VOS);
 8003686:	4b86      	ldr	r3, [pc, #536]	; (80038a0 <RCC_InitClock+0x268>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a85      	ldr	r2, [pc, #532]	; (80038a0 <RCC_InitClock+0x268>)
 800368c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003690:	6013      	str	r3, [r2, #0]
	PWR->CR |= (p_clock_init->vos_scale << PWR_CR_VOS_Pos);
 8003692:	4b83      	ldr	r3, [pc, #524]	; (80038a0 <RCC_InitClock+0x268>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	7852      	ldrb	r2, [r2, #1]
 800369a:	0392      	lsls	r2, r2, #14
 800369c:	4611      	mov	r1, r2
 800369e:	4a80      	ldr	r2, [pc, #512]	; (80038a0 <RCC_InitClock+0x268>)
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6013      	str	r3, [r2, #0]

	/* 3. Configure Flash and Latency settings */
	// enable data, instruction and prefetch cache
	FLASH->ACR |= (FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN);
 80036a4:	4b7f      	ldr	r3, [pc, #508]	; (80038a4 <RCC_InitClock+0x26c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a7e      	ldr	r2, [pc, #504]	; (80038a4 <RCC_InitClock+0x26c>)
 80036aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ae:	6013      	str	r3, [r2, #0]
	// to read correct from flash at certain voltage and frequency latency between read has to be set correctly
	// this table can be found in reference manual
	FLASH->ACR &= ~(FLASH_ACR_LATENCY);
 80036b0:	4b7c      	ldr	r3, [pc, #496]	; (80038a4 <RCC_InitClock+0x26c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a7b      	ldr	r2, [pc, #492]	; (80038a4 <RCC_InitClock+0x26c>)
 80036b6:	f023 0307 	bic.w	r3, r3, #7
 80036ba:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (p_clock_init->flash_latency << FLASH_ACR_LATENCY_Pos);
 80036bc:	4b79      	ldr	r3, [pc, #484]	; (80038a4 <RCC_InitClock+0x26c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	7892      	ldrb	r2, [r2, #2]
 80036c4:	4611      	mov	r1, r2
 80036c6:	4a77      	ldr	r2, [pc, #476]	; (80038a4 <RCC_InitClock+0x26c>)
 80036c8:	430b      	orrs	r3, r1
 80036ca:	6013      	str	r3, [r2, #0]

	/* 4. Configure HCLK, PCLK1, PCLK2 */
	// configure AHB prescaler
	RCC->CFGR &= ~(RCC_CFGR_HPRE);
 80036cc:	4b73      	ldr	r3, [pc, #460]	; (800389c <RCC_InitClock+0x264>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	4a72      	ldr	r2, [pc, #456]	; (800389c <RCC_InitClock+0x264>)
 80036d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (p_clock_init->hpre_prescaler << RCC_CFGR_HPRE_Pos);
 80036d8:	4b70      	ldr	r3, [pc, #448]	; (800389c <RCC_InitClock+0x264>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	78d2      	ldrb	r2, [r2, #3]
 80036e0:	0112      	lsls	r2, r2, #4
 80036e2:	4611      	mov	r1, r2
 80036e4:	4a6d      	ldr	r2, [pc, #436]	; (800389c <RCC_InitClock+0x264>)
 80036e6:	430b      	orrs	r3, r1
 80036e8:	6093      	str	r3, [r2, #8]

	// configure APB1 prescaler
	RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 80036ea:	4b6c      	ldr	r3, [pc, #432]	; (800389c <RCC_InitClock+0x264>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	4a6b      	ldr	r2, [pc, #428]	; (800389c <RCC_InitClock+0x264>)
 80036f0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80036f4:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (p_clock_init->apb1_prescaler << RCC_CFGR_PPRE1_Pos);
 80036f6:	4b69      	ldr	r3, [pc, #420]	; (800389c <RCC_InitClock+0x264>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	7912      	ldrb	r2, [r2, #4]
 80036fe:	0292      	lsls	r2, r2, #10
 8003700:	4611      	mov	r1, r2
 8003702:	4a66      	ldr	r2, [pc, #408]	; (800389c <RCC_InitClock+0x264>)
 8003704:	430b      	orrs	r3, r1
 8003706:	6093      	str	r3, [r2, #8]

	// configure APB2 prescaler
	RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 8003708:	4b64      	ldr	r3, [pc, #400]	; (800389c <RCC_InitClock+0x264>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a63      	ldr	r2, [pc, #396]	; (800389c <RCC_InitClock+0x264>)
 800370e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003712:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (p_clock_init->apb2_prescaler << RCC_CFGR_PPRE2_Pos);
 8003714:	4b61      	ldr	r3, [pc, #388]	; (800389c <RCC_InitClock+0x264>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	7952      	ldrb	r2, [r2, #5]
 800371c:	0352      	lsls	r2, r2, #13
 800371e:	4611      	mov	r1, r2
 8003720:	4a5e      	ldr	r2, [pc, #376]	; (800389c <RCC_InitClock+0x264>)
 8003722:	430b      	orrs	r3, r1
 8003724:	6093      	str	r3, [r2, #8]

	/* 5. Configure PLL */

	// PLL - phase-locked loop - clock generation engine in the MCU
	// if PLL is enable
	if (p_clock_init->pll.state == RCC_PLL_STATE_ENABLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800372c:	2b01      	cmp	r3, #1
 800372e:	f040 808d 	bne.w	800384c <RCC_InitClock+0x214>
	{
		// init PLL source
		RCC->PLLCFGR |= (p_clock_init->pll.source << RCC_PLLCFGR_PLLSRC_Pos);
 8003732:	4b5a      	ldr	r3, [pc, #360]	; (800389c <RCC_InitClock+0x264>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	79d2      	ldrb	r2, [r2, #7]
 800373a:	0592      	lsls	r2, r2, #22
 800373c:	4611      	mov	r1, r2
 800373e:	4a57      	ldr	r2, [pc, #348]	; (800389c <RCC_InitClock+0x264>)
 8003740:	430b      	orrs	r3, r1
 8003742:	6053      	str	r3, [r2, #4]

		// PLLM - division factor for the main PLL
		// It is recommended to put source frequency in range of 1 - 2Mhz (2Mhz recommended)
		// Frequency after this division operation is input of VCO (voltage controlled oscillator)

		if (p_clock_init->pll.pllm < 3 || p_clock_init->pll.pllm > 63)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	7a1b      	ldrb	r3, [r3, #8]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d903      	bls.n	8003754 <RCC_InitClock+0x11c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	7a1b      	ldrb	r3, [r3, #8]
 8003750:	2b3f      	cmp	r3, #63	; 0x3f
 8003752:	d901      	bls.n	8003758 <RCC_InitClock+0x120>
		{
			return PLL_CONFIG_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e09a      	b.n	800388e <RCC_InitClock+0x256>
		}
		RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM);
 8003758:	4b50      	ldr	r3, [pc, #320]	; (800389c <RCC_InitClock+0x264>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a4f      	ldr	r2, [pc, #316]	; (800389c <RCC_InitClock+0x264>)
 800375e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003762:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (p_clock_init->pll.pllm << RCC_PLLCFGR_PLLM_Pos);
 8003764:	4b4d      	ldr	r3, [pc, #308]	; (800389c <RCC_InitClock+0x264>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	7a12      	ldrb	r2, [r2, #8]
 800376c:	4611      	mov	r1, r2
 800376e:	4a4b      	ldr	r2, [pc, #300]	; (800389c <RCC_InitClock+0x264>)
 8003770:	430b      	orrs	r3, r1
 8003772:	6053      	str	r3, [r2, #4]

		// PLLN - multiplication factor for VCO
		// After this operation value should be between 192 and 432 MHz
		// Frequency after this operation is output of VCO

		if (p_clock_init->pll.plln < 2 || p_clock_init->pll.plln > 432)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	895b      	ldrh	r3, [r3, #10]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d904      	bls.n	8003786 <RCC_InitClock+0x14e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	895b      	ldrh	r3, [r3, #10]
 8003780:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003784:	d901      	bls.n	800378a <RCC_InitClock+0x152>
		{
			return PLL_CONFIG_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e081      	b.n	800388e <RCC_InitClock+0x256>
		}
		RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN);
 800378a:	4b44      	ldr	r3, [pc, #272]	; (800389c <RCC_InitClock+0x264>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4a43      	ldr	r2, [pc, #268]	; (800389c <RCC_InitClock+0x264>)
 8003790:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003798:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (p_clock_init->pll.plln << RCC_PLLCFGR_PLLN_Pos);
 800379a:	4b40      	ldr	r3, [pc, #256]	; (800389c <RCC_InitClock+0x264>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	8952      	ldrh	r2, [r2, #10]
 80037a2:	0192      	lsls	r2, r2, #6
 80037a4:	4611      	mov	r1, r2
 80037a6:	4a3d      	ldr	r2, [pc, #244]	; (800389c <RCC_InitClock+0x264>)
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6053      	str	r3, [r2, #4]
		// PLLP - division factor for main system clock
		// After this operation values should not exceed 84MHz
		// Frequency after this operation is frequency of main system clock

		// 2 bits register so value can not be more than 3
		if (p_clock_init->pll.pllp > 3)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	7b1b      	ldrb	r3, [r3, #12]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d901      	bls.n	80037b8 <RCC_InitClock+0x180>
		{
			return PLL_CONFIG_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e06a      	b.n	800388e <RCC_InitClock+0x256>
		}
		RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP);
 80037b8:	4b38      	ldr	r3, [pc, #224]	; (800389c <RCC_InitClock+0x264>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a37      	ldr	r2, [pc, #220]	; (800389c <RCC_InitClock+0x264>)
 80037be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80037c2:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (p_clock_init->pll.pllp << RCC_PLLCFGR_PLLP_Pos);
 80037c4:	4b35      	ldr	r3, [pc, #212]	; (800389c <RCC_InitClock+0x264>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	7b12      	ldrb	r2, [r2, #12]
 80037cc:	0412      	lsls	r2, r2, #16
 80037ce:	4611      	mov	r1, r2
 80037d0:	4a32      	ldr	r2, [pc, #200]	; (800389c <RCC_InitClock+0x264>)
 80037d2:	430b      	orrs	r3, r1
 80037d4:	6053      	str	r3, [r2, #4]
		// PLLQ - ) division factor for USB OTG FS, SDIO and random number generator clocks
		// The USB OTG FS requires a 48 MHz clock to work correctly. The SDIO and the
		// random number generator need a frequency lower than or equal to 48 MHz to work
		// correctly

		if (p_clock_init->pll.pllq < 2 || p_clock_init->pll.pllq > 15)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	7b5b      	ldrb	r3, [r3, #13]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d903      	bls.n	80037e6 <RCC_InitClock+0x1ae>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	7b5b      	ldrb	r3, [r3, #13]
 80037e2:	2b0f      	cmp	r3, #15
 80037e4:	d901      	bls.n	80037ea <RCC_InitClock+0x1b2>
		{
			return PLL_CONFIG_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e051      	b.n	800388e <RCC_InitClock+0x256>
		}
		RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLQ);
 80037ea:	4b2c      	ldr	r3, [pc, #176]	; (800389c <RCC_InitClock+0x264>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4a2b      	ldr	r2, [pc, #172]	; (800389c <RCC_InitClock+0x264>)
 80037f0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80037f4:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (p_clock_init->pll.pllq << RCC_PLLCFGR_PLLQ_Pos);
 80037f6:	4b29      	ldr	r3, [pc, #164]	; (800389c <RCC_InitClock+0x264>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	7b52      	ldrb	r2, [r2, #13]
 80037fe:	0612      	lsls	r2, r2, #24
 8003800:	4611      	mov	r1, r2
 8003802:	4a26      	ldr	r2, [pc, #152]	; (800389c <RCC_InitClock+0x264>)
 8003804:	430b      	orrs	r3, r1
 8003806:	6053      	str	r3, [r2, #4]

		/* 6. Enable the PLL */
		RCC->CR |= (RCC_PLL_STATE_ENABLE << RCC_CR_PLLON_Pos);
 8003808:	4b24      	ldr	r3, [pc, #144]	; (800389c <RCC_InitClock+0x264>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a23      	ldr	r2, [pc, #140]	; (800389c <RCC_InitClock+0x264>)
 800380e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003812:	6013      	str	r3, [r2, #0]

		// wait until PLL is ready
		while (!(RCC->CR & RCC_CR_PLLRDY))
 8003814:	bf00      	nop
 8003816:	4b21      	ldr	r3, [pc, #132]	; (800389c <RCC_InitClock+0x264>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f9      	beq.n	8003816 <RCC_InitClock+0x1de>
			;
		/* 7. Select system clock switch */
		// set PLL as system clock
		RCC->CFGR &= ~(RCC_CFGR_SW);
 8003822:	4b1e      	ldr	r3, [pc, #120]	; (800389c <RCC_InitClock+0x264>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	4a1d      	ldr	r2, [pc, #116]	; (800389c <RCC_InitClock+0x264>)
 8003828:	f023 0303 	bic.w	r3, r3, #3
 800382c:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= RCC_CFGR_SW_PLL;
 800382e:	4b1b      	ldr	r3, [pc, #108]	; (800389c <RCC_InitClock+0x264>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	4a1a      	ldr	r2, [pc, #104]	; (800389c <RCC_InitClock+0x264>)
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	6093      	str	r3, [r2, #8]
		while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
 800383a:	bf00      	nop
 800383c:	4b17      	ldr	r3, [pc, #92]	; (800389c <RCC_InitClock+0x264>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b08      	cmp	r3, #8
 8003846:	d1f9      	bne.n	800383c <RCC_InitClock+0x204>
			;

		return 0;
 8003848:	2300      	movs	r3, #0
 800384a:	e020      	b.n	800388e <RCC_InitClock+0x256>
	}
	else
	{
		/* 6. Disable the PLL */
		RCC->CR = (RCC_PLL_STATE_DISABLE << RCC_CR_PLLON_Pos);
 800384c:	4b13      	ldr	r3, [pc, #76]	; (800389c <RCC_InitClock+0x264>)
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]

		// wait until PLL is disables
		while (!(RCC->CR & RCC_CR_PLLRDY))
 8003852:	bf00      	nop
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <RCC_InitClock+0x264>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f9      	beq.n	8003854 <RCC_InitClock+0x21c>
			;
		/* 7. Select system clock switch */
		// set HSI or HE as main system clock
		RCC->CFGR &= ~(RCC_CFGR_SW);
 8003860:	4b0e      	ldr	r3, [pc, #56]	; (800389c <RCC_InitClock+0x264>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4a0d      	ldr	r2, [pc, #52]	; (800389c <RCC_InitClock+0x264>)
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= (p_clock_init->oscillator_type << RCC_CFGR_SW_Pos);
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <RCC_InitClock+0x264>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	7812      	ldrb	r2, [r2, #0]
 8003874:	4611      	mov	r1, r2
 8003876:	4a09      	ldr	r2, [pc, #36]	; (800389c <RCC_InitClock+0x264>)
 8003878:	430b      	orrs	r3, r1
 800387a:	6093      	str	r3, [r2, #8]

		// wait until HSI/HSE is set as a clock source
		while ((RCC->CFGR & (p_clock_init->oscillator_type << RCC_CFGR_SW_Pos)) != RCC_CFGR_SWS_PLL)
 800387c:	bf00      	nop
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <RCC_InitClock+0x264>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	7812      	ldrb	r2, [r2, #0]
 8003886:	4013      	ands	r3, r2
 8003888:	2b08      	cmp	r3, #8
 800388a:	d1f8      	bne.n	800387e <RCC_InitClock+0x246>
			;

	}

	return 0;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40023800 	.word	0x40023800
 80038a0:	40007000 	.word	0x40007000
 80038a4:	40023c00 	.word	0x40023c00

080038a8 <RCC_CalculatePllclk>:


static uint32_t RCC_CalculatePllclk (uint32_t source)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	uint16_t pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos;;
 80038b0:	4b14      	ldr	r3, [pc, #80]	; (8003904 <RCC_CalculatePllclk+0x5c>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ba:	81fb      	strh	r3, [r7, #14]
	uint16_t plln = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80038bc:	4b11      	ldr	r3, [pc, #68]	; (8003904 <RCC_CalculatePllclk+0x5c>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	099b      	lsrs	r3, r3, #6
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c8:	81bb      	strh	r3, [r7, #12]
	uint16_t pllp = (RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos;;
 80038ca:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <RCC_CalculatePllclk+0x5c>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	0c1b      	lsrs	r3, r3, #16
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	817b      	strh	r3, [r7, #10]

	// pllp register has 2 bits - 00 = 2; 01 = 4; 10 = 6; 11 = 8
	pllp = (pllp * 2) + 2;
 80038d8:	897b      	ldrh	r3, [r7, #10]
 80038da:	3301      	adds	r3, #1
 80038dc:	b29b      	uxth	r3, r3
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	817b      	strh	r3, [r7, #10]

	return (source / pllm) * plln / pllp;
 80038e2:	89fb      	ldrh	r3, [r7, #14]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ea:	89ba      	ldrh	r2, [r7, #12]
 80038ec:	fb02 f203 	mul.w	r2, r2, r3
 80038f0:	897b      	ldrh	r3, [r7, #10]
 80038f2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40023800 	.word	0x40023800

08003908 <RCC_GetApbPrescaler>:

static uint16_t RCC_GetApbPrescaler(uint8_t bitvalue)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
	uint32_t apb_prescaler;

	// convert bit code to prescaler value
	switch(bitvalue)
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	2b07      	cmp	r3, #7
 8003916:	d822      	bhi.n	800395e <RCC_GetApbPrescaler+0x56>
 8003918:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <RCC_GetApbPrescaler+0x18>)
 800391a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391e:	bf00      	nop
 8003920:	08003941 	.word	0x08003941
 8003924:	0800395f 	.word	0x0800395f
 8003928:	0800395f 	.word	0x0800395f
 800392c:	0800395f 	.word	0x0800395f
 8003930:	08003947 	.word	0x08003947
 8003934:	0800394d 	.word	0x0800394d
 8003938:	08003953 	.word	0x08003953
 800393c:	08003959 	.word	0x08003959
	{
	case(RCC_ABP_PRESCALER_NODIV):
		apb_prescaler = 1;
 8003940:	2301      	movs	r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
	break;
 8003944:	e00b      	b.n	800395e <RCC_GetApbPrescaler+0x56>
	case(RCC_ABP_PRESCALER_DIV2):
		apb_prescaler = 2;
 8003946:	2302      	movs	r3, #2
 8003948:	60fb      	str	r3, [r7, #12]
	break;
 800394a:	e008      	b.n	800395e <RCC_GetApbPrescaler+0x56>
	case(RCC_ABP_PRESCALER_DIV4):
		apb_prescaler = 4;
 800394c:	2304      	movs	r3, #4
 800394e:	60fb      	str	r3, [r7, #12]
	break;
 8003950:	e005      	b.n	800395e <RCC_GetApbPrescaler+0x56>
	case(RCC_ABP_PRESCALER_DIV8):
		apb_prescaler = 8;
 8003952:	2308      	movs	r3, #8
 8003954:	60fb      	str	r3, [r7, #12]
	break;
 8003956:	e002      	b.n	800395e <RCC_GetApbPrescaler+0x56>
	case(RCC_ABP_PRESCALER_DIV16):
		apb_prescaler = 16;
 8003958:	2310      	movs	r3, #16
 800395a:	60fb      	str	r3, [r7, #12]
	break;
 800395c:	bf00      	nop
	}

	return apb_prescaler;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	b29b      	uxth	r3, r3
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop

08003970 <RCC_GetAhbPrescaler>:

static uint16_t RCC_GetAhbPrescaler(uint8_t bitvalue)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	71fb      	strb	r3, [r7, #7]
	uint32_t ahb_prescaler;

	// convert bit code to prescaler value
	switch(bitvalue)
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	2b0f      	cmp	r3, #15
 800397e:	d840      	bhi.n	8003a02 <RCC_GetAhbPrescaler+0x92>
 8003980:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <RCC_GetAhbPrescaler+0x18>)
 8003982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003986:	bf00      	nop
 8003988:	080039c9 	.word	0x080039c9
 800398c:	08003a03 	.word	0x08003a03
 8003990:	08003a03 	.word	0x08003a03
 8003994:	08003a03 	.word	0x08003a03
 8003998:	08003a03 	.word	0x08003a03
 800399c:	08003a03 	.word	0x08003a03
 80039a0:	08003a03 	.word	0x08003a03
 80039a4:	08003a03 	.word	0x08003a03
 80039a8:	080039cf 	.word	0x080039cf
 80039ac:	080039d5 	.word	0x080039d5
 80039b0:	080039db 	.word	0x080039db
 80039b4:	080039e1 	.word	0x080039e1
 80039b8:	080039e7 	.word	0x080039e7
 80039bc:	080039ed 	.word	0x080039ed
 80039c0:	080039f3 	.word	0x080039f3
 80039c4:	080039fb 	.word	0x080039fb
	{
	case(RCC_HPRE_PRESCALER_NODIV):
		ahb_prescaler = 1;
 80039c8:	2301      	movs	r3, #1
 80039ca:	60fb      	str	r3, [r7, #12]
	break;
 80039cc:	e019      	b.n	8003a02 <RCC_GetAhbPrescaler+0x92>
	case(RCC_HPRE_PRESCALER_DIV2):
		ahb_prescaler = 2;
 80039ce:	2302      	movs	r3, #2
 80039d0:	60fb      	str	r3, [r7, #12]
	break;
 80039d2:	e016      	b.n	8003a02 <RCC_GetAhbPrescaler+0x92>
	case(RCC_HPRE_PRESCALER_DIV4):
		ahb_prescaler = 4;
 80039d4:	2304      	movs	r3, #4
 80039d6:	60fb      	str	r3, [r7, #12]
	break;
 80039d8:	e013      	b.n	8003a02 <RCC_GetAhbPrescaler+0x92>
	case(RCC_HPRE_PRESCALER_DIV8):
		ahb_prescaler = 8;
 80039da:	2308      	movs	r3, #8
 80039dc:	60fb      	str	r3, [r7, #12]
	break;
 80039de:	e010      	b.n	8003a02 <RCC_GetAhbPrescaler+0x92>
	case(RCC_HPRE_PRESCALER_DIV16):
		ahb_prescaler = 16;
 80039e0:	2310      	movs	r3, #16
 80039e2:	60fb      	str	r3, [r7, #12]
	break;
 80039e4:	e00d      	b.n	8003a02 <RCC_GetAhbPrescaler+0x92>
	case(RCC_HPRE_PRESCALER_DIV64):
		ahb_prescaler = 64;
 80039e6:	2340      	movs	r3, #64	; 0x40
 80039e8:	60fb      	str	r3, [r7, #12]
	break;
 80039ea:	e00a      	b.n	8003a02 <RCC_GetAhbPrescaler+0x92>
	case(RCC_HPRE_PRESCALER_DIV128):
		ahb_prescaler = 128;
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	60fb      	str	r3, [r7, #12]
	break;
 80039f0:	e007      	b.n	8003a02 <RCC_GetAhbPrescaler+0x92>
	case(RCC_HPRE_PRESCALER_DIV256):
		ahb_prescaler = 256;
 80039f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039f6:	60fb      	str	r3, [r7, #12]
	break;
 80039f8:	e003      	b.n	8003a02 <RCC_GetAhbPrescaler+0x92>
	case(RCC_HPRE_PRESCALER_DIV512):
		ahb_prescaler = 512;
 80039fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039fe:	60fb      	str	r3, [r7, #12]
	break;
 8003a00:	bf00      	nop
	}

	return ahb_prescaler;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	b29b      	uxth	r3, r3
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop

08003a14 <RCC_GetSysclk>:

uint32_t RCC_GetSysclk(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
	// calculate sysclk depending on source
	switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a18:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <RCC_GetSysclk+0x54>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d00a      	beq.n	8003a3a <RCC_GetSysclk+0x26>
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d81c      	bhi.n	8003a62 <RCC_GetSysclk+0x4e>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <RCC_GetSysclk+0x1e>
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d002      	beq.n	8003a36 <RCC_GetSysclk+0x22>
 8003a30:	e017      	b.n	8003a62 <RCC_GetSysclk+0x4e>
	{
	case (RCC_CFGR_SWS_HSI):
		return RCC_HSI_FREQUENCY;
 8003a32:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <RCC_GetSysclk+0x58>)
 8003a34:	e016      	b.n	8003a64 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_HSE):
		return RCC_HSE_FREQUENCY;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e014      	b.n	8003a64 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_PLL):

		switch (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <RCC_GetSysclk+0x54>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <RCC_GetSysclk+0x3a>
 8003a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a4a:	d005      	beq.n	8003a58 <RCC_GetSysclk+0x44>

		case (RCC_PLLCFGR_PLLSRC_HSE):
		return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
			break;
		}
		break;
 8003a4c:	e009      	b.n	8003a62 <RCC_GetSysclk+0x4e>
			return RCC_CalculatePllclk(RCC_HSI_FREQUENCY);
 8003a4e:	4807      	ldr	r0, [pc, #28]	; (8003a6c <RCC_GetSysclk+0x58>)
 8003a50:	f7ff ff2a 	bl	80038a8 <RCC_CalculatePllclk>
 8003a54:	4603      	mov	r3, r0
 8003a56:	e005      	b.n	8003a64 <RCC_GetSysclk+0x50>
		return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
 8003a58:	2000      	movs	r0, #0
 8003a5a:	f7ff ff25 	bl	80038a8 <RCC_CalculatePllclk>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	e000      	b.n	8003a64 <RCC_GetSysclk+0x50>
	}

	return 0;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	00f42400 	.word	0x00f42400

08003a70 <RCC_GetHclk>:

uint32_t RCC_GetHclk(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
	uint32_t sysclk = RCC_GetSysclk();
 8003a76:	f7ff ffcd 	bl	8003a14 <RCC_GetSysclk>
 8003a7a:	6078      	str	r0, [r7, #4]
	uint16_t ahb_prescaler = RCC_GetAhbPrescaler((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos);
 8003a7c:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <RCC_GetHclk+0x34>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff ff70 	bl	8003970 <RCC_GetAhbPrescaler>
 8003a90:	4603      	mov	r3, r0
 8003a92:	807b      	strh	r3, [r7, #2]
	return  sysclk / ahb_prescaler;
 8003a94:	887b      	ldrh	r3, [r7, #2]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40023800 	.word	0x40023800

08003aa8 <RCC_GetPclk>:

uint32_t RCC_GetPclk(uint8_t plck_x)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	71fb      	strb	r3, [r7, #7]
	uint32_t hclk = RCC_GetHclk();
 8003ab2:	f7ff ffdd 	bl	8003a70 <RCC_GetHclk>
 8003ab6:	60b8      	str	r0, [r7, #8]
	uint8_t apb_prescaler;
	switch(plck_x)
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d002      	beq.n	8003ac4 <RCC_GetPclk+0x1c>
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d00d      	beq.n	8003ade <RCC_GetPclk+0x36>
 8003ac2:	e019      	b.n	8003af8 <RCC_GetPclk+0x50>
	{
	case(1):
	apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos);
 8003ac4:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <RCC_GetPclk+0x60>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	0a9b      	lsrs	r3, r3, #10
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff ff18 	bl	8003908 <RCC_GetApbPrescaler>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	73fb      	strb	r3, [r7, #15]
	break;
 8003adc:	e00c      	b.n	8003af8 <RCC_GetPclk+0x50>

	case(2):
	apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos);
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <RCC_GetPclk+0x60>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	0b5b      	lsrs	r3, r3, #13
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff ff0b 	bl	8003908 <RCC_GetApbPrescaler>
 8003af2:	4603      	mov	r3, r0
 8003af4:	73fb      	strb	r3, [r7, #15]
	break;
 8003af6:	bf00      	nop
	}

	return hclk / apb_prescaler;
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800

08003b0c <RCC_GetClockFrequencies>:

void RCC_GetClockFrequencies(RCC_ClockFreqs* freqs)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]

	freqs->sysclk = RCC_GetSysclk();
 8003b14:	f7ff ff7e 	bl	8003a14 <RCC_GetSysclk>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	601a      	str	r2, [r3, #0]
	freqs->hclk = RCC_GetHclk();
 8003b1e:	f7ff ffa7 	bl	8003a70 <RCC_GetHclk>
 8003b22:	4602      	mov	r2, r0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	605a      	str	r2, [r3, #4]
	freqs->pclk1 = RCC_GetPclk(1);
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f7ff ffbd 	bl	8003aa8 <RCC_GetPclk>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	609a      	str	r2, [r3, #8]
	freqs->pclk2 = RCC_GetPclk(2);
 8003b34:	2002      	movs	r0, #2
 8003b36:	f7ff ffb7 	bl	8003aa8 <RCC_GetPclk>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	60da      	str	r2, [r3, #12]

	return;
 8003b40:	bf00      	nop
}
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <__errno>:
 8003b48:	4b01      	ldr	r3, [pc, #4]	; (8003b50 <__errno+0x8>)
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000004 	.word	0x20000004

08003b54 <__libc_init_array>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	4d0d      	ldr	r5, [pc, #52]	; (8003b8c <__libc_init_array+0x38>)
 8003b58:	4c0d      	ldr	r4, [pc, #52]	; (8003b90 <__libc_init_array+0x3c>)
 8003b5a:	1b64      	subs	r4, r4, r5
 8003b5c:	10a4      	asrs	r4, r4, #2
 8003b5e:	2600      	movs	r6, #0
 8003b60:	42a6      	cmp	r6, r4
 8003b62:	d109      	bne.n	8003b78 <__libc_init_array+0x24>
 8003b64:	4d0b      	ldr	r5, [pc, #44]	; (8003b94 <__libc_init_array+0x40>)
 8003b66:	4c0c      	ldr	r4, [pc, #48]	; (8003b98 <__libc_init_array+0x44>)
 8003b68:	f001 f9f4 	bl	8004f54 <_init>
 8003b6c:	1b64      	subs	r4, r4, r5
 8003b6e:	10a4      	asrs	r4, r4, #2
 8003b70:	2600      	movs	r6, #0
 8003b72:	42a6      	cmp	r6, r4
 8003b74:	d105      	bne.n	8003b82 <__libc_init_array+0x2e>
 8003b76:	bd70      	pop	{r4, r5, r6, pc}
 8003b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7c:	4798      	blx	r3
 8003b7e:	3601      	adds	r6, #1
 8003b80:	e7ee      	b.n	8003b60 <__libc_init_array+0xc>
 8003b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b86:	4798      	blx	r3
 8003b88:	3601      	adds	r6, #1
 8003b8a:	e7f2      	b.n	8003b72 <__libc_init_array+0x1e>
 8003b8c:	08005568 	.word	0x08005568
 8003b90:	08005568 	.word	0x08005568
 8003b94:	08005568 	.word	0x08005568
 8003b98:	0800556c 	.word	0x0800556c

08003b9c <memcpy>:
 8003b9c:	440a      	add	r2, r1
 8003b9e:	4291      	cmp	r1, r2
 8003ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ba4:	d100      	bne.n	8003ba8 <memcpy+0xc>
 8003ba6:	4770      	bx	lr
 8003ba8:	b510      	push	{r4, lr}
 8003baa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bb2:	4291      	cmp	r1, r2
 8003bb4:	d1f9      	bne.n	8003baa <memcpy+0xe>
 8003bb6:	bd10      	pop	{r4, pc}

08003bb8 <memset>:
 8003bb8:	4402      	add	r2, r0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d100      	bne.n	8003bc2 <memset+0xa>
 8003bc0:	4770      	bx	lr
 8003bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc6:	e7f9      	b.n	8003bbc <memset+0x4>

08003bc8 <rand>:
 8003bc8:	4b17      	ldr	r3, [pc, #92]	; (8003c28 <rand+0x60>)
 8003bca:	b510      	push	{r4, lr}
 8003bcc:	681c      	ldr	r4, [r3, #0]
 8003bce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bd0:	b9b3      	cbnz	r3, 8003c00 <rand+0x38>
 8003bd2:	2018      	movs	r0, #24
 8003bd4:	f000 f888 	bl	8003ce8 <malloc>
 8003bd8:	63a0      	str	r0, [r4, #56]	; 0x38
 8003bda:	b928      	cbnz	r0, 8003be8 <rand+0x20>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <rand+0x64>)
 8003be0:	4813      	ldr	r0, [pc, #76]	; (8003c30 <rand+0x68>)
 8003be2:	214e      	movs	r1, #78	; 0x4e
 8003be4:	f000 f850 	bl	8003c88 <__assert_func>
 8003be8:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <rand+0x6c>)
 8003bea:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <rand+0x70>)
 8003bec:	e9c0 2300 	strd	r2, r3, [r0]
 8003bf0:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <rand+0x74>)
 8003bf2:	6083      	str	r3, [r0, #8]
 8003bf4:	230b      	movs	r3, #11
 8003bf6:	8183      	strh	r3, [r0, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003c00:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003c02:	480f      	ldr	r0, [pc, #60]	; (8003c40 <rand+0x78>)
 8003c04:	690a      	ldr	r2, [r1, #16]
 8003c06:	694b      	ldr	r3, [r1, #20]
 8003c08:	4c0e      	ldr	r4, [pc, #56]	; (8003c44 <rand+0x7c>)
 8003c0a:	4350      	muls	r0, r2
 8003c0c:	fb04 0003 	mla	r0, r4, r3, r0
 8003c10:	fba2 3404 	umull	r3, r4, r2, r4
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	4404      	add	r4, r0
 8003c18:	f144 0000 	adc.w	r0, r4, #0
 8003c1c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8003c20:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003c24:	bd10      	pop	{r4, pc}
 8003c26:	bf00      	nop
 8003c28:	20000004 	.word	0x20000004
 8003c2c:	08005420 	.word	0x08005420
 8003c30:	08005437 	.word	0x08005437
 8003c34:	abcd330e 	.word	0xabcd330e
 8003c38:	e66d1234 	.word	0xe66d1234
 8003c3c:	0005deec 	.word	0x0005deec
 8003c40:	5851f42d 	.word	0x5851f42d
 8003c44:	4c957f2d 	.word	0x4c957f2d

08003c48 <siprintf>:
 8003c48:	b40e      	push	{r1, r2, r3}
 8003c4a:	b500      	push	{lr}
 8003c4c:	b09c      	sub	sp, #112	; 0x70
 8003c4e:	ab1d      	add	r3, sp, #116	; 0x74
 8003c50:	9002      	str	r0, [sp, #8]
 8003c52:	9006      	str	r0, [sp, #24]
 8003c54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c58:	4809      	ldr	r0, [pc, #36]	; (8003c80 <siprintf+0x38>)
 8003c5a:	9107      	str	r1, [sp, #28]
 8003c5c:	9104      	str	r1, [sp, #16]
 8003c5e:	4909      	ldr	r1, [pc, #36]	; (8003c84 <siprintf+0x3c>)
 8003c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c64:	9105      	str	r1, [sp, #20]
 8003c66:	6800      	ldr	r0, [r0, #0]
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	a902      	add	r1, sp, #8
 8003c6c:	f000 f94a 	bl	8003f04 <_svfiprintf_r>
 8003c70:	9b02      	ldr	r3, [sp, #8]
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	b01c      	add	sp, #112	; 0x70
 8003c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c7c:	b003      	add	sp, #12
 8003c7e:	4770      	bx	lr
 8003c80:	20000004 	.word	0x20000004
 8003c84:	ffff0208 	.word	0xffff0208

08003c88 <__assert_func>:
 8003c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c8a:	4614      	mov	r4, r2
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <__assert_func+0x2c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4605      	mov	r5, r0
 8003c94:	68d8      	ldr	r0, [r3, #12]
 8003c96:	b14c      	cbz	r4, 8003cac <__assert_func+0x24>
 8003c98:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <__assert_func+0x30>)
 8003c9a:	9100      	str	r1, [sp, #0]
 8003c9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003ca0:	4906      	ldr	r1, [pc, #24]	; (8003cbc <__assert_func+0x34>)
 8003ca2:	462b      	mov	r3, r5
 8003ca4:	f000 f80e 	bl	8003cc4 <fiprintf>
 8003ca8:	f000 fdea 	bl	8004880 <abort>
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <__assert_func+0x38>)
 8003cae:	461c      	mov	r4, r3
 8003cb0:	e7f3      	b.n	8003c9a <__assert_func+0x12>
 8003cb2:	bf00      	nop
 8003cb4:	20000004 	.word	0x20000004
 8003cb8:	08005496 	.word	0x08005496
 8003cbc:	080054a3 	.word	0x080054a3
 8003cc0:	080054d1 	.word	0x080054d1

08003cc4 <fiprintf>:
 8003cc4:	b40e      	push	{r1, r2, r3}
 8003cc6:	b503      	push	{r0, r1, lr}
 8003cc8:	4601      	mov	r1, r0
 8003cca:	ab03      	add	r3, sp, #12
 8003ccc:	4805      	ldr	r0, [pc, #20]	; (8003ce4 <fiprintf+0x20>)
 8003cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cd2:	6800      	ldr	r0, [r0, #0]
 8003cd4:	9301      	str	r3, [sp, #4]
 8003cd6:	f000 fa3f 	bl	8004158 <_vfiprintf_r>
 8003cda:	b002      	add	sp, #8
 8003cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ce0:	b003      	add	sp, #12
 8003ce2:	4770      	bx	lr
 8003ce4:	20000004 	.word	0x20000004

08003ce8 <malloc>:
 8003ce8:	4b02      	ldr	r3, [pc, #8]	; (8003cf4 <malloc+0xc>)
 8003cea:	4601      	mov	r1, r0
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	f000 b853 	b.w	8003d98 <_malloc_r>
 8003cf2:	bf00      	nop
 8003cf4:	20000004 	.word	0x20000004

08003cf8 <_free_r>:
 8003cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cfa:	2900      	cmp	r1, #0
 8003cfc:	d048      	beq.n	8003d90 <_free_r+0x98>
 8003cfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d02:	9001      	str	r0, [sp, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f1a1 0404 	sub.w	r4, r1, #4
 8003d0a:	bfb8      	it	lt
 8003d0c:	18e4      	addlt	r4, r4, r3
 8003d0e:	f000 fff7 	bl	8004d00 <__malloc_lock>
 8003d12:	4a20      	ldr	r2, [pc, #128]	; (8003d94 <_free_r+0x9c>)
 8003d14:	9801      	ldr	r0, [sp, #4]
 8003d16:	6813      	ldr	r3, [r2, #0]
 8003d18:	4615      	mov	r5, r2
 8003d1a:	b933      	cbnz	r3, 8003d2a <_free_r+0x32>
 8003d1c:	6063      	str	r3, [r4, #4]
 8003d1e:	6014      	str	r4, [r2, #0]
 8003d20:	b003      	add	sp, #12
 8003d22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d26:	f000 bff1 	b.w	8004d0c <__malloc_unlock>
 8003d2a:	42a3      	cmp	r3, r4
 8003d2c:	d90b      	bls.n	8003d46 <_free_r+0x4e>
 8003d2e:	6821      	ldr	r1, [r4, #0]
 8003d30:	1862      	adds	r2, r4, r1
 8003d32:	4293      	cmp	r3, r2
 8003d34:	bf04      	itt	eq
 8003d36:	681a      	ldreq	r2, [r3, #0]
 8003d38:	685b      	ldreq	r3, [r3, #4]
 8003d3a:	6063      	str	r3, [r4, #4]
 8003d3c:	bf04      	itt	eq
 8003d3e:	1852      	addeq	r2, r2, r1
 8003d40:	6022      	streq	r2, [r4, #0]
 8003d42:	602c      	str	r4, [r5, #0]
 8003d44:	e7ec      	b.n	8003d20 <_free_r+0x28>
 8003d46:	461a      	mov	r2, r3
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	b10b      	cbz	r3, 8003d50 <_free_r+0x58>
 8003d4c:	42a3      	cmp	r3, r4
 8003d4e:	d9fa      	bls.n	8003d46 <_free_r+0x4e>
 8003d50:	6811      	ldr	r1, [r2, #0]
 8003d52:	1855      	adds	r5, r2, r1
 8003d54:	42a5      	cmp	r5, r4
 8003d56:	d10b      	bne.n	8003d70 <_free_r+0x78>
 8003d58:	6824      	ldr	r4, [r4, #0]
 8003d5a:	4421      	add	r1, r4
 8003d5c:	1854      	adds	r4, r2, r1
 8003d5e:	42a3      	cmp	r3, r4
 8003d60:	6011      	str	r1, [r2, #0]
 8003d62:	d1dd      	bne.n	8003d20 <_free_r+0x28>
 8003d64:	681c      	ldr	r4, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	6053      	str	r3, [r2, #4]
 8003d6a:	4421      	add	r1, r4
 8003d6c:	6011      	str	r1, [r2, #0]
 8003d6e:	e7d7      	b.n	8003d20 <_free_r+0x28>
 8003d70:	d902      	bls.n	8003d78 <_free_r+0x80>
 8003d72:	230c      	movs	r3, #12
 8003d74:	6003      	str	r3, [r0, #0]
 8003d76:	e7d3      	b.n	8003d20 <_free_r+0x28>
 8003d78:	6825      	ldr	r5, [r4, #0]
 8003d7a:	1961      	adds	r1, r4, r5
 8003d7c:	428b      	cmp	r3, r1
 8003d7e:	bf04      	itt	eq
 8003d80:	6819      	ldreq	r1, [r3, #0]
 8003d82:	685b      	ldreq	r3, [r3, #4]
 8003d84:	6063      	str	r3, [r4, #4]
 8003d86:	bf04      	itt	eq
 8003d88:	1949      	addeq	r1, r1, r5
 8003d8a:	6021      	streq	r1, [r4, #0]
 8003d8c:	6054      	str	r4, [r2, #4]
 8003d8e:	e7c7      	b.n	8003d20 <_free_r+0x28>
 8003d90:	b003      	add	sp, #12
 8003d92:	bd30      	pop	{r4, r5, pc}
 8003d94:	20000568 	.word	0x20000568

08003d98 <_malloc_r>:
 8003d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9a:	1ccd      	adds	r5, r1, #3
 8003d9c:	f025 0503 	bic.w	r5, r5, #3
 8003da0:	3508      	adds	r5, #8
 8003da2:	2d0c      	cmp	r5, #12
 8003da4:	bf38      	it	cc
 8003da6:	250c      	movcc	r5, #12
 8003da8:	2d00      	cmp	r5, #0
 8003daa:	4606      	mov	r6, r0
 8003dac:	db01      	blt.n	8003db2 <_malloc_r+0x1a>
 8003dae:	42a9      	cmp	r1, r5
 8003db0:	d903      	bls.n	8003dba <_malloc_r+0x22>
 8003db2:	230c      	movs	r3, #12
 8003db4:	6033      	str	r3, [r6, #0]
 8003db6:	2000      	movs	r0, #0
 8003db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dba:	f000 ffa1 	bl	8004d00 <__malloc_lock>
 8003dbe:	4921      	ldr	r1, [pc, #132]	; (8003e44 <_malloc_r+0xac>)
 8003dc0:	680a      	ldr	r2, [r1, #0]
 8003dc2:	4614      	mov	r4, r2
 8003dc4:	b99c      	cbnz	r4, 8003dee <_malloc_r+0x56>
 8003dc6:	4f20      	ldr	r7, [pc, #128]	; (8003e48 <_malloc_r+0xb0>)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	b923      	cbnz	r3, 8003dd6 <_malloc_r+0x3e>
 8003dcc:	4621      	mov	r1, r4
 8003dce:	4630      	mov	r0, r6
 8003dd0:	f000 fc86 	bl	80046e0 <_sbrk_r>
 8003dd4:	6038      	str	r0, [r7, #0]
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	4630      	mov	r0, r6
 8003dda:	f000 fc81 	bl	80046e0 <_sbrk_r>
 8003dde:	1c43      	adds	r3, r0, #1
 8003de0:	d123      	bne.n	8003e2a <_malloc_r+0x92>
 8003de2:	230c      	movs	r3, #12
 8003de4:	6033      	str	r3, [r6, #0]
 8003de6:	4630      	mov	r0, r6
 8003de8:	f000 ff90 	bl	8004d0c <__malloc_unlock>
 8003dec:	e7e3      	b.n	8003db6 <_malloc_r+0x1e>
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	1b5b      	subs	r3, r3, r5
 8003df2:	d417      	bmi.n	8003e24 <_malloc_r+0x8c>
 8003df4:	2b0b      	cmp	r3, #11
 8003df6:	d903      	bls.n	8003e00 <_malloc_r+0x68>
 8003df8:	6023      	str	r3, [r4, #0]
 8003dfa:	441c      	add	r4, r3
 8003dfc:	6025      	str	r5, [r4, #0]
 8003dfe:	e004      	b.n	8003e0a <_malloc_r+0x72>
 8003e00:	6863      	ldr	r3, [r4, #4]
 8003e02:	42a2      	cmp	r2, r4
 8003e04:	bf0c      	ite	eq
 8003e06:	600b      	streq	r3, [r1, #0]
 8003e08:	6053      	strne	r3, [r2, #4]
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	f000 ff7e 	bl	8004d0c <__malloc_unlock>
 8003e10:	f104 000b 	add.w	r0, r4, #11
 8003e14:	1d23      	adds	r3, r4, #4
 8003e16:	f020 0007 	bic.w	r0, r0, #7
 8003e1a:	1ac2      	subs	r2, r0, r3
 8003e1c:	d0cc      	beq.n	8003db8 <_malloc_r+0x20>
 8003e1e:	1a1b      	subs	r3, r3, r0
 8003e20:	50a3      	str	r3, [r4, r2]
 8003e22:	e7c9      	b.n	8003db8 <_malloc_r+0x20>
 8003e24:	4622      	mov	r2, r4
 8003e26:	6864      	ldr	r4, [r4, #4]
 8003e28:	e7cc      	b.n	8003dc4 <_malloc_r+0x2c>
 8003e2a:	1cc4      	adds	r4, r0, #3
 8003e2c:	f024 0403 	bic.w	r4, r4, #3
 8003e30:	42a0      	cmp	r0, r4
 8003e32:	d0e3      	beq.n	8003dfc <_malloc_r+0x64>
 8003e34:	1a21      	subs	r1, r4, r0
 8003e36:	4630      	mov	r0, r6
 8003e38:	f000 fc52 	bl	80046e0 <_sbrk_r>
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	d1dd      	bne.n	8003dfc <_malloc_r+0x64>
 8003e40:	e7cf      	b.n	8003de2 <_malloc_r+0x4a>
 8003e42:	bf00      	nop
 8003e44:	20000568 	.word	0x20000568
 8003e48:	2000056c 	.word	0x2000056c

08003e4c <__ssputs_r>:
 8003e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e50:	688e      	ldr	r6, [r1, #8]
 8003e52:	429e      	cmp	r6, r3
 8003e54:	4682      	mov	sl, r0
 8003e56:	460c      	mov	r4, r1
 8003e58:	4690      	mov	r8, r2
 8003e5a:	461f      	mov	r7, r3
 8003e5c:	d838      	bhi.n	8003ed0 <__ssputs_r+0x84>
 8003e5e:	898a      	ldrh	r2, [r1, #12]
 8003e60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e64:	d032      	beq.n	8003ecc <__ssputs_r+0x80>
 8003e66:	6825      	ldr	r5, [r4, #0]
 8003e68:	6909      	ldr	r1, [r1, #16]
 8003e6a:	eba5 0901 	sub.w	r9, r5, r1
 8003e6e:	6965      	ldr	r5, [r4, #20]
 8003e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e78:	3301      	adds	r3, #1
 8003e7a:	444b      	add	r3, r9
 8003e7c:	106d      	asrs	r5, r5, #1
 8003e7e:	429d      	cmp	r5, r3
 8003e80:	bf38      	it	cc
 8003e82:	461d      	movcc	r5, r3
 8003e84:	0553      	lsls	r3, r2, #21
 8003e86:	d531      	bpl.n	8003eec <__ssputs_r+0xa0>
 8003e88:	4629      	mov	r1, r5
 8003e8a:	f7ff ff85 	bl	8003d98 <_malloc_r>
 8003e8e:	4606      	mov	r6, r0
 8003e90:	b950      	cbnz	r0, 8003ea8 <__ssputs_r+0x5c>
 8003e92:	230c      	movs	r3, #12
 8003e94:	f8ca 3000 	str.w	r3, [sl]
 8003e98:	89a3      	ldrh	r3, [r4, #12]
 8003e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e9e:	81a3      	strh	r3, [r4, #12]
 8003ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea8:	6921      	ldr	r1, [r4, #16]
 8003eaa:	464a      	mov	r2, r9
 8003eac:	f7ff fe76 	bl	8003b9c <memcpy>
 8003eb0:	89a3      	ldrh	r3, [r4, #12]
 8003eb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eba:	81a3      	strh	r3, [r4, #12]
 8003ebc:	6126      	str	r6, [r4, #16]
 8003ebe:	6165      	str	r5, [r4, #20]
 8003ec0:	444e      	add	r6, r9
 8003ec2:	eba5 0509 	sub.w	r5, r5, r9
 8003ec6:	6026      	str	r6, [r4, #0]
 8003ec8:	60a5      	str	r5, [r4, #8]
 8003eca:	463e      	mov	r6, r7
 8003ecc:	42be      	cmp	r6, r7
 8003ece:	d900      	bls.n	8003ed2 <__ssputs_r+0x86>
 8003ed0:	463e      	mov	r6, r7
 8003ed2:	4632      	mov	r2, r6
 8003ed4:	6820      	ldr	r0, [r4, #0]
 8003ed6:	4641      	mov	r1, r8
 8003ed8:	f000 fef8 	bl	8004ccc <memmove>
 8003edc:	68a3      	ldr	r3, [r4, #8]
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	1b9b      	subs	r3, r3, r6
 8003ee2:	4432      	add	r2, r6
 8003ee4:	60a3      	str	r3, [r4, #8]
 8003ee6:	6022      	str	r2, [r4, #0]
 8003ee8:	2000      	movs	r0, #0
 8003eea:	e7db      	b.n	8003ea4 <__ssputs_r+0x58>
 8003eec:	462a      	mov	r2, r5
 8003eee:	f000 ff13 	bl	8004d18 <_realloc_r>
 8003ef2:	4606      	mov	r6, r0
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	d1e1      	bne.n	8003ebc <__ssputs_r+0x70>
 8003ef8:	6921      	ldr	r1, [r4, #16]
 8003efa:	4650      	mov	r0, sl
 8003efc:	f7ff fefc 	bl	8003cf8 <_free_r>
 8003f00:	e7c7      	b.n	8003e92 <__ssputs_r+0x46>
	...

08003f04 <_svfiprintf_r>:
 8003f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f08:	4698      	mov	r8, r3
 8003f0a:	898b      	ldrh	r3, [r1, #12]
 8003f0c:	061b      	lsls	r3, r3, #24
 8003f0e:	b09d      	sub	sp, #116	; 0x74
 8003f10:	4607      	mov	r7, r0
 8003f12:	460d      	mov	r5, r1
 8003f14:	4614      	mov	r4, r2
 8003f16:	d50e      	bpl.n	8003f36 <_svfiprintf_r+0x32>
 8003f18:	690b      	ldr	r3, [r1, #16]
 8003f1a:	b963      	cbnz	r3, 8003f36 <_svfiprintf_r+0x32>
 8003f1c:	2140      	movs	r1, #64	; 0x40
 8003f1e:	f7ff ff3b 	bl	8003d98 <_malloc_r>
 8003f22:	6028      	str	r0, [r5, #0]
 8003f24:	6128      	str	r0, [r5, #16]
 8003f26:	b920      	cbnz	r0, 8003f32 <_svfiprintf_r+0x2e>
 8003f28:	230c      	movs	r3, #12
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f30:	e0d1      	b.n	80040d6 <_svfiprintf_r+0x1d2>
 8003f32:	2340      	movs	r3, #64	; 0x40
 8003f34:	616b      	str	r3, [r5, #20]
 8003f36:	2300      	movs	r3, #0
 8003f38:	9309      	str	r3, [sp, #36]	; 0x24
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f44:	2330      	movs	r3, #48	; 0x30
 8003f46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80040f0 <_svfiprintf_r+0x1ec>
 8003f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f4e:	f04f 0901 	mov.w	r9, #1
 8003f52:	4623      	mov	r3, r4
 8003f54:	469a      	mov	sl, r3
 8003f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f5a:	b10a      	cbz	r2, 8003f60 <_svfiprintf_r+0x5c>
 8003f5c:	2a25      	cmp	r2, #37	; 0x25
 8003f5e:	d1f9      	bne.n	8003f54 <_svfiprintf_r+0x50>
 8003f60:	ebba 0b04 	subs.w	fp, sl, r4
 8003f64:	d00b      	beq.n	8003f7e <_svfiprintf_r+0x7a>
 8003f66:	465b      	mov	r3, fp
 8003f68:	4622      	mov	r2, r4
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	4638      	mov	r0, r7
 8003f6e:	f7ff ff6d 	bl	8003e4c <__ssputs_r>
 8003f72:	3001      	adds	r0, #1
 8003f74:	f000 80aa 	beq.w	80040cc <_svfiprintf_r+0x1c8>
 8003f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f7a:	445a      	add	r2, fp
 8003f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8003f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80a2 	beq.w	80040cc <_svfiprintf_r+0x1c8>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f92:	f10a 0a01 	add.w	sl, sl, #1
 8003f96:	9304      	str	r3, [sp, #16]
 8003f98:	9307      	str	r3, [sp, #28]
 8003f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8003fa0:	4654      	mov	r4, sl
 8003fa2:	2205      	movs	r2, #5
 8003fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa8:	4851      	ldr	r0, [pc, #324]	; (80040f0 <_svfiprintf_r+0x1ec>)
 8003faa:	f7fc f921 	bl	80001f0 <memchr>
 8003fae:	9a04      	ldr	r2, [sp, #16]
 8003fb0:	b9d8      	cbnz	r0, 8003fea <_svfiprintf_r+0xe6>
 8003fb2:	06d0      	lsls	r0, r2, #27
 8003fb4:	bf44      	itt	mi
 8003fb6:	2320      	movmi	r3, #32
 8003fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fbc:	0711      	lsls	r1, r2, #28
 8003fbe:	bf44      	itt	mi
 8003fc0:	232b      	movmi	r3, #43	; 0x2b
 8003fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8003fca:	2b2a      	cmp	r3, #42	; 0x2a
 8003fcc:	d015      	beq.n	8003ffa <_svfiprintf_r+0xf6>
 8003fce:	9a07      	ldr	r2, [sp, #28]
 8003fd0:	4654      	mov	r4, sl
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	f04f 0c0a 	mov.w	ip, #10
 8003fd8:	4621      	mov	r1, r4
 8003fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fde:	3b30      	subs	r3, #48	; 0x30
 8003fe0:	2b09      	cmp	r3, #9
 8003fe2:	d94e      	bls.n	8004082 <_svfiprintf_r+0x17e>
 8003fe4:	b1b0      	cbz	r0, 8004014 <_svfiprintf_r+0x110>
 8003fe6:	9207      	str	r2, [sp, #28]
 8003fe8:	e014      	b.n	8004014 <_svfiprintf_r+0x110>
 8003fea:	eba0 0308 	sub.w	r3, r0, r8
 8003fee:	fa09 f303 	lsl.w	r3, r9, r3
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	9304      	str	r3, [sp, #16]
 8003ff6:	46a2      	mov	sl, r4
 8003ff8:	e7d2      	b.n	8003fa0 <_svfiprintf_r+0x9c>
 8003ffa:	9b03      	ldr	r3, [sp, #12]
 8003ffc:	1d19      	adds	r1, r3, #4
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	9103      	str	r1, [sp, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	bfbb      	ittet	lt
 8004006:	425b      	neglt	r3, r3
 8004008:	f042 0202 	orrlt.w	r2, r2, #2
 800400c:	9307      	strge	r3, [sp, #28]
 800400e:	9307      	strlt	r3, [sp, #28]
 8004010:	bfb8      	it	lt
 8004012:	9204      	strlt	r2, [sp, #16]
 8004014:	7823      	ldrb	r3, [r4, #0]
 8004016:	2b2e      	cmp	r3, #46	; 0x2e
 8004018:	d10c      	bne.n	8004034 <_svfiprintf_r+0x130>
 800401a:	7863      	ldrb	r3, [r4, #1]
 800401c:	2b2a      	cmp	r3, #42	; 0x2a
 800401e:	d135      	bne.n	800408c <_svfiprintf_r+0x188>
 8004020:	9b03      	ldr	r3, [sp, #12]
 8004022:	1d1a      	adds	r2, r3, #4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	9203      	str	r2, [sp, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	bfb8      	it	lt
 800402c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004030:	3402      	adds	r4, #2
 8004032:	9305      	str	r3, [sp, #20]
 8004034:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004100 <_svfiprintf_r+0x1fc>
 8004038:	7821      	ldrb	r1, [r4, #0]
 800403a:	2203      	movs	r2, #3
 800403c:	4650      	mov	r0, sl
 800403e:	f7fc f8d7 	bl	80001f0 <memchr>
 8004042:	b140      	cbz	r0, 8004056 <_svfiprintf_r+0x152>
 8004044:	2340      	movs	r3, #64	; 0x40
 8004046:	eba0 000a 	sub.w	r0, r0, sl
 800404a:	fa03 f000 	lsl.w	r0, r3, r0
 800404e:	9b04      	ldr	r3, [sp, #16]
 8004050:	4303      	orrs	r3, r0
 8004052:	3401      	adds	r4, #1
 8004054:	9304      	str	r3, [sp, #16]
 8004056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800405a:	4826      	ldr	r0, [pc, #152]	; (80040f4 <_svfiprintf_r+0x1f0>)
 800405c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004060:	2206      	movs	r2, #6
 8004062:	f7fc f8c5 	bl	80001f0 <memchr>
 8004066:	2800      	cmp	r0, #0
 8004068:	d038      	beq.n	80040dc <_svfiprintf_r+0x1d8>
 800406a:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <_svfiprintf_r+0x1f4>)
 800406c:	bb1b      	cbnz	r3, 80040b6 <_svfiprintf_r+0x1b2>
 800406e:	9b03      	ldr	r3, [sp, #12]
 8004070:	3307      	adds	r3, #7
 8004072:	f023 0307 	bic.w	r3, r3, #7
 8004076:	3308      	adds	r3, #8
 8004078:	9303      	str	r3, [sp, #12]
 800407a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800407c:	4433      	add	r3, r6
 800407e:	9309      	str	r3, [sp, #36]	; 0x24
 8004080:	e767      	b.n	8003f52 <_svfiprintf_r+0x4e>
 8004082:	fb0c 3202 	mla	r2, ip, r2, r3
 8004086:	460c      	mov	r4, r1
 8004088:	2001      	movs	r0, #1
 800408a:	e7a5      	b.n	8003fd8 <_svfiprintf_r+0xd4>
 800408c:	2300      	movs	r3, #0
 800408e:	3401      	adds	r4, #1
 8004090:	9305      	str	r3, [sp, #20]
 8004092:	4619      	mov	r1, r3
 8004094:	f04f 0c0a 	mov.w	ip, #10
 8004098:	4620      	mov	r0, r4
 800409a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800409e:	3a30      	subs	r2, #48	; 0x30
 80040a0:	2a09      	cmp	r2, #9
 80040a2:	d903      	bls.n	80040ac <_svfiprintf_r+0x1a8>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0c5      	beq.n	8004034 <_svfiprintf_r+0x130>
 80040a8:	9105      	str	r1, [sp, #20]
 80040aa:	e7c3      	b.n	8004034 <_svfiprintf_r+0x130>
 80040ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80040b0:	4604      	mov	r4, r0
 80040b2:	2301      	movs	r3, #1
 80040b4:	e7f0      	b.n	8004098 <_svfiprintf_r+0x194>
 80040b6:	ab03      	add	r3, sp, #12
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	462a      	mov	r2, r5
 80040bc:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <_svfiprintf_r+0x1f8>)
 80040be:	a904      	add	r1, sp, #16
 80040c0:	4638      	mov	r0, r7
 80040c2:	f3af 8000 	nop.w
 80040c6:	1c42      	adds	r2, r0, #1
 80040c8:	4606      	mov	r6, r0
 80040ca:	d1d6      	bne.n	800407a <_svfiprintf_r+0x176>
 80040cc:	89ab      	ldrh	r3, [r5, #12]
 80040ce:	065b      	lsls	r3, r3, #25
 80040d0:	f53f af2c 	bmi.w	8003f2c <_svfiprintf_r+0x28>
 80040d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040d6:	b01d      	add	sp, #116	; 0x74
 80040d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040dc:	ab03      	add	r3, sp, #12
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	462a      	mov	r2, r5
 80040e2:	4b06      	ldr	r3, [pc, #24]	; (80040fc <_svfiprintf_r+0x1f8>)
 80040e4:	a904      	add	r1, sp, #16
 80040e6:	4638      	mov	r0, r7
 80040e8:	f000 f9d4 	bl	8004494 <_printf_i>
 80040ec:	e7eb      	b.n	80040c6 <_svfiprintf_r+0x1c2>
 80040ee:	bf00      	nop
 80040f0:	080054d2 	.word	0x080054d2
 80040f4:	080054dc 	.word	0x080054dc
 80040f8:	00000000 	.word	0x00000000
 80040fc:	08003e4d 	.word	0x08003e4d
 8004100:	080054d8 	.word	0x080054d8

08004104 <__sfputc_r>:
 8004104:	6893      	ldr	r3, [r2, #8]
 8004106:	3b01      	subs	r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	b410      	push	{r4}
 800410c:	6093      	str	r3, [r2, #8]
 800410e:	da08      	bge.n	8004122 <__sfputc_r+0x1e>
 8004110:	6994      	ldr	r4, [r2, #24]
 8004112:	42a3      	cmp	r3, r4
 8004114:	db01      	blt.n	800411a <__sfputc_r+0x16>
 8004116:	290a      	cmp	r1, #10
 8004118:	d103      	bne.n	8004122 <__sfputc_r+0x1e>
 800411a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800411e:	f000 baef 	b.w	8004700 <__swbuf_r>
 8004122:	6813      	ldr	r3, [r2, #0]
 8004124:	1c58      	adds	r0, r3, #1
 8004126:	6010      	str	r0, [r2, #0]
 8004128:	7019      	strb	r1, [r3, #0]
 800412a:	4608      	mov	r0, r1
 800412c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004130:	4770      	bx	lr

08004132 <__sfputs_r>:
 8004132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004134:	4606      	mov	r6, r0
 8004136:	460f      	mov	r7, r1
 8004138:	4614      	mov	r4, r2
 800413a:	18d5      	adds	r5, r2, r3
 800413c:	42ac      	cmp	r4, r5
 800413e:	d101      	bne.n	8004144 <__sfputs_r+0x12>
 8004140:	2000      	movs	r0, #0
 8004142:	e007      	b.n	8004154 <__sfputs_r+0x22>
 8004144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004148:	463a      	mov	r2, r7
 800414a:	4630      	mov	r0, r6
 800414c:	f7ff ffda 	bl	8004104 <__sfputc_r>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d1f3      	bne.n	800413c <__sfputs_r+0xa>
 8004154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004158 <_vfiprintf_r>:
 8004158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800415c:	460d      	mov	r5, r1
 800415e:	b09d      	sub	sp, #116	; 0x74
 8004160:	4614      	mov	r4, r2
 8004162:	4698      	mov	r8, r3
 8004164:	4606      	mov	r6, r0
 8004166:	b118      	cbz	r0, 8004170 <_vfiprintf_r+0x18>
 8004168:	6983      	ldr	r3, [r0, #24]
 800416a:	b90b      	cbnz	r3, 8004170 <_vfiprintf_r+0x18>
 800416c:	f000 fcaa 	bl	8004ac4 <__sinit>
 8004170:	4b89      	ldr	r3, [pc, #548]	; (8004398 <_vfiprintf_r+0x240>)
 8004172:	429d      	cmp	r5, r3
 8004174:	d11b      	bne.n	80041ae <_vfiprintf_r+0x56>
 8004176:	6875      	ldr	r5, [r6, #4]
 8004178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800417a:	07d9      	lsls	r1, r3, #31
 800417c:	d405      	bmi.n	800418a <_vfiprintf_r+0x32>
 800417e:	89ab      	ldrh	r3, [r5, #12]
 8004180:	059a      	lsls	r2, r3, #22
 8004182:	d402      	bmi.n	800418a <_vfiprintf_r+0x32>
 8004184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004186:	f000 fd3b 	bl	8004c00 <__retarget_lock_acquire_recursive>
 800418a:	89ab      	ldrh	r3, [r5, #12]
 800418c:	071b      	lsls	r3, r3, #28
 800418e:	d501      	bpl.n	8004194 <_vfiprintf_r+0x3c>
 8004190:	692b      	ldr	r3, [r5, #16]
 8004192:	b9eb      	cbnz	r3, 80041d0 <_vfiprintf_r+0x78>
 8004194:	4629      	mov	r1, r5
 8004196:	4630      	mov	r0, r6
 8004198:	f000 fb04 	bl	80047a4 <__swsetup_r>
 800419c:	b1c0      	cbz	r0, 80041d0 <_vfiprintf_r+0x78>
 800419e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041a0:	07dc      	lsls	r4, r3, #31
 80041a2:	d50e      	bpl.n	80041c2 <_vfiprintf_r+0x6a>
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	b01d      	add	sp, #116	; 0x74
 80041aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ae:	4b7b      	ldr	r3, [pc, #492]	; (800439c <_vfiprintf_r+0x244>)
 80041b0:	429d      	cmp	r5, r3
 80041b2:	d101      	bne.n	80041b8 <_vfiprintf_r+0x60>
 80041b4:	68b5      	ldr	r5, [r6, #8]
 80041b6:	e7df      	b.n	8004178 <_vfiprintf_r+0x20>
 80041b8:	4b79      	ldr	r3, [pc, #484]	; (80043a0 <_vfiprintf_r+0x248>)
 80041ba:	429d      	cmp	r5, r3
 80041bc:	bf08      	it	eq
 80041be:	68f5      	ldreq	r5, [r6, #12]
 80041c0:	e7da      	b.n	8004178 <_vfiprintf_r+0x20>
 80041c2:	89ab      	ldrh	r3, [r5, #12]
 80041c4:	0598      	lsls	r0, r3, #22
 80041c6:	d4ed      	bmi.n	80041a4 <_vfiprintf_r+0x4c>
 80041c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041ca:	f000 fd1a 	bl	8004c02 <__retarget_lock_release_recursive>
 80041ce:	e7e9      	b.n	80041a4 <_vfiprintf_r+0x4c>
 80041d0:	2300      	movs	r3, #0
 80041d2:	9309      	str	r3, [sp, #36]	; 0x24
 80041d4:	2320      	movs	r3, #32
 80041d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041da:	f8cd 800c 	str.w	r8, [sp, #12]
 80041de:	2330      	movs	r3, #48	; 0x30
 80041e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80043a4 <_vfiprintf_r+0x24c>
 80041e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041e8:	f04f 0901 	mov.w	r9, #1
 80041ec:	4623      	mov	r3, r4
 80041ee:	469a      	mov	sl, r3
 80041f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041f4:	b10a      	cbz	r2, 80041fa <_vfiprintf_r+0xa2>
 80041f6:	2a25      	cmp	r2, #37	; 0x25
 80041f8:	d1f9      	bne.n	80041ee <_vfiprintf_r+0x96>
 80041fa:	ebba 0b04 	subs.w	fp, sl, r4
 80041fe:	d00b      	beq.n	8004218 <_vfiprintf_r+0xc0>
 8004200:	465b      	mov	r3, fp
 8004202:	4622      	mov	r2, r4
 8004204:	4629      	mov	r1, r5
 8004206:	4630      	mov	r0, r6
 8004208:	f7ff ff93 	bl	8004132 <__sfputs_r>
 800420c:	3001      	adds	r0, #1
 800420e:	f000 80aa 	beq.w	8004366 <_vfiprintf_r+0x20e>
 8004212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004214:	445a      	add	r2, fp
 8004216:	9209      	str	r2, [sp, #36]	; 0x24
 8004218:	f89a 3000 	ldrb.w	r3, [sl]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80a2 	beq.w	8004366 <_vfiprintf_r+0x20e>
 8004222:	2300      	movs	r3, #0
 8004224:	f04f 32ff 	mov.w	r2, #4294967295
 8004228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800422c:	f10a 0a01 	add.w	sl, sl, #1
 8004230:	9304      	str	r3, [sp, #16]
 8004232:	9307      	str	r3, [sp, #28]
 8004234:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004238:	931a      	str	r3, [sp, #104]	; 0x68
 800423a:	4654      	mov	r4, sl
 800423c:	2205      	movs	r2, #5
 800423e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004242:	4858      	ldr	r0, [pc, #352]	; (80043a4 <_vfiprintf_r+0x24c>)
 8004244:	f7fb ffd4 	bl	80001f0 <memchr>
 8004248:	9a04      	ldr	r2, [sp, #16]
 800424a:	b9d8      	cbnz	r0, 8004284 <_vfiprintf_r+0x12c>
 800424c:	06d1      	lsls	r1, r2, #27
 800424e:	bf44      	itt	mi
 8004250:	2320      	movmi	r3, #32
 8004252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004256:	0713      	lsls	r3, r2, #28
 8004258:	bf44      	itt	mi
 800425a:	232b      	movmi	r3, #43	; 0x2b
 800425c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004260:	f89a 3000 	ldrb.w	r3, [sl]
 8004264:	2b2a      	cmp	r3, #42	; 0x2a
 8004266:	d015      	beq.n	8004294 <_vfiprintf_r+0x13c>
 8004268:	9a07      	ldr	r2, [sp, #28]
 800426a:	4654      	mov	r4, sl
 800426c:	2000      	movs	r0, #0
 800426e:	f04f 0c0a 	mov.w	ip, #10
 8004272:	4621      	mov	r1, r4
 8004274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004278:	3b30      	subs	r3, #48	; 0x30
 800427a:	2b09      	cmp	r3, #9
 800427c:	d94e      	bls.n	800431c <_vfiprintf_r+0x1c4>
 800427e:	b1b0      	cbz	r0, 80042ae <_vfiprintf_r+0x156>
 8004280:	9207      	str	r2, [sp, #28]
 8004282:	e014      	b.n	80042ae <_vfiprintf_r+0x156>
 8004284:	eba0 0308 	sub.w	r3, r0, r8
 8004288:	fa09 f303 	lsl.w	r3, r9, r3
 800428c:	4313      	orrs	r3, r2
 800428e:	9304      	str	r3, [sp, #16]
 8004290:	46a2      	mov	sl, r4
 8004292:	e7d2      	b.n	800423a <_vfiprintf_r+0xe2>
 8004294:	9b03      	ldr	r3, [sp, #12]
 8004296:	1d19      	adds	r1, r3, #4
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	9103      	str	r1, [sp, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	bfbb      	ittet	lt
 80042a0:	425b      	neglt	r3, r3
 80042a2:	f042 0202 	orrlt.w	r2, r2, #2
 80042a6:	9307      	strge	r3, [sp, #28]
 80042a8:	9307      	strlt	r3, [sp, #28]
 80042aa:	bfb8      	it	lt
 80042ac:	9204      	strlt	r2, [sp, #16]
 80042ae:	7823      	ldrb	r3, [r4, #0]
 80042b0:	2b2e      	cmp	r3, #46	; 0x2e
 80042b2:	d10c      	bne.n	80042ce <_vfiprintf_r+0x176>
 80042b4:	7863      	ldrb	r3, [r4, #1]
 80042b6:	2b2a      	cmp	r3, #42	; 0x2a
 80042b8:	d135      	bne.n	8004326 <_vfiprintf_r+0x1ce>
 80042ba:	9b03      	ldr	r3, [sp, #12]
 80042bc:	1d1a      	adds	r2, r3, #4
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	9203      	str	r2, [sp, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	bfb8      	it	lt
 80042c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80042ca:	3402      	adds	r4, #2
 80042cc:	9305      	str	r3, [sp, #20]
 80042ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80043b4 <_vfiprintf_r+0x25c>
 80042d2:	7821      	ldrb	r1, [r4, #0]
 80042d4:	2203      	movs	r2, #3
 80042d6:	4650      	mov	r0, sl
 80042d8:	f7fb ff8a 	bl	80001f0 <memchr>
 80042dc:	b140      	cbz	r0, 80042f0 <_vfiprintf_r+0x198>
 80042de:	2340      	movs	r3, #64	; 0x40
 80042e0:	eba0 000a 	sub.w	r0, r0, sl
 80042e4:	fa03 f000 	lsl.w	r0, r3, r0
 80042e8:	9b04      	ldr	r3, [sp, #16]
 80042ea:	4303      	orrs	r3, r0
 80042ec:	3401      	adds	r4, #1
 80042ee:	9304      	str	r3, [sp, #16]
 80042f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042f4:	482c      	ldr	r0, [pc, #176]	; (80043a8 <_vfiprintf_r+0x250>)
 80042f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042fa:	2206      	movs	r2, #6
 80042fc:	f7fb ff78 	bl	80001f0 <memchr>
 8004300:	2800      	cmp	r0, #0
 8004302:	d03f      	beq.n	8004384 <_vfiprintf_r+0x22c>
 8004304:	4b29      	ldr	r3, [pc, #164]	; (80043ac <_vfiprintf_r+0x254>)
 8004306:	bb1b      	cbnz	r3, 8004350 <_vfiprintf_r+0x1f8>
 8004308:	9b03      	ldr	r3, [sp, #12]
 800430a:	3307      	adds	r3, #7
 800430c:	f023 0307 	bic.w	r3, r3, #7
 8004310:	3308      	adds	r3, #8
 8004312:	9303      	str	r3, [sp, #12]
 8004314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004316:	443b      	add	r3, r7
 8004318:	9309      	str	r3, [sp, #36]	; 0x24
 800431a:	e767      	b.n	80041ec <_vfiprintf_r+0x94>
 800431c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004320:	460c      	mov	r4, r1
 8004322:	2001      	movs	r0, #1
 8004324:	e7a5      	b.n	8004272 <_vfiprintf_r+0x11a>
 8004326:	2300      	movs	r3, #0
 8004328:	3401      	adds	r4, #1
 800432a:	9305      	str	r3, [sp, #20]
 800432c:	4619      	mov	r1, r3
 800432e:	f04f 0c0a 	mov.w	ip, #10
 8004332:	4620      	mov	r0, r4
 8004334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004338:	3a30      	subs	r2, #48	; 0x30
 800433a:	2a09      	cmp	r2, #9
 800433c:	d903      	bls.n	8004346 <_vfiprintf_r+0x1ee>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0c5      	beq.n	80042ce <_vfiprintf_r+0x176>
 8004342:	9105      	str	r1, [sp, #20]
 8004344:	e7c3      	b.n	80042ce <_vfiprintf_r+0x176>
 8004346:	fb0c 2101 	mla	r1, ip, r1, r2
 800434a:	4604      	mov	r4, r0
 800434c:	2301      	movs	r3, #1
 800434e:	e7f0      	b.n	8004332 <_vfiprintf_r+0x1da>
 8004350:	ab03      	add	r3, sp, #12
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	462a      	mov	r2, r5
 8004356:	4b16      	ldr	r3, [pc, #88]	; (80043b0 <_vfiprintf_r+0x258>)
 8004358:	a904      	add	r1, sp, #16
 800435a:	4630      	mov	r0, r6
 800435c:	f3af 8000 	nop.w
 8004360:	4607      	mov	r7, r0
 8004362:	1c78      	adds	r0, r7, #1
 8004364:	d1d6      	bne.n	8004314 <_vfiprintf_r+0x1bc>
 8004366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004368:	07d9      	lsls	r1, r3, #31
 800436a:	d405      	bmi.n	8004378 <_vfiprintf_r+0x220>
 800436c:	89ab      	ldrh	r3, [r5, #12]
 800436e:	059a      	lsls	r2, r3, #22
 8004370:	d402      	bmi.n	8004378 <_vfiprintf_r+0x220>
 8004372:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004374:	f000 fc45 	bl	8004c02 <__retarget_lock_release_recursive>
 8004378:	89ab      	ldrh	r3, [r5, #12]
 800437a:	065b      	lsls	r3, r3, #25
 800437c:	f53f af12 	bmi.w	80041a4 <_vfiprintf_r+0x4c>
 8004380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004382:	e711      	b.n	80041a8 <_vfiprintf_r+0x50>
 8004384:	ab03      	add	r3, sp, #12
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	462a      	mov	r2, r5
 800438a:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <_vfiprintf_r+0x258>)
 800438c:	a904      	add	r1, sp, #16
 800438e:	4630      	mov	r0, r6
 8004390:	f000 f880 	bl	8004494 <_printf_i>
 8004394:	e7e4      	b.n	8004360 <_vfiprintf_r+0x208>
 8004396:	bf00      	nop
 8004398:	08005528 	.word	0x08005528
 800439c:	08005548 	.word	0x08005548
 80043a0:	08005508 	.word	0x08005508
 80043a4:	080054d2 	.word	0x080054d2
 80043a8:	080054dc 	.word	0x080054dc
 80043ac:	00000000 	.word	0x00000000
 80043b0:	08004133 	.word	0x08004133
 80043b4:	080054d8 	.word	0x080054d8

080043b8 <_printf_common>:
 80043b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043bc:	4616      	mov	r6, r2
 80043be:	4699      	mov	r9, r3
 80043c0:	688a      	ldr	r2, [r1, #8]
 80043c2:	690b      	ldr	r3, [r1, #16]
 80043c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043c8:	4293      	cmp	r3, r2
 80043ca:	bfb8      	it	lt
 80043cc:	4613      	movlt	r3, r2
 80043ce:	6033      	str	r3, [r6, #0]
 80043d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043d4:	4607      	mov	r7, r0
 80043d6:	460c      	mov	r4, r1
 80043d8:	b10a      	cbz	r2, 80043de <_printf_common+0x26>
 80043da:	3301      	adds	r3, #1
 80043dc:	6033      	str	r3, [r6, #0]
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	0699      	lsls	r1, r3, #26
 80043e2:	bf42      	ittt	mi
 80043e4:	6833      	ldrmi	r3, [r6, #0]
 80043e6:	3302      	addmi	r3, #2
 80043e8:	6033      	strmi	r3, [r6, #0]
 80043ea:	6825      	ldr	r5, [r4, #0]
 80043ec:	f015 0506 	ands.w	r5, r5, #6
 80043f0:	d106      	bne.n	8004400 <_printf_common+0x48>
 80043f2:	f104 0a19 	add.w	sl, r4, #25
 80043f6:	68e3      	ldr	r3, [r4, #12]
 80043f8:	6832      	ldr	r2, [r6, #0]
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	42ab      	cmp	r3, r5
 80043fe:	dc26      	bgt.n	800444e <_printf_common+0x96>
 8004400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004404:	1e13      	subs	r3, r2, #0
 8004406:	6822      	ldr	r2, [r4, #0]
 8004408:	bf18      	it	ne
 800440a:	2301      	movne	r3, #1
 800440c:	0692      	lsls	r2, r2, #26
 800440e:	d42b      	bmi.n	8004468 <_printf_common+0xb0>
 8004410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004414:	4649      	mov	r1, r9
 8004416:	4638      	mov	r0, r7
 8004418:	47c0      	blx	r8
 800441a:	3001      	adds	r0, #1
 800441c:	d01e      	beq.n	800445c <_printf_common+0xa4>
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	68e5      	ldr	r5, [r4, #12]
 8004422:	6832      	ldr	r2, [r6, #0]
 8004424:	f003 0306 	and.w	r3, r3, #6
 8004428:	2b04      	cmp	r3, #4
 800442a:	bf08      	it	eq
 800442c:	1aad      	subeq	r5, r5, r2
 800442e:	68a3      	ldr	r3, [r4, #8]
 8004430:	6922      	ldr	r2, [r4, #16]
 8004432:	bf0c      	ite	eq
 8004434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004438:	2500      	movne	r5, #0
 800443a:	4293      	cmp	r3, r2
 800443c:	bfc4      	itt	gt
 800443e:	1a9b      	subgt	r3, r3, r2
 8004440:	18ed      	addgt	r5, r5, r3
 8004442:	2600      	movs	r6, #0
 8004444:	341a      	adds	r4, #26
 8004446:	42b5      	cmp	r5, r6
 8004448:	d11a      	bne.n	8004480 <_printf_common+0xc8>
 800444a:	2000      	movs	r0, #0
 800444c:	e008      	b.n	8004460 <_printf_common+0xa8>
 800444e:	2301      	movs	r3, #1
 8004450:	4652      	mov	r2, sl
 8004452:	4649      	mov	r1, r9
 8004454:	4638      	mov	r0, r7
 8004456:	47c0      	blx	r8
 8004458:	3001      	adds	r0, #1
 800445a:	d103      	bne.n	8004464 <_printf_common+0xac>
 800445c:	f04f 30ff 	mov.w	r0, #4294967295
 8004460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004464:	3501      	adds	r5, #1
 8004466:	e7c6      	b.n	80043f6 <_printf_common+0x3e>
 8004468:	18e1      	adds	r1, r4, r3
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	2030      	movs	r0, #48	; 0x30
 800446e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004472:	4422      	add	r2, r4
 8004474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800447c:	3302      	adds	r3, #2
 800447e:	e7c7      	b.n	8004410 <_printf_common+0x58>
 8004480:	2301      	movs	r3, #1
 8004482:	4622      	mov	r2, r4
 8004484:	4649      	mov	r1, r9
 8004486:	4638      	mov	r0, r7
 8004488:	47c0      	blx	r8
 800448a:	3001      	adds	r0, #1
 800448c:	d0e6      	beq.n	800445c <_printf_common+0xa4>
 800448e:	3601      	adds	r6, #1
 8004490:	e7d9      	b.n	8004446 <_printf_common+0x8e>
	...

08004494 <_printf_i>:
 8004494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004498:	460c      	mov	r4, r1
 800449a:	4691      	mov	r9, r2
 800449c:	7e27      	ldrb	r7, [r4, #24]
 800449e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80044a0:	2f78      	cmp	r7, #120	; 0x78
 80044a2:	4680      	mov	r8, r0
 80044a4:	469a      	mov	sl, r3
 80044a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044aa:	d807      	bhi.n	80044bc <_printf_i+0x28>
 80044ac:	2f62      	cmp	r7, #98	; 0x62
 80044ae:	d80a      	bhi.n	80044c6 <_printf_i+0x32>
 80044b0:	2f00      	cmp	r7, #0
 80044b2:	f000 80d8 	beq.w	8004666 <_printf_i+0x1d2>
 80044b6:	2f58      	cmp	r7, #88	; 0x58
 80044b8:	f000 80a3 	beq.w	8004602 <_printf_i+0x16e>
 80044bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044c4:	e03a      	b.n	800453c <_printf_i+0xa8>
 80044c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044ca:	2b15      	cmp	r3, #21
 80044cc:	d8f6      	bhi.n	80044bc <_printf_i+0x28>
 80044ce:	a001      	add	r0, pc, #4	; (adr r0, 80044d4 <_printf_i+0x40>)
 80044d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80044d4:	0800452d 	.word	0x0800452d
 80044d8:	08004541 	.word	0x08004541
 80044dc:	080044bd 	.word	0x080044bd
 80044e0:	080044bd 	.word	0x080044bd
 80044e4:	080044bd 	.word	0x080044bd
 80044e8:	080044bd 	.word	0x080044bd
 80044ec:	08004541 	.word	0x08004541
 80044f0:	080044bd 	.word	0x080044bd
 80044f4:	080044bd 	.word	0x080044bd
 80044f8:	080044bd 	.word	0x080044bd
 80044fc:	080044bd 	.word	0x080044bd
 8004500:	0800464d 	.word	0x0800464d
 8004504:	08004571 	.word	0x08004571
 8004508:	0800462f 	.word	0x0800462f
 800450c:	080044bd 	.word	0x080044bd
 8004510:	080044bd 	.word	0x080044bd
 8004514:	0800466f 	.word	0x0800466f
 8004518:	080044bd 	.word	0x080044bd
 800451c:	08004571 	.word	0x08004571
 8004520:	080044bd 	.word	0x080044bd
 8004524:	080044bd 	.word	0x080044bd
 8004528:	08004637 	.word	0x08004637
 800452c:	680b      	ldr	r3, [r1, #0]
 800452e:	1d1a      	adds	r2, r3, #4
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	600a      	str	r2, [r1, #0]
 8004534:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800453c:	2301      	movs	r3, #1
 800453e:	e0a3      	b.n	8004688 <_printf_i+0x1f4>
 8004540:	6825      	ldr	r5, [r4, #0]
 8004542:	6808      	ldr	r0, [r1, #0]
 8004544:	062e      	lsls	r6, r5, #24
 8004546:	f100 0304 	add.w	r3, r0, #4
 800454a:	d50a      	bpl.n	8004562 <_printf_i+0xce>
 800454c:	6805      	ldr	r5, [r0, #0]
 800454e:	600b      	str	r3, [r1, #0]
 8004550:	2d00      	cmp	r5, #0
 8004552:	da03      	bge.n	800455c <_printf_i+0xc8>
 8004554:	232d      	movs	r3, #45	; 0x2d
 8004556:	426d      	negs	r5, r5
 8004558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800455c:	485e      	ldr	r0, [pc, #376]	; (80046d8 <_printf_i+0x244>)
 800455e:	230a      	movs	r3, #10
 8004560:	e019      	b.n	8004596 <_printf_i+0x102>
 8004562:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004566:	6805      	ldr	r5, [r0, #0]
 8004568:	600b      	str	r3, [r1, #0]
 800456a:	bf18      	it	ne
 800456c:	b22d      	sxthne	r5, r5
 800456e:	e7ef      	b.n	8004550 <_printf_i+0xbc>
 8004570:	680b      	ldr	r3, [r1, #0]
 8004572:	6825      	ldr	r5, [r4, #0]
 8004574:	1d18      	adds	r0, r3, #4
 8004576:	6008      	str	r0, [r1, #0]
 8004578:	0628      	lsls	r0, r5, #24
 800457a:	d501      	bpl.n	8004580 <_printf_i+0xec>
 800457c:	681d      	ldr	r5, [r3, #0]
 800457e:	e002      	b.n	8004586 <_printf_i+0xf2>
 8004580:	0669      	lsls	r1, r5, #25
 8004582:	d5fb      	bpl.n	800457c <_printf_i+0xe8>
 8004584:	881d      	ldrh	r5, [r3, #0]
 8004586:	4854      	ldr	r0, [pc, #336]	; (80046d8 <_printf_i+0x244>)
 8004588:	2f6f      	cmp	r7, #111	; 0x6f
 800458a:	bf0c      	ite	eq
 800458c:	2308      	moveq	r3, #8
 800458e:	230a      	movne	r3, #10
 8004590:	2100      	movs	r1, #0
 8004592:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004596:	6866      	ldr	r6, [r4, #4]
 8004598:	60a6      	str	r6, [r4, #8]
 800459a:	2e00      	cmp	r6, #0
 800459c:	bfa2      	ittt	ge
 800459e:	6821      	ldrge	r1, [r4, #0]
 80045a0:	f021 0104 	bicge.w	r1, r1, #4
 80045a4:	6021      	strge	r1, [r4, #0]
 80045a6:	b90d      	cbnz	r5, 80045ac <_printf_i+0x118>
 80045a8:	2e00      	cmp	r6, #0
 80045aa:	d04d      	beq.n	8004648 <_printf_i+0x1b4>
 80045ac:	4616      	mov	r6, r2
 80045ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80045b2:	fb03 5711 	mls	r7, r3, r1, r5
 80045b6:	5dc7      	ldrb	r7, [r0, r7]
 80045b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045bc:	462f      	mov	r7, r5
 80045be:	42bb      	cmp	r3, r7
 80045c0:	460d      	mov	r5, r1
 80045c2:	d9f4      	bls.n	80045ae <_printf_i+0x11a>
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d10b      	bne.n	80045e0 <_printf_i+0x14c>
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	07df      	lsls	r7, r3, #31
 80045cc:	d508      	bpl.n	80045e0 <_printf_i+0x14c>
 80045ce:	6923      	ldr	r3, [r4, #16]
 80045d0:	6861      	ldr	r1, [r4, #4]
 80045d2:	4299      	cmp	r1, r3
 80045d4:	bfde      	ittt	le
 80045d6:	2330      	movle	r3, #48	; 0x30
 80045d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045e0:	1b92      	subs	r2, r2, r6
 80045e2:	6122      	str	r2, [r4, #16]
 80045e4:	f8cd a000 	str.w	sl, [sp]
 80045e8:	464b      	mov	r3, r9
 80045ea:	aa03      	add	r2, sp, #12
 80045ec:	4621      	mov	r1, r4
 80045ee:	4640      	mov	r0, r8
 80045f0:	f7ff fee2 	bl	80043b8 <_printf_common>
 80045f4:	3001      	adds	r0, #1
 80045f6:	d14c      	bne.n	8004692 <_printf_i+0x1fe>
 80045f8:	f04f 30ff 	mov.w	r0, #4294967295
 80045fc:	b004      	add	sp, #16
 80045fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004602:	4835      	ldr	r0, [pc, #212]	; (80046d8 <_printf_i+0x244>)
 8004604:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	680e      	ldr	r6, [r1, #0]
 800460c:	061f      	lsls	r7, r3, #24
 800460e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004612:	600e      	str	r6, [r1, #0]
 8004614:	d514      	bpl.n	8004640 <_printf_i+0x1ac>
 8004616:	07d9      	lsls	r1, r3, #31
 8004618:	bf44      	itt	mi
 800461a:	f043 0320 	orrmi.w	r3, r3, #32
 800461e:	6023      	strmi	r3, [r4, #0]
 8004620:	b91d      	cbnz	r5, 800462a <_printf_i+0x196>
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	f023 0320 	bic.w	r3, r3, #32
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	2310      	movs	r3, #16
 800462c:	e7b0      	b.n	8004590 <_printf_i+0xfc>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	f043 0320 	orr.w	r3, r3, #32
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	2378      	movs	r3, #120	; 0x78
 8004638:	4828      	ldr	r0, [pc, #160]	; (80046dc <_printf_i+0x248>)
 800463a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800463e:	e7e3      	b.n	8004608 <_printf_i+0x174>
 8004640:	065e      	lsls	r6, r3, #25
 8004642:	bf48      	it	mi
 8004644:	b2ad      	uxthmi	r5, r5
 8004646:	e7e6      	b.n	8004616 <_printf_i+0x182>
 8004648:	4616      	mov	r6, r2
 800464a:	e7bb      	b.n	80045c4 <_printf_i+0x130>
 800464c:	680b      	ldr	r3, [r1, #0]
 800464e:	6826      	ldr	r6, [r4, #0]
 8004650:	6960      	ldr	r0, [r4, #20]
 8004652:	1d1d      	adds	r5, r3, #4
 8004654:	600d      	str	r5, [r1, #0]
 8004656:	0635      	lsls	r5, r6, #24
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	d501      	bpl.n	8004660 <_printf_i+0x1cc>
 800465c:	6018      	str	r0, [r3, #0]
 800465e:	e002      	b.n	8004666 <_printf_i+0x1d2>
 8004660:	0671      	lsls	r1, r6, #25
 8004662:	d5fb      	bpl.n	800465c <_printf_i+0x1c8>
 8004664:	8018      	strh	r0, [r3, #0]
 8004666:	2300      	movs	r3, #0
 8004668:	6123      	str	r3, [r4, #16]
 800466a:	4616      	mov	r6, r2
 800466c:	e7ba      	b.n	80045e4 <_printf_i+0x150>
 800466e:	680b      	ldr	r3, [r1, #0]
 8004670:	1d1a      	adds	r2, r3, #4
 8004672:	600a      	str	r2, [r1, #0]
 8004674:	681e      	ldr	r6, [r3, #0]
 8004676:	6862      	ldr	r2, [r4, #4]
 8004678:	2100      	movs	r1, #0
 800467a:	4630      	mov	r0, r6
 800467c:	f7fb fdb8 	bl	80001f0 <memchr>
 8004680:	b108      	cbz	r0, 8004686 <_printf_i+0x1f2>
 8004682:	1b80      	subs	r0, r0, r6
 8004684:	6060      	str	r0, [r4, #4]
 8004686:	6863      	ldr	r3, [r4, #4]
 8004688:	6123      	str	r3, [r4, #16]
 800468a:	2300      	movs	r3, #0
 800468c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004690:	e7a8      	b.n	80045e4 <_printf_i+0x150>
 8004692:	6923      	ldr	r3, [r4, #16]
 8004694:	4632      	mov	r2, r6
 8004696:	4649      	mov	r1, r9
 8004698:	4640      	mov	r0, r8
 800469a:	47d0      	blx	sl
 800469c:	3001      	adds	r0, #1
 800469e:	d0ab      	beq.n	80045f8 <_printf_i+0x164>
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	079b      	lsls	r3, r3, #30
 80046a4:	d413      	bmi.n	80046ce <_printf_i+0x23a>
 80046a6:	68e0      	ldr	r0, [r4, #12]
 80046a8:	9b03      	ldr	r3, [sp, #12]
 80046aa:	4298      	cmp	r0, r3
 80046ac:	bfb8      	it	lt
 80046ae:	4618      	movlt	r0, r3
 80046b0:	e7a4      	b.n	80045fc <_printf_i+0x168>
 80046b2:	2301      	movs	r3, #1
 80046b4:	4632      	mov	r2, r6
 80046b6:	4649      	mov	r1, r9
 80046b8:	4640      	mov	r0, r8
 80046ba:	47d0      	blx	sl
 80046bc:	3001      	adds	r0, #1
 80046be:	d09b      	beq.n	80045f8 <_printf_i+0x164>
 80046c0:	3501      	adds	r5, #1
 80046c2:	68e3      	ldr	r3, [r4, #12]
 80046c4:	9903      	ldr	r1, [sp, #12]
 80046c6:	1a5b      	subs	r3, r3, r1
 80046c8:	42ab      	cmp	r3, r5
 80046ca:	dcf2      	bgt.n	80046b2 <_printf_i+0x21e>
 80046cc:	e7eb      	b.n	80046a6 <_printf_i+0x212>
 80046ce:	2500      	movs	r5, #0
 80046d0:	f104 0619 	add.w	r6, r4, #25
 80046d4:	e7f5      	b.n	80046c2 <_printf_i+0x22e>
 80046d6:	bf00      	nop
 80046d8:	080054e3 	.word	0x080054e3
 80046dc:	080054f4 	.word	0x080054f4

080046e0 <_sbrk_r>:
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	4d06      	ldr	r5, [pc, #24]	; (80046fc <_sbrk_r+0x1c>)
 80046e4:	2300      	movs	r3, #0
 80046e6:	4604      	mov	r4, r0
 80046e8:	4608      	mov	r0, r1
 80046ea:	602b      	str	r3, [r5, #0]
 80046ec:	f7fe f970 	bl	80029d0 <_sbrk>
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	d102      	bne.n	80046fa <_sbrk_r+0x1a>
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	b103      	cbz	r3, 80046fa <_sbrk_r+0x1a>
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	bd38      	pop	{r3, r4, r5, pc}
 80046fc:	200006c4 	.word	0x200006c4

08004700 <__swbuf_r>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	460e      	mov	r6, r1
 8004704:	4614      	mov	r4, r2
 8004706:	4605      	mov	r5, r0
 8004708:	b118      	cbz	r0, 8004712 <__swbuf_r+0x12>
 800470a:	6983      	ldr	r3, [r0, #24]
 800470c:	b90b      	cbnz	r3, 8004712 <__swbuf_r+0x12>
 800470e:	f000 f9d9 	bl	8004ac4 <__sinit>
 8004712:	4b21      	ldr	r3, [pc, #132]	; (8004798 <__swbuf_r+0x98>)
 8004714:	429c      	cmp	r4, r3
 8004716:	d12b      	bne.n	8004770 <__swbuf_r+0x70>
 8004718:	686c      	ldr	r4, [r5, #4]
 800471a:	69a3      	ldr	r3, [r4, #24]
 800471c:	60a3      	str	r3, [r4, #8]
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	071a      	lsls	r2, r3, #28
 8004722:	d52f      	bpl.n	8004784 <__swbuf_r+0x84>
 8004724:	6923      	ldr	r3, [r4, #16]
 8004726:	b36b      	cbz	r3, 8004784 <__swbuf_r+0x84>
 8004728:	6923      	ldr	r3, [r4, #16]
 800472a:	6820      	ldr	r0, [r4, #0]
 800472c:	1ac0      	subs	r0, r0, r3
 800472e:	6963      	ldr	r3, [r4, #20]
 8004730:	b2f6      	uxtb	r6, r6
 8004732:	4283      	cmp	r3, r0
 8004734:	4637      	mov	r7, r6
 8004736:	dc04      	bgt.n	8004742 <__swbuf_r+0x42>
 8004738:	4621      	mov	r1, r4
 800473a:	4628      	mov	r0, r5
 800473c:	f000 f92e 	bl	800499c <_fflush_r>
 8004740:	bb30      	cbnz	r0, 8004790 <__swbuf_r+0x90>
 8004742:	68a3      	ldr	r3, [r4, #8]
 8004744:	3b01      	subs	r3, #1
 8004746:	60a3      	str	r3, [r4, #8]
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	6022      	str	r2, [r4, #0]
 800474e:	701e      	strb	r6, [r3, #0]
 8004750:	6963      	ldr	r3, [r4, #20]
 8004752:	3001      	adds	r0, #1
 8004754:	4283      	cmp	r3, r0
 8004756:	d004      	beq.n	8004762 <__swbuf_r+0x62>
 8004758:	89a3      	ldrh	r3, [r4, #12]
 800475a:	07db      	lsls	r3, r3, #31
 800475c:	d506      	bpl.n	800476c <__swbuf_r+0x6c>
 800475e:	2e0a      	cmp	r6, #10
 8004760:	d104      	bne.n	800476c <__swbuf_r+0x6c>
 8004762:	4621      	mov	r1, r4
 8004764:	4628      	mov	r0, r5
 8004766:	f000 f919 	bl	800499c <_fflush_r>
 800476a:	b988      	cbnz	r0, 8004790 <__swbuf_r+0x90>
 800476c:	4638      	mov	r0, r7
 800476e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004770:	4b0a      	ldr	r3, [pc, #40]	; (800479c <__swbuf_r+0x9c>)
 8004772:	429c      	cmp	r4, r3
 8004774:	d101      	bne.n	800477a <__swbuf_r+0x7a>
 8004776:	68ac      	ldr	r4, [r5, #8]
 8004778:	e7cf      	b.n	800471a <__swbuf_r+0x1a>
 800477a:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <__swbuf_r+0xa0>)
 800477c:	429c      	cmp	r4, r3
 800477e:	bf08      	it	eq
 8004780:	68ec      	ldreq	r4, [r5, #12]
 8004782:	e7ca      	b.n	800471a <__swbuf_r+0x1a>
 8004784:	4621      	mov	r1, r4
 8004786:	4628      	mov	r0, r5
 8004788:	f000 f80c 	bl	80047a4 <__swsetup_r>
 800478c:	2800      	cmp	r0, #0
 800478e:	d0cb      	beq.n	8004728 <__swbuf_r+0x28>
 8004790:	f04f 37ff 	mov.w	r7, #4294967295
 8004794:	e7ea      	b.n	800476c <__swbuf_r+0x6c>
 8004796:	bf00      	nop
 8004798:	08005528 	.word	0x08005528
 800479c:	08005548 	.word	0x08005548
 80047a0:	08005508 	.word	0x08005508

080047a4 <__swsetup_r>:
 80047a4:	4b32      	ldr	r3, [pc, #200]	; (8004870 <__swsetup_r+0xcc>)
 80047a6:	b570      	push	{r4, r5, r6, lr}
 80047a8:	681d      	ldr	r5, [r3, #0]
 80047aa:	4606      	mov	r6, r0
 80047ac:	460c      	mov	r4, r1
 80047ae:	b125      	cbz	r5, 80047ba <__swsetup_r+0x16>
 80047b0:	69ab      	ldr	r3, [r5, #24]
 80047b2:	b913      	cbnz	r3, 80047ba <__swsetup_r+0x16>
 80047b4:	4628      	mov	r0, r5
 80047b6:	f000 f985 	bl	8004ac4 <__sinit>
 80047ba:	4b2e      	ldr	r3, [pc, #184]	; (8004874 <__swsetup_r+0xd0>)
 80047bc:	429c      	cmp	r4, r3
 80047be:	d10f      	bne.n	80047e0 <__swsetup_r+0x3c>
 80047c0:	686c      	ldr	r4, [r5, #4]
 80047c2:	89a3      	ldrh	r3, [r4, #12]
 80047c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047c8:	0719      	lsls	r1, r3, #28
 80047ca:	d42c      	bmi.n	8004826 <__swsetup_r+0x82>
 80047cc:	06dd      	lsls	r5, r3, #27
 80047ce:	d411      	bmi.n	80047f4 <__swsetup_r+0x50>
 80047d0:	2309      	movs	r3, #9
 80047d2:	6033      	str	r3, [r6, #0]
 80047d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047d8:	81a3      	strh	r3, [r4, #12]
 80047da:	f04f 30ff 	mov.w	r0, #4294967295
 80047de:	e03e      	b.n	800485e <__swsetup_r+0xba>
 80047e0:	4b25      	ldr	r3, [pc, #148]	; (8004878 <__swsetup_r+0xd4>)
 80047e2:	429c      	cmp	r4, r3
 80047e4:	d101      	bne.n	80047ea <__swsetup_r+0x46>
 80047e6:	68ac      	ldr	r4, [r5, #8]
 80047e8:	e7eb      	b.n	80047c2 <__swsetup_r+0x1e>
 80047ea:	4b24      	ldr	r3, [pc, #144]	; (800487c <__swsetup_r+0xd8>)
 80047ec:	429c      	cmp	r4, r3
 80047ee:	bf08      	it	eq
 80047f0:	68ec      	ldreq	r4, [r5, #12]
 80047f2:	e7e6      	b.n	80047c2 <__swsetup_r+0x1e>
 80047f4:	0758      	lsls	r0, r3, #29
 80047f6:	d512      	bpl.n	800481e <__swsetup_r+0x7a>
 80047f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047fa:	b141      	cbz	r1, 800480e <__swsetup_r+0x6a>
 80047fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004800:	4299      	cmp	r1, r3
 8004802:	d002      	beq.n	800480a <__swsetup_r+0x66>
 8004804:	4630      	mov	r0, r6
 8004806:	f7ff fa77 	bl	8003cf8 <_free_r>
 800480a:	2300      	movs	r3, #0
 800480c:	6363      	str	r3, [r4, #52]	; 0x34
 800480e:	89a3      	ldrh	r3, [r4, #12]
 8004810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004814:	81a3      	strh	r3, [r4, #12]
 8004816:	2300      	movs	r3, #0
 8004818:	6063      	str	r3, [r4, #4]
 800481a:	6923      	ldr	r3, [r4, #16]
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	89a3      	ldrh	r3, [r4, #12]
 8004820:	f043 0308 	orr.w	r3, r3, #8
 8004824:	81a3      	strh	r3, [r4, #12]
 8004826:	6923      	ldr	r3, [r4, #16]
 8004828:	b94b      	cbnz	r3, 800483e <__swsetup_r+0x9a>
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004834:	d003      	beq.n	800483e <__swsetup_r+0x9a>
 8004836:	4621      	mov	r1, r4
 8004838:	4630      	mov	r0, r6
 800483a:	f000 fa07 	bl	8004c4c <__smakebuf_r>
 800483e:	89a0      	ldrh	r0, [r4, #12]
 8004840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004844:	f010 0301 	ands.w	r3, r0, #1
 8004848:	d00a      	beq.n	8004860 <__swsetup_r+0xbc>
 800484a:	2300      	movs	r3, #0
 800484c:	60a3      	str	r3, [r4, #8]
 800484e:	6963      	ldr	r3, [r4, #20]
 8004850:	425b      	negs	r3, r3
 8004852:	61a3      	str	r3, [r4, #24]
 8004854:	6923      	ldr	r3, [r4, #16]
 8004856:	b943      	cbnz	r3, 800486a <__swsetup_r+0xc6>
 8004858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800485c:	d1ba      	bne.n	80047d4 <__swsetup_r+0x30>
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	0781      	lsls	r1, r0, #30
 8004862:	bf58      	it	pl
 8004864:	6963      	ldrpl	r3, [r4, #20]
 8004866:	60a3      	str	r3, [r4, #8]
 8004868:	e7f4      	b.n	8004854 <__swsetup_r+0xb0>
 800486a:	2000      	movs	r0, #0
 800486c:	e7f7      	b.n	800485e <__swsetup_r+0xba>
 800486e:	bf00      	nop
 8004870:	20000004 	.word	0x20000004
 8004874:	08005528 	.word	0x08005528
 8004878:	08005548 	.word	0x08005548
 800487c:	08005508 	.word	0x08005508

08004880 <abort>:
 8004880:	b508      	push	{r3, lr}
 8004882:	2006      	movs	r0, #6
 8004884:	f000 fa96 	bl	8004db4 <raise>
 8004888:	2001      	movs	r0, #1
 800488a:	f7fe f829 	bl	80028e0 <_exit>
	...

08004890 <__sflush_r>:
 8004890:	898a      	ldrh	r2, [r1, #12]
 8004892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004896:	4605      	mov	r5, r0
 8004898:	0710      	lsls	r0, r2, #28
 800489a:	460c      	mov	r4, r1
 800489c:	d458      	bmi.n	8004950 <__sflush_r+0xc0>
 800489e:	684b      	ldr	r3, [r1, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	dc05      	bgt.n	80048b0 <__sflush_r+0x20>
 80048a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	dc02      	bgt.n	80048b0 <__sflush_r+0x20>
 80048aa:	2000      	movs	r0, #0
 80048ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048b2:	2e00      	cmp	r6, #0
 80048b4:	d0f9      	beq.n	80048aa <__sflush_r+0x1a>
 80048b6:	2300      	movs	r3, #0
 80048b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048bc:	682f      	ldr	r7, [r5, #0]
 80048be:	602b      	str	r3, [r5, #0]
 80048c0:	d032      	beq.n	8004928 <__sflush_r+0x98>
 80048c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048c4:	89a3      	ldrh	r3, [r4, #12]
 80048c6:	075a      	lsls	r2, r3, #29
 80048c8:	d505      	bpl.n	80048d6 <__sflush_r+0x46>
 80048ca:	6863      	ldr	r3, [r4, #4]
 80048cc:	1ac0      	subs	r0, r0, r3
 80048ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048d0:	b10b      	cbz	r3, 80048d6 <__sflush_r+0x46>
 80048d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048d4:	1ac0      	subs	r0, r0, r3
 80048d6:	2300      	movs	r3, #0
 80048d8:	4602      	mov	r2, r0
 80048da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048dc:	6a21      	ldr	r1, [r4, #32]
 80048de:	4628      	mov	r0, r5
 80048e0:	47b0      	blx	r6
 80048e2:	1c43      	adds	r3, r0, #1
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	d106      	bne.n	80048f6 <__sflush_r+0x66>
 80048e8:	6829      	ldr	r1, [r5, #0]
 80048ea:	291d      	cmp	r1, #29
 80048ec:	d82c      	bhi.n	8004948 <__sflush_r+0xb8>
 80048ee:	4a2a      	ldr	r2, [pc, #168]	; (8004998 <__sflush_r+0x108>)
 80048f0:	40ca      	lsrs	r2, r1
 80048f2:	07d6      	lsls	r6, r2, #31
 80048f4:	d528      	bpl.n	8004948 <__sflush_r+0xb8>
 80048f6:	2200      	movs	r2, #0
 80048f8:	6062      	str	r2, [r4, #4]
 80048fa:	04d9      	lsls	r1, r3, #19
 80048fc:	6922      	ldr	r2, [r4, #16]
 80048fe:	6022      	str	r2, [r4, #0]
 8004900:	d504      	bpl.n	800490c <__sflush_r+0x7c>
 8004902:	1c42      	adds	r2, r0, #1
 8004904:	d101      	bne.n	800490a <__sflush_r+0x7a>
 8004906:	682b      	ldr	r3, [r5, #0]
 8004908:	b903      	cbnz	r3, 800490c <__sflush_r+0x7c>
 800490a:	6560      	str	r0, [r4, #84]	; 0x54
 800490c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800490e:	602f      	str	r7, [r5, #0]
 8004910:	2900      	cmp	r1, #0
 8004912:	d0ca      	beq.n	80048aa <__sflush_r+0x1a>
 8004914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004918:	4299      	cmp	r1, r3
 800491a:	d002      	beq.n	8004922 <__sflush_r+0x92>
 800491c:	4628      	mov	r0, r5
 800491e:	f7ff f9eb 	bl	8003cf8 <_free_r>
 8004922:	2000      	movs	r0, #0
 8004924:	6360      	str	r0, [r4, #52]	; 0x34
 8004926:	e7c1      	b.n	80048ac <__sflush_r+0x1c>
 8004928:	6a21      	ldr	r1, [r4, #32]
 800492a:	2301      	movs	r3, #1
 800492c:	4628      	mov	r0, r5
 800492e:	47b0      	blx	r6
 8004930:	1c41      	adds	r1, r0, #1
 8004932:	d1c7      	bne.n	80048c4 <__sflush_r+0x34>
 8004934:	682b      	ldr	r3, [r5, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0c4      	beq.n	80048c4 <__sflush_r+0x34>
 800493a:	2b1d      	cmp	r3, #29
 800493c:	d001      	beq.n	8004942 <__sflush_r+0xb2>
 800493e:	2b16      	cmp	r3, #22
 8004940:	d101      	bne.n	8004946 <__sflush_r+0xb6>
 8004942:	602f      	str	r7, [r5, #0]
 8004944:	e7b1      	b.n	80048aa <__sflush_r+0x1a>
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800494c:	81a3      	strh	r3, [r4, #12]
 800494e:	e7ad      	b.n	80048ac <__sflush_r+0x1c>
 8004950:	690f      	ldr	r7, [r1, #16]
 8004952:	2f00      	cmp	r7, #0
 8004954:	d0a9      	beq.n	80048aa <__sflush_r+0x1a>
 8004956:	0793      	lsls	r3, r2, #30
 8004958:	680e      	ldr	r6, [r1, #0]
 800495a:	bf08      	it	eq
 800495c:	694b      	ldreq	r3, [r1, #20]
 800495e:	600f      	str	r7, [r1, #0]
 8004960:	bf18      	it	ne
 8004962:	2300      	movne	r3, #0
 8004964:	eba6 0807 	sub.w	r8, r6, r7
 8004968:	608b      	str	r3, [r1, #8]
 800496a:	f1b8 0f00 	cmp.w	r8, #0
 800496e:	dd9c      	ble.n	80048aa <__sflush_r+0x1a>
 8004970:	6a21      	ldr	r1, [r4, #32]
 8004972:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004974:	4643      	mov	r3, r8
 8004976:	463a      	mov	r2, r7
 8004978:	4628      	mov	r0, r5
 800497a:	47b0      	blx	r6
 800497c:	2800      	cmp	r0, #0
 800497e:	dc06      	bgt.n	800498e <__sflush_r+0xfe>
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004986:	81a3      	strh	r3, [r4, #12]
 8004988:	f04f 30ff 	mov.w	r0, #4294967295
 800498c:	e78e      	b.n	80048ac <__sflush_r+0x1c>
 800498e:	4407      	add	r7, r0
 8004990:	eba8 0800 	sub.w	r8, r8, r0
 8004994:	e7e9      	b.n	800496a <__sflush_r+0xda>
 8004996:	bf00      	nop
 8004998:	20400001 	.word	0x20400001

0800499c <_fflush_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	690b      	ldr	r3, [r1, #16]
 80049a0:	4605      	mov	r5, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	b913      	cbnz	r3, 80049ac <_fflush_r+0x10>
 80049a6:	2500      	movs	r5, #0
 80049a8:	4628      	mov	r0, r5
 80049aa:	bd38      	pop	{r3, r4, r5, pc}
 80049ac:	b118      	cbz	r0, 80049b6 <_fflush_r+0x1a>
 80049ae:	6983      	ldr	r3, [r0, #24]
 80049b0:	b90b      	cbnz	r3, 80049b6 <_fflush_r+0x1a>
 80049b2:	f000 f887 	bl	8004ac4 <__sinit>
 80049b6:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <_fflush_r+0x6c>)
 80049b8:	429c      	cmp	r4, r3
 80049ba:	d11b      	bne.n	80049f4 <_fflush_r+0x58>
 80049bc:	686c      	ldr	r4, [r5, #4]
 80049be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0ef      	beq.n	80049a6 <_fflush_r+0xa>
 80049c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049c8:	07d0      	lsls	r0, r2, #31
 80049ca:	d404      	bmi.n	80049d6 <_fflush_r+0x3a>
 80049cc:	0599      	lsls	r1, r3, #22
 80049ce:	d402      	bmi.n	80049d6 <_fflush_r+0x3a>
 80049d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049d2:	f000 f915 	bl	8004c00 <__retarget_lock_acquire_recursive>
 80049d6:	4628      	mov	r0, r5
 80049d8:	4621      	mov	r1, r4
 80049da:	f7ff ff59 	bl	8004890 <__sflush_r>
 80049de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049e0:	07da      	lsls	r2, r3, #31
 80049e2:	4605      	mov	r5, r0
 80049e4:	d4e0      	bmi.n	80049a8 <_fflush_r+0xc>
 80049e6:	89a3      	ldrh	r3, [r4, #12]
 80049e8:	059b      	lsls	r3, r3, #22
 80049ea:	d4dd      	bmi.n	80049a8 <_fflush_r+0xc>
 80049ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049ee:	f000 f908 	bl	8004c02 <__retarget_lock_release_recursive>
 80049f2:	e7d9      	b.n	80049a8 <_fflush_r+0xc>
 80049f4:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <_fflush_r+0x70>)
 80049f6:	429c      	cmp	r4, r3
 80049f8:	d101      	bne.n	80049fe <_fflush_r+0x62>
 80049fa:	68ac      	ldr	r4, [r5, #8]
 80049fc:	e7df      	b.n	80049be <_fflush_r+0x22>
 80049fe:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <_fflush_r+0x74>)
 8004a00:	429c      	cmp	r4, r3
 8004a02:	bf08      	it	eq
 8004a04:	68ec      	ldreq	r4, [r5, #12]
 8004a06:	e7da      	b.n	80049be <_fflush_r+0x22>
 8004a08:	08005528 	.word	0x08005528
 8004a0c:	08005548 	.word	0x08005548
 8004a10:	08005508 	.word	0x08005508

08004a14 <std>:
 8004a14:	2300      	movs	r3, #0
 8004a16:	b510      	push	{r4, lr}
 8004a18:	4604      	mov	r4, r0
 8004a1a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a22:	6083      	str	r3, [r0, #8]
 8004a24:	8181      	strh	r1, [r0, #12]
 8004a26:	6643      	str	r3, [r0, #100]	; 0x64
 8004a28:	81c2      	strh	r2, [r0, #14]
 8004a2a:	6183      	str	r3, [r0, #24]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	2208      	movs	r2, #8
 8004a30:	305c      	adds	r0, #92	; 0x5c
 8004a32:	f7ff f8c1 	bl	8003bb8 <memset>
 8004a36:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <std+0x38>)
 8004a38:	6263      	str	r3, [r4, #36]	; 0x24
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <std+0x3c>)
 8004a3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <std+0x40>)
 8004a40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <std+0x44>)
 8004a44:	6224      	str	r4, [r4, #32]
 8004a46:	6323      	str	r3, [r4, #48]	; 0x30
 8004a48:	bd10      	pop	{r4, pc}
 8004a4a:	bf00      	nop
 8004a4c:	08004ded 	.word	0x08004ded
 8004a50:	08004e0f 	.word	0x08004e0f
 8004a54:	08004e47 	.word	0x08004e47
 8004a58:	08004e6b 	.word	0x08004e6b

08004a5c <_cleanup_r>:
 8004a5c:	4901      	ldr	r1, [pc, #4]	; (8004a64 <_cleanup_r+0x8>)
 8004a5e:	f000 b8af 	b.w	8004bc0 <_fwalk_reent>
 8004a62:	bf00      	nop
 8004a64:	0800499d 	.word	0x0800499d

08004a68 <__sfmoreglue>:
 8004a68:	b570      	push	{r4, r5, r6, lr}
 8004a6a:	1e4a      	subs	r2, r1, #1
 8004a6c:	2568      	movs	r5, #104	; 0x68
 8004a6e:	4355      	muls	r5, r2
 8004a70:	460e      	mov	r6, r1
 8004a72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a76:	f7ff f98f 	bl	8003d98 <_malloc_r>
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	b140      	cbz	r0, 8004a90 <__sfmoreglue+0x28>
 8004a7e:	2100      	movs	r1, #0
 8004a80:	e9c0 1600 	strd	r1, r6, [r0]
 8004a84:	300c      	adds	r0, #12
 8004a86:	60a0      	str	r0, [r4, #8]
 8004a88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a8c:	f7ff f894 	bl	8003bb8 <memset>
 8004a90:	4620      	mov	r0, r4
 8004a92:	bd70      	pop	{r4, r5, r6, pc}

08004a94 <__sfp_lock_acquire>:
 8004a94:	4801      	ldr	r0, [pc, #4]	; (8004a9c <__sfp_lock_acquire+0x8>)
 8004a96:	f000 b8b3 	b.w	8004c00 <__retarget_lock_acquire_recursive>
 8004a9a:	bf00      	nop
 8004a9c:	200006c0 	.word	0x200006c0

08004aa0 <__sfp_lock_release>:
 8004aa0:	4801      	ldr	r0, [pc, #4]	; (8004aa8 <__sfp_lock_release+0x8>)
 8004aa2:	f000 b8ae 	b.w	8004c02 <__retarget_lock_release_recursive>
 8004aa6:	bf00      	nop
 8004aa8:	200006c0 	.word	0x200006c0

08004aac <__sinit_lock_acquire>:
 8004aac:	4801      	ldr	r0, [pc, #4]	; (8004ab4 <__sinit_lock_acquire+0x8>)
 8004aae:	f000 b8a7 	b.w	8004c00 <__retarget_lock_acquire_recursive>
 8004ab2:	bf00      	nop
 8004ab4:	200006bb 	.word	0x200006bb

08004ab8 <__sinit_lock_release>:
 8004ab8:	4801      	ldr	r0, [pc, #4]	; (8004ac0 <__sinit_lock_release+0x8>)
 8004aba:	f000 b8a2 	b.w	8004c02 <__retarget_lock_release_recursive>
 8004abe:	bf00      	nop
 8004ac0:	200006bb 	.word	0x200006bb

08004ac4 <__sinit>:
 8004ac4:	b510      	push	{r4, lr}
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	f7ff fff0 	bl	8004aac <__sinit_lock_acquire>
 8004acc:	69a3      	ldr	r3, [r4, #24]
 8004ace:	b11b      	cbz	r3, 8004ad8 <__sinit+0x14>
 8004ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ad4:	f7ff bff0 	b.w	8004ab8 <__sinit_lock_release>
 8004ad8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004adc:	6523      	str	r3, [r4, #80]	; 0x50
 8004ade:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <__sinit+0x68>)
 8004ae0:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <__sinit+0x6c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ae6:	42a3      	cmp	r3, r4
 8004ae8:	bf04      	itt	eq
 8004aea:	2301      	moveq	r3, #1
 8004aec:	61a3      	streq	r3, [r4, #24]
 8004aee:	4620      	mov	r0, r4
 8004af0:	f000 f820 	bl	8004b34 <__sfp>
 8004af4:	6060      	str	r0, [r4, #4]
 8004af6:	4620      	mov	r0, r4
 8004af8:	f000 f81c 	bl	8004b34 <__sfp>
 8004afc:	60a0      	str	r0, [r4, #8]
 8004afe:	4620      	mov	r0, r4
 8004b00:	f000 f818 	bl	8004b34 <__sfp>
 8004b04:	2200      	movs	r2, #0
 8004b06:	60e0      	str	r0, [r4, #12]
 8004b08:	2104      	movs	r1, #4
 8004b0a:	6860      	ldr	r0, [r4, #4]
 8004b0c:	f7ff ff82 	bl	8004a14 <std>
 8004b10:	68a0      	ldr	r0, [r4, #8]
 8004b12:	2201      	movs	r2, #1
 8004b14:	2109      	movs	r1, #9
 8004b16:	f7ff ff7d 	bl	8004a14 <std>
 8004b1a:	68e0      	ldr	r0, [r4, #12]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	2112      	movs	r1, #18
 8004b20:	f7ff ff78 	bl	8004a14 <std>
 8004b24:	2301      	movs	r3, #1
 8004b26:	61a3      	str	r3, [r4, #24]
 8004b28:	e7d2      	b.n	8004ad0 <__sinit+0xc>
 8004b2a:	bf00      	nop
 8004b2c:	0800541c 	.word	0x0800541c
 8004b30:	08004a5d 	.word	0x08004a5d

08004b34 <__sfp>:
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	4607      	mov	r7, r0
 8004b38:	f7ff ffac 	bl	8004a94 <__sfp_lock_acquire>
 8004b3c:	4b1e      	ldr	r3, [pc, #120]	; (8004bb8 <__sfp+0x84>)
 8004b3e:	681e      	ldr	r6, [r3, #0]
 8004b40:	69b3      	ldr	r3, [r6, #24]
 8004b42:	b913      	cbnz	r3, 8004b4a <__sfp+0x16>
 8004b44:	4630      	mov	r0, r6
 8004b46:	f7ff ffbd 	bl	8004ac4 <__sinit>
 8004b4a:	3648      	adds	r6, #72	; 0x48
 8004b4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	d503      	bpl.n	8004b5c <__sfp+0x28>
 8004b54:	6833      	ldr	r3, [r6, #0]
 8004b56:	b30b      	cbz	r3, 8004b9c <__sfp+0x68>
 8004b58:	6836      	ldr	r6, [r6, #0]
 8004b5a:	e7f7      	b.n	8004b4c <__sfp+0x18>
 8004b5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b60:	b9d5      	cbnz	r5, 8004b98 <__sfp+0x64>
 8004b62:	4b16      	ldr	r3, [pc, #88]	; (8004bbc <__sfp+0x88>)
 8004b64:	60e3      	str	r3, [r4, #12]
 8004b66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b6a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b6c:	f000 f847 	bl	8004bfe <__retarget_lock_init_recursive>
 8004b70:	f7ff ff96 	bl	8004aa0 <__sfp_lock_release>
 8004b74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b7c:	6025      	str	r5, [r4, #0]
 8004b7e:	61a5      	str	r5, [r4, #24]
 8004b80:	2208      	movs	r2, #8
 8004b82:	4629      	mov	r1, r5
 8004b84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b88:	f7ff f816 	bl	8003bb8 <memset>
 8004b8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b94:	4620      	mov	r0, r4
 8004b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b98:	3468      	adds	r4, #104	; 0x68
 8004b9a:	e7d9      	b.n	8004b50 <__sfp+0x1c>
 8004b9c:	2104      	movs	r1, #4
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	f7ff ff62 	bl	8004a68 <__sfmoreglue>
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	6030      	str	r0, [r6, #0]
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d1d5      	bne.n	8004b58 <__sfp+0x24>
 8004bac:	f7ff ff78 	bl	8004aa0 <__sfp_lock_release>
 8004bb0:	230c      	movs	r3, #12
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	e7ee      	b.n	8004b94 <__sfp+0x60>
 8004bb6:	bf00      	nop
 8004bb8:	0800541c 	.word	0x0800541c
 8004bbc:	ffff0001 	.word	0xffff0001

08004bc0 <_fwalk_reent>:
 8004bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bc4:	4606      	mov	r6, r0
 8004bc6:	4688      	mov	r8, r1
 8004bc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bcc:	2700      	movs	r7, #0
 8004bce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bd2:	f1b9 0901 	subs.w	r9, r9, #1
 8004bd6:	d505      	bpl.n	8004be4 <_fwalk_reent+0x24>
 8004bd8:	6824      	ldr	r4, [r4, #0]
 8004bda:	2c00      	cmp	r4, #0
 8004bdc:	d1f7      	bne.n	8004bce <_fwalk_reent+0xe>
 8004bde:	4638      	mov	r0, r7
 8004be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004be4:	89ab      	ldrh	r3, [r5, #12]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d907      	bls.n	8004bfa <_fwalk_reent+0x3a>
 8004bea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	d003      	beq.n	8004bfa <_fwalk_reent+0x3a>
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	47c0      	blx	r8
 8004bf8:	4307      	orrs	r7, r0
 8004bfa:	3568      	adds	r5, #104	; 0x68
 8004bfc:	e7e9      	b.n	8004bd2 <_fwalk_reent+0x12>

08004bfe <__retarget_lock_init_recursive>:
 8004bfe:	4770      	bx	lr

08004c00 <__retarget_lock_acquire_recursive>:
 8004c00:	4770      	bx	lr

08004c02 <__retarget_lock_release_recursive>:
 8004c02:	4770      	bx	lr

08004c04 <__swhatbuf_r>:
 8004c04:	b570      	push	{r4, r5, r6, lr}
 8004c06:	460e      	mov	r6, r1
 8004c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c0c:	2900      	cmp	r1, #0
 8004c0e:	b096      	sub	sp, #88	; 0x58
 8004c10:	4614      	mov	r4, r2
 8004c12:	461d      	mov	r5, r3
 8004c14:	da07      	bge.n	8004c26 <__swhatbuf_r+0x22>
 8004c16:	2300      	movs	r3, #0
 8004c18:	602b      	str	r3, [r5, #0]
 8004c1a:	89b3      	ldrh	r3, [r6, #12]
 8004c1c:	061a      	lsls	r2, r3, #24
 8004c1e:	d410      	bmi.n	8004c42 <__swhatbuf_r+0x3e>
 8004c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c24:	e00e      	b.n	8004c44 <__swhatbuf_r+0x40>
 8004c26:	466a      	mov	r2, sp
 8004c28:	f000 f946 	bl	8004eb8 <_fstat_r>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	dbf2      	blt.n	8004c16 <__swhatbuf_r+0x12>
 8004c30:	9a01      	ldr	r2, [sp, #4]
 8004c32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c3a:	425a      	negs	r2, r3
 8004c3c:	415a      	adcs	r2, r3
 8004c3e:	602a      	str	r2, [r5, #0]
 8004c40:	e7ee      	b.n	8004c20 <__swhatbuf_r+0x1c>
 8004c42:	2340      	movs	r3, #64	; 0x40
 8004c44:	2000      	movs	r0, #0
 8004c46:	6023      	str	r3, [r4, #0]
 8004c48:	b016      	add	sp, #88	; 0x58
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}

08004c4c <__smakebuf_r>:
 8004c4c:	898b      	ldrh	r3, [r1, #12]
 8004c4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c50:	079d      	lsls	r5, r3, #30
 8004c52:	4606      	mov	r6, r0
 8004c54:	460c      	mov	r4, r1
 8004c56:	d507      	bpl.n	8004c68 <__smakebuf_r+0x1c>
 8004c58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	6123      	str	r3, [r4, #16]
 8004c60:	2301      	movs	r3, #1
 8004c62:	6163      	str	r3, [r4, #20]
 8004c64:	b002      	add	sp, #8
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
 8004c68:	ab01      	add	r3, sp, #4
 8004c6a:	466a      	mov	r2, sp
 8004c6c:	f7ff ffca 	bl	8004c04 <__swhatbuf_r>
 8004c70:	9900      	ldr	r1, [sp, #0]
 8004c72:	4605      	mov	r5, r0
 8004c74:	4630      	mov	r0, r6
 8004c76:	f7ff f88f 	bl	8003d98 <_malloc_r>
 8004c7a:	b948      	cbnz	r0, 8004c90 <__smakebuf_r+0x44>
 8004c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c80:	059a      	lsls	r2, r3, #22
 8004c82:	d4ef      	bmi.n	8004c64 <__smakebuf_r+0x18>
 8004c84:	f023 0303 	bic.w	r3, r3, #3
 8004c88:	f043 0302 	orr.w	r3, r3, #2
 8004c8c:	81a3      	strh	r3, [r4, #12]
 8004c8e:	e7e3      	b.n	8004c58 <__smakebuf_r+0xc>
 8004c90:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <__smakebuf_r+0x7c>)
 8004c92:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c94:	89a3      	ldrh	r3, [r4, #12]
 8004c96:	6020      	str	r0, [r4, #0]
 8004c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9c:	81a3      	strh	r3, [r4, #12]
 8004c9e:	9b00      	ldr	r3, [sp, #0]
 8004ca0:	6163      	str	r3, [r4, #20]
 8004ca2:	9b01      	ldr	r3, [sp, #4]
 8004ca4:	6120      	str	r0, [r4, #16]
 8004ca6:	b15b      	cbz	r3, 8004cc0 <__smakebuf_r+0x74>
 8004ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cac:	4630      	mov	r0, r6
 8004cae:	f000 f915 	bl	8004edc <_isatty_r>
 8004cb2:	b128      	cbz	r0, 8004cc0 <__smakebuf_r+0x74>
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	f023 0303 	bic.w	r3, r3, #3
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	81a3      	strh	r3, [r4, #12]
 8004cc0:	89a0      	ldrh	r0, [r4, #12]
 8004cc2:	4305      	orrs	r5, r0
 8004cc4:	81a5      	strh	r5, [r4, #12]
 8004cc6:	e7cd      	b.n	8004c64 <__smakebuf_r+0x18>
 8004cc8:	08004a5d 	.word	0x08004a5d

08004ccc <memmove>:
 8004ccc:	4288      	cmp	r0, r1
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	eb01 0402 	add.w	r4, r1, r2
 8004cd4:	d902      	bls.n	8004cdc <memmove+0x10>
 8004cd6:	4284      	cmp	r4, r0
 8004cd8:	4623      	mov	r3, r4
 8004cda:	d807      	bhi.n	8004cec <memmove+0x20>
 8004cdc:	1e43      	subs	r3, r0, #1
 8004cde:	42a1      	cmp	r1, r4
 8004ce0:	d008      	beq.n	8004cf4 <memmove+0x28>
 8004ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cea:	e7f8      	b.n	8004cde <memmove+0x12>
 8004cec:	4402      	add	r2, r0
 8004cee:	4601      	mov	r1, r0
 8004cf0:	428a      	cmp	r2, r1
 8004cf2:	d100      	bne.n	8004cf6 <memmove+0x2a>
 8004cf4:	bd10      	pop	{r4, pc}
 8004cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cfe:	e7f7      	b.n	8004cf0 <memmove+0x24>

08004d00 <__malloc_lock>:
 8004d00:	4801      	ldr	r0, [pc, #4]	; (8004d08 <__malloc_lock+0x8>)
 8004d02:	f7ff bf7d 	b.w	8004c00 <__retarget_lock_acquire_recursive>
 8004d06:	bf00      	nop
 8004d08:	200006bc 	.word	0x200006bc

08004d0c <__malloc_unlock>:
 8004d0c:	4801      	ldr	r0, [pc, #4]	; (8004d14 <__malloc_unlock+0x8>)
 8004d0e:	f7ff bf78 	b.w	8004c02 <__retarget_lock_release_recursive>
 8004d12:	bf00      	nop
 8004d14:	200006bc 	.word	0x200006bc

08004d18 <_realloc_r>:
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1a:	4607      	mov	r7, r0
 8004d1c:	4614      	mov	r4, r2
 8004d1e:	460e      	mov	r6, r1
 8004d20:	b921      	cbnz	r1, 8004d2c <_realloc_r+0x14>
 8004d22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d26:	4611      	mov	r1, r2
 8004d28:	f7ff b836 	b.w	8003d98 <_malloc_r>
 8004d2c:	b922      	cbnz	r2, 8004d38 <_realloc_r+0x20>
 8004d2e:	f7fe ffe3 	bl	8003cf8 <_free_r>
 8004d32:	4625      	mov	r5, r4
 8004d34:	4628      	mov	r0, r5
 8004d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d38:	f000 f8f2 	bl	8004f20 <_malloc_usable_size_r>
 8004d3c:	42a0      	cmp	r0, r4
 8004d3e:	d20f      	bcs.n	8004d60 <_realloc_r+0x48>
 8004d40:	4621      	mov	r1, r4
 8004d42:	4638      	mov	r0, r7
 8004d44:	f7ff f828 	bl	8003d98 <_malloc_r>
 8004d48:	4605      	mov	r5, r0
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d0f2      	beq.n	8004d34 <_realloc_r+0x1c>
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4622      	mov	r2, r4
 8004d52:	f7fe ff23 	bl	8003b9c <memcpy>
 8004d56:	4631      	mov	r1, r6
 8004d58:	4638      	mov	r0, r7
 8004d5a:	f7fe ffcd 	bl	8003cf8 <_free_r>
 8004d5e:	e7e9      	b.n	8004d34 <_realloc_r+0x1c>
 8004d60:	4635      	mov	r5, r6
 8004d62:	e7e7      	b.n	8004d34 <_realloc_r+0x1c>

08004d64 <_raise_r>:
 8004d64:	291f      	cmp	r1, #31
 8004d66:	b538      	push	{r3, r4, r5, lr}
 8004d68:	4604      	mov	r4, r0
 8004d6a:	460d      	mov	r5, r1
 8004d6c:	d904      	bls.n	8004d78 <_raise_r+0x14>
 8004d6e:	2316      	movs	r3, #22
 8004d70:	6003      	str	r3, [r0, #0]
 8004d72:	f04f 30ff 	mov.w	r0, #4294967295
 8004d76:	bd38      	pop	{r3, r4, r5, pc}
 8004d78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004d7a:	b112      	cbz	r2, 8004d82 <_raise_r+0x1e>
 8004d7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d80:	b94b      	cbnz	r3, 8004d96 <_raise_r+0x32>
 8004d82:	4620      	mov	r0, r4
 8004d84:	f000 f830 	bl	8004de8 <_getpid_r>
 8004d88:	462a      	mov	r2, r5
 8004d8a:	4601      	mov	r1, r0
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d92:	f000 b817 	b.w	8004dc4 <_kill_r>
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d00a      	beq.n	8004db0 <_raise_r+0x4c>
 8004d9a:	1c59      	adds	r1, r3, #1
 8004d9c:	d103      	bne.n	8004da6 <_raise_r+0x42>
 8004d9e:	2316      	movs	r3, #22
 8004da0:	6003      	str	r3, [r0, #0]
 8004da2:	2001      	movs	r0, #1
 8004da4:	e7e7      	b.n	8004d76 <_raise_r+0x12>
 8004da6:	2400      	movs	r4, #0
 8004da8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004dac:	4628      	mov	r0, r5
 8004dae:	4798      	blx	r3
 8004db0:	2000      	movs	r0, #0
 8004db2:	e7e0      	b.n	8004d76 <_raise_r+0x12>

08004db4 <raise>:
 8004db4:	4b02      	ldr	r3, [pc, #8]	; (8004dc0 <raise+0xc>)
 8004db6:	4601      	mov	r1, r0
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	f7ff bfd3 	b.w	8004d64 <_raise_r>
 8004dbe:	bf00      	nop
 8004dc0:	20000004 	.word	0x20000004

08004dc4 <_kill_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4d07      	ldr	r5, [pc, #28]	; (8004de4 <_kill_r+0x20>)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	4611      	mov	r1, r2
 8004dd0:	602b      	str	r3, [r5, #0]
 8004dd2:	f7fd fd75 	bl	80028c0 <_kill>
 8004dd6:	1c43      	adds	r3, r0, #1
 8004dd8:	d102      	bne.n	8004de0 <_kill_r+0x1c>
 8004dda:	682b      	ldr	r3, [r5, #0]
 8004ddc:	b103      	cbz	r3, 8004de0 <_kill_r+0x1c>
 8004dde:	6023      	str	r3, [r4, #0]
 8004de0:	bd38      	pop	{r3, r4, r5, pc}
 8004de2:	bf00      	nop
 8004de4:	200006c4 	.word	0x200006c4

08004de8 <_getpid_r>:
 8004de8:	f7fd bd62 	b.w	80028b0 <_getpid>

08004dec <__sread>:
 8004dec:	b510      	push	{r4, lr}
 8004dee:	460c      	mov	r4, r1
 8004df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df4:	f000 f89c 	bl	8004f30 <_read_r>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	bfab      	itete	ge
 8004dfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8004e00:	181b      	addge	r3, r3, r0
 8004e02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e06:	bfac      	ite	ge
 8004e08:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e0a:	81a3      	strhlt	r3, [r4, #12]
 8004e0c:	bd10      	pop	{r4, pc}

08004e0e <__swrite>:
 8004e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e12:	461f      	mov	r7, r3
 8004e14:	898b      	ldrh	r3, [r1, #12]
 8004e16:	05db      	lsls	r3, r3, #23
 8004e18:	4605      	mov	r5, r0
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	4616      	mov	r6, r2
 8004e1e:	d505      	bpl.n	8004e2c <__swrite+0x1e>
 8004e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e24:	2302      	movs	r3, #2
 8004e26:	2200      	movs	r2, #0
 8004e28:	f000 f868 	bl	8004efc <_lseek_r>
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e36:	81a3      	strh	r3, [r4, #12]
 8004e38:	4632      	mov	r2, r6
 8004e3a:	463b      	mov	r3, r7
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e42:	f000 b817 	b.w	8004e74 <_write_r>

08004e46 <__sseek>:
 8004e46:	b510      	push	{r4, lr}
 8004e48:	460c      	mov	r4, r1
 8004e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e4e:	f000 f855 	bl	8004efc <_lseek_r>
 8004e52:	1c43      	adds	r3, r0, #1
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	bf15      	itete	ne
 8004e58:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e62:	81a3      	strheq	r3, [r4, #12]
 8004e64:	bf18      	it	ne
 8004e66:	81a3      	strhne	r3, [r4, #12]
 8004e68:	bd10      	pop	{r4, pc}

08004e6a <__sclose>:
 8004e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e6e:	f000 b813 	b.w	8004e98 <_close_r>
	...

08004e74 <_write_r>:
 8004e74:	b538      	push	{r3, r4, r5, lr}
 8004e76:	4d07      	ldr	r5, [pc, #28]	; (8004e94 <_write_r+0x20>)
 8004e78:	4604      	mov	r4, r0
 8004e7a:	4608      	mov	r0, r1
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	2200      	movs	r2, #0
 8004e80:	602a      	str	r2, [r5, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	f7fd fd53 	bl	800292e <_write>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_write_r+0x1e>
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_write_r+0x1e>
 8004e90:	6023      	str	r3, [r4, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	200006c4 	.word	0x200006c4

08004e98 <_close_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4d06      	ldr	r5, [pc, #24]	; (8004eb4 <_close_r+0x1c>)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	602b      	str	r3, [r5, #0]
 8004ea4:	f7fd fd5f 	bl	8002966 <_close>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_close_r+0x1a>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_close_r+0x1a>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	200006c4 	.word	0x200006c4

08004eb8 <_fstat_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4d07      	ldr	r5, [pc, #28]	; (8004ed8 <_fstat_r+0x20>)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	602b      	str	r3, [r5, #0]
 8004ec6:	f7fd fd5a 	bl	800297e <_fstat>
 8004eca:	1c43      	adds	r3, r0, #1
 8004ecc:	d102      	bne.n	8004ed4 <_fstat_r+0x1c>
 8004ece:	682b      	ldr	r3, [r5, #0]
 8004ed0:	b103      	cbz	r3, 8004ed4 <_fstat_r+0x1c>
 8004ed2:	6023      	str	r3, [r4, #0]
 8004ed4:	bd38      	pop	{r3, r4, r5, pc}
 8004ed6:	bf00      	nop
 8004ed8:	200006c4 	.word	0x200006c4

08004edc <_isatty_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4d06      	ldr	r5, [pc, #24]	; (8004ef8 <_isatty_r+0x1c>)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	4608      	mov	r0, r1
 8004ee6:	602b      	str	r3, [r5, #0]
 8004ee8:	f7fd fd59 	bl	800299e <_isatty>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d102      	bne.n	8004ef6 <_isatty_r+0x1a>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	b103      	cbz	r3, 8004ef6 <_isatty_r+0x1a>
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	bd38      	pop	{r3, r4, r5, pc}
 8004ef8:	200006c4 	.word	0x200006c4

08004efc <_lseek_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4d07      	ldr	r5, [pc, #28]	; (8004f1c <_lseek_r+0x20>)
 8004f00:	4604      	mov	r4, r0
 8004f02:	4608      	mov	r0, r1
 8004f04:	4611      	mov	r1, r2
 8004f06:	2200      	movs	r2, #0
 8004f08:	602a      	str	r2, [r5, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f7fd fd52 	bl	80029b4 <_lseek>
 8004f10:	1c43      	adds	r3, r0, #1
 8004f12:	d102      	bne.n	8004f1a <_lseek_r+0x1e>
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	b103      	cbz	r3, 8004f1a <_lseek_r+0x1e>
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	bd38      	pop	{r3, r4, r5, pc}
 8004f1c:	200006c4 	.word	0x200006c4

08004f20 <_malloc_usable_size_r>:
 8004f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f24:	1f18      	subs	r0, r3, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bfbc      	itt	lt
 8004f2a:	580b      	ldrlt	r3, [r1, r0]
 8004f2c:	18c0      	addlt	r0, r0, r3
 8004f2e:	4770      	bx	lr

08004f30 <_read_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4d07      	ldr	r5, [pc, #28]	; (8004f50 <_read_r+0x20>)
 8004f34:	4604      	mov	r4, r0
 8004f36:	4608      	mov	r0, r1
 8004f38:	4611      	mov	r1, r2
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	602a      	str	r2, [r5, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f7fd fcd8 	bl	80028f4 <_read>
 8004f44:	1c43      	adds	r3, r0, #1
 8004f46:	d102      	bne.n	8004f4e <_read_r+0x1e>
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	b103      	cbz	r3, 8004f4e <_read_r+0x1e>
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	bd38      	pop	{r3, r4, r5, pc}
 8004f50:	200006c4 	.word	0x200006c4

08004f54 <_init>:
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	bf00      	nop
 8004f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5a:	bc08      	pop	{r3}
 8004f5c:	469e      	mov	lr, r3
 8004f5e:	4770      	bx	lr

08004f60 <_fini>:
 8004f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f62:	bf00      	nop
 8004f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f66:	bc08      	pop	{r3}
 8004f68:	469e      	mov	lr, r3
 8004f6a:	4770      	bx	lr
