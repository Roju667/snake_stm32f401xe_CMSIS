
cmsis-testing-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004638  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  080047d8  080047d8  000147d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004db4  08004db4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004db4  08004db4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004db4  08004db4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004db4  08004db4  00014db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  20000068  08004e24  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e8  08004e24  000206e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c85  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016cb  00000000  00000000  00027d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000490  00000000  00000000  000293e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c8  00000000  00000000  00029878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000049c3  00000000  00000000  00029c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000512af  00000000  00000000  0002e603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0007f8b2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001b6c  00000000  00000000  0007f908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000077b  00000000  00000000  00081474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080047c0 	.word	0x080047c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080047c0 	.word	0x080047c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000298:	4a04      	ldr	r2, [pc, #16]	; (80002ac <GFX_SetFont+0x1c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	6013      	str	r3, [r2, #0]
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000594 	.word	0x20000594

080002b0 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b089      	sub	sp, #36	; 0x24
 80002b4:	af02      	add	r7, sp, #8
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	4611      	mov	r1, r2
 80002bc:	461a      	mov	r2, r3
 80002be:	460b      	mov	r3, r1
 80002c0:	71fb      	strb	r3, [r7, #7]
 80002c2:	4613      	mov	r3, r2
 80002c4:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	2b7e      	cmp	r3, #126	; 0x7e
 80002ca:	f200 80a3 	bhi.w	8000414 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80002ce:	2300      	movs	r3, #0
 80002d0:	75fb      	strb	r3, [r7, #23]
 80002d2:	e096      	b.n	8000402 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80002d4:	4b51      	ldr	r3, [pc, #324]	; (800041c <GFX_DrawChar+0x16c>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	3b20      	subs	r3, #32
 80002dc:	494f      	ldr	r1, [pc, #316]	; (800041c <GFX_DrawChar+0x16c>)
 80002de:	6809      	ldr	r1, [r1, #0]
 80002e0:	3101      	adds	r1, #1
 80002e2:	7809      	ldrb	r1, [r1, #0]
 80002e4:	fb01 f103 	mul.w	r1, r1, r3
 80002e8:	7dfb      	ldrb	r3, [r7, #23]
 80002ea:	440b      	add	r3, r1
 80002ec:	3302      	adds	r3, #2
 80002ee:	4413      	add	r3, r2
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80002f4:	2300      	movs	r3, #0
 80002f6:	757b      	strb	r3, [r7, #21]
 80002f8:	e078      	b.n	80003ec <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 80002fa:	7dbb      	ldrb	r3, [r7, #22]
 80002fc:	f003 0301 	and.w	r3, r3, #1
 8000300:	2b00      	cmp	r3, #0
 8000302:	d032      	beq.n	800036a <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8000304:	4b46      	ldr	r3, [pc, #280]	; (8000420 <GFX_DrawChar+0x170>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d113      	bne.n	8000334 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 800030c:	7dfb      	ldrb	r3, [r7, #23]
 800030e:	b29a      	uxth	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	b29b      	uxth	r3, r3
 8000314:	4413      	add	r3, r2
 8000316:	b29b      	uxth	r3, r3
 8000318:	b218      	sxth	r0, r3
 800031a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800031e:	b29a      	uxth	r2, r3
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	b29b      	uxth	r3, r3
 8000324:	4413      	add	r3, r2
 8000326:	b29b      	uxth	r3, r3
 8000328:	b21b      	sxth	r3, r3
 800032a:	79ba      	ldrb	r2, [r7, #6]
 800032c:	4619      	mov	r1, r3
 800032e:	f000 fb71 	bl	8000a14 <SSD1306_DrawPixel>
 8000332:	e052      	b.n	80003da <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8000334:	7dfb      	ldrb	r3, [r7, #23]
 8000336:	4a3a      	ldr	r2, [pc, #232]	; (8000420 <GFX_DrawChar+0x170>)
 8000338:	7812      	ldrb	r2, [r2, #0]
 800033a:	fb02 f203 	mul.w	r2, r2, r3
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	18d0      	adds	r0, r2, r3
 8000342:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000346:	4a36      	ldr	r2, [pc, #216]	; (8000420 <GFX_DrawChar+0x170>)
 8000348:	7812      	ldrb	r2, [r2, #0]
 800034a:	fb02 f203 	mul.w	r2, r2, r3
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	18d1      	adds	r1, r2, r3
 8000352:	4b33      	ldr	r3, [pc, #204]	; (8000420 <GFX_DrawChar+0x170>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	b29a      	uxth	r2, r3
 8000358:	4b31      	ldr	r3, [pc, #196]	; (8000420 <GFX_DrawChar+0x170>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	b29c      	uxth	r4, r3
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	4623      	mov	r3, r4
 8000364:	f000 f9a3 	bl	80006ae <GFX_DrawFillRectangle>
 8000368:	e037      	b.n	80003da <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800036a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800036e:	2b00      	cmp	r3, #0
 8000370:	d133      	bne.n	80003da <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8000372:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <GFX_DrawChar+0x170>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d114      	bne.n	80003a4 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 800037a:	7dfb      	ldrb	r3, [r7, #23]
 800037c:	b29a      	uxth	r2, r3
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	b29b      	uxth	r3, r3
 8000382:	4413      	add	r3, r2
 8000384:	b29b      	uxth	r3, r3
 8000386:	b218      	sxth	r0, r3
 8000388:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800038c:	b29a      	uxth	r2, r3
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	b29b      	uxth	r3, r3
 8000392:	4413      	add	r3, r2
 8000394:	b29b      	uxth	r3, r3
 8000396:	b21b      	sxth	r3, r3
 8000398:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800039c:	4619      	mov	r1, r3
 800039e:	f000 fb39 	bl	8000a14 <SSD1306_DrawPixel>
 80003a2:	e01a      	b.n	80003da <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80003a4:	7dfb      	ldrb	r3, [r7, #23]
 80003a6:	4a1e      	ldr	r2, [pc, #120]	; (8000420 <GFX_DrawChar+0x170>)
 80003a8:	7812      	ldrb	r2, [r2, #0]
 80003aa:	fb02 f203 	mul.w	r2, r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	18d0      	adds	r0, r2, r3
 80003b2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80003b6:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <GFX_DrawChar+0x170>)
 80003b8:	7812      	ldrb	r2, [r2, #0]
 80003ba:	fb02 f203 	mul.w	r2, r2, r3
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	18d1      	adds	r1, r2, r3
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <GFX_DrawChar+0x170>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <GFX_DrawChar+0x170>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	b29c      	uxth	r4, r3
 80003ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80003d2:	9300      	str	r3, [sp, #0]
 80003d4:	4623      	mov	r3, r4
 80003d6:	f000 f96a 	bl	80006ae <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80003da:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	3301      	adds	r3, #1
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	757b      	strb	r3, [r7, #21]
 80003e6:	7dbb      	ldrb	r3, [r7, #22]
 80003e8:	085b      	lsrs	r3, r3, #1
 80003ea:	75bb      	strb	r3, [r7, #22]
 80003ec:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80003f0:	4a0a      	ldr	r2, [pc, #40]	; (800041c <GFX_DrawChar+0x16c>)
 80003f2:	6812      	ldr	r2, [r2, #0]
 80003f4:	7812      	ldrb	r2, [r2, #0]
 80003f6:	4293      	cmp	r3, r2
 80003f8:	f6ff af7f 	blt.w	80002fa <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80003fc:	7dfb      	ldrb	r3, [r7, #23]
 80003fe:	3301      	adds	r3, #1
 8000400:	75fb      	strb	r3, [r7, #23]
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <GFX_DrawChar+0x16c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	3301      	adds	r3, #1
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	7dfa      	ldrb	r2, [r7, #23]
 800040c:	429a      	cmp	r2, r3
 800040e:	f4ff af61 	bcc.w	80002d4 <GFX_DrawChar+0x24>
 8000412:	e000      	b.n	8000416 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8000414:	bf00      	nop
            }
        }
    }
}
 8000416:	371c      	adds	r7, #28
 8000418:	46bd      	mov	sp, r7
 800041a:	bd90      	pop	{r4, r7, pc}
 800041c:	20000594 	.word	0x20000594
 8000420:	20000000 	.word	0x20000000

08000424 <GFX_DrawString>:


void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af02      	add	r7, sp, #8
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	607a      	str	r2, [r7, #4]
 8000430:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 800043c:	e03e      	b.n	80004bc <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 800043e:	78f9      	ldrb	r1, [r7, #3]
 8000440:	7cfa      	ldrb	r2, [r7, #19]
 8000442:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000446:	9300      	str	r3, [sp, #0]
 8000448:	460b      	mov	r3, r1
 800044a:	68b9      	ldr	r1, [r7, #8]
 800044c:	6978      	ldr	r0, [r7, #20]
 800044e:	f7ff ff2f 	bl	80002b0 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8000452:	4b20      	ldr	r3, [pc, #128]	; (80004d4 <GFX_DrawString+0xb0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	461a      	mov	r2, r3
 800045c:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <GFX_DrawString+0xb4>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	fb03 f302 	mul.w	r3, r3, r2
 8000464:	3301      	adds	r3, #1
 8000466:	697a      	ldr	r2, [r7, #20]
 8000468:	4413      	add	r3, r2
 800046a:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 800046c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d120      	bne.n	80004b6 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8000474:	2300      	movs	r3, #0
 8000476:	74bb      	strb	r3, [r7, #18]
 8000478:	e012      	b.n	80004a0 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	b29b      	uxth	r3, r3
 800047e:	3b01      	subs	r3, #1
 8000480:	b29b      	uxth	r3, r3
 8000482:	b218      	sxth	r0, r3
 8000484:	7cbb      	ldrb	r3, [r7, #18]
 8000486:	b29a      	uxth	r2, r3
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	b29b      	uxth	r3, r3
 800048c:	4413      	add	r3, r2
 800048e:	b29b      	uxth	r3, r3
 8000490:	b21b      	sxth	r3, r3
 8000492:	2200      	movs	r2, #0
 8000494:	4619      	mov	r1, r3
 8000496:	f000 fabd 	bl	8000a14 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 800049a:	7cbb      	ldrb	r3, [r7, #18]
 800049c:	3301      	adds	r3, #1
 800049e:	74bb      	strb	r3, [r7, #18]
 80004a0:	7cba      	ldrb	r2, [r7, #18]
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <GFX_DrawString+0xb0>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	4619      	mov	r1, r3
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <GFX_DrawString+0xb4>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	fb03 f301 	mul.w	r3, r3, r1
 80004b2:	429a      	cmp	r2, r3
 80004b4:	dbe1      	blt.n	800047a <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	607a      	str	r2, [r7, #4]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1ba      	bne.n	800043e <GFX_DrawString+0x1a>
	}
}
 80004c8:	bf00      	nop
 80004ca:	bf00      	nop
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000594 	.word	0x20000594
 80004d8:	20000000 	.word	0x20000000

080004dc <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08c      	sub	sp, #48	; 0x30
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
 80004e8:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80004ea:	683a      	ldr	r2, [r7, #0]
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80004f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80004f8:	6879      	ldr	r1, [r7, #4]
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	1acb      	subs	r3, r1, r3
 80004fe:	2b00      	cmp	r3, #0
 8000500:	bfb8      	it	lt
 8000502:	425b      	neglt	r3, r3
 8000504:	429a      	cmp	r2, r3
 8000506:	bfcc      	ite	gt
 8000508:	2301      	movgt	r3, #1
 800050a:	2300      	movle	r3, #0
 800050c:	b2db      	uxtb	r3, r3
 800050e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8000510:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000514:	2b00      	cmp	r3, #0
 8000516:	d00b      	beq.n	8000530 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000522:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	623b      	str	r3, [r7, #32]
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	6a3b      	ldr	r3, [r7, #32]
 800052e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dd0b      	ble.n	8000550 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	61fb      	str	r3, [r7, #28]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	61bb      	str	r3, [r7, #24]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	b29a      	uxth	r2, r3
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	b29b      	uxth	r3, r3
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	b29b      	uxth	r3, r3
 800055c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	bfb8      	it	lt
 8000568:	425b      	neglt	r3, r3
 800056a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 800056c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000570:	0fda      	lsrs	r2, r3, #31
 8000572:	4413      	add	r3, r2
 8000574:	105b      	asrs	r3, r3, #1
 8000576:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000578:	68ba      	ldr	r2, [r7, #8]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	da02      	bge.n	8000586 <GFX_WriteLine+0xaa>
	        ystep = 1;
 8000580:	2301      	movs	r3, #1
 8000582:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000584:	e030      	b.n	80005e8 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 8000586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800058a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 800058c:	e02c      	b.n	80005e8 <GFX_WriteLine+0x10c>
	        if (steep) {
 800058e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000592:	2b00      	cmp	r3, #0
 8000594:	d009      	beq.n	80005aa <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	b21b      	sxth	r3, r3
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	b211      	sxth	r1, r2
 800059e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fa36 	bl	8000a14 <SSD1306_DrawPixel>
 80005a8:	e008      	b.n	80005bc <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	b21b      	sxth	r3, r3
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	b211      	sxth	r1, r2
 80005b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fa2c 	bl	8000a14 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80005bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80005be:	8abb      	ldrh	r3, [r7, #20]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80005c6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	da09      	bge.n	80005e2 <GFX_WriteLine+0x106>
	            y_start += ystep;
 80005ce:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	4413      	add	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80005d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80005da:	8afb      	ldrh	r3, [r7, #22]
 80005dc:	4413      	add	r3, r2
 80005de:	b29b      	uxth	r3, r3
 80005e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	3301      	adds	r3, #1
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	ddce      	ble.n	800058e <GFX_WriteLine+0xb2>
	        }
	    }
}
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	3730      	adds	r7, #48	; 0x30
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b086      	sub	sp, #24
 80005fe:	af02      	add	r7, sp, #8
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
 8000606:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	1e5a      	subs	r2, r3, #1
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	4613      	mov	r3, r2
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	68b9      	ldr	r1, [r7, #8]
 800061a:	68f8      	ldr	r0, [r7, #12]
 800061c:	f7ff ff5e 	bl	80004dc <GFX_WriteLine>
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af02      	add	r7, sp, #8
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
 8000634:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4413      	add	r3, r2
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	78fb      	ldrb	r3, [r7, #3]
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	68b9      	ldr	r1, [r7, #8]
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f7ff ff48 	bl	80004dc <GFX_WriteLine>
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	4611      	mov	r1, r2
 8000660:	461a      	mov	r2, r3
 8000662:	460b      	mov	r3, r1
 8000664:	80fb      	strh	r3, [r7, #6]
 8000666:	4613      	mov	r3, r2
 8000668:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 800066a:	88fa      	ldrh	r2, [r7, #6]
 800066c:	7e3b      	ldrb	r3, [r7, #24]
 800066e:	68b9      	ldr	r1, [r7, #8]
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ffd9 	bl	8000628 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 8000676:	88ba      	ldrh	r2, [r7, #4]
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	4413      	add	r3, r2
 800067c:	1e59      	subs	r1, r3, #1
 800067e:	88fa      	ldrh	r2, [r7, #6]
 8000680:	7e3b      	ldrb	r3, [r7, #24]
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	f7ff ffd0 	bl	8000628 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 8000688:	88ba      	ldrh	r2, [r7, #4]
 800068a:	7e3b      	ldrb	r3, [r7, #24]
 800068c:	68b9      	ldr	r1, [r7, #8]
 800068e:	68f8      	ldr	r0, [r7, #12]
 8000690:	f7ff ffb3 	bl	80005fa <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 8000694:	88fa      	ldrh	r2, [r7, #6]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	4413      	add	r3, r2
 800069a:	1e58      	subs	r0, r3, #1
 800069c:	88ba      	ldrh	r2, [r7, #4]
 800069e:	7e3b      	ldrb	r3, [r7, #24]
 80006a0:	68b9      	ldr	r1, [r7, #8]
 80006a2:	f7ff ffaa 	bl	80005fa <GFX_DrawFastVLine>

}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b086      	sub	sp, #24
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	60f8      	str	r0, [r7, #12]
 80006b6:	60b9      	str	r1, [r7, #8]
 80006b8:	4611      	mov	r1, r2
 80006ba:	461a      	mov	r2, r3
 80006bc:	460b      	mov	r3, r1
 80006be:	80fb      	strh	r3, [r7, #6]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	e009      	b.n	80006de <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 80006ca:	88ba      	ldrh	r2, [r7, #4]
 80006cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	6978      	ldr	r0, [r7, #20]
 80006d4:	f7ff ff91 	bl	80005fa <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	3301      	adds	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	88fa      	ldrh	r2, [r7, #6]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	4413      	add	r3, r2
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	dbef      	blt.n	80006ca <GFX_DrawFillRectangle+0x1c>
    }

}
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <GFX_DrawFillCircleHelper>:
    }
}
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, uint8_t color)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	4611      	mov	r1, r2
 8000700:	461a      	mov	r2, r3
 8000702:	460b      	mov	r3, r1
 8000704:	80fb      	strh	r3, [r7, #6]
 8000706:	4613      	mov	r3, r2
 8000708:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	f1c3 0301 	rsb	r3, r3, #1
 8000710:	b29b      	uxth	r3, r3
 8000712:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8000714:	2301      	movs	r3, #1
 8000716:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	461a      	mov	r2, r3
 800071c:	03d2      	lsls	r2, r2, #15
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	b29b      	uxth	r3, r3
 8000724:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800072e:	e077      	b.n	8000820 <GFX_DrawFillCircleHelper+0x12c>
        if (f >= 0) {
 8000730:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000734:	2b00      	cmp	r3, #0
 8000736:	db0e      	blt.n	8000756 <GFX_DrawFillCircleHelper+0x62>
            y--;
 8000738:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800073c:	b29b      	uxth	r3, r3
 800073e:	3b01      	subs	r3, #1
 8000740:	b29b      	uxth	r3, r3
 8000742:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8000744:	8b7b      	ldrh	r3, [r7, #26]
 8000746:	3302      	adds	r3, #2
 8000748:	b29b      	uxth	r3, r3
 800074a:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800074c:	8bfa      	ldrh	r2, [r7, #30]
 800074e:	8b7b      	ldrh	r3, [r7, #26]
 8000750:	4413      	add	r3, r2
 8000752:	b29b      	uxth	r3, r3
 8000754:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8000756:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800075a:	b29b      	uxth	r3, r3
 800075c:	3301      	adds	r3, #1
 800075e:	b29b      	uxth	r3, r3
 8000760:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8000762:	8bbb      	ldrh	r3, [r7, #28]
 8000764:	3302      	adds	r3, #2
 8000766:	b29b      	uxth	r3, r3
 8000768:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800076a:	8bfa      	ldrh	r2, [r7, #30]
 800076c:	8bbb      	ldrh	r3, [r7, #28]
 800076e:	4413      	add	r3, r2
 8000770:	b29b      	uxth	r3, r3
 8000772:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8000774:	797b      	ldrb	r3, [r7, #5]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	2b00      	cmp	r3, #0
 800077c:	d025      	beq.n	80007ca <GFX_DrawFillCircleHelper+0xd6>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 800077e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	18d0      	adds	r0, r2, r3
 8000786:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	1ad1      	subs	r1, r2, r3
 800078e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800079a:	441a      	add	r2, r3
 800079c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007a0:	f7ff ff2b 	bl	80005fa <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80007a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	18d0      	adds	r0, r2, r3
 80007ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	1ad1      	subs	r1, r2, r3
 80007b4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80007c0:	441a      	add	r2, r3
 80007c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007c6:	f7ff ff18 	bl	80005fa <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80007ca:	797b      	ldrb	r3, [r7, #5]
 80007cc:	f003 0302 	and.w	r3, r3, #2
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d025      	beq.n	8000820 <GFX_DrawFillCircleHelper+0x12c>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80007d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	1ad0      	subs	r0, r2, r3
 80007dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	1ad1      	subs	r1, r2, r3
 80007e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80007f0:	441a      	add	r2, r3
 80007f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007f6:	f7ff ff00 	bl	80005fa <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 80007fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	1ad0      	subs	r0, r2, r3
 8000802:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	1ad1      	subs	r1, r2, r3
 800080a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000816:	441a      	add	r2, r3
 8000818:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800081c:	f7ff feed 	bl	80005fa <GFX_DrawFastVLine>
    while (x<y) {
 8000820:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000824:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000828:	429a      	cmp	r2, r3
 800082a:	db81      	blt.n	8000730 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800082c:	bf00      	nop
 800082e:	bf00      	nop
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <GFX_DrawFillRoundRectangle>:
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
}
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, uint8_t color)
{
 8000836:	b590      	push	{r4, r7, lr}
 8000838:	b087      	sub	sp, #28
 800083a:	af02      	add	r7, sp, #8
 800083c:	60f8      	str	r0, [r7, #12]
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	4611      	mov	r1, r2
 8000842:	461a      	mov	r2, r3
 8000844:	460b      	mov	r3, r1
 8000846:	80fb      	strh	r3, [r7, #6]
 8000848:	4613      	mov	r3, r2
 800084a:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 800084c:	8c3a      	ldrh	r2, [r7, #32]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	18d0      	adds	r0, r2, r3
 8000852:	8c3b      	ldrh	r3, [r7, #32]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	b29b      	uxth	r3, r3
 8000858:	88fa      	ldrh	r2, [r7, #6]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	b29a      	uxth	r2, r3
 800085e:	88b9      	ldrh	r1, [r7, #4]
 8000860:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	460b      	mov	r3, r1
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	f7ff ff20 	bl	80006ae <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800086e:	88fa      	ldrh	r2, [r7, #6]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	441a      	add	r2, r3
 8000874:	8c3b      	ldrh	r3, [r7, #32]
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	1e58      	subs	r0, r3, #1
 800087a:	8c3a      	ldrh	r2, [r7, #32]
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	18d1      	adds	r1, r2, r3
 8000880:	8c3b      	ldrh	r3, [r7, #32]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	b29b      	uxth	r3, r3
 8000886:	88ba      	ldrh	r2, [r7, #4]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	b29b      	uxth	r3, r3
 800088c:	3b01      	subs	r3, #1
 800088e:	b29b      	uxth	r3, r3
 8000890:	b21b      	sxth	r3, r3
 8000892:	8c3c      	ldrh	r4, [r7, #32]
 8000894:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000898:	9201      	str	r2, [sp, #4]
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2301      	movs	r3, #1
 800089e:	4622      	mov	r2, r4
 80008a0:	f7ff ff28 	bl	80006f4 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80008a4:	8c3a      	ldrh	r2, [r7, #32]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	18d0      	adds	r0, r2, r3
 80008aa:	8c3a      	ldrh	r2, [r7, #32]
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	18d1      	adds	r1, r2, r3
 80008b0:	8c3b      	ldrh	r3, [r7, #32]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	88ba      	ldrh	r2, [r7, #4]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	3b01      	subs	r3, #1
 80008be:	b29b      	uxth	r3, r3
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	8c3c      	ldrh	r4, [r7, #32]
 80008c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80008c8:	9201      	str	r2, [sp, #4]
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2302      	movs	r3, #2
 80008ce:	4622      	mov	r2, r4
 80008d0:	f7ff ff10 	bl	80006f4 <GFX_DrawFillCircleHelper>
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd90      	pop	{r4, r7, pc}

080008dc <GFX_Image>:
	}
}
#endif
#if STM32_USING ==1
void GFX_Image(int x, int y, const uint8_t *img, uint8_t w, uint8_t h, uint8_t color)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
 80008e8:	70fb      	strb	r3, [r7, #3]
	uint8_t i, j, byteWidth = (w+7)/8;
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	3307      	adds	r3, #7
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	da00      	bge.n	80008f4 <GFX_Image+0x18>
 80008f2:	3307      	adds	r3, #7
 80008f4:	10db      	asrs	r3, r3, #3
 80008f6:	757b      	strb	r3, [r7, #21]

	for(j = 0; j < h; j++)
 80008f8:	2300      	movs	r3, #0
 80008fa:	75bb      	strb	r3, [r7, #22]
 80008fc:	e035      	b.n	800096a <GFX_Image+0x8e>
	{
		for(i = 0; i < w; i++)
 80008fe:	2300      	movs	r3, #0
 8000900:	75fb      	strb	r3, [r7, #23]
 8000902:	e02b      	b.n	800095c <GFX_Image+0x80>
		{
			if(img[j *byteWidth + i /8] & (128 >> (i&7)) )
 8000904:	7dbb      	ldrb	r3, [r7, #22]
 8000906:	7d7a      	ldrb	r2, [r7, #21]
 8000908:	fb02 f303 	mul.w	r3, r2, r3
 800090c:	7dfa      	ldrb	r2, [r7, #23]
 800090e:	08d2      	lsrs	r2, r2, #3
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	4413      	add	r3, r2
 8000914:	461a      	mov	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	f003 0307 	and.w	r3, r3, #7
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	fa42 f303 	asr.w	r3, r2, r3
 800092a:	400b      	ands	r3, r1
 800092c:	2b00      	cmp	r3, #0
 800092e:	d012      	beq.n	8000956 <GFX_Image+0x7a>
				GFX_DrawPixel(x+i, y+j, color);
 8000930:	7dfb      	ldrb	r3, [r7, #23]
 8000932:	b29a      	uxth	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	b29b      	uxth	r3, r3
 8000938:	4413      	add	r3, r2
 800093a:	b29b      	uxth	r3, r3
 800093c:	b218      	sxth	r0, r3
 800093e:	7dbb      	ldrb	r3, [r7, #22]
 8000940:	b29a      	uxth	r2, r3
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	b29b      	uxth	r3, r3
 8000946:	4413      	add	r3, r2
 8000948:	b29b      	uxth	r3, r3
 800094a:	b21b      	sxth	r3, r3
 800094c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	f000 f85f 	bl	8000a14 <SSD1306_DrawPixel>
		for(i = 0; i < w; i++)
 8000956:	7dfb      	ldrb	r3, [r7, #23]
 8000958:	3301      	adds	r3, #1
 800095a:	75fb      	strb	r3, [r7, #23]
 800095c:	7dfa      	ldrb	r2, [r7, #23]
 800095e:	78fb      	ldrb	r3, [r7, #3]
 8000960:	429a      	cmp	r2, r3
 8000962:	d3cf      	bcc.n	8000904 <GFX_Image+0x28>
	for(j = 0; j < h; j++)
 8000964:	7dbb      	ldrb	r3, [r7, #22]
 8000966:	3301      	adds	r3, #1
 8000968:	75bb      	strb	r3, [r7, #22]
 800096a:	7dba      	ldrb	r2, [r7, #22]
 800096c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000970:	429a      	cmp	r2, r3
 8000972:	d3c4      	bcc.n	80008fe <GFX_Image+0x22>
		}
	}
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <SSD1306_Command>:

static uint8_t buffer [SSD1306_BUFFERSIZE];


void SSD1306_Command(uint8_t Command)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af02      	add	r7, sp, #8
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
	i2c_transmit(p_oled_i2c, (SSD1306_ADDRESS << 1), SSD1306_REG_COMMAND, &Command, 1);
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SSD1306_Command+0x24>)
 800098c:	6818      	ldr	r0, [r3, #0]
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	2201      	movs	r2, #1
 8000992:	9200      	str	r2, [sp, #0]
 8000994:	2200      	movs	r2, #0
 8000996:	2178      	movs	r1, #120	; 0x78
 8000998:	f002 f964 	bl	8002c64 <i2c_transmit>

}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000598 	.word	0x20000598

080009a8 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	807b      	strh	r3, [r7, #2]
	i2c_transmit(p_oled_i2c, (SSD1306_ADDRESS << 1), SSD1306_REG_DATA, Data, Size);
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <SSD1306_Data+0x28>)
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	887b      	ldrh	r3, [r7, #2]
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2240      	movs	r2, #64	; 0x40
 80009c0:	2178      	movs	r1, #120	; 0x78
 80009c2:	f002 f94f 	bl	8002c64 <i2c_transmit>

}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000598 	.word	0x20000598

080009d4 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <SSD1306_Clear+0x16>
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d007      	beq.n	80009f8 <SSD1306_Clear+0x24>

	case YELLOWBLUE:
		memset(buffer,0xFF,SSD1306_BUFFERSIZE);
		break;
	}
}
 80009e8:	e00d      	b.n	8000a06 <SSD1306_Clear+0x32>
		memset(buffer,0x00,SSD1306_BUFFERSIZE);
 80009ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ee:	2100      	movs	r1, #0
 80009f0:	4807      	ldr	r0, [pc, #28]	; (8000a10 <SSD1306_Clear+0x3c>)
 80009f2:	f002 fd17 	bl	8003424 <memset>
		break;
 80009f6:	e006      	b.n	8000a06 <SSD1306_Clear+0x32>
		memset(buffer,0xFF,SSD1306_BUFFERSIZE);
 80009f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009fc:	21ff      	movs	r1, #255	; 0xff
 80009fe:	4804      	ldr	r0, [pc, #16]	; (8000a10 <SSD1306_Clear+0x3c>)
 8000a00:	f002 fd10 	bl	8003424 <memset>
		break;
 8000a04:	bf00      	nop
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000084 	.word	0x20000084

08000a14 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t color) {
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]
 8000a1e:	460b      	mov	r3, r1
 8000a20:	80bb      	strh	r3, [r7, #4]
 8000a22:	4613      	mov	r3, r2
 8000a24:	70fb      	strb	r3, [r7, #3]

	if ((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDWIDTH))
 8000a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f2c0 8087 	blt.w	8000b3e <SSD1306_DrawPixel+0x12a>
 8000a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a34:	2b7f      	cmp	r3, #127	; 0x7f
 8000a36:	f300 8082 	bgt.w	8000b3e <SSD1306_DrawPixel+0x12a>
 8000a3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	db7d      	blt.n	8000b3e <SSD1306_DrawPixel+0x12a>
 8000a42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a46:	2b7f      	cmp	r3, #127	; 0x7f
 8000a48:	dc79      	bgt.n	8000b3e <SSD1306_DrawPixel+0x12a>
		return;
    switch (color) {
 8000a4a:	78fb      	ldrb	r3, [r7, #3]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d051      	beq.n	8000af4 <SSD1306_DrawPixel+0xe0>
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	dc75      	bgt.n	8000b40 <SSD1306_DrawPixel+0x12c>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d026      	beq.n	8000aa6 <SSD1306_DrawPixel+0x92>
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d171      	bne.n	8000b40 <SSD1306_DrawPixel+0x12c>
    case SSD1306_COLOR_YELLOWBLUE:
    //buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7)); // byte 0 on the left side near GND
    buffer[(y/8) * SSD1306_LCDWIDTH + (SSD1306_LCDWIDTH - 1 - x)] |= (1 << (y & 7)); //  byte 0 on the right side near SDA
 8000a5c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	da00      	bge.n	8000a66 <SSD1306_DrawPixel+0x52>
 8000a64:	3307      	adds	r3, #7
 8000a66:	10db      	asrs	r3, r3, #3
 8000a68:	b218      	sxth	r0, r3
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	01da      	lsls	r2, r3, #7
 8000a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a72:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000a76:	4413      	add	r3, r2
 8000a78:	4a34      	ldr	r2, [pc, #208]	; (8000b4c <SSD1306_DrawPixel+0x138>)
 8000a7a:	5cd3      	ldrb	r3, [r2, r3]
 8000a7c:	b25a      	sxtb	r2, r3
 8000a7e:	88bb      	ldrh	r3, [r7, #4]
 8000a80:	f003 0307 	and.w	r3, r3, #7
 8000a84:	2101      	movs	r1, #1
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	b25b      	sxtb	r3, r3
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	b259      	sxtb	r1, r3
 8000a90:	4603      	mov	r3, r0
 8000a92:	01da      	lsls	r2, r3, #7
 8000a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a98:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000a9c:	4413      	add	r3, r2
 8000a9e:	b2c9      	uxtb	r1, r1
 8000aa0:	4a2a      	ldr	r2, [pc, #168]	; (8000b4c <SSD1306_DrawPixel+0x138>)
 8000aa2:	54d1      	strb	r1, [r2, r3]

      break;
 8000aa4:	e04c      	b.n	8000b40 <SSD1306_DrawPixel+0x12c>
    case SSD1306_COLOR_BLACK:
      //buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
    	buffer[(y/8) * SSD1306_LCDWIDTH + (SSD1306_LCDWIDTH - 1 - x)] &= ~(1 << (y & 7));
 8000aa6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	da00      	bge.n	8000ab0 <SSD1306_DrawPixel+0x9c>
 8000aae:	3307      	adds	r3, #7
 8000ab0:	10db      	asrs	r3, r3, #3
 8000ab2:	b218      	sxth	r0, r3
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	01da      	lsls	r2, r3, #7
 8000ab8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000abc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <SSD1306_DrawPixel+0x138>)
 8000ac4:	5cd3      	ldrb	r3, [r2, r3]
 8000ac6:	b25a      	sxtb	r2, r3
 8000ac8:	88bb      	ldrh	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	2101      	movs	r1, #1
 8000ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad4:	b25b      	sxtb	r3, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	b25b      	sxtb	r3, r3
 8000ada:	4013      	ands	r3, r2
 8000adc:	b259      	sxtb	r1, r3
 8000ade:	4603      	mov	r3, r0
 8000ae0:	01da      	lsls	r2, r3, #7
 8000ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ae6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000aea:	4413      	add	r3, r2
 8000aec:	b2c9      	uxtb	r1, r1
 8000aee:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <SSD1306_DrawPixel+0x138>)
 8000af0:	54d1      	strb	r1, [r2, r3]
      break;
 8000af2:	e025      	b.n	8000b40 <SSD1306_DrawPixel+0x12c>
    case SSD1306_INVERSE:
      //buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
    	buffer[(y/8) * SSD1306_LCDWIDTH + (SSD1306_LCDWIDTH - 1 - x)] ^= (1 << (y & 7));
 8000af4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	da00      	bge.n	8000afe <SSD1306_DrawPixel+0xea>
 8000afc:	3307      	adds	r3, #7
 8000afe:	10db      	asrs	r3, r3, #3
 8000b00:	b218      	sxth	r0, r3
 8000b02:	4603      	mov	r3, r0
 8000b04:	01da      	lsls	r2, r3, #7
 8000b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b0a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <SSD1306_DrawPixel+0x138>)
 8000b12:	5cd3      	ldrb	r3, [r2, r3]
 8000b14:	b25a      	sxtb	r2, r3
 8000b16:	88bb      	ldrh	r3, [r7, #4]
 8000b18:	f003 0307 	and.w	r3, r3, #7
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	4053      	eors	r3, r2
 8000b26:	b259      	sxtb	r1, r3
 8000b28:	4603      	mov	r3, r0
 8000b2a:	01da      	lsls	r2, r3, #7
 8000b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b30:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000b34:	4413      	add	r3, r2
 8000b36:	b2c9      	uxtb	r1, r1
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <SSD1306_DrawPixel+0x138>)
 8000b3a:	54d1      	strb	r1, [r2, r3]
      break;
 8000b3c:	e000      	b.n	8000b40 <SSD1306_DrawPixel+0x12c>
		return;
 8000b3e:	bf00      	nop
    }
  }
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000084 	.word	0x20000084

08000b50 <SSD1306_Display>:


void SSD1306_Display(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

	  SSD1306_Command(SSD1306_PAGEADDR);
 8000b54:	2022      	movs	r0, #34	; 0x22
 8000b56:	f7ff ff13 	bl	8000980 <SSD1306_Command>
	  SSD1306_Command(0);				// Page start address
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f7ff ff10 	bl	8000980 <SSD1306_Command>
	  SSD1306_Command(0xFF);				// Page end (not really, but works here)
 8000b60:	20ff      	movs	r0, #255	; 0xff
 8000b62:	f7ff ff0d 	bl	8000980 <SSD1306_Command>
	  SSD1306_Command(SSD1306_COLUMNADDR);
 8000b66:	2021      	movs	r0, #33	; 0x21
 8000b68:	f7ff ff0a 	bl	8000980 <SSD1306_Command>
	  SSD1306_Command(0);				// Column start address
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff ff07 	bl	8000980 <SSD1306_Command>
	  SSD1306_Command(SSD1306_LCDWIDTH - 1); 		// Column end address
 8000b72:	207f      	movs	r0, #127	; 0x7f
 8000b74:	f7ff ff04 	bl	8000980 <SSD1306_Command>

	  SSD1306_Data(buffer,SSD1306_BUFFERSIZE);
 8000b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <SSD1306_Display+0x38>)
 8000b7e:	f7ff ff13 	bl	80009a8 <SSD1306_Data>


}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000084 	.word	0x20000084

08000b8c <SSD1306_Init>:
void SSD1306_Init(i2c_handle_t *i2c)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	p_oled_i2c = i2c;
 8000b94:	4a2a      	ldr	r2, [pc, #168]	; (8000c40 <SSD1306_Init+0xb4>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8000b9a:	20ae      	movs	r0, #174	; 0xae
 8000b9c:	f7ff fef0 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8000ba0:	20d5      	movs	r0, #213	; 0xd5
 8000ba2:	f7ff feed 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0x80);
 8000ba6:	2080      	movs	r0, #128	; 0x80
 8000ba8:	f7ff feea 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETMULTIPLEX);
 8000bac:	20a8      	movs	r0, #168	; 0xa8
 8000bae:	f7ff fee7 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8000bb2:	203f      	movs	r0, #63	; 0x3f
 8000bb4:	f7ff fee4 	bl	8000980 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8000bb8:	20d3      	movs	r0, #211	; 0xd3
 8000bba:	f7ff fee1 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0x00);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fede 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0x80);
 8000bc4:	2080      	movs	r0, #128	; 0x80
 8000bc6:	f7ff fedb 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_CHARGEPUMP);
 8000bca:	208d      	movs	r0, #141	; 0x8d
 8000bcc:	f7ff fed8 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0x14);
 8000bd0:	2014      	movs	r0, #20
 8000bd2:	f7ff fed5 	bl	8000980 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE);
 8000bd6:	2020      	movs	r0, #32
 8000bd8:	f7ff fed2 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0x00);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fecf 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP);
 8000be2:	20a0      	movs	r0, #160	; 0xa0
 8000be4:	f7ff fecc 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 8000be8:	20c8      	movs	r0, #200	; 0xc8
 8000bea:	f7ff fec9 	bl	8000980 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8000bee:	20da      	movs	r0, #218	; 0xda
 8000bf0:	f7ff fec6 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0x12);
 8000bf4:	2012      	movs	r0, #18
 8000bf6:	f7ff fec3 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8000bfa:	2081      	movs	r0, #129	; 0x81
 8000bfc:	f7ff fec0 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0xFF);
 8000c00:	20ff      	movs	r0, #255	; 0xff
 8000c02:	f7ff febd 	bl	8000980 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8000c06:	20d9      	movs	r0, #217	; 0xd9
 8000c08:	f7ff feba 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0xF1);
 8000c0c:	20f1      	movs	r0, #241	; 0xf1
 8000c0e:	f7ff feb7 	bl	8000980 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT);
 8000c12:	20db      	movs	r0, #219	; 0xdb
 8000c14:	f7ff feb4 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0x40);
 8000c18:	2040      	movs	r0, #64	; 0x40
 8000c1a:	f7ff feb1 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME);
 8000c1e:	20a4      	movs	r0, #164	; 0xa4
 8000c20:	f7ff feae 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);
 8000c24:	20a6      	movs	r0, #166	; 0xa6
 8000c26:	f7ff feab 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8000c2a:	202e      	movs	r0, #46	; 0x2e
 8000c2c:	f7ff fea8 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYON);
 8000c30:	20af      	movs	r0, #175	; 0xaf
 8000c32:	f7ff fea5 	bl	8000980 <SSD1306_Command>


}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000598 	.word	0x20000598

08000c44 <snek_ui_draw_mainmenu_button>:
snek_game_t g_snek_game;

//  snek_ui - functions used to draw user interface

static void snek_ui_draw_mainmenu_button(uint8_t *p_text, uint8_t pos, uint8_t select)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b087      	sub	sp, #28
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
 8000c50:	4613      	mov	r3, r2
 8000c52:	70bb      	strb	r3, [r7, #2]
	// lcd width - char size - spaces between chars
	uint8_t string_start_pos = ((SSD1306_LCDWIDTH - (strlen((char*) p_text) * 5) - strlen((char*) p_text))) / 2;
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff fac3 	bl	80001e0 <strlen>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	189c      	adds	r4, r3, r2
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff fabc 	bl	80001e0 <strlen>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4423      	add	r3, r4
 8000c6c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000c70:	085b      	lsrs	r3, r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]

	GFX_DrawFillRectangle(0, pos * SNEK_UI_BUTTON_OFFSET, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, BLACK);
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	011b      	lsls	r3, r3, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	230f      	movs	r3, #15
 8000c80:	2280      	movs	r2, #128	; 0x80
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff fd13 	bl	80006ae <GFX_DrawFillRectangle>
	//draw selected button
	if (select)
 8000c88:	78bb      	ldrb	r3, [r7, #2]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d015      	beq.n	8000cba <snek_ui_draw_mainmenu_button+0x76>
	{
		GFX_DrawFillRectangle(0, pos * SNEK_UI_BUTTON_OFFSET, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, YELLOWBLUE);
 8000c8e:	78fb      	ldrb	r3, [r7, #3]
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	2301      	movs	r3, #1
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	230f      	movs	r3, #15
 8000c9a:	2280      	movs	r2, #128	; 0x80
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff fd06 	bl	80006ae <GFX_DrawFillRectangle>
		GFX_DrawString(string_start_pos, (pos * SNEK_UI_BUTTON_OFFSET) + SNEK_UI_CHAR_OFFSET, (char*) p_text, BLACK,
 8000ca2:	7bf8      	ldrb	r0, [r7, #15]
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	011b      	lsls	r3, r3, #4
 8000ca8:	3304      	adds	r3, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	2301      	movs	r3, #1
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	f7ff fbb6 	bl	8000424 <GFX_DrawString>
		GFX_DrawRectangle(0, pos * SNEK_UI_BUTTON_OFFSET, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, YELLOWBLUE);
		GFX_DrawString(string_start_pos, (pos * SNEK_UI_BUTTON_OFFSET) + SNEK_UI_CHAR_OFFSET, (char*) p_text, YELLOWBLUE,
		BLACK);
	}

	return;
 8000cb8:	e015      	b.n	8000ce6 <snek_ui_draw_mainmenu_button+0xa2>
		GFX_DrawRectangle(0, pos * SNEK_UI_BUTTON_OFFSET, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, YELLOWBLUE);
 8000cba:	78fb      	ldrb	r3, [r7, #3]
 8000cbc:	011b      	lsls	r3, r3, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff fcc3 	bl	8000654 <GFX_DrawRectangle>
		GFX_DrawString(string_start_pos, (pos * SNEK_UI_BUTTON_OFFSET) + SNEK_UI_CHAR_OFFSET, (char*) p_text, YELLOWBLUE,
 8000cce:	7bf8      	ldrb	r0, [r7, #15]
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	011b      	lsls	r3, r3, #4
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	2300      	movs	r3, #0
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	f7ff fba0 	bl	8000424 <GFX_DrawString>
	return;
 8000ce4:	bf00      	nop
}
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd90      	pop	{r4, r7, pc}

08000cec <snek_ui_draw_ok_button>:

static void snek_ui_draw_ok_button(uint8_t highlight)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af02      	add	r7, sp, #8
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
	if (!highlight)
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d118      	bne.n	8000d2e <snek_ui_draw_ok_button+0x42>
	{
		// button highlight off
		GFX_DrawFillRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, BLACK);
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	230b      	movs	r3, #11
 8000d02:	2214      	movs	r2, #20
 8000d04:	2132      	movs	r1, #50	; 0x32
 8000d06:	206a      	movs	r0, #106	; 0x6a
 8000d08:	f7ff fcd1 	bl	80006ae <GFX_DrawFillRectangle>
		GFX_DrawRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, YELLOWBLUE);
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	230b      	movs	r3, #11
 8000d12:	2214      	movs	r2, #20
 8000d14:	2132      	movs	r1, #50	; 0x32
 8000d16:	206a      	movs	r0, #106	; 0x6a
 8000d18:	f7ff fc9c 	bl	8000654 <GFX_DrawRectangle>
		GFX_DrawString(SNEK_UI_OK_BUTTON_POS_X + 4, SNEK_UI_OK_BUTTON_POS_Y + 1, "OK", YELLOWBLUE, BLACK);
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2301      	movs	r3, #1
 8000d22:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <snek_ui_draw_ok_button+0x7c>)
 8000d24:	2133      	movs	r1, #51	; 0x33
 8000d26:	206e      	movs	r0, #110	; 0x6e
 8000d28:	f7ff fb7c 	bl	8000424 <GFX_DrawString>
		// highlight ok button
		GFX_DrawFillRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, YELLOWBLUE);
		GFX_DrawRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, BLACK);
		GFX_DrawString(SNEK_UI_OK_BUTTON_POS_X + 4, SNEK_UI_OK_BUTTON_POS_Y + 1, "OK", BLACK, YELLOWBLUE);
	}
}
 8000d2c:	e017      	b.n	8000d5e <snek_ui_draw_ok_button+0x72>
		GFX_DrawFillRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, YELLOWBLUE);
 8000d2e:	2301      	movs	r3, #1
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	230b      	movs	r3, #11
 8000d34:	2214      	movs	r2, #20
 8000d36:	2132      	movs	r1, #50	; 0x32
 8000d38:	206a      	movs	r0, #106	; 0x6a
 8000d3a:	f7ff fcb8 	bl	80006ae <GFX_DrawFillRectangle>
		GFX_DrawRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, BLACK);
 8000d3e:	2300      	movs	r3, #0
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	230b      	movs	r3, #11
 8000d44:	2214      	movs	r2, #20
 8000d46:	2132      	movs	r1, #50	; 0x32
 8000d48:	206a      	movs	r0, #106	; 0x6a
 8000d4a:	f7ff fc83 	bl	8000654 <GFX_DrawRectangle>
		GFX_DrawString(SNEK_UI_OK_BUTTON_POS_X + 4, SNEK_UI_OK_BUTTON_POS_Y + 1, "OK", BLACK, YELLOWBLUE);
 8000d4e:	2301      	movs	r3, #1
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2300      	movs	r3, #0
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <snek_ui_draw_ok_button+0x7c>)
 8000d56:	2133      	movs	r1, #51	; 0x33
 8000d58:	206e      	movs	r0, #110	; 0x6e
 8000d5a:	f7ff fb63 	bl	8000424 <GFX_DrawString>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	080047d8 	.word	0x080047d8

08000d6c <snek_ui_updatescore>:

static void snek_ui_updatescore(snek_game_t *p_snek_game)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af02      	add	r7, sp, #8
 8000d72:	6078      	str	r0, [r7, #4]
	uint8_t temp_msg[8];
	sprintf((char*) temp_msg, "%d", (p_snek_game->snek_lenght - 3));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8000d7a:	1eda      	subs	r2, r3, #3
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	4908      	ldr	r1, [pc, #32]	; (8000da4 <snek_ui_updatescore+0x38>)
 8000d82:	4618      	mov	r0, r3
 8000d84:	f002 fb96 	bl	80034b4 <siprintf>
	GFX_DrawString(102, 0 + SNEK_UI_CHAR_OFFSET, (char*) temp_msg, YELLOWBLUE, BLACK);
 8000d88:	f107 0208 	add.w	r2, r7, #8
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2301      	movs	r3, #1
 8000d92:	2104      	movs	r1, #4
 8000d94:	2066      	movs	r0, #102	; 0x66
 8000d96:	f7ff fb45 	bl	8000424 <GFX_DrawString>
}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	080047dc 	.word	0x080047dc

08000da8 <snek_ui_gameover_animation>:

static void snek_ui_gameover_animation(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af02      	add	r7, sp, #8
	for (uint8_t count = 0; count < SSD1306_LCDWIDTH; count++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	e012      	b.n	8000dda <snek_ui_gameover_animation+0x32>
	{
		GFX_DrawFillRectangle((count % 16) * 8, (count / 16) * 8, SNEK_UI_NODE_WIDTH, SNEK_UI_NODE_HEIGHT, YELLOWBLUE);
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	00d8      	lsls	r0, r3, #3
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	00d9      	lsls	r1, r3, #3
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2308      	movs	r3, #8
 8000dca:	2208      	movs	r2, #8
 8000dcc:	f7ff fc6f 	bl	80006ae <GFX_DrawFillRectangle>

		SSD1306_Display();
 8000dd0:	f7ff febe 	bl	8000b50 <SSD1306_Display>
	for (uint8_t count = 0; count < SSD1306_LCDWIDTH; count++)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	dae8      	bge.n	8000db4 <snek_ui_gameover_animation+0xc>
	}
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <snek_ui_mainmenu_check_update>:

static uint8_t snek_ui_mainmenu_check_update(snek_game_t *p_snek_game)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	// check if button down is clicked
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	885b      	ldrh	r3, [r3, #2]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d01c      	beq.n	8000e3c <snek_ui_mainmenu_check_update+0x50>
	{
		// move button cursor down
		p_snek_game->menu_buttons = (p_snek_game->menu_buttons + 1) % 4;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	785b      	ldrb	r3, [r3, #1]
 8000e06:	3301      	adds	r3, #1
 8000e08:	425a      	negs	r2, r3
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	f002 0203 	and.w	r2, r2, #3
 8000e12:	bf58      	it	pl
 8000e14:	4253      	negpl	r3, r2
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	705a      	strb	r2, [r3, #1]
		SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	885b      	ldrh	r3, [r3, #2]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	885b      	ldrh	r3, [r3, #2]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	f023 0301 	bic.w	r3, r3, #1
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	805a      	strh	r2, [r3, #2]
	}

	// check if button up is clicked
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	885b      	ldrh	r3, [r3, #2]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	085b      	lsrs	r3, r3, #1
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d01c      	beq.n	8000e88 <snek_ui_mainmenu_check_update+0x9c>
	{
		// move button up
		p_snek_game->menu_buttons = (p_snek_game->menu_buttons + 3) % 4;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	785b      	ldrb	r3, [r3, #1]
 8000e52:	3303      	adds	r3, #3
 8000e54:	425a      	negs	r2, r3
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	f002 0203 	and.w	r2, r2, #3
 8000e5e:	bf58      	it	pl
 8000e60:	4253      	negpl	r3, r2
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	705a      	strb	r2, [r3, #1]
		SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	885b      	ldrh	r3, [r3, #2]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	885b      	ldrh	r3, [r3, #2]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	f023 0302 	bic.w	r3, r3, #2
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	805a      	strh	r2, [r3, #2]
	}

	// check if enter is clicked
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	885b      	ldrh	r3, [r3, #2]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	091b      	lsrs	r3, r3, #4
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d03d      	beq.n	8000f16 <snek_ui_mainmenu_check_update+0x12a>
	{
		// change menu screen
		if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_START))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	889b      	ldrh	r3, [r3, #4]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <snek_ui_mainmenu_check_update+0xc4>
		{
			p_snek_game->game_state = GAMESTATE_GAME;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2204      	movs	r2, #4
 8000eac:	701a      	strb	r2, [r3, #0]
 8000eae:	e025      	b.n	8000efc <snek_ui_mainmenu_check_update+0x110>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_SCORES))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	889b      	ldrh	r3, [r3, #4]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	085b      	lsrs	r3, r3, #1
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <snek_ui_mainmenu_check_update+0xde>
		{
			p_snek_game->game_state = GAMESTATE_SCORES;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	e018      	b.n	8000efc <snek_ui_mainmenu_check_update+0x110>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_ABOUT))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	889b      	ldrh	r3, [r3, #4]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	08db      	lsrs	r3, r3, #3
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <snek_ui_mainmenu_check_update+0xf8>
		{
			p_snek_game->game_state = GAMESTATE_ABOUT;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	e00b      	b.n	8000efc <snek_ui_mainmenu_check_update+0x110>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_SETTINGS))
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	889b      	ldrh	r3, [r3, #4]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <snek_ui_mainmenu_check_update+0x110>
		{
			p_snek_game->game_state = GAMESTATE_SETTINGS;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2203      	movs	r2, #3
 8000efa:	701a      	strb	r2, [r3, #0]
		}

		//debounce delay
		delay(840000);
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <snek_ui_mainmenu_check_update+0x134>)
 8000efe:	f001 f859 	bl	8001fb4 <delay>
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	885b      	ldrh	r3, [r3, #2]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	f023 0310 	bic.w	r3, r3, #16
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	805a      	strh	r2, [r3, #2]

		return 1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <snek_ui_mainmenu_check_update+0x12c>

	}

	return 0;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	000cd140 	.word	0x000cd140

08000f24 <snek_map_clearmap>:

// snek_map - functions used during game to draw move snek, update fruity positions etc.

static void snek_map_clearmap(snek_game_t *p_snek_game)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	memset(p_snek_game->game_map, 0, sizeof(node_t) * SNEK_UI_NO_NODES);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3307      	adds	r3, #7
 8000f30:	f44f 7290 	mov.w	r2, #288	; 0x120
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f002 fa74 	bl	8003424 <memset>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <snek_map_createnode>:

static void snek_map_createnode(snek_game_t *p_snek_game, uint8_t new_node_number)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]

	if (!(SNEK_CHECK_NODE_LIMITS(new_node_number)))
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	2b5f      	cmp	r3, #95	; 0x5f
 8000f54:	d908      	bls.n	8000f68 <snek_map_createnode+0x24>
	{
		SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ERROR_NODE);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	889b      	ldrh	r3, [r3, #4]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	809a      	strh	r2, [r3, #4]
		return;
 8000f66:	e048      	b.n	8000ffa <snek_map_createnode+0xb6>
	}

	p_snek_game->game_map[new_node_number].node_taken = 1;
 8000f68:	78fa      	ldrb	r2, [r7, #3]
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	3307      	adds	r3, #7
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]

	// if this first node made
	if (p_snek_game->snek_lenght == 0)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d10d      	bne.n	8000fa0 <snek_map_createnode+0x5c>
	{
		// to first node assign null to last position
		p_snek_game->game_map[new_node_number].last_node_pos = SNEK_NULL_NODE;
 8000f84:	78fa      	ldrb	r2, [r7, #3]
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	3308      	adds	r3, #8
 8000f92:	2264      	movs	r2, #100	; 0x64
 8000f94:	701a      	strb	r2, [r3, #0]

		p_snek_game->tail_address = new_node_number;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	78fa      	ldrb	r2, [r7, #3]
 8000f9a:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8000f9e:	e017      	b.n	8000fd0 <snek_map_createnode+0x8c>
	}
	else
	{
		// to the next node assign position of last head
		p_snek_game->game_map[new_node_number].last_node_pos = p_snek_game->head_address;
 8000fa0:	78fa      	ldrb	r2, [r7, #3]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 0127 	ldrb.w	r0, [r3, #295]	; 0x127
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	3308      	adds	r3, #8
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	701a      	strb	r2, [r3, #0]
		// to the last head assign node that we are creating
		p_snek_game->game_map[p_snek_game->head_address].next_node_pos = new_node_number;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	440b      	add	r3, r1
 8000fc8:	4413      	add	r3, r2
 8000fca:	3309      	adds	r3, #9
 8000fcc:	78fa      	ldrb	r2, [r7, #3]
 8000fce:	701a      	strb	r2, [r3, #0]

	}

	// we are creating head to next node is NULL
	p_snek_game->game_map[new_node_number].next_node_pos = SNEK_NULL_NODE;
 8000fd0:	78fa      	ldrb	r2, [r7, #3]
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3309      	adds	r3, #9
 8000fde:	2264      	movs	r2, #100	; 0x64
 8000fe0:	701a      	strb	r2, [r3, #0]
	// node that we are creating is new head
	p_snek_game->head_address = new_node_number;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	78fa      	ldrb	r2, [r7, #3]
 8000fe6:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
	p_snek_game->snek_lenght++;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a

}
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <snek_map_deletenode>:

static void snek_map_deletenode(snek_game_t *p_snek_game, uint8_t last_node_number)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
	uint8_t temp_node_pos;

	if (!(SNEK_CHECK_NODE_LIMITS(last_node_number)))
 8001010:	78fb      	ldrb	r3, [r7, #3]
 8001012:	2b5f      	cmp	r3, #95	; 0x5f
 8001014:	d908      	bls.n	8001028 <snek_map_deletenode+0x24>
	{
		SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ERROR_NODE);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	889b      	ldrh	r3, [r3, #4]
 800101a:	b29b      	uxth	r3, r3
 800101c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001020:	b29a      	uxth	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	809a      	strh	r2, [r3, #4]
		return;
 8001026:	e044      	b.n	80010b2 <snek_map_deletenode+0xae>
	}

	// save new tail to temporary buffer
	temp_node_pos = p_snek_game->game_map[p_snek_game->tail_address].next_node_pos;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800102e:	4619      	mov	r1, r3
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	460b      	mov	r3, r1
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	440b      	add	r3, r1
 8001038:	4413      	add	r3, r2
 800103a:	3309      	adds	r3, #9
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	73fb      	strb	r3, [r7, #15]

	// clear node
	p_snek_game->game_map[p_snek_game->tail_address].last_node_pos = 0;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8001046:	4619      	mov	r1, r3
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	460b      	mov	r3, r1
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	440b      	add	r3, r1
 8001050:	4413      	add	r3, r2
 8001052:	3308      	adds	r3, #8
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
	p_snek_game->game_map[p_snek_game->tail_address].next_node_pos = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800105e:	4619      	mov	r1, r3
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	440b      	add	r3, r1
 8001068:	4413      	add	r3, r2
 800106a:	3309      	adds	r3, #9
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
	p_snek_game->game_map[p_snek_game->tail_address].node_taken = 0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8001076:	4619      	mov	r1, r3
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	440b      	add	r3, r1
 8001080:	4413      	add	r3, r2
 8001082:	3307      	adds	r3, #7
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]

	// assign new tail
	p_snek_game->tail_address = temp_node_pos;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
	p_snek_game->game_map[temp_node_pos].last_node_pos = SNEK_NULL_NODE;
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	440b      	add	r3, r1
 800109c:	3308      	adds	r3, #8
 800109e:	2264      	movs	r2, #100	; 0x64
 80010a0:	701a      	strb	r2, [r3, #0]
	p_snek_game->snek_lenght--;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 80010a8:	3b01      	subs	r3, #1
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a

}
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <snek_map_drawnode>:

static void snek_map_drawnode(snek_game_t *p_snek_game, uint8_t new_node_number)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
	snek_map_createnode(p_snek_game, new_node_number);
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	4619      	mov	r1, r3
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff39 	bl	8000f44 <snek_map_createnode>
	// draw node square
	uint8_t temp_x_pos = ((new_node_number % 16) * 8);
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	f003 030f 	and.w	r3, r3, #15
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	73fb      	strb	r3, [r7, #15]
	uint8_t temp_y_pos = 16 + ((new_node_number / 16) * 8);
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	3302      	adds	r3, #2
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	73bb      	strb	r3, [r7, #14]
	GFX_DrawFillRectangle(temp_x_pos, temp_y_pos, SNEK_UI_NODE_HEIGHT, SNEK_UI_NODE_WIDTH, YELLOWBLUE);
 80010ec:	7bf8      	ldrb	r0, [r7, #15]
 80010ee:	7bb9      	ldrb	r1, [r7, #14]
 80010f0:	2301      	movs	r3, #1
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2308      	movs	r3, #8
 80010f6:	2208      	movs	r2, #8
 80010f8:	f7ff fad9 	bl	80006ae <GFX_DrawFillRectangle>
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <snek_map_erasenode>:

static void snek_map_erasenode(snek_game_t *p_snek_game, uint8_t last_node_number)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af02      	add	r7, sp, #8
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
	snek_map_deletenode(p_snek_game, last_node_number);
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	4619      	mov	r1, r3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff75 	bl	8001004 <snek_map_deletenode>
	// draw node square
	uint8_t temp_x_pos = ((last_node_number % 16) * 8);
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	b2db      	uxtb	r3, r3
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	73fb      	strb	r3, [r7, #15]
	uint8_t temp_y_pos = 16 + ((last_node_number / 16) * 8);
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	b2db      	uxtb	r3, r3
 800112c:	3302      	adds	r3, #2
 800112e:	b2db      	uxtb	r3, r3
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	73bb      	strb	r3, [r7, #14]
	GFX_DrawFillRectangle(temp_x_pos, temp_y_pos, SNEK_UI_NODE_HEIGHT, SNEK_UI_NODE_WIDTH, BLACK);
 8001134:	7bf8      	ldrb	r0, [r7, #15]
 8001136:	7bb9      	ldrb	r1, [r7, #14]
 8001138:	2300      	movs	r3, #0
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2308      	movs	r3, #8
 800113e:	2208      	movs	r2, #8
 8001140:	f7ff fab5 	bl	80006ae <GFX_DrawFillRectangle>
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <snek_map_drawfruity>:

static void snek_map_drawfruity(snek_game_t *p_snek_game, uint8_t fruity_node)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
	// draw node square
	uint8_t temp_x_pos = ((fruity_node % 16) * 8);
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	b2db      	uxtb	r3, r3
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	73fb      	strb	r3, [r7, #15]
	uint8_t temp_y_pos = 16 + ((fruity_node / 16) * 8);
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	091b      	lsrs	r3, r3, #4
 8001168:	b2db      	uxtb	r3, r3
 800116a:	3302      	adds	r3, #2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	73bb      	strb	r3, [r7, #14]

	GFX_DrawFillRoundRectangle(temp_x_pos, temp_y_pos, SNEK_UI_NODE_HEIGHT, SNEK_UI_NODE_WIDTH, 1, YELLOWBLUE);
 8001172:	7bf8      	ldrb	r0, [r7, #15]
 8001174:	7bb9      	ldrb	r1, [r7, #14]
 8001176:	2301      	movs	r3, #1
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	2301      	movs	r3, #1
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2308      	movs	r3, #8
 8001180:	2208      	movs	r2, #8
 8001182:	f7ff fb58 	bl	8000836 <GFX_DrawFillRoundRectangle>
	//GFX_DrawFillRectangle(temp_x_pos, temp_y_pos, SNEK_UI_NODE_HEIGHT, SNEK_UI_NODE_WIDTH, YELLOWBLUE);
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <snek_map_check_direction>:

static void snek_map_check_direction(snek_game_t *p_snek_game)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
	// if we are moving vertically
	if ((SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN)) || (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP)))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	889b      	ldrh	r3, [r3, #4]
 800119a:	b29b      	uxth	r3, r3
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	b29b      	uxth	r3, r3
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d108      	bne.n	80011ba <snek_map_check_direction+0x2c>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	889b      	ldrh	r3, [r3, #4]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d064      	beq.n	8001284 <snek_map_check_direction+0xf6>
	{
		// ignore up/down buttons and change snek new movement direction
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	885b      	ldrh	r3, [r3, #2]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	885b      	ldrh	r3, [r3, #2]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	f023 0302 	bic.w	r3, r3, #2
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	805a      	strh	r2, [r3, #2]

		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	885b      	ldrh	r3, [r3, #2]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d020      	beq.n	800122e <snek_map_check_direction+0xa0>
		{
			// set new direction, reset old direction and button flag
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	889b      	ldrh	r3, [r3, #4]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_LEFT);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	889b      	ldrh	r3, [r3, #4]
 8001200:	b29b      	uxth	r3, r3
 8001202:	f023 0304 	bic.w	r3, r3, #4
 8001206:	b29a      	uxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	889b      	ldrh	r3, [r3, #4]
 8001210:	b29b      	uxth	r3, r3
 8001212:	f023 0310 	bic.w	r3, r3, #16
 8001216:	b29a      	uxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	889b      	ldrh	r3, [r3, #4]
 8001220:	b29b      	uxth	r3, r3
 8001222:	f023 0320 	bic.w	r3, r3, #32
 8001226:	b29a      	uxth	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	809a      	strh	r2, [r3, #4]
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 800122c:	e09e      	b.n	800136c <snek_map_check_direction+0x1de>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	885b      	ldrh	r3, [r3, #2]
 8001232:	b29b      	uxth	r3, r3
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	b29b      	uxth	r3, r3
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 8095 	beq.w	800136c <snek_map_check_direction+0x1de>
		{
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	889b      	ldrh	r3, [r3, #4]
 8001246:	b29b      	uxth	r3, r3
 8001248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800124c:	b29a      	uxth	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_RIGHT);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	889b      	ldrh	r3, [r3, #4]
 8001256:	b29b      	uxth	r3, r3
 8001258:	f023 0308 	bic.w	r3, r3, #8
 800125c:	b29a      	uxth	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	889b      	ldrh	r3, [r3, #4]
 8001266:	b29b      	uxth	r3, r3
 8001268:	f023 0310 	bic.w	r3, r3, #16
 800126c:	b29a      	uxth	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	889b      	ldrh	r3, [r3, #4]
 8001276:	b29b      	uxth	r3, r3
 8001278:	f023 0320 	bic.w	r3, r3, #32
 800127c:	b29a      	uxth	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	809a      	strh	r2, [r3, #4]
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 8001282:	e073      	b.n	800136c <snek_map_check_direction+0x1de>
		}
	}
	else if ((SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT)) || (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT)))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	889b      	ldrh	r3, [r3, #4]
 8001288:	b29b      	uxth	r3, r3
 800128a:	099b      	lsrs	r3, r3, #6
 800128c:	b29b      	uxth	r3, r3
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	2b00      	cmp	r3, #0
 8001294:	d108      	bne.n	80012a8 <snek_map_check_direction+0x11a>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	889b      	ldrh	r3, [r3, #4]
 800129a:	b29b      	uxth	r3, r3
 800129c:	09db      	lsrs	r3, r3, #7
 800129e:	b29b      	uxth	r3, r3
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d062      	beq.n	800136e <snek_map_check_direction+0x1e0>
	{
		// same if we are in horizontal movement
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	885b      	ldrh	r3, [r3, #2]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	f023 0304 	bic.w	r3, r3, #4
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	885b      	ldrh	r3, [r3, #2]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	f023 0308 	bic.w	r3, r3, #8
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	805a      	strh	r2, [r3, #2]

		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	885b      	ldrh	r3, [r3, #2]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	085b      	lsrs	r3, r3, #1
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d020      	beq.n	800131c <snek_map_check_direction+0x18e>
		{
			// set new direction, reset old direction and button flag
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	889b      	ldrh	r3, [r3, #4]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	f043 0320 	orr.w	r3, r3, #32
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_UP);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	889b      	ldrh	r3, [r3, #4]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	f023 0302 	bic.w	r3, r3, #2
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	889b      	ldrh	r3, [r3, #4]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	889b      	ldrh	r3, [r3, #4]
 800130e:	b29b      	uxth	r3, r3
 8001310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001314:	b29a      	uxth	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_DOWN);
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT);
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
		}
	}
}
 800131a:	e028      	b.n	800136e <snek_map_check_direction+0x1e0>
		else if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	885b      	ldrh	r3, [r3, #2]
 8001320:	b29b      	uxth	r3, r3
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d021      	beq.n	800136e <snek_map_check_direction+0x1e0>
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	889b      	ldrh	r3, [r3, #4]
 800132e:	b29b      	uxth	r3, r3
 8001330:	f043 0310 	orr.w	r3, r3, #16
 8001334:	b29a      	uxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_DOWN);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	889b      	ldrh	r3, [r3, #4]
 800133e:	b29b      	uxth	r3, r3
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	b29a      	uxth	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	889b      	ldrh	r3, [r3, #4]
 800134e:	b29b      	uxth	r3, r3
 8001350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	889b      	ldrh	r3, [r3, #4]
 800135e:	b29b      	uxth	r3, r3
 8001360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	809a      	strh	r2, [r3, #4]
}
 800136a:	e000      	b.n	800136e <snek_map_check_direction+0x1e0>
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 800136c:	bf00      	nop
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <snek_map_check_fruity>:

static void snek_map_check_fruity(snek_game_t *p_snek_game)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_NO_FRUITY))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	889b      	ldrh	r3, [r3, #4]
 8001388:	b29b      	uxth	r3, r3
 800138a:	0a5b      	lsrs	r3, r3, #9
 800138c:	b29b      	uxth	r3, r3
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d02a      	beq.n	80013ec <snek_map_check_fruity+0x70>
	{
		// look for a place for a fruity node
		do
		{
			p_snek_game->fruity_node = rand() % 96;
 8001396:	f002 f84d 	bl	8003434 <rand>
 800139a:	4602      	mov	r2, r0
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <snek_map_check_fruity+0x78>)
 800139e:	fb83 1302 	smull	r1, r3, r3, r2
 80013a2:	1119      	asrs	r1, r3, #4
 80013a4:	17d3      	asrs	r3, r2, #31
 80013a6:	1ac9      	subs	r1, r1, r3
 80013a8:	460b      	mov	r3, r1
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	440b      	add	r3, r1
 80013ae:	015b      	lsls	r3, r3, #5
 80013b0:	1ad1      	subs	r1, r2, r3
 80013b2:	b2ca      	uxtb	r2, r1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	719a      	strb	r2, [r3, #6]
		} while (p_snek_game->game_map[p_snek_game->fruity_node].node_taken);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	799b      	ldrb	r3, [r3, #6]
 80013bc:	4619      	mov	r1, r3
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	440b      	add	r3, r1
 80013c6:	4413      	add	r3, r2
 80013c8:	3307      	adds	r3, #7
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1e2      	bne.n	8001396 <snek_map_check_fruity+0x1a>

		snek_map_drawfruity(p_snek_game, p_snek_game->fruity_node);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	799b      	ldrb	r3, [r3, #6]
 80013d4:	4619      	mov	r1, r3
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff feb8 	bl	800114c <snek_map_drawfruity>
		SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_NO_FRUITY);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	889b      	ldrh	r3, [r3, #4]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	809a      	strh	r2, [r3, #4]
	}
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	2aaaaaab 	.word	0x2aaaaaab

080013f8 <snek_map_compute_newposition>:

static uint8_t snek_map_compute_newposition(snek_game_t *p_snek_game)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	uint8_t temp_new_head;

	if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	889b      	ldrh	r3, [r3, #4]
 8001404:	b29b      	uxth	r3, r3
 8001406:	091b      	lsrs	r3, r3, #4
 8001408:	b29b      	uxth	r3, r3
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d01b      	beq.n	800144a <snek_map_compute_newposition+0x52>
	{
		// head = same column + new row
		temp_new_head = (p_snek_game->head_address) % 16 + ((((p_snek_game->head_address / 16) + 1) % 6 * 16));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	b2d8      	uxtb	r0, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	b2db      	uxtb	r3, r3
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	4b3c      	ldr	r3, [pc, #240]	; (800151c <snek_map_compute_newposition+0x124>)
 800142c:	fb83 3102 	smull	r3, r1, r3, r2
 8001430:	17d3      	asrs	r3, r2, #31
 8001432:	1ac9      	subs	r1, r1, r3
 8001434:	460b      	mov	r3, r1
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	440b      	add	r3, r1
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	1ad1      	subs	r1, r2, r3
 800143e:	b2cb      	uxtb	r3, r1
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4403      	add	r3, r0
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e061      	b.n	800150e <snek_map_compute_newposition+0x116>
	}
	else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	889b      	ldrh	r3, [r3, #4]
 800144e:	b29b      	uxth	r3, r3
 8001450:	095b      	lsrs	r3, r3, #5
 8001452:	b29b      	uxth	r3, r3
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d01b      	beq.n	8001494 <snek_map_compute_newposition+0x9c>
	{
		// head = same column + new row
		temp_new_head = (p_snek_game->head_address) % 16 + ((((p_snek_game->head_address / 16) + 5) % 6 * 16));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	b2d8      	uxtb	r0, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	b2db      	uxtb	r3, r3
 8001472:	1d5a      	adds	r2, r3, #5
 8001474:	4b29      	ldr	r3, [pc, #164]	; (800151c <snek_map_compute_newposition+0x124>)
 8001476:	fb83 3102 	smull	r3, r1, r3, r2
 800147a:	17d3      	asrs	r3, r2, #31
 800147c:	1ac9      	subs	r1, r1, r3
 800147e:	460b      	mov	r3, r1
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	440b      	add	r3, r1
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	1ad1      	subs	r1, r2, r3
 8001488:	b2cb      	uxtb	r3, r1
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	b2db      	uxtb	r3, r3
 800148e:	4403      	add	r3, r0
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	e03c      	b.n	800150e <snek_map_compute_newposition+0x116>
	}
	else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	889b      	ldrh	r3, [r3, #4]
 8001498:	b29b      	uxth	r3, r3
 800149a:	099b      	lsrs	r3, r3, #6
 800149c:	b29b      	uxth	r3, r3
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d015      	beq.n	80014d2 <snek_map_compute_newposition+0xda>
	{
		//head = new column + same row
		temp_new_head = (p_snek_game->head_address + 15) % 16 + ((p_snek_game->head_address / 16) * 16);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 80014ac:	330f      	adds	r3, #15
 80014ae:	425a      	negs	r2, r3
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	f002 020f 	and.w	r2, r2, #15
 80014b8:	bf58      	it	pl
 80014ba:	4253      	negpl	r3, r2
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	4413      	add	r3, r2
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e01d      	b.n	800150e <snek_map_compute_newposition+0x116>
	}
	else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	889b      	ldrh	r3, [r3, #4]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	09db      	lsrs	r3, r3, #7
 80014da:	b29b      	uxth	r3, r3
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d014      	beq.n	800150e <snek_map_compute_newposition+0x116>
	{
		//head = new column + same row
		temp_new_head = (p_snek_game->head_address + 1) % 16 + ((p_snek_game->head_address / 16) * 16);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 80014ea:	3301      	adds	r3, #1
 80014ec:	425a      	negs	r2, r3
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	f002 020f 	and.w	r2, r2, #15
 80014f6:	bf58      	it	pl
 80014f8:	4253      	negpl	r3, r2
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	b2db      	uxtb	r3, r3
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	b2db      	uxtb	r3, r3
 800150a:	4413      	add	r3, r2
 800150c:	73fb      	strb	r3, [r7, #15]
	}

	return temp_new_head;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	2aaaaaab 	.word	0x2aaaaaab

08001520 <snek_eeprom_erase>:
// snek_gamestate - main state machine functions

static void snek_eeprom_erase(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b09c      	sub	sp, #112	; 0x70
 8001524:	af00      	add	r7, sp, #0
	uint8_t temp_data[EEPROM_PAGE_SIZE * 12];
	uint8_t dummy[8] =
 8001526:	4a1d      	ldr	r2, [pc, #116]	; (800159c <snek_eeprom_erase+0x7c>)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800152e:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 'd', 'u', 'm', 'm', 'y', '0', '0', '0' };

	//create 10 dummy names
	for (uint8_t i = 0; i < 10; i++)
 8001532:	2300      	movs	r3, #0
 8001534:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001538:	e021      	b.n	800157e <snek_eeprom_erase+0x5e>
	{
		//fill names
		dummy[7] = i + 48;
 800153a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800153e:	3330      	adds	r3, #48	; 0x30
 8001540:	b2db      	uxtb	r3, r3
 8001542:	72fb      	strb	r3, [r7, #11]
		memcpy(&temp_data[i * EEPROM_PAGE_SIZE], dummy, 8);
 8001544:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	f107 020c 	add.w	r2, r7, #12
 800154e:	4413      	add	r3, r2
 8001550:	461a      	mov	r2, r3
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	cb03      	ldmia	r3!, {r0, r1}
 8001556:	6010      	str	r0, [r2, #0]
 8001558:	6051      	str	r1, [r2, #4]

		//fill scores
		temp_data[EEPROM_PAGE_SIZE * 10 + i] = 10 - i;
 800155a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800155e:	3350      	adds	r3, #80	; 0x50
 8001560:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001564:	f1c2 020a 	rsb	r2, r2, #10
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800156e:	440b      	add	r3, r1
 8001570:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (uint8_t i = 0; i < 10; i++)
 8001574:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001578:	3301      	adds	r3, #1
 800157a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800157e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001582:	2b09      	cmp	r3, #9
 8001584:	d9d9      	bls.n	800153a <snek_eeprom_erase+0x1a>
	}

	Eeprom_SendData(0, temp_data, EEPROM_PAGE_SIZE * 12);
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	2260      	movs	r2, #96	; 0x60
 800158c:	4619      	mov	r1, r3
 800158e:	2000      	movs	r0, #0
 8001590:	f000 fd26 	bl	8001fe0 <Eeprom_SendData>

}
 8001594:	bf00      	nop
 8001596:	3770      	adds	r7, #112	; 0x70
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	080047e0 	.word	0x080047e0

080015a0 <snek_gamestate_menu>:

static void snek_gamestate_menu(snek_game_t *p_snek_game)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

	// *** INIT SCREEN *** //
	SSD1306_Clear(BLACK);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff fa13 	bl	80009d4 <SSD1306_Clear>
	p_snek_game->menu_buttons = BUTTON_START;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	705a      	strb	r2, [r3, #1]
	SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_START);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	889b      	ldrh	r3, [r3, #4]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	b29a      	uxth	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	809a      	strh	r2, [r3, #4]
	// set bit to draw menu for the first time
	SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	885b      	ldrh	r3, [r3, #2]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	805a      	strh	r2, [r3, #2]
	SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_ERROR_NODE);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	889b      	ldrh	r3, [r3, #4]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015de:	b29a      	uxth	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	809a      	strh	r2, [r3, #4]

	// *** ACTIVE SCREEN *** //
	while (SCREEN_ACTIVE)
	{
		// update
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	885b      	ldrh	r3, [r3, #2]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d06c      	beq.n	80016d0 <snek_gamestate_menu+0x130>
		{

			snek_ui_draw_mainmenu_button((uint8_t*) "Start", 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	483b      	ldr	r0, [pc, #236]	; (80016e8 <snek_gamestate_menu+0x148>)
 80015fc:	f7ff fb22 	bl	8000c44 <snek_ui_draw_mainmenu_button>
			snek_ui_draw_mainmenu_button((uint8_t*) "High scores", 1, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2101      	movs	r1, #1
 8001604:	4839      	ldr	r0, [pc, #228]	; (80016ec <snek_gamestate_menu+0x14c>)
 8001606:	f7ff fb1d 	bl	8000c44 <snek_ui_draw_mainmenu_button>
			snek_ui_draw_mainmenu_button((uint8_t*) "Settings", 2, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2102      	movs	r1, #2
 800160e:	4838      	ldr	r0, [pc, #224]	; (80016f0 <snek_gamestate_menu+0x150>)
 8001610:	f7ff fb18 	bl	8000c44 <snek_ui_draw_mainmenu_button>
			snek_ui_draw_mainmenu_button((uint8_t*) "About", 3, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2103      	movs	r1, #3
 8001618:	4836      	ldr	r0, [pc, #216]	; (80016f4 <snek_gamestate_menu+0x154>)
 800161a:	f7ff fb13 	bl	8000c44 <snek_ui_draw_mainmenu_button>
			// clear active buttons bits
			p_snek_game->SR1 &= ~(15U << SNEK_SR1_ACTIVE_BUTTON_START);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	889b      	ldrh	r3, [r3, #4]
 8001622:	b29b      	uxth	r3, r3
 8001624:	f023 030f 	bic.w	r3, r3, #15
 8001628:	b29a      	uxth	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	809a      	strh	r2, [r3, #4]

			//draw selected button
			//set active window bit
			switch (p_snek_game->menu_buttons)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	785b      	ldrb	r3, [r3, #1]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d842      	bhi.n	80016bc <snek_gamestate_menu+0x11c>
 8001636:	a201      	add	r2, pc, #4	; (adr r2, 800163c <snek_gamestate_menu+0x9c>)
 8001638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163c:	0800164d 	.word	0x0800164d
 8001640:	08001669 	.word	0x08001669
 8001644:	08001685 	.word	0x08001685
 8001648:	080016a1 	.word	0x080016a1
			{
			case (BUTTON_START):
				snek_ui_draw_mainmenu_button((uint8_t*) "Start", 0, 1);
 800164c:	2201      	movs	r2, #1
 800164e:	2100      	movs	r1, #0
 8001650:	4825      	ldr	r0, [pc, #148]	; (80016e8 <snek_gamestate_menu+0x148>)
 8001652:	f7ff faf7 	bl	8000c44 <snek_ui_draw_mainmenu_button>
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_START);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	889b      	ldrh	r3, [r3, #4]
 800165a:	b29b      	uxth	r3, r3
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	809a      	strh	r2, [r3, #4]
				break;
 8001666:	e029      	b.n	80016bc <snek_gamestate_menu+0x11c>

			case (BUTTON_SCORES):
				snek_ui_draw_mainmenu_button((uint8_t*) "High scores", 1, 1);
 8001668:	2201      	movs	r2, #1
 800166a:	2101      	movs	r1, #1
 800166c:	481f      	ldr	r0, [pc, #124]	; (80016ec <snek_gamestate_menu+0x14c>)
 800166e:	f7ff fae9 	bl	8000c44 <snek_ui_draw_mainmenu_button>
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_SCORES);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	889b      	ldrh	r3, [r3, #4]
 8001676:	b29b      	uxth	r3, r3
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	b29a      	uxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	809a      	strh	r2, [r3, #4]
				break;
 8001682:	e01b      	b.n	80016bc <snek_gamestate_menu+0x11c>

			case (BUTTON_SETTINGS):
				snek_ui_draw_mainmenu_button((uint8_t*) "Settings", 2, 1);
 8001684:	2201      	movs	r2, #1
 8001686:	2102      	movs	r1, #2
 8001688:	4819      	ldr	r0, [pc, #100]	; (80016f0 <snek_gamestate_menu+0x150>)
 800168a:	f7ff fadb 	bl	8000c44 <snek_ui_draw_mainmenu_button>
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_SETTINGS);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	889b      	ldrh	r3, [r3, #4]
 8001692:	b29b      	uxth	r3, r3
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	b29a      	uxth	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	809a      	strh	r2, [r3, #4]
				break;
 800169e:	e00d      	b.n	80016bc <snek_gamestate_menu+0x11c>

			case (BUTTON_ABOUT):
				snek_ui_draw_mainmenu_button((uint8_t*) "About", 3, 1);
 80016a0:	2201      	movs	r2, #1
 80016a2:	2103      	movs	r1, #3
 80016a4:	4813      	ldr	r0, [pc, #76]	; (80016f4 <snek_gamestate_menu+0x154>)
 80016a6:	f7ff facd 	bl	8000c44 <snek_ui_draw_mainmenu_button>
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_ABOUT);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	889b      	ldrh	r3, [r3, #4]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	809a      	strh	r2, [r3, #4]
				break;
 80016ba:	bf00      	nop
			}

			// sent data to OLED
			SSD1306_Display();
 80016bc:	f7ff fa48 	bl	8000b50 <SSD1306_Display>
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	885b      	ldrh	r3, [r3, #2]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	805a      	strh	r2, [r3, #2]
		}

		// check for new update
		if (snek_ui_mainmenu_check_update(p_snek_game) == 1)
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fb8b 	bl	8000dec <snek_ui_mainmenu_check_update>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d000      	beq.n	80016de <snek_gamestate_menu+0x13e>
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED))
 80016dc:	e782      	b.n	80015e4 <snek_gamestate_menu+0x44>
			return;
 80016de:	bf00      	nop
	}
}
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	080047e8 	.word	0x080047e8
 80016ec:	080047f0 	.word	0x080047f0
 80016f0:	080047fc 	.word	0x080047fc
 80016f4:	08004808 	.word	0x08004808

080016f8 <snek_gamestate_about>:

static void snek_gamestate_about(snek_game_t *p_snek_game)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	6078      	str	r0, [r7, #4]

	// *** INIT SCREEN *** //
	SSD1306_Clear(BLACK);
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff f967 	bl	80009d4 <SSD1306_Clear>
	snek_ui_draw_mainmenu_button((uint8_t*) "Snek loves fruity", 0, 1);
 8001706:	2201      	movs	r2, #1
 8001708:	2100      	movs	r1, #0
 800170a:	4822      	ldr	r0, [pc, #136]	; (8001794 <snek_gamestate_about+0x9c>)
 800170c:	f7ff fa9a 	bl	8000c44 <snek_ui_draw_mainmenu_button>
	snek_ui_draw_mainmenu_button((uint8_t*) "a lot", 1, 1);
 8001710:	2201      	movs	r2, #1
 8001712:	2101      	movs	r1, #1
 8001714:	4820      	ldr	r0, [pc, #128]	; (8001798 <snek_gamestate_about+0xa0>)
 8001716:	f7ff fa95 	bl	8000c44 <snek_ui_draw_mainmenu_button>
	GFX_Image(30, 26, gImage_bitmap, 85, 48, YELLOWBLUE);
 800171a:	2301      	movs	r3, #1
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	2330      	movs	r3, #48	; 0x30
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2355      	movs	r3, #85	; 0x55
 8001724:	4a1d      	ldr	r2, [pc, #116]	; (800179c <snek_gamestate_about+0xa4>)
 8001726:	211a      	movs	r1, #26
 8001728:	201e      	movs	r0, #30
 800172a:	f7ff f8d7 	bl	80008dc <GFX_Image>
	snek_map_drawfruity(p_snek_game, 48);
 800172e:	2130      	movs	r1, #48	; 0x30
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff fd0b 	bl	800114c <snek_map_drawfruity>
	snek_map_drawfruity(p_snek_game, 66);
 8001736:	2142      	movs	r1, #66	; 0x42
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff fd07 	bl	800114c <snek_map_drawfruity>
	snek_map_drawfruity(p_snek_game, 81);
 800173e:	2151      	movs	r1, #81	; 0x51
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fd03 	bl	800114c <snek_map_drawfruity>
	SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	885b      	ldrh	r3, [r3, #2]
 800174a:	b29b      	uxth	r3, r3
 800174c:	f023 0310 	bic.w	r3, r3, #16
 8001750:	b29a      	uxth	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	805a      	strh	r2, [r3, #2]
	SSD1306_Display();
 8001756:	f7ff f9fb 	bl	8000b50 <SSD1306_Display>

	while (SCREEN_ACTIVE)
	{
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	885b      	ldrh	r3, [r3, #2]
 800175e:	b29b      	uxth	r3, r3
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	b29b      	uxth	r3, r3
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f6      	beq.n	800175a <snek_gamestate_about+0x62>
		{
			delay(840000);
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <snek_gamestate_about+0xa8>)
 800176e:	f000 fc21 	bl	8001fb4 <delay>
			p_snek_game->game_state = GAMESTATE_MENU;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	885b      	ldrh	r3, [r3, #2]
 800177c:	b29b      	uxth	r3, r3
 800177e:	f023 0310 	bic.w	r3, r3, #16
 8001782:	b29a      	uxth	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	805a      	strh	r2, [r3, #2]
			break;
 8001788:	bf00      	nop
		}
	}
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	08004810 	.word	0x08004810
 8001798:	08004824 	.word	0x08004824
 800179c:	08004878 	.word	0x08004878
 80017a0:	000cd140 	.word	0x000cd140

080017a4 <snek_gamestate_settings>:

static void snek_gamestate_settings(snek_game_t *p_snek_game)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	// *** INIT SCREEN *** //
	SSD1306_Clear(BLACK);
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff f911 	bl	80009d4 <SSD1306_Clear>

	SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	885b      	ldrh	r3, [r3, #2]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	f023 0310 	bic.w	r3, r3, #16
 80017bc:	b29a      	uxth	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	805a      	strh	r2, [r3, #2]

	snek_ui_draw_mainmenu_button((uint8_t*) "xxxx", 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	481a      	ldr	r0, [pc, #104]	; (8001830 <snek_gamestate_settings+0x8c>)
 80017c8:	f7ff fa3c 	bl	8000c44 <snek_ui_draw_mainmenu_button>
	snek_ui_draw_mainmenu_button((uint8_t*) "xxxx", 1, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2101      	movs	r1, #1
 80017d0:	4817      	ldr	r0, [pc, #92]	; (8001830 <snek_gamestate_settings+0x8c>)
 80017d2:	f7ff fa37 	bl	8000c44 <snek_ui_draw_mainmenu_button>
	snek_ui_draw_mainmenu_button((uint8_t*) "xxxx", 2, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2102      	movs	r1, #2
 80017da:	4815      	ldr	r0, [pc, #84]	; (8001830 <snek_gamestate_settings+0x8c>)
 80017dc:	f7ff fa32 	bl	8000c44 <snek_ui_draw_mainmenu_button>
	snek_ui_draw_mainmenu_button((uint8_t*) "xxxx", 3, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2103      	movs	r1, #3
 80017e4:	4812      	ldr	r0, [pc, #72]	; (8001830 <snek_gamestate_settings+0x8c>)
 80017e6:	f7ff fa2d 	bl	8000c44 <snek_ui_draw_mainmenu_button>

	snek_ui_draw_ok_button(OFF);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff fa7e 	bl	8000cec <snek_ui_draw_ok_button>

	SSD1306_Display();
 80017f0:	f7ff f9ae 	bl	8000b50 <SSD1306_Display>

	// *** ACTIVE SCREEN *** //
	while (SCREEN_ACTIVE)
	{

		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	885b      	ldrh	r3, [r3, #2]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f6      	beq.n	80017f4 <snek_gamestate_settings+0x50>
		{
			snek_eeprom_erase();
 8001806:	f7ff fe8b 	bl	8001520 <snek_eeprom_erase>
			delay(840000);
 800180a:	480a      	ldr	r0, [pc, #40]	; (8001834 <snek_gamestate_settings+0x90>)
 800180c:	f000 fbd2 	bl	8001fb4 <delay>
			p_snek_game->game_state = GAMESTATE_MENU;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	885b      	ldrh	r3, [r3, #2]
 800181a:	b29b      	uxth	r3, r3
 800181c:	f023 0310 	bic.w	r3, r3, #16
 8001820:	b29a      	uxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	805a      	strh	r2, [r3, #2]
			return;
 8001826:	bf00      	nop
		}

	}
}
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	0800482c 	.word	0x0800482c
 8001834:	000cd140 	.word	0x000cd140

08001838 <snek_gamestate_scores>:

static void snek_gamestate_scores(snek_game_t *p_snek_game)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b090      	sub	sp, #64	; 0x40
 800183c:	af02      	add	r7, sp, #8
 800183e:	6078      	str	r0, [r7, #4]
	// *** INIT SCREEN *** //
	static uint8_t temp_array[128];
	uint8_t temp_name[16] =
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
 8001844:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
	{ 0 };
	uint8_t temp_score;
	uint8_t display_text[24];
	uint8_t offset = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	SSD1306_Clear(YELLOWBLUE);
 8001856:	2001      	movs	r0, #1
 8001858:	f7ff f8bc 	bl	80009d4 <SSD1306_Clear>
	SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	885b      	ldrh	r3, [r3, #2]
 8001860:	b29b      	uxth	r3, r3
 8001862:	f023 0310 	bic.w	r3, r3, #16
 8001866:	b29a      	uxth	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	805a      	strh	r2, [r3, #2]
	Eeprom_ReadData(0, temp_array, 128);
 800186c:	2280      	movs	r2, #128	; 0x80
 800186e:	494e      	ldr	r1, [pc, #312]	; (80019a8 <snek_gamestate_scores+0x170>)
 8001870:	2000      	movs	r0, #0
 8001872:	f000 fbe9 	bl	8002048 <Eeprom_ReadData>
	// *** ACTIVE SCREEN *** //
	while (SCREEN_ACTIVE)
	{

		// check if buttons are clicked
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	885b      	ldrh	r3, [r3, #2]
 800187a:	b29b      	uxth	r3, r3
 800187c:	085b      	lsrs	r3, r3, #1
 800187e:	b29b      	uxth	r3, r3
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d014      	beq.n	80018b2 <snek_gamestate_scores+0x7a>
		{
			(offset == 0) ? (offset = 0) : (offset--);
 8001888:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800188c:	2b00      	cmp	r3, #0
 800188e:	d103      	bne.n	8001898 <snek_gamestate_scores+0x60>
 8001890:	2300      	movs	r3, #0
 8001892:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001896:	e004      	b.n	80018a2 <snek_gamestate_scores+0x6a>
 8001898:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800189c:	3b01      	subs	r3, #1
 800189e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	885b      	ldrh	r3, [r3, #2]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	f023 0302 	bic.w	r3, r3, #2
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	805a      	strh	r2, [r3, #2]
		}

		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	885b      	ldrh	r3, [r3, #2]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d014      	beq.n	80018ea <snek_gamestate_scores+0xb2>
		{
			(offset == 6) ? (offset = 6) : (offset++);
 80018c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018c4:	2b06      	cmp	r3, #6
 80018c6:	d103      	bne.n	80018d0 <snek_gamestate_scores+0x98>
 80018c8:	2306      	movs	r3, #6
 80018ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80018ce:	e004      	b.n	80018da <snek_gamestate_scores+0xa2>
 80018d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018d4:	3301      	adds	r3, #1
 80018d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	885b      	ldrh	r3, [r3, #2]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	805a      	strh	r2, [r3, #2]
		}

		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	885b      	ldrh	r3, [r3, #2]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00e      	beq.n	800191a <snek_gamestate_scores+0xe2>
		{
			//debounce delay
			delay(840000);
 80018fc:	482b      	ldr	r0, [pc, #172]	; (80019ac <snek_gamestate_scores+0x174>)
 80018fe:	f000 fb59 	bl	8001fb4 <delay>
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	885b      	ldrh	r3, [r3, #2]
 8001906:	b29b      	uxth	r3, r3
 8001908:	f023 0310 	bic.w	r3, r3, #16
 800190c:	b29a      	uxth	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	805a      	strh	r2, [r3, #2]
			p_snek_game->game_state = GAMESTATE_MENU;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
			break;
 8001918:	e041      	b.n	800199e <snek_gamestate_scores+0x166>
		}

		// display 4 scores
		for (uint8_t i = 0; i < 4; i++)
 800191a:	2300      	movs	r3, #0
 800191c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001920:	e036      	b.n	8001990 <snek_gamestate_scores+0x158>
		{
			memcpy(temp_name, &(temp_array[(i + offset) * 8]), 8);
 8001922:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001926:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4a1e      	ldr	r2, [pc, #120]	; (80019a8 <snek_gamestate_scores+0x170>)
 8001930:	1899      	adds	r1, r3, r2
 8001932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001936:	2208      	movs	r2, #8
 8001938:	4618      	mov	r0, r3
 800193a:	f001 fd65 	bl	8003408 <memcpy>
			temp_score = temp_array[80 + i + offset];
 800193e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001942:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8001946:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800194a:	4413      	add	r3, r2
 800194c:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <snek_gamestate_scores+0x170>)
 800194e:	5cd3      	ldrb	r3, [r2, r3]
 8001950:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			sprintf((char*) display_text, "%d. %8s %d", (i + offset + 1), temp_name, temp_score);
 8001954:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001958:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800195c:	4413      	add	r3, r2
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001964:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001968:	f107 000c 	add.w	r0, r7, #12
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	460b      	mov	r3, r1
 8001970:	490f      	ldr	r1, [pc, #60]	; (80019b0 <snek_gamestate_scores+0x178>)
 8001972:	f001 fd9f 	bl	80034b4 <siprintf>
			snek_ui_draw_mainmenu_button(display_text, i, 1);
 8001976:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	2201      	movs	r2, #1
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f95f 	bl	8000c44 <snek_ui_draw_mainmenu_button>
		for (uint8_t i = 0; i < 4; i++)
 8001986:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800198a:	3301      	adds	r3, #1
 800198c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001990:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001994:	2b03      	cmp	r3, #3
 8001996:	d9c4      	bls.n	8001922 <snek_gamestate_scores+0xea>
		}

		SSD1306_Display();
 8001998:	f7ff f8da 	bl	8000b50 <SSD1306_Display>
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 800199c:	e76b      	b.n	8001876 <snek_gamestate_scores+0x3e>

	}

}
 800199e:	bf00      	nop
 80019a0:	3738      	adds	r7, #56	; 0x38
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000484 	.word	0x20000484
 80019ac:	000cd140 	.word	0x000cd140
 80019b0:	08004834 	.word	0x08004834

080019b4 <snek_gamestate_game>:

static void snek_gamestate_game(snek_game_t *p_snek_game)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	6078      	str	r0, [r7, #4]

	// init parameters
	p_snek_game->snek_lenght = 0;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
	snek_map_clearmap(p_snek_game);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff faad 	bl	8000f24 <snek_map_clearmap>
	SSD1306_Clear(BLACK);
 80019ca:	2000      	movs	r0, #0
 80019cc:	f7ff f802 	bl	80009d4 <SSD1306_Clear>
	// draw scorebox as a top button
	GFX_DrawRectangle(0, 0, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, YELLOWBLUE);
 80019d0:	2301      	movs	r3, #1
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	230f      	movs	r3, #15
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	2100      	movs	r1, #0
 80019da:	2000      	movs	r0, #0
 80019dc:	f7fe fe3a 	bl	8000654 <GFX_DrawRectangle>
	GFX_DrawString(5, 0 + SNEK_UI_CHAR_OFFSET, "SNEK", YELLOWBLUE, BLACK);
 80019e0:	2300      	movs	r3, #0
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2301      	movs	r3, #1
 80019e6:	4a3d      	ldr	r2, [pc, #244]	; (8001adc <snek_gamestate_game+0x128>)
 80019e8:	2104      	movs	r1, #4
 80019ea:	2005      	movs	r0, #5
 80019ec:	f7fe fd1a 	bl	8000424 <GFX_DrawString>
	GFX_DrawString(60, 0 + SNEK_UI_CHAR_OFFSET, "SCORE: 0", YELLOWBLUE, BLACK);
 80019f0:	2300      	movs	r3, #0
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2301      	movs	r3, #1
 80019f6:	4a3a      	ldr	r2, [pc, #232]	; (8001ae0 <snek_gamestate_game+0x12c>)
 80019f8:	2104      	movs	r1, #4
 80019fa:	203c      	movs	r0, #60	; 0x3c
 80019fc:	f7fe fd12 	bl	8000424 <GFX_DrawString>

	// create snake in game map
	snek_map_drawnode(p_snek_game, 40);
 8001a00:	2128      	movs	r1, #40	; 0x28
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fb5a 	bl	80010bc <snek_map_drawnode>
	snek_map_drawnode(p_snek_game, 41);
 8001a08:	2129      	movs	r1, #41	; 0x29
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fb56 	bl	80010bc <snek_map_drawnode>
	snek_map_drawnode(p_snek_game, 42);
 8001a10:	212a      	movs	r1, #42	; 0x2a
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fb52 	bl	80010bc <snek_map_drawnode>

	// set first movement as right
	SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	889b      	ldrh	r3, [r3, #4]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	809a      	strh	r2, [r3, #4]
	SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_NO_FRUITY);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	889b      	ldrh	r3, [r3, #4]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	809a      	strh	r2, [r3, #4]

	SSD1306_Display();
 8001a38:	f7ff f88a 	bl	8000b50 <SSD1306_Display>

	while (SCREEN_ACTIVE)

	{
	SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	885b      	ldrh	r3, [r3, #2]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	805a      	strh	r2, [r3, #2]

	// game tick
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	885b      	ldrh	r3, [r3, #2]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	0a1b      	lsrs	r3, r3, #8
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0ee      	beq.n	8001a3c <snek_gamestate_game+0x88>
	{
		// check if direction change is required
		snek_map_check_direction(p_snek_game);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fb95 	bl	800118e <snek_map_check_direction>

		// check if new fruity is required
		snek_map_check_fruity(p_snek_game);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff fc89 	bl	800137c <snek_map_check_fruity>

		delay(840000);
 8001a6a:	481e      	ldr	r0, [pc, #120]	; (8001ae4 <snek_gamestate_game+0x130>)
 8001a6c:	f000 faa2 	bl	8001fb4 <delay>

		// calculate next node position in array
		uint8_t temp_new_head = snek_map_compute_newposition(p_snek_game);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff fcc1 	bl	80013f8 <snek_map_compute_newposition>
 8001a76:	4603      	mov	r3, r0
 8001a78:	73fb      	strb	r3, [r7, #15]

		// check if new node is taken -> if yes then collision
		if (p_snek_game->game_map[temp_new_head].node_taken)
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	440b      	add	r3, r1
 8001a86:	3307      	adds	r3, #7
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <snek_gamestate_game+0xe2>
		{
			p_snek_game->game_state = GAMESTATE_OVER;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2205      	movs	r2, #5
 8001a92:	701a      	strb	r2, [r3, #0]
			return;
 8001a94:	e01f      	b.n	8001ad6 <snek_gamestate_game+0x122>
		}

		// check if next node is fruity node
		if (p_snek_game->fruity_node == temp_new_head)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	799b      	ldrb	r3, [r3, #6]
 8001a9a:	7bfa      	ldrb	r2, [r7, #15]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d108      	bne.n	8001ab2 <snek_gamestate_game+0xfe>
		{
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_NO_FRUITY);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	889b      	ldrh	r3, [r3, #4]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	809a      	strh	r2, [r3, #4]
 8001ab0:	e006      	b.n	8001ac0 <snek_gamestate_game+0x10c>

		}
		else
		{
			// erase tail
			snek_map_erasenode(p_snek_game, p_snek_game->tail_address);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8001ab8:	4619      	mov	r1, r3
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff fb22 	bl	8001104 <snek_map_erasenode>
		}

		// draw new head
		snek_map_drawnode(p_snek_game, temp_new_head);
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff faf9 	bl	80010bc <snek_map_drawnode>

		snek_ui_updatescore(p_snek_game);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff f94e 	bl	8000d6c <snek_ui_updatescore>

		SSD1306_Display();
 8001ad0:	f7ff f83e 	bl	8000b50 <SSD1306_Display>
	SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8001ad4:	e7b2      	b.n	8001a3c <snek_gamestate_game+0x88>
	}
}

}
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	08004840 	.word	0x08004840
 8001ae0:	08004848 	.word	0x08004848
 8001ae4:	000cd140 	.word	0x000cd140

08001ae8 <snek_gamestate_over>:

static void snek_gamestate_over(snek_game_t *p_snek_game)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	6078      	str	r0, [r7, #4]

	// *** INIT SCREEN *** //
	snek_ui_gameover_animation();
 8001af0:	f7ff f95a 	bl	8000da8 <snek_ui_gameover_animation>

	uint8_t msg[16];
	sprintf((char*) msg, "Score: %d", (p_snek_game->snek_lenght - 3));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8001afa:	1eda      	subs	r2, r3, #3
 8001afc:	f107 0308 	add.w	r3, r7, #8
 8001b00:	4997      	ldr	r1, [pc, #604]	; (8001d60 <snek_gamestate_over+0x278>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	f001 fcd6 	bl	80034b4 <siprintf>

	// draw buttons
	snek_ui_draw_mainmenu_button((uint8_t*) "Game over", 0, 1);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4895      	ldr	r0, [pc, #596]	; (8001d64 <snek_gamestate_over+0x27c>)
 8001b0e:	f7ff f899 	bl	8000c44 <snek_ui_draw_mainmenu_button>
	snek_ui_draw_mainmenu_button((uint8_t*) msg, 1, 1);
 8001b12:	f107 0308 	add.w	r3, r7, #8
 8001b16:	2201      	movs	r2, #1
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f892 	bl	8000c44 <snek_ui_draw_mainmenu_button>
	snek_ui_draw_mainmenu_button((uint8_t*) "Name:", 2, 1);
 8001b20:	2201      	movs	r2, #1
 8001b22:	2102      	movs	r1, #2
 8001b24:	4890      	ldr	r0, [pc, #576]	; (8001d68 <snek_gamestate_over+0x280>)
 8001b26:	f7ff f88d 	bl	8000c44 <snek_ui_draw_mainmenu_button>
	snek_ui_draw_mainmenu_button((uint8_t*) "", 3, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2103      	movs	r1, #3
 8001b2e:	488f      	ldr	r0, [pc, #572]	; (8001d6c <snek_gamestate_over+0x284>)
 8001b30:	f7ff f888 	bl	8000c44 <snek_ui_draw_mainmenu_button>

	// draw ok button
	snek_ui_draw_ok_button(OFF);
 8001b34:	2000      	movs	r0, #0
 8001b36:	f7ff f8d9 	bl	8000cec <snek_ui_draw_ok_button>

	// init text editor values
	p_snek_game->txt_edit.pos = 0;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
	p_snek_game->txt_edit.val = 'A';
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2241      	movs	r2, #65	; 0x41
 8001b46:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	memset(p_snek_game->txt_edit.name, ' ', 16);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8001b50:	2210      	movs	r2, #16
 8001b52:	2120      	movs	r1, #32
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 fc65 	bl	8003424 <memset>

	SSD1306_Display();
 8001b5a:	f7fe fff9 	bl	8000b50 <SSD1306_Display>

	// *** ACTIVE SCREEN *** //
	while (SCREEN_ACTIVE)
	{
		delay(840000);
 8001b5e:	4884      	ldr	r0, [pc, #528]	; (8001d70 <snek_gamestate_over+0x288>)
 8001b60:	f000 fa28 	bl	8001fb4 <delay>

		// check if there is a letter to change
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	885b      	ldrh	r3, [r3, #2]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	085b      	lsrs	r3, r3, #1
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d01d      	beq.n	8001bb2 <snek_gamestate_over+0xca>
		{
			delay(840000);
 8001b76:	487e      	ldr	r0, [pc, #504]	; (8001d70 <snek_gamestate_over+0x288>)
 8001b78:	f000 fa1c 	bl	8001fb4 <delay>
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	885b      	ldrh	r3, [r3, #2]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	f023 0302 	bic.w	r3, r3, #2
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	805a      	strh	r2, [r3, #2]
			(p_snek_game->txt_edit.val >= 'Z') ? p_snek_game->txt_edit.val = 'A' : p_snek_game->txt_edit.val++;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8001b92:	2b59      	cmp	r3, #89	; 0x59
 8001b94:	d904      	bls.n	8001ba0 <snek_gamestate_over+0xb8>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2241      	movs	r2, #65	; 0x41
 8001b9a:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 8001b9e:	e02c      	b.n	8001bfa <snek_gamestate_over+0x112>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 8001bb0:	e023      	b.n	8001bfa <snek_gamestate_over+0x112>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	885b      	ldrh	r3, [r3, #2]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01c      	beq.n	8001bfa <snek_gamestate_over+0x112>
		{
			delay(840000);
 8001bc0:	486b      	ldr	r0, [pc, #428]	; (8001d70 <snek_gamestate_over+0x288>)
 8001bc2:	f000 f9f7 	bl	8001fb4 <delay>
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	885b      	ldrh	r3, [r3, #2]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	805a      	strh	r2, [r3, #2]
			(p_snek_game->txt_edit.val <= 'A') ? p_snek_game->txt_edit.val = 'Z' : p_snek_game->txt_edit.val--;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8001bdc:	2b41      	cmp	r3, #65	; 0x41
 8001bde:	d804      	bhi.n	8001bea <snek_gamestate_over+0x102>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	225a      	movs	r2, #90	; 0x5a
 8001be4:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 8001be8:	e007      	b.n	8001bfa <snek_gamestate_over+0x112>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
		}

		// check if there is position to change
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	885b      	ldrh	r3, [r3, #2]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	08db      	lsrs	r3, r3, #3
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d028      	beq.n	8001c5e <snek_gamestate_over+0x176>
		{
			delay(840000);
 8001c0c:	4858      	ldr	r0, [pc, #352]	; (8001d70 <snek_gamestate_over+0x288>)
 8001c0e:	f000 f9d1 	bl	8001fb4 <delay>
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	885b      	ldrh	r3, [r3, #2]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	f023 0308 	bic.w	r3, r3, #8
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	805a      	strh	r2, [r3, #2]
			(p_snek_game->txt_edit.pos == SNEK_UI_MAX_NAME_LENGHT) ? p_snek_game->txt_edit.pos = 0 : p_snek_game->txt_edit.pos++;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d104      	bne.n	8001c36 <snek_gamestate_over+0x14e>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 8001c34:	e007      	b.n	8001c46 <snek_gamestate_over+0x15e>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
			p_snek_game->txt_edit.val = p_snek_game->txt_edit.name[p_snek_game->txt_edit.pos];
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	f893 212e 	ldrb.w	r2, [r3, #302]	; 0x12e
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 8001c5c:	e030      	b.n	8001cc0 <snek_gamestate_over+0x1d8>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	885b      	ldrh	r3, [r3, #2]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	089b      	lsrs	r3, r3, #2
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d027      	beq.n	8001cc0 <snek_gamestate_over+0x1d8>
		{
			delay(840000);
 8001c70:	483f      	ldr	r0, [pc, #252]	; (8001d70 <snek_gamestate_over+0x288>)
 8001c72:	f000 f99f 	bl	8001fb4 <delay>
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	885b      	ldrh	r3, [r3, #2]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	805a      	strh	r2, [r3, #2]
			(p_snek_game->txt_edit.pos == 0) ? p_snek_game->txt_edit.pos = SNEK_UI_MAX_NAME_LENGHT : p_snek_game->txt_edit.pos--;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d104      	bne.n	8001c9a <snek_gamestate_over+0x1b2>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2208      	movs	r2, #8
 8001c94:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 8001c98:	e007      	b.n	8001caa <snek_gamestate_over+0x1c2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
			p_snek_game->txt_edit.val = p_snek_game->txt_edit.name[p_snek_game->txt_edit.pos];
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f893 212e 	ldrb.w	r2, [r3, #302]	; 0x12e
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
		}

		// jump between letters
		if (p_snek_game->txt_edit.pos != SNEK_UI_MAX_NAME_LENGHT)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d016      	beq.n	8001cf8 <snek_gamestate_over+0x210>
		{

			GFX_DrawChar((p_snek_game->txt_edit.pos * 6) + SNEK_UI_TXT_EDITOR_OFFSET_LEFT, SSD1306_LCDHEIGHT - SNEK_UI_TXT_EDITOR_OFFSET_BOTTOM,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	3328      	adds	r3, #40	; 0x28
 8001cdc:	4618      	mov	r0, r3
					p_snek_game->txt_edit.val, YELLOWBLUE,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
			GFX_DrawChar((p_snek_game->txt_edit.pos * 6) + SNEK_UI_TXT_EDITOR_OFFSET_LEFT, SSD1306_LCDHEIGHT - SNEK_UI_TXT_EDITOR_OFFSET_BOTTOM,
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2301      	movs	r3, #1
 8001cea:	2134      	movs	r1, #52	; 0x34
 8001cec:	f7fe fae0 	bl	80002b0 <GFX_DrawChar>
					BLACK);

			snek_ui_draw_ok_button(OFF);
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f7fe fffb 	bl	8000cec <snek_ui_draw_ok_button>
 8001cf6:	e002      	b.n	8001cfe <snek_gamestate_over+0x216>
		}
		else
		{
			snek_ui_draw_ok_button(ON);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f7fe fff7 	bl	8000cec <snek_ui_draw_ok_button>
		}

		p_snek_game->txt_edit.name[p_snek_game->txt_edit.pos] = p_snek_game->txt_edit.val;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001d04:	4619      	mov	r1, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	440b      	add	r3, r1
 8001d10:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e

		SSD1306_Display();
 8001d14:	f7fe ff1c 	bl	8000b50 <SSD1306_Display>

		// check if button enter is clicked and go back to main menu
		if (SNEK_CHECK_BIT(p_snek_game->CR1,SNEK_CR1_BUTTON_ENTER) && (p_snek_game->txt_edit.pos == SNEK_UI_MAX_NAME_LENGHT))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	885b      	ldrh	r3, [r3, #2]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f43f af19 	beq.w	8001b5e <snek_gamestate_over+0x76>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	f47f af13 	bne.w	8001b5e <snek_gamestate_over+0x76>
		{

			//debounce delay
			delay(840000);
 8001d38:	480d      	ldr	r0, [pc, #52]	; (8001d70 <snek_gamestate_over+0x288>)
 8001d3a:	f000 f93b 	bl	8001fb4 <delay>
			// save data on eeprom
			p_snek_game->game_state = GAMESTATE_SAVE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2206      	movs	r2, #6
 8001d42:	701a      	strb	r2, [r3, #0]
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	885b      	ldrh	r3, [r3, #2]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	f023 0310 	bic.w	r3, r3, #16
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	805a      	strh	r2, [r3, #2]
			break;
 8001d54:	bf00      	nop
		}

	}
}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	08004854 	.word	0x08004854
 8001d64:	08004860 	.word	0x08004860
 8001d68:	0800486c 	.word	0x0800486c
 8001d6c:	08004874 	.word	0x08004874
 8001d70:	000cd140 	.word	0x000cd140

08001d74 <snek_gamestate_save>:

static void snek_gamestate_save(snek_game_t *p_snek_game)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	uint8_t save_name[SNEK_UI_MAX_NAME_LENGHT] =
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
	{ 0 };
	uint8_t save_score = p_snek_game->snek_lenght - SNEK_GAME_START_LENGHT;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	3b03      	subs	r3, #3
 8001d8e:	74fb      	strb	r3, [r7, #19]
	uint8_t new_position = 99;
 8001d90:	2363      	movs	r3, #99	; 0x63
 8001d92:	75fb      	strb	r3, [r7, #23]
	static uint8_t temp_buffer[EEPROM_SIZE];

	// fill name
	for (uint8_t arr_count = 0; arr_count < SNEK_UI_MAX_NAME_LENGHT; arr_count++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	75bb      	strb	r3, [r7, #22]
 8001d98:	e00d      	b.n	8001db6 <snek_gamestate_save+0x42>
	{
		save_name[arr_count] = p_snek_game->txt_edit.name[arr_count];
 8001d9a:	7dba      	ldrb	r2, [r7, #22]
 8001d9c:	7dbb      	ldrb	r3, [r7, #22]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	440a      	add	r2, r1
 8001da2:	f892 212e 	ldrb.w	r2, [r2, #302]	; 0x12e
 8001da6:	f107 0118 	add.w	r1, r7, #24
 8001daa:	440b      	add	r3, r1
 8001dac:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t arr_count = 0; arr_count < SNEK_UI_MAX_NAME_LENGHT; arr_count++)
 8001db0:	7dbb      	ldrb	r3, [r7, #22]
 8001db2:	3301      	adds	r3, #1
 8001db4:	75bb      	strb	r3, [r7, #22]
 8001db6:	7dbb      	ldrb	r3, [r7, #22]
 8001db8:	2b07      	cmp	r3, #7
 8001dba:	d9ee      	bls.n	8001d9a <snek_gamestate_save+0x26>
	}

	// read scores from eeprom

	Eeprom_ReadData(0, temp_buffer, EEPROM_SIZE);
 8001dbc:	2280      	movs	r2, #128	; 0x80
 8001dbe:	492f      	ldr	r1, [pc, #188]	; (8001e7c <snek_gamestate_save+0x108>)
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f000 f941 	bl	8002048 <Eeprom_ReadData>
	// check if score is qualifying to top
	for (uint8_t i = 0; i < 10; i++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	757b      	strb	r3, [r7, #21]
 8001dca:	e00c      	b.n	8001de6 <snek_gamestate_save+0x72>
	{
		if (save_score >= temp_buffer[80 + i])
 8001dcc:	7d7b      	ldrb	r3, [r7, #21]
 8001dce:	3350      	adds	r3, #80	; 0x50
 8001dd0:	4a2a      	ldr	r2, [pc, #168]	; (8001e7c <snek_gamestate_save+0x108>)
 8001dd2:	5cd3      	ldrb	r3, [r2, r3]
 8001dd4:	7cfa      	ldrb	r2, [r7, #19]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d302      	bcc.n	8001de0 <snek_gamestate_save+0x6c>
		{
			new_position = i;
 8001dda:	7d7b      	ldrb	r3, [r7, #21]
 8001ddc:	75fb      	strb	r3, [r7, #23]
			break;
 8001dde:	e005      	b.n	8001dec <snek_gamestate_save+0x78>
	for (uint8_t i = 0; i < 10; i++)
 8001de0:	7d7b      	ldrb	r3, [r7, #21]
 8001de2:	3301      	adds	r3, #1
 8001de4:	757b      	strb	r3, [r7, #21]
 8001de6:	7d7b      	ldrb	r3, [r7, #21]
 8001de8:	2b09      	cmp	r3, #9
 8001dea:	d9ef      	bls.n	8001dcc <snek_gamestate_save+0x58>
		}
	}

	// if new score is outside high scores
	if (new_position > 10)
 8001dec:	7dfb      	ldrb	r3, [r7, #23]
 8001dee:	2b0a      	cmp	r3, #10
 8001df0:	d903      	bls.n	8001dfa <snek_gamestate_save+0x86>
	{
		p_snek_game->game_state = GAMESTATE_MENU;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	e03c      	b.n	8001e74 <snek_gamestate_save+0x100>
		return;

	}

	// write scores in new order
	for (uint8_t i = 1; i < (10 - new_position); i++)
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	753b      	strb	r3, [r7, #20]
 8001dfe:	e01c      	b.n	8001e3a <snek_gamestate_save+0xc6>
	{
		//write names in new order
		memcpy(&temp_buffer[8 * (10 - i)], &temp_buffer[8 * (10 - i - 1)], EEPROM_PAGE_SIZE);
 8001e00:	7d3b      	ldrb	r3, [r7, #20]
 8001e02:	f1c3 030a 	rsb	r3, r3, #10
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <snek_gamestate_save+0x108>)
 8001e0a:	1898      	adds	r0, r3, r2
 8001e0c:	7d3b      	ldrb	r3, [r7, #20]
 8001e0e:	f1c3 0309 	rsb	r3, r3, #9
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <snek_gamestate_save+0x108>)
 8001e16:	4413      	add	r3, r2
 8001e18:	2208      	movs	r2, #8
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f001 faf4 	bl	8003408 <memcpy>
		//write scores in new order
		temp_buffer[80 + (10 - i)] = temp_buffer[80 + (10 - i - 1)];
 8001e20:	7d3b      	ldrb	r3, [r7, #20]
 8001e22:	f1c3 0259 	rsb	r2, r3, #89	; 0x59
 8001e26:	7d3b      	ldrb	r3, [r7, #20]
 8001e28:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001e2c:	4913      	ldr	r1, [pc, #76]	; (8001e7c <snek_gamestate_save+0x108>)
 8001e2e:	5c89      	ldrb	r1, [r1, r2]
 8001e30:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <snek_gamestate_save+0x108>)
 8001e32:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 1; i < (10 - new_position); i++)
 8001e34:	7d3b      	ldrb	r3, [r7, #20]
 8001e36:	3301      	adds	r3, #1
 8001e38:	753b      	strb	r3, [r7, #20]
 8001e3a:	7d3a      	ldrb	r2, [r7, #20]
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	f1c3 030a 	rsb	r3, r3, #10
 8001e42:	429a      	cmp	r2, r3
 8001e44:	dbdc      	blt.n	8001e00 <snek_gamestate_save+0x8c>
	}

	//add new score
	memcpy(&temp_buffer[new_position * 8], save_name, EEPROM_PAGE_SIZE);
 8001e46:	7dfb      	ldrb	r3, [r7, #23]
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <snek_gamestate_save+0x108>)
 8001e4c:	4413      	add	r3, r2
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f107 0308 	add.w	r3, r7, #8
 8001e54:	cb03      	ldmia	r3!, {r0, r1}
 8001e56:	6010      	str	r0, [r2, #0]
 8001e58:	6051      	str	r1, [r2, #4]
	temp_buffer[80 + new_position] = save_score;
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
 8001e5c:	3350      	adds	r3, #80	; 0x50
 8001e5e:	4907      	ldr	r1, [pc, #28]	; (8001e7c <snek_gamestate_save+0x108>)
 8001e60:	7cfa      	ldrb	r2, [r7, #19]
 8001e62:	54ca      	strb	r2, [r1, r3]

	// send new scores to eeprom

	Eeprom_SendData(0, temp_buffer, EEPROM_PAGE_SIZE * 12);
 8001e64:	2260      	movs	r2, #96	; 0x60
 8001e66:	4905      	ldr	r1, [pc, #20]	; (8001e7c <snek_gamestate_save+0x108>)
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f000 f8b9 	bl	8001fe0 <Eeprom_SendData>

	p_snek_game->game_state = GAMESTATE_MENU;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
}
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000504 	.word	0x20000504

08001e80 <snek>:

// main function

void snek(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	switch (g_snek_game.game_state)
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <snek+0x70>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b06      	cmp	r3, #6
 8001e8a:	d82d      	bhi.n	8001ee8 <snek+0x68>
 8001e8c:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <snek+0x14>)
 8001e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e92:	bf00      	nop
 8001e94:	08001eb1 	.word	0x08001eb1
 8001e98:	08001eb9 	.word	0x08001eb9
 8001e9c:	08001ec1 	.word	0x08001ec1
 8001ea0:	08001ec9 	.word	0x08001ec9
 8001ea4:	08001ed1 	.word	0x08001ed1
 8001ea8:	08001ed9 	.word	0x08001ed9
 8001eac:	08001ee1 	.word	0x08001ee1
	{

	case GAMESTATE_MENU:
		snek_gamestate_menu(&g_snek_game);
 8001eb0:	480f      	ldr	r0, [pc, #60]	; (8001ef0 <snek+0x70>)
 8001eb2:	f7ff fb75 	bl	80015a0 <snek_gamestate_menu>
		break;
 8001eb6:	e018      	b.n	8001eea <snek+0x6a>

	case GAMESTATE_SCORES:
		snek_gamestate_scores(&g_snek_game);
 8001eb8:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <snek+0x70>)
 8001eba:	f7ff fcbd 	bl	8001838 <snek_gamestate_scores>
		break;
 8001ebe:	e014      	b.n	8001eea <snek+0x6a>

	case GAMESTATE_ABOUT:
		snek_gamestate_about(&g_snek_game);
 8001ec0:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <snek+0x70>)
 8001ec2:	f7ff fc19 	bl	80016f8 <snek_gamestate_about>
		break;
 8001ec6:	e010      	b.n	8001eea <snek+0x6a>

	case GAMESTATE_SETTINGS:
		snek_gamestate_settings(&g_snek_game);
 8001ec8:	4809      	ldr	r0, [pc, #36]	; (8001ef0 <snek+0x70>)
 8001eca:	f7ff fc6b 	bl	80017a4 <snek_gamestate_settings>
		break;
 8001ece:	e00c      	b.n	8001eea <snek+0x6a>

	case GAMESTATE_GAME:
		snek_gamestate_game(&g_snek_game);
 8001ed0:	4807      	ldr	r0, [pc, #28]	; (8001ef0 <snek+0x70>)
 8001ed2:	f7ff fd6f 	bl	80019b4 <snek_gamestate_game>
		break;
 8001ed6:	e008      	b.n	8001eea <snek+0x6a>

	case GAMESTATE_OVER:
		snek_gamestate_over(&g_snek_game);
 8001ed8:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <snek+0x70>)
 8001eda:	f7ff fe05 	bl	8001ae8 <snek_gamestate_over>
		break;
 8001ede:	e004      	b.n	8001eea <snek+0x6a>

	case GAMESTATE_SAVE:
		snek_gamestate_save(&g_snek_game);
 8001ee0:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <snek+0x70>)
 8001ee2:	f7ff ff47 	bl	8001d74 <snek_gamestate_save>
		break;
 8001ee6:	e000      	b.n	8001eea <snek+0x6a>

	default:
		break;
 8001ee8:	bf00      	nop
	}
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000059c 	.word	0x2000059c

08001ef4 <snek_button_callback>:

// callback to connect hardware buttons with snek game

void snek_button_callback(uint8_t GPIO_Pin)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]

// set button clicked bit in CR1
	switch (GPIO_Pin)
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	2b0e      	cmp	r3, #14
 8001f04:	d84d      	bhi.n	8001fa2 <snek_button_callback+0xae>
 8001f06:	a201      	add	r2, pc, #4	; (adr r2, 8001f0c <snek_button_callback+0x18>)
 8001f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0c:	08001f7f 	.word	0x08001f7f
 8001f10:	08001f49 	.word	0x08001f49
 8001f14:	08001fa3 	.word	0x08001fa3
 8001f18:	08001fa3 	.word	0x08001fa3
 8001f1c:	08001fa3 	.word	0x08001fa3
 8001f20:	08001fa3 	.word	0x08001fa3
 8001f24:	08001fa3 	.word	0x08001fa3
 8001f28:	08001fa3 	.word	0x08001fa3
 8001f2c:	08001fa3 	.word	0x08001fa3
 8001f30:	08001fa3 	.word	0x08001fa3
 8001f34:	08001fa3 	.word	0x08001fa3
 8001f38:	08001fa3 	.word	0x08001fa3
 8001f3c:	08001f91 	.word	0x08001f91
 8001f40:	08001f5b 	.word	0x08001f5b
 8001f44:	08001f6d 	.word	0x08001f6d
	{
	case SNEK_BUTTON_DOWN:
		SNEK_SET_BIT(g_snek_game.CR1, SNEK_CR1_BUTTON_DOWN);
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <snek_button_callback+0xbc>)
 8001f4a:	885b      	ldrh	r3, [r3, #2]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <snek_button_callback+0xbc>)
 8001f56:	805a      	strh	r2, [r3, #2]
		break;
 8001f58:	e023      	b.n	8001fa2 <snek_button_callback+0xae>

	case SNEK_BUTTON_UP:
		SNEK_SET_BIT(g_snek_game.CR1, SNEK_CR1_BUTTON_UP);
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <snek_button_callback+0xbc>)
 8001f5c:	885b      	ldrh	r3, [r3, #2]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <snek_button_callback+0xbc>)
 8001f68:	805a      	strh	r2, [r3, #2]
		break;
 8001f6a:	e01a      	b.n	8001fa2 <snek_button_callback+0xae>

	case SNEK_BUTTON_LEFT:
		SNEK_SET_BIT(g_snek_game.CR1, SNEK_CR1_BUTTON_LEFT);
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <snek_button_callback+0xbc>)
 8001f6e:	885b      	ldrh	r3, [r3, #2]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	f043 0304 	orr.w	r3, r3, #4
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <snek_button_callback+0xbc>)
 8001f7a:	805a      	strh	r2, [r3, #2]
		break;
 8001f7c:	e011      	b.n	8001fa2 <snek_button_callback+0xae>

	case SNEK_BUTTON_RIGHT:
		SNEK_SET_BIT(g_snek_game.CR1, SNEK_CR1_BUTTON_RIGHT);
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <snek_button_callback+0xbc>)
 8001f80:	885b      	ldrh	r3, [r3, #2]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	f043 0308 	orr.w	r3, r3, #8
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <snek_button_callback+0xbc>)
 8001f8c:	805a      	strh	r2, [r3, #2]
		break;
 8001f8e:	e008      	b.n	8001fa2 <snek_button_callback+0xae>

	case SNEK_BUTTON_ENTER:
		SNEK_SET_BIT(g_snek_game.CR1, SNEK_CR1_BUTTON_ENTER);
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <snek_button_callback+0xbc>)
 8001f92:	885b      	ldrh	r3, [r3, #2]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	f043 0310 	orr.w	r3, r3, #16
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <snek_button_callback+0xbc>)
 8001f9e:	805a      	strh	r2, [r3, #2]
		break;
 8001fa0:	bf00      	nop
	}

}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	2000059c 	.word	0x2000059c

08001fb4 <delay>:

#include "stdint.h"
#include "delay.h"

void delay(uint32_t value)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < value; i++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	e002      	b.n	8001fc8 <delay+0x14>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d3f8      	bcc.n	8001fc2 <delay+0xe>
	{

	}
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <Eeprom_SendData>:
#include "eeprom.h"

static i2c_handle_t *p_eeprom_i2c;

void Eeprom_SendData(uint8_t first_page, uint8_t *data_buffer, uint32_t data_size)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	73fb      	strb	r3, [r7, #15]
	uint8_t write_pages = data_size / EEPROM_PAGE_SIZE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	75bb      	strb	r3, [r7, #22]

	if (write_pages > EEPROM_NO_PAGES)
 8001ff4:	7dbb      	ldrb	r3, [r7, #22]
 8001ff6:	2b80      	cmp	r3, #128	; 0x80
 8001ff8:	d820      	bhi.n	800203c <Eeprom_SendData+0x5c>
		//error
		return;
	}

	// save data in eeprom pages
	for (uint8_t transmit_count = 0; transmit_count < write_pages; transmit_count++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	75fb      	strb	r3, [r7, #23]
 8001ffe:	e018      	b.n	8002032 <Eeprom_SendData+0x52>
	{
		i2c_transmit(p_eeprom_i2c, (EEPROM_CONTORLBYTE << 1), (first_page + transmit_count) * EEPROM_PAGE_SIZE,
 8002000:	4b10      	ldr	r3, [pc, #64]	; (8002044 <Eeprom_SendData+0x64>)
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	7dfb      	ldrb	r3, [r7, #23]
 8002008:	4413      	add	r3, r2
 800200a:	b2db      	uxtb	r3, r3
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	b2d9      	uxtb	r1, r3
				&(data_buffer[transmit_count * EEPROM_PAGE_SIZE]),
 8002010:	7dfb      	ldrb	r3, [r7, #23]
 8002012:	00db      	lsls	r3, r3, #3
		i2c_transmit(p_eeprom_i2c, (EEPROM_CONTORLBYTE << 1), (first_page + transmit_count) * EEPROM_PAGE_SIZE,
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	4413      	add	r3, r2
 8002018:	2208      	movs	r2, #8
 800201a:	9200      	str	r2, [sp, #0]
 800201c:	460a      	mov	r2, r1
 800201e:	21a0      	movs	r1, #160	; 0xa0
 8002020:	f000 fe20 	bl	8002c64 <i2c_transmit>
				EEPROM_PAGE_SIZE);

		// need a delay between writing or a repeat sending
		delay(40000);
 8002024:	f649 4040 	movw	r0, #40000	; 0x9c40
 8002028:	f7ff ffc4 	bl	8001fb4 <delay>
	for (uint8_t transmit_count = 0; transmit_count < write_pages; transmit_count++)
 800202c:	7dfb      	ldrb	r3, [r7, #23]
 800202e:	3301      	adds	r3, #1
 8002030:	75fb      	strb	r3, [r7, #23]
 8002032:	7dfa      	ldrb	r2, [r7, #23]
 8002034:	7dbb      	ldrb	r3, [r7, #22]
 8002036:	429a      	cmp	r2, r3
 8002038:	d3e2      	bcc.n	8002000 <Eeprom_SendData+0x20>
 800203a:	e000      	b.n	800203e <Eeprom_SendData+0x5e>
		return;
 800203c:	bf00      	nop
	}


}
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000584 	.word	0x20000584

08002048 <Eeprom_ReadData>:

void Eeprom_ReadData(uint8_t first_page, uint8_t *data_buffer, uint32_t data_size)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af02      	add	r7, sp, #8
 800204e:	4603      	mov	r3, r0
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	73fb      	strb	r3, [r7, #15]

	// transmit info that we are reading
	i2c_transmit(p_eeprom_i2c, (EEPROM_CONTORLBYTE << 1), 0, 0, 0);
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <Eeprom_ReadData+0x38>)
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	2300      	movs	r3, #0
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2300      	movs	r3, #0
 8002060:	2200      	movs	r2, #0
 8002062:	21a0      	movs	r1, #160	; 0xa0
 8002064:	f000 fdfe 	bl	8002c64 <i2c_transmit>
	i2c_recieve(p_eeprom_i2c, (EEPROM_CONTORLBYTE << 1), data_buffer, data_size);
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <Eeprom_ReadData+0x38>)
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	21a0      	movs	r1, #160	; 0xa0
 8002072:	f000 fe59 	bl	8002d28 <i2c_recieve>

}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000584 	.word	0x20000584

08002084 <Eeprom_Init>:

void Eeprom_Init(i2c_handle_t *p_i2c)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	p_eeprom_i2c = p_i2c;
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <Eeprom_Init+0x1c>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6013      	str	r3, [r2, #0]
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000584 	.word	0x20000584

080020a4 <main>:
void i2c1_config(i2c_handle_t *p_handle_i2c1);

volatile uint32_t TickS ;

int main()
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
	i2c_handle_t h_i2c1;


	// Configure RCC
	SysClockInit();
 80020aa:	f000 f891 	bl	80021d0 <SysClockInit>

	RCC_ClockFreqs freqs = {0};
 80020ae:	463b      	mov	r3, r7
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
	RCC_GetClockFrequencies(&freqs);
 80020ba:	463b      	mov	r3, r7
 80020bc:	4618      	mov	r0, r3
 80020be:	f001 f95b 	bl	8003378 <RCC_GetClockFrequencies>
	// Configure GPIO pins
	GPIOConfig();
 80020c2:	f000 f8a9 	bl	8002218 <GPIOConfig>

	// Configure I2C peripherals
	i2c1_config(&h_i2c1);
 80020c6:	f107 0310 	add.w	r3, r7, #16
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 f8e0 	bl	8002290 <i2c1_config>
	SSD1306_Init(&h_i2c1);
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fd59 	bl	8000b8c <SSD1306_Init>
	Eeprom_Init(&h_i2c1);
 80020da:	f107 0310 	add.w	r3, r7, #16
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ffd0 	bl	8002084 <Eeprom_Init>
	GFX_SetFont(font_8x5);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <main+0x4c>)
 80020e6:	f7fe f8d3 	bl	8000290 <GFX_SetFont>

	while(1)
	{
		snek();
 80020ea:	f7ff fec9 	bl	8001e80 <snek>
 80020ee:	e7fc      	b.n	80020ea <main+0x46>
 80020f0:	08004a88 	.word	0x08004a88

080020f4 <EXTI1_IRQHandler>:
	}
}

// handler for button RIGHT
void EXTI1_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
	uint8_t _tempGPIOPin;

	if (EXTI->PR & (0b1 << SNEK_BUTTON_RIGHT))
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <EXTI1_IRQHandler+0x2c>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <EXTI1_IRQHandler+0x1c>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_RIGHT);
 8002106:	2001      	movs	r0, #1
 8002108:	f000 fbc2 	bl	8002890 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_RIGHT;
 800210c:	2301      	movs	r3, #1
 800210e:	71fb      	strb	r3, [r7, #7]
	}

	snek_button_callback(_tempGPIOPin);
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff feee 	bl	8001ef4 <snek_button_callback>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40013c00 	.word	0x40013c00

08002124 <EXTI2_IRQHandler>:

// handler for button DOWN
void EXTI2_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
	uint8_t _tempGPIOPin;

	if (EXTI->PR & (0b1 << SNEK_BUTTON_DOWN))
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <EXTI2_IRQHandler+0x2c>)
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d004      	beq.n	8002140 <EXTI2_IRQHandler+0x1c>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_DOWN);
 8002136:	2002      	movs	r0, #2
 8002138:	f000 fbaa 	bl	8002890 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_DOWN;
 800213c:	2302      	movs	r3, #2
 800213e:	71fb      	strb	r3, [r7, #7]
	}

	snek_button_callback(_tempGPIOPin);
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fed6 	bl	8001ef4 <snek_button_callback>
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40013c00 	.word	0x40013c00

08002154 <EXTI15_10_IRQHandler>:

// handler for buttons up/left/enter
void EXTI15_10_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
	uint8_t _tempGPIOPin;
	// if button is clicked
	if (EXTI->PR & (0b1 << SNEK_BUTTON_UP))
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <EXTI15_10_IRQHandler+0x5c>)
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <EXTI15_10_IRQHandler+0x1e>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_UP);
 8002166:	200e      	movs	r0, #14
 8002168:	f000 fb92 	bl	8002890 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_UP;
 800216c:	230e      	movs	r3, #14
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	e016      	b.n	80021a0 <EXTI15_10_IRQHandler+0x4c>
	}
	else if (EXTI->PR & (0b1 << SNEK_BUTTON_LEFT))
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <EXTI15_10_IRQHandler+0x5c>)
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <EXTI15_10_IRQHandler+0x36>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_LEFT);
 800217e:	200f      	movs	r0, #15
 8002180:	f000 fb86 	bl	8002890 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_LEFT;
 8002184:	230f      	movs	r3, #15
 8002186:	71fb      	strb	r3, [r7, #7]
 8002188:	e00a      	b.n	80021a0 <EXTI15_10_IRQHandler+0x4c>
	}

	else if (EXTI->PR & (0b1 << SNEK_BUTTON_ENTER))
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <EXTI15_10_IRQHandler+0x5c>)
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d004      	beq.n	80021a0 <EXTI15_10_IRQHandler+0x4c>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_ENTER);
 8002196:	200d      	movs	r0, #13
 8002198:	f000 fb7a 	bl	8002890 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_ENTER;
 800219c:	230d      	movs	r3, #13
 800219e:	71fb      	strb	r3, [r7, #7]
	}

	snek_button_callback(_tempGPIOPin);
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fea6 	bl	8001ef4 <snek_button_callback>
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40013c00 	.word	0x40013c00

080021b4 <SysTick_Handler>:

void SysTick_Handler()
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
	TickS++;
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <SysTick_Handler+0x18>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	4a03      	ldr	r2, [pc, #12]	; (80021cc <SysTick_Handler+0x18>)
 80021c0:	6013      	str	r3, [r2, #0]
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	200006d4 	.word	0x200006d4

080021d0 <SysClockInit>:

// system clock init function
void SysClockInit(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
	RCC_ClockInitTypeDef pClockInit;

	pClockInit.apb1_prescaler = RCC_ABP_PRESCALER_DIV2;
 80021d6:	2304      	movs	r3, #4
 80021d8:	713b      	strb	r3, [r7, #4]
	pClockInit.apb2_prescaler = RCC_ABP_PRESCALER_NODIV;
 80021da:	2300      	movs	r3, #0
 80021dc:	717b      	strb	r3, [r7, #5]
	pClockInit.flash_latency = RCC_FLASHLATENCY_2WS;
 80021de:	2302      	movs	r3, #2
 80021e0:	70bb      	strb	r3, [r7, #2]
	pClockInit.hpre_prescaler = RCC_HPRE_PRESCALER_NODIV;
 80021e2:	2300      	movs	r3, #0
 80021e4:	70fb      	strb	r3, [r7, #3]
	pClockInit.oscillator_type = RCC_OSCILLATORTYPE_HSI;
 80021e6:	2300      	movs	r3, #0
 80021e8:	703b      	strb	r3, [r7, #0]
	pClockInit.vos_scale = RCC_VOS_SCALE2;
 80021ea:	2302      	movs	r3, #2
 80021ec:	707b      	strb	r3, [r7, #1]

	// init pll
	pClockInit.pll.source = RCC_PLL_SOURCE_HSI;
 80021ee:	2300      	movs	r3, #0
 80021f0:	71fb      	strb	r3, [r7, #7]
	pClockInit.pll.state = RCC_PLL_STATE_ENABLE;
 80021f2:	2301      	movs	r3, #1
 80021f4:	71bb      	strb	r3, [r7, #6]
	pClockInit.pll.pllm = 16;
 80021f6:	2310      	movs	r3, #16
 80021f8:	723b      	strb	r3, [r7, #8]
	pClockInit.pll.plln = 336;
 80021fa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80021fe:	817b      	strh	r3, [r7, #10]
	pClockInit.pll.pllp = RCC_PLLP_DIV4;
 8002200:	2301      	movs	r3, #1
 8002202:	733b      	strb	r3, [r7, #12]
	pClockInit.pll.pllq = 7;
 8002204:	2307      	movs	r3, #7
 8002206:	737b      	strb	r3, [r7, #13]

	RCC_InitClock(&pClockInit);
 8002208:	463b      	mov	r3, r7
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fe4a 	bl	8002ea4 <RCC_InitClock>
}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <GPIOConfig>:

//configure GPIO used in the project
void GPIOConfig(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOx;
	GPIOx.PinConfig.PinNumber = GPIO_PIN_5;
 800221e:	2305      	movs	r3, #5
 8002220:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_OUTPUT;
 8002222:	2301      	movs	r3, #1
 8002224:	727b      	strb	r3, [r7, #9]
	GPIOx.PinConfig.OutputType = GPIO_PIN_OT_PP;
 8002226:	2300      	movs	r3, #0
 8002228:	72bb      	strb	r3, [r7, #10]
	GPIOx.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	733b      	strb	r3, [r7, #12]
	GPIOx.pGPIOx = GPIOA;
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <GPIOConfig+0x70>)
 8002230:	607b      	str	r3, [r7, #4]
	GPIO_InitPin(&GPIOx);
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	4618      	mov	r0, r3
 8002236:	f000 f99d 	bl	8002574 <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_13;
 800223a:	230d      	movs	r3, #13
 800223c:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_EXTI_FT;
 800223e:	2304      	movs	r3, #4
 8002240:	727b      	strb	r3, [r7, #9]
	GPIOx.pGPIOx = GPIOB;
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <GPIOConfig+0x74>)
 8002244:	607b      	str	r3, [r7, #4]
	GPIO_InitPin(&GPIOx);
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	4618      	mov	r0, r3
 800224a:	f000 f993 	bl	8002574 <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_14;
 800224e:	230e      	movs	r3, #14
 8002250:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	4618      	mov	r0, r3
 8002256:	f000 f98d 	bl	8002574 <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_15;
 800225a:	230f      	movs	r3, #15
 800225c:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	4618      	mov	r0, r3
 8002262:	f000 f987 	bl	8002574 <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_1;
 8002266:	2301      	movs	r3, #1
 8002268:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f981 	bl	8002574 <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_2;
 8002272:	2302      	movs	r3, #2
 8002274:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f97b 	bl	8002574 <GPIO_InitPin>
	
}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40020000 	.word	0x40020000
 800228c:	40020400 	.word	0x40020400

08002290 <i2c1_config>:

void i2c1_config(i2c_handle_t *p_handle_i2c1)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	

	p_handle_i2c1->p_i2cx = I2C1;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <i2c1_config+0x28>)
 800229c:	601a      	str	r2, [r3, #0]
	p_handle_i2c1->i2c_config.abp1_freq_mhz = 42;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	222a      	movs	r2, #42	; 0x2a
 80022a2:	711a      	strb	r2, [r3, #4]
	p_handle_i2c1->i2c_config.speed = I2C_SPEED_FAST_DUTY0;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	715a      	strb	r2, [r3, #5]

	i2c_init(p_handle_i2c1);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fbba 	bl	8002a24 <i2c_init>
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40005400 	.word	0x40005400

080022bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
	return 1;
 80022c0:	2301      	movs	r3, #1
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <_kill>:

int _kill(int pid, int sig)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022d6:	f001 f86d 	bl	80033b4 <__errno>
 80022da:	4603      	mov	r3, r0
 80022dc:	2216      	movs	r2, #22
 80022de:	601a      	str	r2, [r3, #0]
	return -1;
 80022e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_exit>:

void _exit (int status)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ffe7 	bl	80022cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80022fe:	e7fe      	b.n	80022fe <_exit+0x12>

08002300 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	e00a      	b.n	8002328 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002312:	f3af 8000 	nop.w
 8002316:	4601      	mov	r1, r0
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	60ba      	str	r2, [r7, #8]
 800231e:	b2ca      	uxtb	r2, r1
 8002320:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	dbf0      	blt.n	8002312 <_read+0x12>
	}

return len;
 8002330:	687b      	ldr	r3, [r7, #4]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e009      	b.n	8002360 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	60ba      	str	r2, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3301      	adds	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	dbf1      	blt.n	800234c <_write+0x12>
	}
	return len;
 8002368:	687b      	ldr	r3, [r7, #4]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <_close>:

int _close(int file)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
	return -1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800239a:	605a      	str	r2, [r3, #4]
	return 0;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <_isatty>:

int _isatty(int file)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
	return 1;
 80023b2:	2301      	movs	r3, #1
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
	return 0;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <_sbrk+0x5c>)
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <_sbrk+0x60>)
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <_sbrk+0x64>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <_sbrk+0x68>)
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d207      	bcs.n	800241c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800240c:	f000 ffd2 	bl	80033b4 <__errno>
 8002410:	4603      	mov	r3, r0
 8002412:	220c      	movs	r2, #12
 8002414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	e009      	b.n	8002430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <_sbrk+0x64>)
 800242c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20018000 	.word	0x20018000
 800243c:	00000400 	.word	0x00000400
 8002440:	20000588 	.word	0x20000588
 8002444:	200006e8 	.word	0x200006e8

08002448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <SystemInit+0x20>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <SystemInit+0x20>)
 8002454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800246c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002470:	480d      	ldr	r0, [pc, #52]	; (80024a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002472:	490e      	ldr	r1, [pc, #56]	; (80024ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002474:	4a0e      	ldr	r2, [pc, #56]	; (80024b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002478:	e002      	b.n	8002480 <LoopCopyDataInit>

0800247a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800247c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247e:	3304      	adds	r3, #4

08002480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002484:	d3f9      	bcc.n	800247a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002486:	4a0b      	ldr	r2, [pc, #44]	; (80024b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002488:	4c0b      	ldr	r4, [pc, #44]	; (80024b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800248c:	e001      	b.n	8002492 <LoopFillZerobss>

0800248e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002490:	3204      	adds	r2, #4

08002492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002494:	d3fb      	bcc.n	800248e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002496:	f7ff ffd7 	bl	8002448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249a:	f000 ff91 	bl	80033c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800249e:	f7ff fe01 	bl	80020a4 <main>
  bx  lr    
 80024a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80024b0:	08004dbc 	.word	0x08004dbc
  ldr r2, =_sbss
 80024b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80024b8:	200006e8 	.word	0x200006e8

080024bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <ADC_IRQHandler>
	...

080024c0 <GPIO_ClockEnable>:
 *
 * @param[*GPIO] - base address of gpiox peripheral
 * @return - void
 */
static void GPIO_ClockEnable(GPIO_TypeDef *GPIO)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	if (GPIO == GPIOA)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a23      	ldr	r2, [pc, #140]	; (8002558 <GPIO_ClockEnable+0x98>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d106      	bne.n	80024de <GPIO_ClockEnable+0x1e>
	{
		RCC_CLOCK_GPIOA_ENABLE();
 80024d0:	4b22      	ldr	r3, [pc, #136]	; (800255c <GPIO_ClockEnable+0x9c>)
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	4a21      	ldr	r2, [pc, #132]	; (800255c <GPIO_ClockEnable+0x9c>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6313      	str	r3, [r2, #48]	; 0x30
	else if (GPIO == GPIOH)
	{
		RCC_CLOCK_GPIOH_ENABLE();
	}

}
 80024dc:	e035      	b.n	800254a <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOB)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a1f      	ldr	r2, [pc, #124]	; (8002560 <GPIO_ClockEnable+0xa0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d106      	bne.n	80024f4 <GPIO_ClockEnable+0x34>
		RCC_CLOCK_GPIOB_ENABLE();
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <GPIO_ClockEnable+0x9c>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a1c      	ldr	r2, [pc, #112]	; (800255c <GPIO_ClockEnable+0x9c>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80024f2:	e02a      	b.n	800254a <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOC)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <GPIO_ClockEnable+0xa4>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d106      	bne.n	800250a <GPIO_ClockEnable+0x4a>
		RCC_CLOCK_GPIOC_ENABLE();
 80024fc:	4b17      	ldr	r3, [pc, #92]	; (800255c <GPIO_ClockEnable+0x9c>)
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	4a16      	ldr	r2, [pc, #88]	; (800255c <GPIO_ClockEnable+0x9c>)
 8002502:	f043 0304 	orr.w	r3, r3, #4
 8002506:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002508:	e01f      	b.n	800254a <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOD)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a16      	ldr	r2, [pc, #88]	; (8002568 <GPIO_ClockEnable+0xa8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d106      	bne.n	8002520 <GPIO_ClockEnable+0x60>
		RCC_CLOCK_GPIOD_ENABLE();
 8002512:	4b12      	ldr	r3, [pc, #72]	; (800255c <GPIO_ClockEnable+0x9c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a11      	ldr	r2, [pc, #68]	; (800255c <GPIO_ClockEnable+0x9c>)
 8002518:	f043 0308 	orr.w	r3, r3, #8
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800251e:	e014      	b.n	800254a <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <GPIO_ClockEnable+0xac>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d106      	bne.n	8002536 <GPIO_ClockEnable+0x76>
		RCC_CLOCK_GPIOE_ENABLE();
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <GPIO_ClockEnable+0x9c>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	4a0b      	ldr	r2, [pc, #44]	; (800255c <GPIO_ClockEnable+0x9c>)
 800252e:	f043 0310 	orr.w	r3, r3, #16
 8002532:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002534:	e009      	b.n	800254a <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOH)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <GPIO_ClockEnable+0xb0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d105      	bne.n	800254a <GPIO_ClockEnable+0x8a>
		RCC_CLOCK_GPIOH_ENABLE();
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <GPIO_ClockEnable+0x9c>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a06      	ldr	r2, [pc, #24]	; (800255c <GPIO_ClockEnable+0x9c>)
 8002544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40020000 	.word	0x40020000
 800255c:	40023800 	.word	0x40023800
 8002560:	40020400 	.word	0x40020400
 8002564:	40020800 	.word	0x40020800
 8002568:	40020c00 	.word	0x40020c00
 800256c:	40021000 	.word	0x40021000
 8002570:	40021c00 	.word	0x40021c00

08002574 <GPIO_InitPin>:
 *
 * @param[*hGPIO] - handler to GPIO structure that contains peripheral base address and pin configuration
 * @return - void
 */
void GPIO_InitPin(GPIO_Handle_t *hGPIO)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]

	//enable clock
	GPIO_ClockEnable(hGPIO->pGPIOx);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff9d 	bl	80024c0 <GPIO_ClockEnable>

	// mode selection
	if (hGPIO->PinConfig.Mode < GPIO_PIN_MODE_EXTI_FT)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	795b      	ldrb	r3, [r3, #5]
 800258a:	2b03      	cmp	r3, #3
 800258c:	d81f      	bhi.n	80025ce <GPIO_InitPin+0x5a>
	{
		// non IRQ mode
	hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	791b      	ldrb	r3, [r3, #4]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2103      	movs	r1, #3
 800259c:	fa01 f303 	lsl.w	r3, r1, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	4619      	mov	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	400a      	ands	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
	hGPIO->pGPIOx->MODER |= hGPIO->PinConfig.Mode << (hGPIO->PinConfig.PinNumber * 2);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	795b      	ldrb	r3, [r3, #5]
 80025b6:	4619      	mov	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	791b      	ldrb	r3, [r3, #4]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	4619      	mov	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e0a9      	b.n	8002722 <GPIO_InitPin+0x1ae>
	else
	{
		//IRQ mode

		//set as input
		hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	791b      	ldrb	r3, [r3, #4]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2103      	movs	r1, #3
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	4619      	mov	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	400a      	ands	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]
		//interrupt mask
		EXTI->IMR |= (0b1 << hGPIO->PinConfig.PinNumber);
 80025ec:	4b9e      	ldr	r3, [pc, #632]	; (8002868 <GPIO_InitPin+0x2f4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	7912      	ldrb	r2, [r2, #4]
 80025f4:	4611      	mov	r1, r2
 80025f6:	2201      	movs	r2, #1
 80025f8:	408a      	lsls	r2, r1
 80025fa:	4611      	mov	r1, r2
 80025fc:	4a9a      	ldr	r2, [pc, #616]	; (8002868 <GPIO_InitPin+0x2f4>)
 80025fe:	430b      	orrs	r3, r1
 8002600:	6013      	str	r3, [r2, #0]

		//rising/falling trigger
		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	795b      	ldrb	r3, [r3, #5]
 8002606:	2b04      	cmp	r3, #4
 8002608:	d003      	beq.n	8002612 <GPIO_InitPin+0x9e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	795b      	ldrb	r3, [r3, #5]
 800260e:	2b06      	cmp	r3, #6
 8002610:	d10a      	bne.n	8002628 <GPIO_InitPin+0xb4>
		{
			EXTI->FTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8002612:	4b95      	ldr	r3, [pc, #596]	; (8002868 <GPIO_InitPin+0x2f4>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	7912      	ldrb	r2, [r2, #4]
 800261a:	4611      	mov	r1, r2
 800261c:	2201      	movs	r2, #1
 800261e:	408a      	lsls	r2, r1
 8002620:	4611      	mov	r1, r2
 8002622:	4a91      	ldr	r2, [pc, #580]	; (8002868 <GPIO_InitPin+0x2f4>)
 8002624:	430b      	orrs	r3, r1
 8002626:	60d3      	str	r3, [r2, #12]
		}

		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_RT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	795b      	ldrb	r3, [r3, #5]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d003      	beq.n	8002638 <GPIO_InitPin+0xc4>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	795b      	ldrb	r3, [r3, #5]
 8002634:	2b06      	cmp	r3, #6
 8002636:	d10a      	bne.n	800264e <GPIO_InitPin+0xda>
		{
			EXTI->RTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8002638:	4b8b      	ldr	r3, [pc, #556]	; (8002868 <GPIO_InitPin+0x2f4>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	7912      	ldrb	r2, [r2, #4]
 8002640:	4611      	mov	r1, r2
 8002642:	2201      	movs	r2, #1
 8002644:	408a      	lsls	r2, r1
 8002646:	4611      	mov	r1, r2
 8002648:	4a87      	ldr	r2, [pc, #540]	; (8002868 <GPIO_InitPin+0x2f4>)
 800264a:	430b      	orrs	r3, r1
 800264c:	6093      	str	r3, [r2, #8]
		}

		//enable NVIC interrupt
		if (hGPIO->PinConfig.PinNumber < GPIO_PIN_5)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	791b      	ldrb	r3, [r3, #4]
 8002652:	2b04      	cmp	r3, #4
 8002654:	d80c      	bhi.n	8002670 <GPIO_InitPin+0xfc>
		{
			// positions for EXTI interrupts in NVIC vector table are 6-10
			NVIC->ISER[0] |= (0b1 << (hGPIO->PinConfig.PinNumber + 6));
 8002656:	4b85      	ldr	r3, [pc, #532]	; (800286c <GPIO_InitPin+0x2f8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	7912      	ldrb	r2, [r2, #4]
 800265e:	3206      	adds	r2, #6
 8002660:	2101      	movs	r1, #1
 8002662:	fa01 f202 	lsl.w	r2, r1, r2
 8002666:	4611      	mov	r1, r2
 8002668:	4a80      	ldr	r2, [pc, #512]	; (800286c <GPIO_InitPin+0x2f8>)
 800266a:	430b      	orrs	r3, r1
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e010      	b.n	8002692 <GPIO_InitPin+0x11e>
		}
		else if (hGPIO->PinConfig.PinNumber < GPIO_PIN_10)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	791b      	ldrb	r3, [r3, #4]
 8002674:	2b09      	cmp	r3, #9
 8002676:	d806      	bhi.n	8002686 <GPIO_InitPin+0x112>
		{
			// position for EXTI9_5 is 23
			NVIC->ISER[0] |= (0b1 << 23);
 8002678:	4b7c      	ldr	r3, [pc, #496]	; (800286c <GPIO_InitPin+0x2f8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a7b      	ldr	r2, [pc, #492]	; (800286c <GPIO_InitPin+0x2f8>)
 800267e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	e005      	b.n	8002692 <GPIO_InitPin+0x11e>
		}
		else
		{
			// position for EXTI15_10 is 40
			NVIC->ISER[1] |= (0b1 << 8);
 8002686:	4b79      	ldr	r3, [pc, #484]	; (800286c <GPIO_InitPin+0x2f8>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a78      	ldr	r2, [pc, #480]	; (800286c <GPIO_InitPin+0x2f8>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002690:	6053      	str	r3, [r2, #4]
		}

		// set SYSCFG for external IRQ
		// enable clock
		RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002692:	4b77      	ldr	r3, [pc, #476]	; (8002870 <GPIO_InitPin+0x2fc>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	4a76      	ldr	r2, [pc, #472]	; (8002870 <GPIO_InitPin+0x2fc>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269c:	6453      	str	r3, [r2, #68]	; 0x44
		// get 4 bits code for certain port
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(hGPIO->pGPIOx);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a74      	ldr	r2, [pc, #464]	; (8002874 <GPIO_InitPin+0x300>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d024      	beq.n	80026f2 <GPIO_InitPin+0x17e>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a72      	ldr	r2, [pc, #456]	; (8002878 <GPIO_InitPin+0x304>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01d      	beq.n	80026ee <GPIO_InitPin+0x17a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a71      	ldr	r2, [pc, #452]	; (800287c <GPIO_InitPin+0x308>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d016      	beq.n	80026ea <GPIO_InitPin+0x176>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a6f      	ldr	r2, [pc, #444]	; (8002880 <GPIO_InitPin+0x30c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00f      	beq.n	80026e6 <GPIO_InitPin+0x172>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6e      	ldr	r2, [pc, #440]	; (8002884 <GPIO_InitPin+0x310>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d008      	beq.n	80026e2 <GPIO_InitPin+0x16e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a6c      	ldr	r2, [pc, #432]	; (8002888 <GPIO_InitPin+0x314>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <GPIO_InitPin+0x16a>
 80026da:	2307      	movs	r3, #7
 80026dc:	e00a      	b.n	80026f4 <GPIO_InitPin+0x180>
 80026de:	2300      	movs	r3, #0
 80026e0:	e008      	b.n	80026f4 <GPIO_InitPin+0x180>
 80026e2:	2304      	movs	r3, #4
 80026e4:	e006      	b.n	80026f4 <GPIO_InitPin+0x180>
 80026e6:	2303      	movs	r3, #3
 80026e8:	e004      	b.n	80026f4 <GPIO_InitPin+0x180>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e002      	b.n	80026f4 <GPIO_InitPin+0x180>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <GPIO_InitPin+0x180>
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
		// put it in syscfg register
		SYSCFG->EXTICR[hGPIO->PinConfig.PinNumber / 4] |= (portcode << ((hGPIO->PinConfig.PinNumber % 4) * 4));
 80026f6:	4a65      	ldr	r2, [pc, #404]	; (800288c <GPIO_InitPin+0x318>)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	791b      	ldrb	r3, [r3, #4]
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	b2d8      	uxtb	r0, r3
 8002700:	4603      	mov	r3, r0
 8002702:	3302      	adds	r3, #2
 8002704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002708:	7bf9      	ldrb	r1, [r7, #15]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	7912      	ldrb	r2, [r2, #4]
 800270e:	f002 0203 	and.w	r2, r2, #3
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	fa01 f202 	lsl.w	r2, r1, r2
 8002718:	495c      	ldr	r1, [pc, #368]	; (800288c <GPIO_InitPin+0x318>)
 800271a:	431a      	orrs	r2, r3
 800271c:	1c83      	adds	r3, r0, #2
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	// set speed and output type for mode output or AF
	if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_OUTPUT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	795b      	ldrb	r3, [r3, #5]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d003      	beq.n	8002732 <GPIO_InitPin+0x1be>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	795b      	ldrb	r3, [r3, #5]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d13b      	bne.n	80027aa <GPIO_InitPin+0x236>
	{
		//speed selection
		hGPIO->pGPIOx->OSPEEDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	791b      	ldrb	r3, [r3, #4]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	2103      	movs	r1, #3
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	4619      	mov	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	400a      	ands	r2, r1
 800274e:	609a      	str	r2, [r3, #8]
		hGPIO->pGPIOx->OSPEEDR |= hGPIO->PinConfig.OutputSpeed << (hGPIO->PinConfig.PinNumber * 2);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	79db      	ldrb	r3, [r3, #7]
 800275a:	4619      	mov	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	791b      	ldrb	r3, [r3, #4]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	4619      	mov	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	609a      	str	r2, [r3, #8]

		//output type selection
		hGPIO->pGPIOx->OTYPER &= ~(0b1 << (hGPIO->PinConfig.PinNumber));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	791b      	ldrb	r3, [r3, #4]
 800277a:	4619      	mov	r1, r3
 800277c:	2301      	movs	r3, #1
 800277e:	408b      	lsls	r3, r1
 8002780:	43db      	mvns	r3, r3
 8002782:	4619      	mov	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	400a      	ands	r2, r1
 800278a:	605a      	str	r2, [r3, #4]
		hGPIO->pGPIOx->OTYPER |= hGPIO->PinConfig.OutputType << (hGPIO->PinConfig.PinNumber);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	799b      	ldrb	r3, [r3, #6]
 8002796:	4619      	mov	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	791b      	ldrb	r3, [r3, #4]
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	4619      	mov	r1, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]
	}

	// set alternate function bits
	if (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	795b      	ldrb	r3, [r3, #5]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d137      	bne.n	8002822 <GPIO_InitPin+0x2ae>
	{
		// clear 4 AF bits and set new value
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] &= ~(15UL << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	7912      	ldrb	r2, [r2, #4]
 80027ba:	08d2      	lsrs	r2, r2, #3
 80027bc:	b2d0      	uxtb	r0, r2
 80027be:	4602      	mov	r2, r0
 80027c0:	3208      	adds	r2, #8
 80027c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	791b      	ldrb	r3, [r3, #4]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	220f      	movs	r2, #15
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4011      	ands	r1, r2
 80027de:	f100 0208 	add.w	r2, r0, #8
 80027e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] |= (hGPIO->PinConfig.AF << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	7912      	ldrb	r2, [r2, #4]
 80027ee:	08d2      	lsrs	r2, r2, #3
 80027f0:	b2d1      	uxtb	r1, r2
 80027f2:	460a      	mov	r2, r1
 80027f4:	3208      	adds	r2, #8
 80027f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	7a5b      	ldrb	r3, [r3, #9]
 80027fe:	4618      	mov	r0, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	791b      	ldrb	r3, [r3, #4]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	fa00 f303 	lsl.w	r3, r0, r3
 800280e:	461c      	mov	r4, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4608      	mov	r0, r1
 8002816:	ea42 0104 	orr.w	r1, r2, r4
 800281a:	f100 0208 	add.w	r2, r0, #8
 800281e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	// pull ups pull downs
	hGPIO->pGPIOx->PUPDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	791b      	ldrb	r3, [r3, #4]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2103      	movs	r1, #3
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	4619      	mov	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	400a      	ands	r2, r1
 800283e:	60da      	str	r2, [r3, #12]
	hGPIO->pGPIOx->PUPDR |= (hGPIO->PinConfig.PullUpPullDown << (hGPIO->PinConfig.PinNumber * 2));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	7a1b      	ldrb	r3, [r3, #8]
 800284a:	4619      	mov	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	791b      	ldrb	r3, [r3, #4]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	4619      	mov	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	60da      	str	r2, [r3, #12]

}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bd90      	pop	{r4, r7, pc}
 8002868:	40013c00 	.word	0x40013c00
 800286c:	e000e100 	.word	0xe000e100
 8002870:	40023800 	.word	0x40023800
 8002874:	40020000 	.word	0x40020000
 8002878:	40020400 	.word	0x40020400
 800287c:	40020800 	.word	0x40020800
 8002880:	40020c00 	.word	0x40020c00
 8002884:	40021000 	.word	0x40021000
 8002888:	40021c00 	.word	0x40021c00
 800288c:	40013800 	.word	0x40013800

08002890 <GPIO_ClearPendingEXTIFlag>:
 *
 * @param[PinNumber] - GPIO_PIN_x @PinNumber
 * @return - void
 */
void GPIO_ClearPendingEXTIFlag(uint8_t PinNumber)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= (0b1 << PinNumber);
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <GPIO_ClearPendingEXTIFlag+0x2c>)
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	79fa      	ldrb	r2, [r7, #7]
 80028a0:	2101      	movs	r1, #1
 80028a2:	fa01 f202 	lsl.w	r2, r1, r2
 80028a6:	4611      	mov	r1, r2
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <GPIO_ClearPendingEXTIFlag+0x2c>)
 80028aa:	430b      	orrs	r3, r1
 80028ac:	6153      	str	r3, [r2, #20]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40013c00 	.word	0x40013c00

080028c0 <i2c_clock_enable>:
 *
 * @param[*p_i2cx] - base address of i2c peripheral
 * @return - void
 */
static void i2c_clock_enable(I2C_TypeDef *p_i2cx)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
	if (p_i2cx == I2C1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <i2c_clock_enable+0x54>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d106      	bne.n	80028de <i2c_clock_enable+0x1e>
	{
		RCC_CLOCK_I2C1_ENABLE();
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <i2c_clock_enable+0x58>)
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	4a10      	ldr	r2, [pc, #64]	; (8002918 <i2c_clock_enable+0x58>)
 80028d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028da:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else if (p_i2cx == I2C3)
	{
		RCC_CLOCK_I2C3_ENABLE();
	}
}
 80028dc:	e014      	b.n	8002908 <i2c_clock_enable+0x48>
	else if (p_i2cx == I2C2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a0e      	ldr	r2, [pc, #56]	; (800291c <i2c_clock_enable+0x5c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d106      	bne.n	80028f4 <i2c_clock_enable+0x34>
		RCC_CLOCK_I2C2_ENABLE();
 80028e6:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <i2c_clock_enable+0x58>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <i2c_clock_enable+0x58>)
 80028ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80028f2:	e009      	b.n	8002908 <i2c_clock_enable+0x48>
	else if (p_i2cx == I2C3)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <i2c_clock_enable+0x60>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d105      	bne.n	8002908 <i2c_clock_enable+0x48>
		RCC_CLOCK_I2C3_ENABLE();
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <i2c_clock_enable+0x58>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	4a05      	ldr	r2, [pc, #20]	; (8002918 <i2c_clock_enable+0x58>)
 8002902:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002906:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40005400 	.word	0x40005400
 8002918:	40023800 	.word	0x40023800
 800291c:	40005800 	.word	0x40005800
 8002920:	40005c00 	.word	0x40005c00

08002924 <i2c_init_gpio_pins>:
 * @param[*p_i2cx] - i2c address
 * @param[alternate_pos] - pins alternative positions select
 * @return - void
 */
static void i2c_init_gpio_pins(I2C_TypeDef *p_i2cx, uint8_t alternate_pos)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t gpio_sda, gpio_scl;

	if (p_i2cx == I2C1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a35      	ldr	r2, [pc, #212]	; (8002a08 <i2c_init_gpio_pins+0xe4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d112      	bne.n	800295e <i2c_init_gpio_pins+0x3a>
	{
		// PB6 SCL
		gpio_scl.pGPIOx = GPIOB;
 8002938:	4b34      	ldr	r3, [pc, #208]	; (8002a0c <i2c_init_gpio_pins+0xe8>)
 800293a:	60bb      	str	r3, [r7, #8]
		gpio_scl.PinConfig.PinNumber = GPIO_PIN_6;
 800293c:	2306      	movs	r3, #6
 800293e:	733b      	strb	r3, [r7, #12]

		// PB7 SDA
		gpio_sda.pGPIOx = GPIOB;
 8002940:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <i2c_init_gpio_pins+0xe8>)
 8002942:	617b      	str	r3, [r7, #20]
		gpio_sda.PinConfig.PinNumber = GPIO_PIN_7;
 8002944:	2307      	movs	r3, #7
 8002946:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		gpio_scl.PinConfig.AF = GPIO_PIN_AF_AF4;
 8002948:	2304      	movs	r3, #4
 800294a:	747b      	strb	r3, [r7, #17]
		gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF4;
 800294c:	2304      	movs	r3, #4
 800294e:	777b      	strb	r3, [r7, #29]

		if (alternate_pos == 1)
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d103      	bne.n	800295e <i2c_init_gpio_pins+0x3a>
		{
			// PB8 SCL
			gpio_scl.PinConfig.PinNumber = GPIO_PIN_8;
 8002956:	2308      	movs	r3, #8
 8002958:	733b      	strb	r3, [r7, #12]
			// PB9 SDA
			gpio_sda.PinConfig.PinNumber = GPIO_PIN_9;
 800295a:	2309      	movs	r3, #9
 800295c:	763b      	strb	r3, [r7, #24]
		}

	}

	if (p_i2cx == I2C2)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a2b      	ldr	r2, [pc, #172]	; (8002a10 <i2c_init_gpio_pins+0xec>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d112      	bne.n	800298c <i2c_init_gpio_pins+0x68>
	{

		// PB10 SCL
		gpio_scl.pGPIOx = GPIOB;
 8002966:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <i2c_init_gpio_pins+0xe8>)
 8002968:	60bb      	str	r3, [r7, #8]
		gpio_scl.PinConfig.PinNumber = GPIO_PIN_10;
 800296a:	230a      	movs	r3, #10
 800296c:	733b      	strb	r3, [r7, #12]

		// PB11 SDA
		gpio_sda.pGPIOx = GPIOB;
 800296e:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <i2c_init_gpio_pins+0xe8>)
 8002970:	617b      	str	r3, [r7, #20]
		gpio_sda.PinConfig.PinNumber = GPIO_PIN_11;
 8002972:	230b      	movs	r3, #11
 8002974:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		gpio_scl.PinConfig.AF = GPIO_PIN_AF_AF4;
 8002976:	2304      	movs	r3, #4
 8002978:	747b      	strb	r3, [r7, #17]
		gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF4;
 800297a:	2304      	movs	r3, #4
 800297c:	777b      	strb	r3, [r7, #29]

		if (alternate_pos == 1)
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d103      	bne.n	800298c <i2c_init_gpio_pins+0x68>
		{
			// PB3 SDA
			gpio_sda.PinConfig.PinNumber = GPIO_PIN_3;
 8002984:	2303      	movs	r3, #3
 8002986:	763b      	strb	r3, [r7, #24]
			gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF9;
 8002988:	2309      	movs	r3, #9
 800298a:	777b      	strb	r3, [r7, #29]
		}

	}

	if (p_i2cx == I2C3)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a21      	ldr	r2, [pc, #132]	; (8002a14 <i2c_init_gpio_pins+0xf0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d11a      	bne.n	80029ca <i2c_init_gpio_pins+0xa6>
	{

		// PA8 SCL
		gpio_scl.pGPIOx = GPIOA;
 8002994:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <i2c_init_gpio_pins+0xf4>)
 8002996:	60bb      	str	r3, [r7, #8]
		gpio_scl.PinConfig.PinNumber = GPIO_PIN_8;
 8002998:	2308      	movs	r3, #8
 800299a:	733b      	strb	r3, [r7, #12]

		// PB9 SDA
		gpio_sda.pGPIOx = GPIOB;
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <i2c_init_gpio_pins+0xe8>)
 800299e:	617b      	str	r3, [r7, #20]
		gpio_sda.PinConfig.PinNumber = GPIO_PIN_4;
 80029a0:	2304      	movs	r3, #4
 80029a2:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		gpio_scl.PinConfig.AF = GPIO_PIN_AF_AF4;
 80029a4:	2304      	movs	r3, #4
 80029a6:	747b      	strb	r3, [r7, #17]
		gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF4;
 80029a8:	2304      	movs	r3, #4
 80029aa:	777b      	strb	r3, [r7, #29]

		if (alternate_pos == 1)
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d10b      	bne.n	80029ca <i2c_init_gpio_pins+0xa6>
		{
			RCC_CLOCK_GPIOC_ENABLE();
 80029b2:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <i2c_init_gpio_pins+0xf8>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <i2c_init_gpio_pins+0xf8>)
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
			// PC9 SDA
			gpio_sda.pGPIOx = GPIOC;
 80029be:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <i2c_init_gpio_pins+0xfc>)
 80029c0:	617b      	str	r3, [r7, #20]
			gpio_sda.PinConfig.PinNumber = GPIO_PIN_9;
 80029c2:	2309      	movs	r3, #9
 80029c4:	763b      	strb	r3, [r7, #24]

			// Alternate Function
			gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF9;
 80029c6:	2309      	movs	r3, #9
 80029c8:	777b      	strb	r3, [r7, #29]
		}

	}

	// Mode AF
	gpio_scl.PinConfig.Mode = GPIO_PIN_MODE_AF;
 80029ca:	2302      	movs	r3, #2
 80029cc:	737b      	strb	r3, [r7, #13]
	gpio_sda.PinConfig.Mode = GPIO_PIN_MODE_AF;
 80029ce:	2302      	movs	r3, #2
 80029d0:	767b      	strb	r3, [r7, #25]

	// Output type open drain
	gpio_scl.PinConfig.OutputType = GPIO_PIN_OT_OD;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73bb      	strb	r3, [r7, #14]
	gpio_sda.PinConfig.OutputType = GPIO_PIN_OT_OD;
 80029d6:	2301      	movs	r3, #1
 80029d8:	76bb      	strb	r3, [r7, #26]

	// Output speed very high
	gpio_scl.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	73fb      	strb	r3, [r7, #15]
	gpio_sda.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 80029de:	2303      	movs	r3, #3
 80029e0:	76fb      	strb	r3, [r7, #27]

	// Pull ups
	gpio_scl.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	743b      	strb	r3, [r7, #16]
	gpio_sda.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	773b      	strb	r3, [r7, #28]

	GPIO_InitPin(&gpio_sda);
 80029ea:	f107 0314 	add.w	r3, r7, #20
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fdc0 	bl	8002574 <GPIO_InitPin>
	GPIO_InitPin(&gpio_scl);
 80029f4:	f107 0308 	add.w	r3, r7, #8
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fdbb 	bl	8002574 <GPIO_InitPin>

}
 80029fe:	bf00      	nop
 8002a00:	3720      	adds	r7, #32
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40005400 	.word	0x40005400
 8002a0c:	40020400 	.word	0x40020400
 8002a10:	40005800 	.word	0x40005800
 8002a14:	40005c00 	.word	0x40005c00
 8002a18:	40020000 	.word	0x40020000
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40020800 	.word	0x40020800

08002a24 <i2c_init>:
 *
 * @param[*p_handle_i2c] - handler to i2c structure
 * @return - void
 */
uint8_t i2c_init(i2c_handle_t *p_handle_i2c)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	// enable peripheral clock
	i2c_clock_enable(p_handle_i2c->p_i2cx);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff45 	bl	80028c0 <i2c_clock_enable>

	// init GPIO pins
	i2c_init_gpio_pins(p_handle_i2c->p_i2cx, 0);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff71 	bl	8002924 <i2c_init_gpio_pins>

	//reset I2C
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_SWRST;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a50:	601a      	str	r2, [r3, #0]
	p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_SWRST);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a60:	601a      	str	r2, [r3, #0]

	// check frequency limits
	if (p_handle_i2c->i2c_config.abp1_freq_mhz < I2C_FREQUENCY_MINIMUM || p_handle_i2c->i2c_config.abp1_freq_mhz > I2C_FREQUENCY_MAXIMUM)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	791b      	ldrb	r3, [r3, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d903      	bls.n	8002a72 <i2c_init+0x4e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	791b      	ldrb	r3, [r3, #4]
 8002a6e:	2b32      	cmp	r3, #50	; 0x32
 8002a70:	d901      	bls.n	8002a76 <i2c_init+0x52>
	{
		return I2C_ERROR_WRONG_FREQUENCY;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0af      	b.n	8002bd6 <i2c_init+0x1b2>
	}

	// set frequency (same as ABP1 frequency)
	p_handle_i2c->p_i2cx->CR2 &= ~(I2C_CR2_FREQ);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002a84:	605a      	str	r2, [r3, #4]
	p_handle_i2c->p_i2cx->CR2 |= (p_handle_i2c->i2c_config.abp1_freq_mhz << I2C_CR2_FREQ_Pos);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	791b      	ldrb	r3, [r3, #4]
 8002a90:	4619      	mov	r1, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]

	// set speed
	uint16_t temp_ccr, temp_trise;
	// set slow mode, reset DUTY
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_FS);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa8:	61da      	str	r2, [r3, #28]
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_DUTY);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	69da      	ldr	r2, [r3, #28]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ab8:	61da      	str	r2, [r3, #28]

	// CCR calculation for slow mode -> values are coming from RM CCR register and result is in [ns]
	// (Thigh + Tlow) / (CEOFF * PCLK)
	temp_ccr = (I2C_CCR_SM_THIGH + I2C_CCR_SM_TLOW) / (I2C_CCR_SM_COEFF * (1000 / p_handle_i2c->i2c_config.abp1_freq_mhz));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	791b      	ldrb	r3, [r3, #4]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac4:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	f242 7210 	movw	r2, #10000	; 0x2710
 8002ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad2:	81fb      	strh	r3, [r7, #14]

	// TRISE calculation for slow mode -> equation is from RM
	temp_trise = ((I2C_CCR_SM_TR_SCL * p_handle_i2c->i2c_config.abp1_freq_mhz) / 1000) + 1;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	791b      	ldrb	r3, [r3, #4]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ade:	fb03 f302 	mul.w	r3, r3, r2
 8002ae2:	4a3f      	ldr	r2, [pc, #252]	; (8002be0 <i2c_init+0x1bc>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	099b      	lsrs	r3, r3, #6
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3301      	adds	r3, #1
 8002aee:	81bb      	strh	r3, [r7, #12]

	// fast mode
	if (p_handle_i2c->i2c_config.speed != I2C_SPEED_SLOW)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	795b      	ldrb	r3, [r3, #5]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d043      	beq.n	8002b80 <i2c_init+0x15c>
	{
		// set fast mode
		p_handle_i2c->p_i2cx->CCR |= I2C_CCR_FS;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69da      	ldr	r2, [r3, #28]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b06:	61da      	str	r2, [r3, #28]
		// calculate CCR for fast mode with DUTY 0
		temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW) / (I2C_CCR_FM_COEFF_DUTY0 * (1000 / p_handle_i2c->i2c_config.abp1_freq_mhz));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	791b      	ldrb	r3, [r3, #4]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b12:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b16:	461a      	mov	r2, r3
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b26:	81fb      	strh	r3, [r7, #14]
		// calculate TRISE for fast mode
		temp_trise = ((I2C_CCR_FM_TR_SCL * p_handle_i2c->i2c_config.abp1_freq_mhz) / 1000) + 1;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	791b      	ldrb	r3, [r3, #4]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002b32:	fb03 f302 	mul.w	r3, r3, r2
 8002b36:	4a2a      	ldr	r2, [pc, #168]	; (8002be0 <i2c_init+0x1bc>)
 8002b38:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3c:	099b      	lsrs	r3, r3, #6
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3301      	adds	r3, #1
 8002b42:	81bb      	strh	r3, [r7, #12]
		if (p_handle_i2c->i2c_config.speed == I2C_SPEED_FAST_DUTY1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	795b      	ldrb	r3, [r3, #5]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d119      	bne.n	8002b80 <i2c_init+0x15c>
		{
			// set DUTY flag
			p_handle_i2c->p_i2cx->CCR |= I2C_CCR_DUTY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b5a:	61da      	str	r2, [r3, #28]
			// calculate CCR with fast mode DUTY1
			temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW) / (I2C_CCR_FM_COEFF_DUTY1 * (1000 / p_handle_i2c->i2c_config.abp1_freq_mhz));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	791b      	ldrb	r3, [r3, #4]
 8002b60:	461a      	mov	r2, r3
 8002b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b66:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	009a      	lsls	r2, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7e:	81fb      	strh	r3, [r7, #14]
		}
	}
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_CCR);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002b8e:	f023 030f 	bic.w	r3, r3, #15
 8002b92:	61d3      	str	r3, [r2, #28]
	p_handle_i2c->p_i2cx->CCR |= (temp_ccr << I2C_CCR_CCR_Pos);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69d9      	ldr	r1, [r3, #28]
 8002b9a:	89fa      	ldrh	r2, [r7, #14]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	61da      	str	r2, [r3, #28]

	// write correct TRISE to the register
	p_handle_i2c->p_i2cx->TRISE &= ~(I2C_TRISE_TRISE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6a1a      	ldr	r2, [r3, #32]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002bb2:	621a      	str	r2, [r3, #32]
	p_handle_i2c->p_i2cx->TRISE |= (temp_trise << I2C_TRISE_TRISE_Pos);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6a19      	ldr	r1, [r3, #32]
 8002bba:	89ba      	ldrh	r2, [r7, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	621a      	str	r2, [r3, #32]

	// enable I2c
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_PE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

	return 0;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	10624dd3 	.word	0x10624dd3

08002be4 <i2c_send_address>:
 * @param[slave_address] - address to slave in 7 bit addressing mode
 * @param[mode] - send information if master is in reciever or transmitter mode @Mode
 * @return - void
 */
static void i2c_send_address(i2c_handle_t *p_handle_i2c, uint8_t slave_address, uint8_t mode, uint32_t timeout)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	72fb      	strb	r3, [r7, #11]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	72bb      	strb	r3, [r7, #10]
	uint8_t temp_byte;
	uint32_t temp_timeout = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
	//1.0 Set START BIT
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_ACK;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c08:	601a      	str	r2, [r3, #0]
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_START;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c18:	601a      	str	r2, [r3, #0]

	//1.1 Wait until SB flag is set
	while (!(I2C_SR1_SB & p_handle_i2c->p_i2cx->SR1))
 8002c1a:	e003      	b.n	8002c24 <i2c_send_address+0x40>
		if (temp_timeout > timeout)
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d807      	bhi.n	8002c34 <i2c_send_address+0x50>
	while (!(I2C_SR1_SB & p_handle_i2c->p_i2cx->SR1))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f4      	beq.n	8002c1c <i2c_send_address+0x38>
 8002c32:	e000      	b.n	8002c36 <i2c_send_address+0x52>
			break;
 8002c34:	bf00      	nop
		;
	//1.2 Clear SB by reading SR1
	temp_byte = p_handle_i2c->p_i2cx->SR1;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	74fb      	strb	r3, [r7, #19]
	// If transmitting set slave addres LSB to 0, reciever 1
	slave_address &= (~1U);
 8002c3e:	7afb      	ldrb	r3, [r7, #11]
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	72fb      	strb	r3, [r7, #11]
	slave_address |= mode;
 8002c46:	7afa      	ldrb	r2, [r7, #11]
 8002c48:	7abb      	ldrb	r3, [r7, #10]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	72fb      	strb	r3, [r7, #11]
	//2. Put slave address in DR register -
	p_handle_i2c->p_i2cx->DR = slave_address;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	7afa      	ldrb	r2, [r7, #11]
 8002c54:	611a      	str	r2, [r3, #16]


}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <i2c_transmit>:
 * @param[p_data_buffer] - pointer to data buffer that has to be send
 * @param[data_size] - amount of data to be send [in bytes]
 * @return - uint8_t - to return error
 */
uint8_t i2c_transmit(i2c_handle_t *p_handle_i2c, uint8_t slave_address, uint8_t mem_address, uint8_t *p_tx_data_buffer, uint32_t data_size)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	72fb      	strb	r3, [r7, #11]
 8002c72:	4613      	mov	r3, r2
 8002c74:	72bb      	strb	r3, [r7, #10]

	uint32_t tx_data_to_send = data_size;
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	61fb      	str	r3, [r7, #28]
	uint32_t tx_data_index = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
	uint8_t temp_byte;

	i2c_send_address(p_handle_i2c, slave_address, I2C_MODE_TRANSMITTER, 400000);
 8002c7e:	7af9      	ldrb	r1, [r7, #11]
 8002c80:	4b28      	ldr	r3, [pc, #160]	; (8002d24 <i2c_transmit+0xc0>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f7ff ffad 	bl	8002be4 <i2c_send_address>

	// wait until ADDR is set
	while (!(I2C_SR1_ADDR & p_handle_i2c->p_i2cx->SR1))
 8002c8a:	bf00      	nop
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f8      	beq.n	8002c8c <i2c_transmit+0x28>
		;
	//4. ADDR is cleared by reading SR1 , Read SR2
	temp_byte = p_handle_i2c->p_i2cx->SR1;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	75fb      	strb	r3, [r7, #23]
	temp_byte = p_handle_i2c->p_i2cx->SR2;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	75fb      	strb	r3, [r7, #23]

//5. TxE bit is set when acknowledge bit is sent
	while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_TXE))
 8002caa:	bf00      	nop
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f8      	beq.n	8002cac <i2c_transmit+0x48>
		;
//6. Write memory address to DR to clear TxE
	p_handle_i2c->p_i2cx->DR = mem_address;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	7aba      	ldrb	r2, [r7, #10]
 8002cc0:	611a      	str	r2, [r3, #16]

//7. Data transfer
	while (tx_data_to_send > 0)
 8002cc2:	e027      	b.n	8002d14 <i2c_transmit+0xb0>
	{
		// wait until data register is empty
		while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_TXE))
 8002cc4:	bf00      	nop
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f8      	beq.n	8002cc6 <i2c_transmit+0x62>
			;

		// put data in data register
		p_handle_i2c->p_i2cx->DR = p_tx_data_buffer[tx_data_index];
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	4413      	add	r3, r2
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	611a      	str	r2, [r3, #16]

		//change counters
		tx_data_to_send--;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	61fb      	str	r3, [r7, #28]
		tx_data_index++;
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	3301      	adds	r3, #1
 8002cec:	61bb      	str	r3, [r7, #24]

//8. After last bit is written to DR register , Set STOP bit  and interface is going back to slave mode
		if (tx_data_to_send == 0)
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10f      	bne.n	8002d14 <i2c_transmit+0xb0>
		{
			// check if data transfer is finsihed
			while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_BTF))
 8002cf4:	bf00      	nop
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f8      	beq.n	8002cf6 <i2c_transmit+0x92>
				;
			// stop transfer
			p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d12:	601a      	str	r2, [r3, #0]
	while (tx_data_to_send > 0)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1d4      	bne.n	8002cc4 <i2c_transmit+0x60>

		}

	}

	return 0;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3720      	adds	r7, #32
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	00061a80 	.word	0x00061a80

08002d28 <i2c_recieve>:

uint8_t i2c_recieve(i2c_handle_t *p_handle_i2c, uint8_t slave_address, uint8_t *p_rx_data_buffer, uint32_t data_size)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	460b      	mov	r3, r1
 8002d36:	72fb      	strb	r3, [r7, #11]

	uint32_t rx_data_to_get = data_size;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	617b      	str	r3, [r7, #20]
	uint8_t temp_byte;
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_ACK;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d4a:	601a      	str	r2, [r3, #0]
	i2c_send_address(p_handle_i2c, slave_address, I2C_MODE_RECIEVER, 400000);
 8002d4c:	7af9      	ldrb	r1, [r7, #11]
 8002d4e:	4b54      	ldr	r3, [pc, #336]	; (8002ea0 <i2c_recieve+0x178>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7ff ff46 	bl	8002be4 <i2c_send_address>

	while (!(I2C_SR1_ADDR & p_handle_i2c->p_i2cx->SR1))
 8002d58:	bf00      	nop
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f8      	beq.n	8002d5a <i2c_recieve+0x32>
		;

	// single byte recieve
	if (data_size == 1)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	f040 808f 	bne.w	8002e8e <i2c_recieve+0x166>
	{
		// Disable acknowledge
		p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_ACK);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7e:	601a      	str	r2, [r3, #0]
		//4. ADDR is cleared by reading SR1 , Read SR2
		temp_byte = p_handle_i2c->p_i2cx->SR1;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	74fb      	strb	r3, [r7, #19]
		temp_byte = p_handle_i2c->p_i2cx->SR2;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	74fb      	strb	r3, [r7, #19]

		// stop comm
		p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9e:	601a      	str	r2, [r3, #0]

		// wait for a byte recieved
		while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 8002da0:	bf00      	nop
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f8      	beq.n	8002da2 <i2c_recieve+0x7a>
			;

		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6919      	ldr	r1, [r3, #16]
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	b2ca      	uxtb	r2, r1
 8002dc2:	701a      	strb	r2, [r3, #0]

		return 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e066      	b.n	8002e96 <i2c_recieve+0x16e>
	// multiple bytes recieve
	while (rx_data_to_get > 2)
	{

		//4. ADDR is cleared by reading SR1 , Read SR2
		temp_byte = p_handle_i2c->p_i2cx->SR1;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	74fb      	strb	r3, [r7, #19]
		temp_byte = p_handle_i2c->p_i2cx->SR2;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	74fb      	strb	r3, [r7, #19]

		// read all the bytes until second last
		while (rx_data_to_get > 2)
 8002dd8:	e01c      	b.n	8002e14 <i2c_recieve+0xec>
		{
			while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 8002dda:	bf00      	nop
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f8      	beq.n	8002ddc <i2c_recieve+0xb4>
				;
			p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6919      	ldr	r1, [r3, #16]
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	b2ca      	uxtb	r2, r1
 8002dfc:	701a      	strb	r2, [r3, #0]
			rx_data_to_get--;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]

			// ack recieve
			p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_ACK;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e12:	601a      	str	r2, [r3, #0]
		while (rx_data_to_get > 2)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d8df      	bhi.n	8002dda <i2c_recieve+0xb2>
		}

		// read second last byte
		while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 8002e1a:	bf00      	nop
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f8      	beq.n	8002e1c <i2c_recieve+0xf4>
			;
		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6919      	ldr	r1, [r3, #16]
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	b2ca      	uxtb	r2, r1
 8002e3c:	701a      	strb	r2, [r3, #0]
		rx_data_to_get--;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]

		// after second last byte clear ACK and set stop
		p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_ACK);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e52:	601a      	str	r2, [r3, #0]
		p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e62:	601a      	str	r2, [r3, #0]

		// recieve last byte
		while (!(I2C_SR1_RXNE & p_handle_i2c->p_i2cx->SR1))
 8002e64:	bf00      	nop
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0f8      	beq.n	8002e66 <i2c_recieve+0x13e>
			;
		p_rx_data_buffer[data_size - rx_data_to_get] = p_handle_i2c->p_i2cx->DR;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6919      	ldr	r1, [r3, #16]
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4413      	add	r3, r2
 8002e84:	b2ca      	uxtb	r2, r1
 8002e86:	701a      	strb	r2, [r3, #0]
		rx_data_to_get--;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	617b      	str	r3, [r7, #20]
	while (rx_data_to_get > 2)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d899      	bhi.n	8002dc8 <i2c_recieve+0xa0>

	}
	return 0;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	00061a80 	.word	0x00061a80

08002ea4 <RCC_InitClock>:
 * 7. Select system clock
 * @param[*GPIO] - base address of gpiox peripheral
 * @return - void
 */
uint8_t RCC_InitClock(RCC_ClockInitTypeDef *p_clock_init)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

	/* 1. Enable HSI/HSE as main source RCC->CR */

	//enable HSI/HSE
	if (p_clock_init->oscillator_type == RCC_OSCILLATORTYPE_HSI)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10d      	bne.n	8002ed0 <RCC_InitClock+0x2c>
	{
		// set HSI flag
		RCC->CR |= RCC_CR_HSION;
 8002eb4:	4b94      	ldr	r3, [pc, #592]	; (8003108 <RCC_InitClock+0x264>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a93      	ldr	r2, [pc, #588]	; (8003108 <RCC_InitClock+0x264>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6013      	str	r3, [r2, #0]
		// wait until HSI is on
		while (!(RCC->CR & RCC_CR_HSIRDY))
 8002ec0:	bf00      	nop
 8002ec2:	4b91      	ldr	r3, [pc, #580]	; (8003108 <RCC_InitClock+0x264>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f9      	beq.n	8002ec2 <RCC_InitClock+0x1e>
 8002ece:	e010      	b.n	8002ef2 <RCC_InitClock+0x4e>
			;
	}
	else if (p_clock_init->oscillator_type == RCC_OSCILLATORTYPE_HSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d10c      	bne.n	8002ef2 <RCC_InitClock+0x4e>
	{
		// set HSE flag
		RCC->CR |= RCC_CR_HSEON;
 8002ed8:	4b8b      	ldr	r3, [pc, #556]	; (8003108 <RCC_InitClock+0x264>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a8a      	ldr	r2, [pc, #552]	; (8003108 <RCC_InitClock+0x264>)
 8002ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
		// wait until HSE is on
		while (!(RCC->CR & RCC_CR_HSERDY))
 8002ee4:	bf00      	nop
 8002ee6:	4b88      	ldr	r3, [pc, #544]	; (8003108 <RCC_InitClock+0x264>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f9      	beq.n	8002ee6 <RCC_InitClock+0x42>
			;
	}

	/* 2. Set regulator scaling PWR->VOS if necessary before PLL is ON */
	PWR->CR &= ~(PWR_CR_VOS);
 8002ef2:	4b86      	ldr	r3, [pc, #536]	; (800310c <RCC_InitClock+0x268>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a85      	ldr	r2, [pc, #532]	; (800310c <RCC_InitClock+0x268>)
 8002ef8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002efc:	6013      	str	r3, [r2, #0]
	PWR->CR |= (p_clock_init->vos_scale << PWR_CR_VOS_Pos);
 8002efe:	4b83      	ldr	r3, [pc, #524]	; (800310c <RCC_InitClock+0x268>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	7852      	ldrb	r2, [r2, #1]
 8002f06:	0392      	lsls	r2, r2, #14
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4a80      	ldr	r2, [pc, #512]	; (800310c <RCC_InitClock+0x268>)
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6013      	str	r3, [r2, #0]

	/* 3. Configure Flash and Latency settings */
	// enable data, instruction and prefetch cache
	FLASH->ACR |= (FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN);
 8002f10:	4b7f      	ldr	r3, [pc, #508]	; (8003110 <RCC_InitClock+0x26c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a7e      	ldr	r2, [pc, #504]	; (8003110 <RCC_InitClock+0x26c>)
 8002f16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f1a:	6013      	str	r3, [r2, #0]
	// to read correct from flash at certain voltage and frequency latency between read has to be set correctly
	// this table can be found in reference manual
	FLASH->ACR &= ~(FLASH_ACR_LATENCY);
 8002f1c:	4b7c      	ldr	r3, [pc, #496]	; (8003110 <RCC_InitClock+0x26c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a7b      	ldr	r2, [pc, #492]	; (8003110 <RCC_InitClock+0x26c>)
 8002f22:	f023 0307 	bic.w	r3, r3, #7
 8002f26:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (p_clock_init->flash_latency << FLASH_ACR_LATENCY_Pos);
 8002f28:	4b79      	ldr	r3, [pc, #484]	; (8003110 <RCC_InitClock+0x26c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	7892      	ldrb	r2, [r2, #2]
 8002f30:	4611      	mov	r1, r2
 8002f32:	4a77      	ldr	r2, [pc, #476]	; (8003110 <RCC_InitClock+0x26c>)
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6013      	str	r3, [r2, #0]

	/* 4. Configure HCLK, PCLK1, PCLK2 */
	// configure AHB prescaler
	RCC->CFGR &= ~(RCC_CFGR_HPRE);
 8002f38:	4b73      	ldr	r3, [pc, #460]	; (8003108 <RCC_InitClock+0x264>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	4a72      	ldr	r2, [pc, #456]	; (8003108 <RCC_InitClock+0x264>)
 8002f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f42:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (p_clock_init->hpre_prescaler << RCC_CFGR_HPRE_Pos);
 8002f44:	4b70      	ldr	r3, [pc, #448]	; (8003108 <RCC_InitClock+0x264>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	78d2      	ldrb	r2, [r2, #3]
 8002f4c:	0112      	lsls	r2, r2, #4
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4a6d      	ldr	r2, [pc, #436]	; (8003108 <RCC_InitClock+0x264>)
 8002f52:	430b      	orrs	r3, r1
 8002f54:	6093      	str	r3, [r2, #8]

	// configure APB1 prescaler
	RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 8002f56:	4b6c      	ldr	r3, [pc, #432]	; (8003108 <RCC_InitClock+0x264>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	4a6b      	ldr	r2, [pc, #428]	; (8003108 <RCC_InitClock+0x264>)
 8002f5c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002f60:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (p_clock_init->apb1_prescaler << RCC_CFGR_PPRE1_Pos);
 8002f62:	4b69      	ldr	r3, [pc, #420]	; (8003108 <RCC_InitClock+0x264>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	7912      	ldrb	r2, [r2, #4]
 8002f6a:	0292      	lsls	r2, r2, #10
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4a66      	ldr	r2, [pc, #408]	; (8003108 <RCC_InitClock+0x264>)
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6093      	str	r3, [r2, #8]

	// configure APB2 prescaler
	RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 8002f74:	4b64      	ldr	r3, [pc, #400]	; (8003108 <RCC_InitClock+0x264>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	4a63      	ldr	r2, [pc, #396]	; (8003108 <RCC_InitClock+0x264>)
 8002f7a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002f7e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (p_clock_init->apb2_prescaler << RCC_CFGR_PPRE2_Pos);
 8002f80:	4b61      	ldr	r3, [pc, #388]	; (8003108 <RCC_InitClock+0x264>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	7952      	ldrb	r2, [r2, #5]
 8002f88:	0352      	lsls	r2, r2, #13
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4a5e      	ldr	r2, [pc, #376]	; (8003108 <RCC_InitClock+0x264>)
 8002f8e:	430b      	orrs	r3, r1
 8002f90:	6093      	str	r3, [r2, #8]

	/* 5. Configure PLL */

	// PLL - phase-locked loop - clock generation engine in the MCU
	// if PLL is enable
	if (p_clock_init->pll.state == RCC_PLL_STATE_ENABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	f040 808d 	bne.w	80030b8 <RCC_InitClock+0x214>
	{
		// init PLL source
		RCC->PLLCFGR |= (p_clock_init->pll.source << RCC_PLLCFGR_PLLSRC_Pos);
 8002f9e:	4b5a      	ldr	r3, [pc, #360]	; (8003108 <RCC_InitClock+0x264>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	79d2      	ldrb	r2, [r2, #7]
 8002fa6:	0592      	lsls	r2, r2, #22
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4a57      	ldr	r2, [pc, #348]	; (8003108 <RCC_InitClock+0x264>)
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6053      	str	r3, [r2, #4]

		// PLLM - division factor for the main PLL
		// It is recommended to put source frequency in range of 1 - 2Mhz (2Mhz recommended)
		// Frequency after this division operation is input of VCO (voltage controlled oscillator)

		if (p_clock_init->pll.pllm < 3 || p_clock_init->pll.pllm > 63)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7a1b      	ldrb	r3, [r3, #8]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d903      	bls.n	8002fc0 <RCC_InitClock+0x11c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	7a1b      	ldrb	r3, [r3, #8]
 8002fbc:	2b3f      	cmp	r3, #63	; 0x3f
 8002fbe:	d901      	bls.n	8002fc4 <RCC_InitClock+0x120>
		{
			return PLL_CONFIG_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e09a      	b.n	80030fa <RCC_InitClock+0x256>
		}
		RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM);
 8002fc4:	4b50      	ldr	r3, [pc, #320]	; (8003108 <RCC_InitClock+0x264>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a4f      	ldr	r2, [pc, #316]	; (8003108 <RCC_InitClock+0x264>)
 8002fca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fce:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (p_clock_init->pll.pllm << RCC_PLLCFGR_PLLM_Pos);
 8002fd0:	4b4d      	ldr	r3, [pc, #308]	; (8003108 <RCC_InitClock+0x264>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	7a12      	ldrb	r2, [r2, #8]
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4a4b      	ldr	r2, [pc, #300]	; (8003108 <RCC_InitClock+0x264>)
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	6053      	str	r3, [r2, #4]

		// PLLN - multiplication factor for VCO
		// After this operation value should be between 192 and 432 MHz
		// Frequency after this operation is output of VCO

		if (p_clock_init->pll.plln < 2 || p_clock_init->pll.plln > 432)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	895b      	ldrh	r3, [r3, #10]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d904      	bls.n	8002ff2 <RCC_InitClock+0x14e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	895b      	ldrh	r3, [r3, #10]
 8002fec:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002ff0:	d901      	bls.n	8002ff6 <RCC_InitClock+0x152>
		{
			return PLL_CONFIG_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e081      	b.n	80030fa <RCC_InitClock+0x256>
		}
		RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN);
 8002ff6:	4b44      	ldr	r3, [pc, #272]	; (8003108 <RCC_InitClock+0x264>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4a43      	ldr	r2, [pc, #268]	; (8003108 <RCC_InitClock+0x264>)
 8002ffc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003004:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (p_clock_init->pll.plln << RCC_PLLCFGR_PLLN_Pos);
 8003006:	4b40      	ldr	r3, [pc, #256]	; (8003108 <RCC_InitClock+0x264>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	8952      	ldrh	r2, [r2, #10]
 800300e:	0192      	lsls	r2, r2, #6
 8003010:	4611      	mov	r1, r2
 8003012:	4a3d      	ldr	r2, [pc, #244]	; (8003108 <RCC_InitClock+0x264>)
 8003014:	430b      	orrs	r3, r1
 8003016:	6053      	str	r3, [r2, #4]
		// PLLP - division factor for main system clock
		// After this operation values should not exceed 84MHz
		// Frequency after this operation is frequency of main system clock

		// 2 bits register so value can not be more than 3
		if (p_clock_init->pll.pllp > 3)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	7b1b      	ldrb	r3, [r3, #12]
 800301c:	2b03      	cmp	r3, #3
 800301e:	d901      	bls.n	8003024 <RCC_InitClock+0x180>
		{
			return PLL_CONFIG_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e06a      	b.n	80030fa <RCC_InitClock+0x256>
		}
		RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP);
 8003024:	4b38      	ldr	r3, [pc, #224]	; (8003108 <RCC_InitClock+0x264>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a37      	ldr	r2, [pc, #220]	; (8003108 <RCC_InitClock+0x264>)
 800302a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800302e:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (p_clock_init->pll.pllp << RCC_PLLCFGR_PLLP_Pos);
 8003030:	4b35      	ldr	r3, [pc, #212]	; (8003108 <RCC_InitClock+0x264>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	7b12      	ldrb	r2, [r2, #12]
 8003038:	0412      	lsls	r2, r2, #16
 800303a:	4611      	mov	r1, r2
 800303c:	4a32      	ldr	r2, [pc, #200]	; (8003108 <RCC_InitClock+0x264>)
 800303e:	430b      	orrs	r3, r1
 8003040:	6053      	str	r3, [r2, #4]
		// PLLQ - ) division factor for USB OTG FS, SDIO and random number generator clocks
		// The USB OTG FS requires a 48 MHz clock to work correctly. The SDIO and the
		// random number generator need a frequency lower than or equal to 48 MHz to work
		// correctly

		if (p_clock_init->pll.pllq < 2 || p_clock_init->pll.pllq > 15)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	7b5b      	ldrb	r3, [r3, #13]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d903      	bls.n	8003052 <RCC_InitClock+0x1ae>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7b5b      	ldrb	r3, [r3, #13]
 800304e:	2b0f      	cmp	r3, #15
 8003050:	d901      	bls.n	8003056 <RCC_InitClock+0x1b2>
		{
			return PLL_CONFIG_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e051      	b.n	80030fa <RCC_InitClock+0x256>
		}
		RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLQ);
 8003056:	4b2c      	ldr	r3, [pc, #176]	; (8003108 <RCC_InitClock+0x264>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4a2b      	ldr	r2, [pc, #172]	; (8003108 <RCC_InitClock+0x264>)
 800305c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003060:	6053      	str	r3, [r2, #4]
		RCC->PLLCFGR |= (p_clock_init->pll.pllq << RCC_PLLCFGR_PLLQ_Pos);
 8003062:	4b29      	ldr	r3, [pc, #164]	; (8003108 <RCC_InitClock+0x264>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	7b52      	ldrb	r2, [r2, #13]
 800306a:	0612      	lsls	r2, r2, #24
 800306c:	4611      	mov	r1, r2
 800306e:	4a26      	ldr	r2, [pc, #152]	; (8003108 <RCC_InitClock+0x264>)
 8003070:	430b      	orrs	r3, r1
 8003072:	6053      	str	r3, [r2, #4]

		/* 6. Enable the PLL */
		RCC->CR |= (RCC_PLL_STATE_ENABLE << RCC_CR_PLLON_Pos);
 8003074:	4b24      	ldr	r3, [pc, #144]	; (8003108 <RCC_InitClock+0x264>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a23      	ldr	r2, [pc, #140]	; (8003108 <RCC_InitClock+0x264>)
 800307a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307e:	6013      	str	r3, [r2, #0]

		// wait until PLL is ready
		while (!(RCC->CR & RCC_CR_PLLRDY))
 8003080:	bf00      	nop
 8003082:	4b21      	ldr	r3, [pc, #132]	; (8003108 <RCC_InitClock+0x264>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f9      	beq.n	8003082 <RCC_InitClock+0x1de>
			;
		/* 7. Select system clock switch */
		// set PLL as system clock
		RCC->CFGR &= ~(RCC_CFGR_SW);
 800308e:	4b1e      	ldr	r3, [pc, #120]	; (8003108 <RCC_InitClock+0x264>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <RCC_InitClock+0x264>)
 8003094:	f023 0303 	bic.w	r3, r3, #3
 8003098:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= RCC_CFGR_SW_PLL;
 800309a:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <RCC_InitClock+0x264>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	4a1a      	ldr	r2, [pc, #104]	; (8003108 <RCC_InitClock+0x264>)
 80030a0:	f043 0302 	orr.w	r3, r3, #2
 80030a4:	6093      	str	r3, [r2, #8]
		while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
 80030a6:	bf00      	nop
 80030a8:	4b17      	ldr	r3, [pc, #92]	; (8003108 <RCC_InitClock+0x264>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d1f9      	bne.n	80030a8 <RCC_InitClock+0x204>
			;

		return 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e020      	b.n	80030fa <RCC_InitClock+0x256>
	}
	else
	{
		/* 6. Disable the PLL */
		RCC->CR = (RCC_PLL_STATE_DISABLE << RCC_CR_PLLON_Pos);
 80030b8:	4b13      	ldr	r3, [pc, #76]	; (8003108 <RCC_InitClock+0x264>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

		// wait until PLL is disables
		while (!(RCC->CR & RCC_CR_PLLRDY))
 80030be:	bf00      	nop
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <RCC_InitClock+0x264>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f9      	beq.n	80030c0 <RCC_InitClock+0x21c>
			;
		/* 7. Select system clock switch */
		// set HSI or HE as main system clock
		RCC->CFGR &= ~(RCC_CFGR_SW);
 80030cc:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <RCC_InitClock+0x264>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <RCC_InitClock+0x264>)
 80030d2:	f023 0303 	bic.w	r3, r3, #3
 80030d6:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= (p_clock_init->oscillator_type << RCC_CFGR_SW_Pos);
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <RCC_InitClock+0x264>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	7812      	ldrb	r2, [r2, #0]
 80030e0:	4611      	mov	r1, r2
 80030e2:	4a09      	ldr	r2, [pc, #36]	; (8003108 <RCC_InitClock+0x264>)
 80030e4:	430b      	orrs	r3, r1
 80030e6:	6093      	str	r3, [r2, #8]

		// wait until HSI/HSE is set as a clock source
		while ((RCC->CFGR & (p_clock_init->oscillator_type << RCC_CFGR_SW_Pos)) != RCC_CFGR_SWS_PLL)
 80030e8:	bf00      	nop
 80030ea:	4b07      	ldr	r3, [pc, #28]	; (8003108 <RCC_InitClock+0x264>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	7812      	ldrb	r2, [r2, #0]
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d1f8      	bne.n	80030ea <RCC_InitClock+0x246>
			;

	}

	return 0;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	40007000 	.word	0x40007000
 8003110:	40023c00 	.word	0x40023c00

08003114 <RCC_CalculatePllclk>:


static uint32_t RCC_CalculatePllclk (uint32_t source)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	uint16_t pllm = (RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos;;
 800311c:	4b14      	ldr	r3, [pc, #80]	; (8003170 <RCC_CalculatePllclk+0x5c>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	b29b      	uxth	r3, r3
 8003122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003126:	81fb      	strh	r3, [r7, #14]
	uint16_t plln = (RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <RCC_CalculatePllclk+0x5c>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	099b      	lsrs	r3, r3, #6
 800312e:	b29b      	uxth	r3, r3
 8003130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003134:	81bb      	strh	r3, [r7, #12]
	uint16_t pllp = (RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos;;
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <RCC_CalculatePllclk+0x5c>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	0c1b      	lsrs	r3, r3, #16
 800313c:	b29b      	uxth	r3, r3
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	817b      	strh	r3, [r7, #10]

	// pllp register has 2 bits - 00 = 2; 01 = 4; 10 = 6; 11 = 8
	pllp = (pllp * 2) + 2;
 8003144:	897b      	ldrh	r3, [r7, #10]
 8003146:	3301      	adds	r3, #1
 8003148:	b29b      	uxth	r3, r3
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	817b      	strh	r3, [r7, #10]

	return (source / pllm) * plln / pllp;
 800314e:	89fb      	ldrh	r3, [r7, #14]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	89ba      	ldrh	r2, [r7, #12]
 8003158:	fb02 f203 	mul.w	r2, r2, r3
 800315c:	897b      	ldrh	r3, [r7, #10]
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800

08003174 <RCC_GetApbPrescaler>:

static uint16_t RCC_GetApbPrescaler(uint8_t bitvalue)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
	uint32_t apb_prescaler;

	// convert bit code to prescaler value
	switch(bitvalue)
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	2b07      	cmp	r3, #7
 8003182:	d822      	bhi.n	80031ca <RCC_GetApbPrescaler+0x56>
 8003184:	a201      	add	r2, pc, #4	; (adr r2, 800318c <RCC_GetApbPrescaler+0x18>)
 8003186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318a:	bf00      	nop
 800318c:	080031ad 	.word	0x080031ad
 8003190:	080031cb 	.word	0x080031cb
 8003194:	080031cb 	.word	0x080031cb
 8003198:	080031cb 	.word	0x080031cb
 800319c:	080031b3 	.word	0x080031b3
 80031a0:	080031b9 	.word	0x080031b9
 80031a4:	080031bf 	.word	0x080031bf
 80031a8:	080031c5 	.word	0x080031c5
	{
	case(RCC_ABP_PRESCALER_NODIV):
		apb_prescaler = 1;
 80031ac:	2301      	movs	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
	break;
 80031b0:	e00b      	b.n	80031ca <RCC_GetApbPrescaler+0x56>
	case(RCC_ABP_PRESCALER_DIV2):
		apb_prescaler = 2;
 80031b2:	2302      	movs	r3, #2
 80031b4:	60fb      	str	r3, [r7, #12]
	break;
 80031b6:	e008      	b.n	80031ca <RCC_GetApbPrescaler+0x56>
	case(RCC_ABP_PRESCALER_DIV4):
		apb_prescaler = 4;
 80031b8:	2304      	movs	r3, #4
 80031ba:	60fb      	str	r3, [r7, #12]
	break;
 80031bc:	e005      	b.n	80031ca <RCC_GetApbPrescaler+0x56>
	case(RCC_ABP_PRESCALER_DIV8):
		apb_prescaler = 8;
 80031be:	2308      	movs	r3, #8
 80031c0:	60fb      	str	r3, [r7, #12]
	break;
 80031c2:	e002      	b.n	80031ca <RCC_GetApbPrescaler+0x56>
	case(RCC_ABP_PRESCALER_DIV16):
		apb_prescaler = 16;
 80031c4:	2310      	movs	r3, #16
 80031c6:	60fb      	str	r3, [r7, #12]
	break;
 80031c8:	bf00      	nop
	}

	return apb_prescaler;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	b29b      	uxth	r3, r3
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop

080031dc <RCC_GetAhbPrescaler>:

static uint16_t RCC_GetAhbPrescaler(uint8_t bitvalue)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
	uint32_t ahb_prescaler;

	// convert bit code to prescaler value
	switch(bitvalue)
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	2b0f      	cmp	r3, #15
 80031ea:	d840      	bhi.n	800326e <RCC_GetAhbPrescaler+0x92>
 80031ec:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <RCC_GetAhbPrescaler+0x18>)
 80031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f2:	bf00      	nop
 80031f4:	08003235 	.word	0x08003235
 80031f8:	0800326f 	.word	0x0800326f
 80031fc:	0800326f 	.word	0x0800326f
 8003200:	0800326f 	.word	0x0800326f
 8003204:	0800326f 	.word	0x0800326f
 8003208:	0800326f 	.word	0x0800326f
 800320c:	0800326f 	.word	0x0800326f
 8003210:	0800326f 	.word	0x0800326f
 8003214:	0800323b 	.word	0x0800323b
 8003218:	08003241 	.word	0x08003241
 800321c:	08003247 	.word	0x08003247
 8003220:	0800324d 	.word	0x0800324d
 8003224:	08003253 	.word	0x08003253
 8003228:	08003259 	.word	0x08003259
 800322c:	0800325f 	.word	0x0800325f
 8003230:	08003267 	.word	0x08003267
	{
	case(RCC_HPRE_PRESCALER_NODIV):
		ahb_prescaler = 1;
 8003234:	2301      	movs	r3, #1
 8003236:	60fb      	str	r3, [r7, #12]
	break;
 8003238:	e019      	b.n	800326e <RCC_GetAhbPrescaler+0x92>
	case(RCC_HPRE_PRESCALER_DIV2):
		ahb_prescaler = 2;
 800323a:	2302      	movs	r3, #2
 800323c:	60fb      	str	r3, [r7, #12]
	break;
 800323e:	e016      	b.n	800326e <RCC_GetAhbPrescaler+0x92>
	case(RCC_HPRE_PRESCALER_DIV4):
		ahb_prescaler = 4;
 8003240:	2304      	movs	r3, #4
 8003242:	60fb      	str	r3, [r7, #12]
	break;
 8003244:	e013      	b.n	800326e <RCC_GetAhbPrescaler+0x92>
	case(RCC_HPRE_PRESCALER_DIV8):
		ahb_prescaler = 8;
 8003246:	2308      	movs	r3, #8
 8003248:	60fb      	str	r3, [r7, #12]
	break;
 800324a:	e010      	b.n	800326e <RCC_GetAhbPrescaler+0x92>
	case(RCC_HPRE_PRESCALER_DIV16):
		ahb_prescaler = 16;
 800324c:	2310      	movs	r3, #16
 800324e:	60fb      	str	r3, [r7, #12]
	break;
 8003250:	e00d      	b.n	800326e <RCC_GetAhbPrescaler+0x92>
	case(RCC_HPRE_PRESCALER_DIV64):
		ahb_prescaler = 64;
 8003252:	2340      	movs	r3, #64	; 0x40
 8003254:	60fb      	str	r3, [r7, #12]
	break;
 8003256:	e00a      	b.n	800326e <RCC_GetAhbPrescaler+0x92>
	case(RCC_HPRE_PRESCALER_DIV128):
		ahb_prescaler = 128;
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	60fb      	str	r3, [r7, #12]
	break;
 800325c:	e007      	b.n	800326e <RCC_GetAhbPrescaler+0x92>
	case(RCC_HPRE_PRESCALER_DIV256):
		ahb_prescaler = 256;
 800325e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003262:	60fb      	str	r3, [r7, #12]
	break;
 8003264:	e003      	b.n	800326e <RCC_GetAhbPrescaler+0x92>
	case(RCC_HPRE_PRESCALER_DIV512):
		ahb_prescaler = 512;
 8003266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800326a:	60fb      	str	r3, [r7, #12]
	break;
 800326c:	bf00      	nop
	}

	return ahb_prescaler;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	b29b      	uxth	r3, r3
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop

08003280 <RCC_GetSysclk>:

uint32_t RCC_GetSysclk(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
	// calculate sysclk depending on source
	switch (RCC->CFGR & RCC_CFGR_SWS)
 8003284:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <RCC_GetSysclk+0x54>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d00a      	beq.n	80032a6 <RCC_GetSysclk+0x26>
 8003290:	2b08      	cmp	r3, #8
 8003292:	d81c      	bhi.n	80032ce <RCC_GetSysclk+0x4e>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <RCC_GetSysclk+0x1e>
 8003298:	2b04      	cmp	r3, #4
 800329a:	d002      	beq.n	80032a2 <RCC_GetSysclk+0x22>
 800329c:	e017      	b.n	80032ce <RCC_GetSysclk+0x4e>
	{
	case (RCC_CFGR_SWS_HSI):
		return RCC_HSI_FREQUENCY;
 800329e:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <RCC_GetSysclk+0x58>)
 80032a0:	e016      	b.n	80032d0 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_HSE):
		return RCC_HSE_FREQUENCY;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e014      	b.n	80032d0 <RCC_GetSysclk+0x50>
		break;

	case (RCC_CFGR_SWS_PLL):

		switch (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80032a6:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <RCC_GetSysclk+0x54>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <RCC_GetSysclk+0x3a>
 80032b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b6:	d005      	beq.n	80032c4 <RCC_GetSysclk+0x44>

		case (RCC_PLLCFGR_PLLSRC_HSE):
		return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
			break;
		}
		break;
 80032b8:	e009      	b.n	80032ce <RCC_GetSysclk+0x4e>
			return RCC_CalculatePllclk(RCC_HSI_FREQUENCY);
 80032ba:	4807      	ldr	r0, [pc, #28]	; (80032d8 <RCC_GetSysclk+0x58>)
 80032bc:	f7ff ff2a 	bl	8003114 <RCC_CalculatePllclk>
 80032c0:	4603      	mov	r3, r0
 80032c2:	e005      	b.n	80032d0 <RCC_GetSysclk+0x50>
		return RCC_CalculatePllclk(RCC_HSE_FREQUENCY);
 80032c4:	2000      	movs	r0, #0
 80032c6:	f7ff ff25 	bl	8003114 <RCC_CalculatePllclk>
 80032ca:	4603      	mov	r3, r0
 80032cc:	e000      	b.n	80032d0 <RCC_GetSysclk+0x50>
	}

	return 0;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40023800 	.word	0x40023800
 80032d8:	00f42400 	.word	0x00f42400

080032dc <RCC_GetHclk>:

uint32_t RCC_GetHclk(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
	uint32_t sysclk = RCC_GetSysclk();
 80032e2:	f7ff ffcd 	bl	8003280 <RCC_GetSysclk>
 80032e6:	6078      	str	r0, [r7, #4]
	uint16_t ahb_prescaler = RCC_GetAhbPrescaler((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos);
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <RCC_GetHclk+0x34>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff ff70 	bl	80031dc <RCC_GetAhbPrescaler>
 80032fc:	4603      	mov	r3, r0
 80032fe:	807b      	strh	r3, [r7, #2]
	return  sysclk / ahb_prescaler;
 8003300:	887b      	ldrh	r3, [r7, #2]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40023800 	.word	0x40023800

08003314 <RCC_GetPclk>:

uint32_t RCC_GetPclk(uint8_t plck_x)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
	uint32_t hclk = RCC_GetHclk();
 800331e:	f7ff ffdd 	bl	80032dc <RCC_GetHclk>
 8003322:	60b8      	str	r0, [r7, #8]
	uint8_t apb_prescaler;
	switch(plck_x)
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d002      	beq.n	8003330 <RCC_GetPclk+0x1c>
 800332a:	2b02      	cmp	r3, #2
 800332c:	d00d      	beq.n	800334a <RCC_GetPclk+0x36>
 800332e:	e019      	b.n	8003364 <RCC_GetPclk+0x50>
	{
	case(1):
	apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos);
 8003330:	4b10      	ldr	r3, [pc, #64]	; (8003374 <RCC_GetPclk+0x60>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	0a9b      	lsrs	r3, r3, #10
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	b2db      	uxtb	r3, r3
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff18 	bl	8003174 <RCC_GetApbPrescaler>
 8003344:	4603      	mov	r3, r0
 8003346:	73fb      	strb	r3, [r7, #15]
	break;
 8003348:	e00c      	b.n	8003364 <RCC_GetPclk+0x50>

	case(2):
	apb_prescaler = RCC_GetApbPrescaler((RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos);
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <RCC_GetPclk+0x60>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	0b5b      	lsrs	r3, r3, #13
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	b2db      	uxtb	r3, r3
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff ff0b 	bl	8003174 <RCC_GetApbPrescaler>
 800335e:	4603      	mov	r3, r0
 8003360:	73fb      	strb	r3, [r7, #15]
	break;
 8003362:	bf00      	nop
	}

	return hclk / apb_prescaler;
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40023800 	.word	0x40023800

08003378 <RCC_GetClockFrequencies>:

void RCC_GetClockFrequencies(RCC_ClockFreqs* freqs)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

	freqs->sysclk = RCC_GetSysclk();
 8003380:	f7ff ff7e 	bl	8003280 <RCC_GetSysclk>
 8003384:	4602      	mov	r2, r0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	601a      	str	r2, [r3, #0]
	freqs->hclk = RCC_GetHclk();
 800338a:	f7ff ffa7 	bl	80032dc <RCC_GetHclk>
 800338e:	4602      	mov	r2, r0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	605a      	str	r2, [r3, #4]
	freqs->pclk1 = RCC_GetPclk(1);
 8003394:	2001      	movs	r0, #1
 8003396:	f7ff ffbd 	bl	8003314 <RCC_GetPclk>
 800339a:	4602      	mov	r2, r0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	609a      	str	r2, [r3, #8]
	freqs->pclk2 = RCC_GetPclk(2);
 80033a0:	2002      	movs	r0, #2
 80033a2:	f7ff ffb7 	bl	8003314 <RCC_GetPclk>
 80033a6:	4602      	mov	r2, r0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	60da      	str	r2, [r3, #12]

	return;
 80033ac:	bf00      	nop
}
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <__errno>:
 80033b4:	4b01      	ldr	r3, [pc, #4]	; (80033bc <__errno+0x8>)
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000004 	.word	0x20000004

080033c0 <__libc_init_array>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	4d0d      	ldr	r5, [pc, #52]	; (80033f8 <__libc_init_array+0x38>)
 80033c4:	4c0d      	ldr	r4, [pc, #52]	; (80033fc <__libc_init_array+0x3c>)
 80033c6:	1b64      	subs	r4, r4, r5
 80033c8:	10a4      	asrs	r4, r4, #2
 80033ca:	2600      	movs	r6, #0
 80033cc:	42a6      	cmp	r6, r4
 80033ce:	d109      	bne.n	80033e4 <__libc_init_array+0x24>
 80033d0:	4d0b      	ldr	r5, [pc, #44]	; (8003400 <__libc_init_array+0x40>)
 80033d2:	4c0c      	ldr	r4, [pc, #48]	; (8003404 <__libc_init_array+0x44>)
 80033d4:	f001 f9f4 	bl	80047c0 <_init>
 80033d8:	1b64      	subs	r4, r4, r5
 80033da:	10a4      	asrs	r4, r4, #2
 80033dc:	2600      	movs	r6, #0
 80033de:	42a6      	cmp	r6, r4
 80033e0:	d105      	bne.n	80033ee <__libc_init_array+0x2e>
 80033e2:	bd70      	pop	{r4, r5, r6, pc}
 80033e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e8:	4798      	blx	r3
 80033ea:	3601      	adds	r6, #1
 80033ec:	e7ee      	b.n	80033cc <__libc_init_array+0xc>
 80033ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f2:	4798      	blx	r3
 80033f4:	3601      	adds	r6, #1
 80033f6:	e7f2      	b.n	80033de <__libc_init_array+0x1e>
 80033f8:	08004db4 	.word	0x08004db4
 80033fc:	08004db4 	.word	0x08004db4
 8003400:	08004db4 	.word	0x08004db4
 8003404:	08004db8 	.word	0x08004db8

08003408 <memcpy>:
 8003408:	440a      	add	r2, r1
 800340a:	4291      	cmp	r1, r2
 800340c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003410:	d100      	bne.n	8003414 <memcpy+0xc>
 8003412:	4770      	bx	lr
 8003414:	b510      	push	{r4, lr}
 8003416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800341a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800341e:	4291      	cmp	r1, r2
 8003420:	d1f9      	bne.n	8003416 <memcpy+0xe>
 8003422:	bd10      	pop	{r4, pc}

08003424 <memset>:
 8003424:	4402      	add	r2, r0
 8003426:	4603      	mov	r3, r0
 8003428:	4293      	cmp	r3, r2
 800342a:	d100      	bne.n	800342e <memset+0xa>
 800342c:	4770      	bx	lr
 800342e:	f803 1b01 	strb.w	r1, [r3], #1
 8003432:	e7f9      	b.n	8003428 <memset+0x4>

08003434 <rand>:
 8003434:	4b17      	ldr	r3, [pc, #92]	; (8003494 <rand+0x60>)
 8003436:	b510      	push	{r4, lr}
 8003438:	681c      	ldr	r4, [r3, #0]
 800343a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800343c:	b9b3      	cbnz	r3, 800346c <rand+0x38>
 800343e:	2018      	movs	r0, #24
 8003440:	f000 f888 	bl	8003554 <malloc>
 8003444:	63a0      	str	r0, [r4, #56]	; 0x38
 8003446:	b928      	cbnz	r0, 8003454 <rand+0x20>
 8003448:	4602      	mov	r2, r0
 800344a:	4b13      	ldr	r3, [pc, #76]	; (8003498 <rand+0x64>)
 800344c:	4813      	ldr	r0, [pc, #76]	; (800349c <rand+0x68>)
 800344e:	214e      	movs	r1, #78	; 0x4e
 8003450:	f000 f850 	bl	80034f4 <__assert_func>
 8003454:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <rand+0x6c>)
 8003456:	4b13      	ldr	r3, [pc, #76]	; (80034a4 <rand+0x70>)
 8003458:	e9c0 2300 	strd	r2, r3, [r0]
 800345c:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <rand+0x74>)
 800345e:	6083      	str	r3, [r0, #8]
 8003460:	230b      	movs	r3, #11
 8003462:	8183      	strh	r3, [r0, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	2300      	movs	r3, #0
 8003468:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800346c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800346e:	480f      	ldr	r0, [pc, #60]	; (80034ac <rand+0x78>)
 8003470:	690a      	ldr	r2, [r1, #16]
 8003472:	694b      	ldr	r3, [r1, #20]
 8003474:	4c0e      	ldr	r4, [pc, #56]	; (80034b0 <rand+0x7c>)
 8003476:	4350      	muls	r0, r2
 8003478:	fb04 0003 	mla	r0, r4, r3, r0
 800347c:	fba2 3404 	umull	r3, r4, r2, r4
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	4404      	add	r4, r0
 8003484:	f144 0000 	adc.w	r0, r4, #0
 8003488:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800348c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003490:	bd10      	pop	{r4, pc}
 8003492:	bf00      	nop
 8003494:	20000004 	.word	0x20000004
 8003498:	08004c6c 	.word	0x08004c6c
 800349c:	08004c83 	.word	0x08004c83
 80034a0:	abcd330e 	.word	0xabcd330e
 80034a4:	e66d1234 	.word	0xe66d1234
 80034a8:	0005deec 	.word	0x0005deec
 80034ac:	5851f42d 	.word	0x5851f42d
 80034b0:	4c957f2d 	.word	0x4c957f2d

080034b4 <siprintf>:
 80034b4:	b40e      	push	{r1, r2, r3}
 80034b6:	b500      	push	{lr}
 80034b8:	b09c      	sub	sp, #112	; 0x70
 80034ba:	ab1d      	add	r3, sp, #116	; 0x74
 80034bc:	9002      	str	r0, [sp, #8]
 80034be:	9006      	str	r0, [sp, #24]
 80034c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034c4:	4809      	ldr	r0, [pc, #36]	; (80034ec <siprintf+0x38>)
 80034c6:	9107      	str	r1, [sp, #28]
 80034c8:	9104      	str	r1, [sp, #16]
 80034ca:	4909      	ldr	r1, [pc, #36]	; (80034f0 <siprintf+0x3c>)
 80034cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80034d0:	9105      	str	r1, [sp, #20]
 80034d2:	6800      	ldr	r0, [r0, #0]
 80034d4:	9301      	str	r3, [sp, #4]
 80034d6:	a902      	add	r1, sp, #8
 80034d8:	f000 f94a 	bl	8003770 <_svfiprintf_r>
 80034dc:	9b02      	ldr	r3, [sp, #8]
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	b01c      	add	sp, #112	; 0x70
 80034e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80034e8:	b003      	add	sp, #12
 80034ea:	4770      	bx	lr
 80034ec:	20000004 	.word	0x20000004
 80034f0:	ffff0208 	.word	0xffff0208

080034f4 <__assert_func>:
 80034f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80034f6:	4614      	mov	r4, r2
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b09      	ldr	r3, [pc, #36]	; (8003520 <__assert_func+0x2c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4605      	mov	r5, r0
 8003500:	68d8      	ldr	r0, [r3, #12]
 8003502:	b14c      	cbz	r4, 8003518 <__assert_func+0x24>
 8003504:	4b07      	ldr	r3, [pc, #28]	; (8003524 <__assert_func+0x30>)
 8003506:	9100      	str	r1, [sp, #0]
 8003508:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800350c:	4906      	ldr	r1, [pc, #24]	; (8003528 <__assert_func+0x34>)
 800350e:	462b      	mov	r3, r5
 8003510:	f000 f80e 	bl	8003530 <fiprintf>
 8003514:	f000 fdea 	bl	80040ec <abort>
 8003518:	4b04      	ldr	r3, [pc, #16]	; (800352c <__assert_func+0x38>)
 800351a:	461c      	mov	r4, r3
 800351c:	e7f3      	b.n	8003506 <__assert_func+0x12>
 800351e:	bf00      	nop
 8003520:	20000004 	.word	0x20000004
 8003524:	08004ce2 	.word	0x08004ce2
 8003528:	08004cef 	.word	0x08004cef
 800352c:	08004d1d 	.word	0x08004d1d

08003530 <fiprintf>:
 8003530:	b40e      	push	{r1, r2, r3}
 8003532:	b503      	push	{r0, r1, lr}
 8003534:	4601      	mov	r1, r0
 8003536:	ab03      	add	r3, sp, #12
 8003538:	4805      	ldr	r0, [pc, #20]	; (8003550 <fiprintf+0x20>)
 800353a:	f853 2b04 	ldr.w	r2, [r3], #4
 800353e:	6800      	ldr	r0, [r0, #0]
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	f000 fa3f 	bl	80039c4 <_vfiprintf_r>
 8003546:	b002      	add	sp, #8
 8003548:	f85d eb04 	ldr.w	lr, [sp], #4
 800354c:	b003      	add	sp, #12
 800354e:	4770      	bx	lr
 8003550:	20000004 	.word	0x20000004

08003554 <malloc>:
 8003554:	4b02      	ldr	r3, [pc, #8]	; (8003560 <malloc+0xc>)
 8003556:	4601      	mov	r1, r0
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	f000 b853 	b.w	8003604 <_malloc_r>
 800355e:	bf00      	nop
 8003560:	20000004 	.word	0x20000004

08003564 <_free_r>:
 8003564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003566:	2900      	cmp	r1, #0
 8003568:	d048      	beq.n	80035fc <_free_r+0x98>
 800356a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800356e:	9001      	str	r0, [sp, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	f1a1 0404 	sub.w	r4, r1, #4
 8003576:	bfb8      	it	lt
 8003578:	18e4      	addlt	r4, r4, r3
 800357a:	f000 fff7 	bl	800456c <__malloc_lock>
 800357e:	4a20      	ldr	r2, [pc, #128]	; (8003600 <_free_r+0x9c>)
 8003580:	9801      	ldr	r0, [sp, #4]
 8003582:	6813      	ldr	r3, [r2, #0]
 8003584:	4615      	mov	r5, r2
 8003586:	b933      	cbnz	r3, 8003596 <_free_r+0x32>
 8003588:	6063      	str	r3, [r4, #4]
 800358a:	6014      	str	r4, [r2, #0]
 800358c:	b003      	add	sp, #12
 800358e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003592:	f000 bff1 	b.w	8004578 <__malloc_unlock>
 8003596:	42a3      	cmp	r3, r4
 8003598:	d90b      	bls.n	80035b2 <_free_r+0x4e>
 800359a:	6821      	ldr	r1, [r4, #0]
 800359c:	1862      	adds	r2, r4, r1
 800359e:	4293      	cmp	r3, r2
 80035a0:	bf04      	itt	eq
 80035a2:	681a      	ldreq	r2, [r3, #0]
 80035a4:	685b      	ldreq	r3, [r3, #4]
 80035a6:	6063      	str	r3, [r4, #4]
 80035a8:	bf04      	itt	eq
 80035aa:	1852      	addeq	r2, r2, r1
 80035ac:	6022      	streq	r2, [r4, #0]
 80035ae:	602c      	str	r4, [r5, #0]
 80035b0:	e7ec      	b.n	800358c <_free_r+0x28>
 80035b2:	461a      	mov	r2, r3
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	b10b      	cbz	r3, 80035bc <_free_r+0x58>
 80035b8:	42a3      	cmp	r3, r4
 80035ba:	d9fa      	bls.n	80035b2 <_free_r+0x4e>
 80035bc:	6811      	ldr	r1, [r2, #0]
 80035be:	1855      	adds	r5, r2, r1
 80035c0:	42a5      	cmp	r5, r4
 80035c2:	d10b      	bne.n	80035dc <_free_r+0x78>
 80035c4:	6824      	ldr	r4, [r4, #0]
 80035c6:	4421      	add	r1, r4
 80035c8:	1854      	adds	r4, r2, r1
 80035ca:	42a3      	cmp	r3, r4
 80035cc:	6011      	str	r1, [r2, #0]
 80035ce:	d1dd      	bne.n	800358c <_free_r+0x28>
 80035d0:	681c      	ldr	r4, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	6053      	str	r3, [r2, #4]
 80035d6:	4421      	add	r1, r4
 80035d8:	6011      	str	r1, [r2, #0]
 80035da:	e7d7      	b.n	800358c <_free_r+0x28>
 80035dc:	d902      	bls.n	80035e4 <_free_r+0x80>
 80035de:	230c      	movs	r3, #12
 80035e0:	6003      	str	r3, [r0, #0]
 80035e2:	e7d3      	b.n	800358c <_free_r+0x28>
 80035e4:	6825      	ldr	r5, [r4, #0]
 80035e6:	1961      	adds	r1, r4, r5
 80035e8:	428b      	cmp	r3, r1
 80035ea:	bf04      	itt	eq
 80035ec:	6819      	ldreq	r1, [r3, #0]
 80035ee:	685b      	ldreq	r3, [r3, #4]
 80035f0:	6063      	str	r3, [r4, #4]
 80035f2:	bf04      	itt	eq
 80035f4:	1949      	addeq	r1, r1, r5
 80035f6:	6021      	streq	r1, [r4, #0]
 80035f8:	6054      	str	r4, [r2, #4]
 80035fa:	e7c7      	b.n	800358c <_free_r+0x28>
 80035fc:	b003      	add	sp, #12
 80035fe:	bd30      	pop	{r4, r5, pc}
 8003600:	2000058c 	.word	0x2000058c

08003604 <_malloc_r>:
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	1ccd      	adds	r5, r1, #3
 8003608:	f025 0503 	bic.w	r5, r5, #3
 800360c:	3508      	adds	r5, #8
 800360e:	2d0c      	cmp	r5, #12
 8003610:	bf38      	it	cc
 8003612:	250c      	movcc	r5, #12
 8003614:	2d00      	cmp	r5, #0
 8003616:	4606      	mov	r6, r0
 8003618:	db01      	blt.n	800361e <_malloc_r+0x1a>
 800361a:	42a9      	cmp	r1, r5
 800361c:	d903      	bls.n	8003626 <_malloc_r+0x22>
 800361e:	230c      	movs	r3, #12
 8003620:	6033      	str	r3, [r6, #0]
 8003622:	2000      	movs	r0, #0
 8003624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003626:	f000 ffa1 	bl	800456c <__malloc_lock>
 800362a:	4921      	ldr	r1, [pc, #132]	; (80036b0 <_malloc_r+0xac>)
 800362c:	680a      	ldr	r2, [r1, #0]
 800362e:	4614      	mov	r4, r2
 8003630:	b99c      	cbnz	r4, 800365a <_malloc_r+0x56>
 8003632:	4f20      	ldr	r7, [pc, #128]	; (80036b4 <_malloc_r+0xb0>)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	b923      	cbnz	r3, 8003642 <_malloc_r+0x3e>
 8003638:	4621      	mov	r1, r4
 800363a:	4630      	mov	r0, r6
 800363c:	f000 fc86 	bl	8003f4c <_sbrk_r>
 8003640:	6038      	str	r0, [r7, #0]
 8003642:	4629      	mov	r1, r5
 8003644:	4630      	mov	r0, r6
 8003646:	f000 fc81 	bl	8003f4c <_sbrk_r>
 800364a:	1c43      	adds	r3, r0, #1
 800364c:	d123      	bne.n	8003696 <_malloc_r+0x92>
 800364e:	230c      	movs	r3, #12
 8003650:	6033      	str	r3, [r6, #0]
 8003652:	4630      	mov	r0, r6
 8003654:	f000 ff90 	bl	8004578 <__malloc_unlock>
 8003658:	e7e3      	b.n	8003622 <_malloc_r+0x1e>
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	1b5b      	subs	r3, r3, r5
 800365e:	d417      	bmi.n	8003690 <_malloc_r+0x8c>
 8003660:	2b0b      	cmp	r3, #11
 8003662:	d903      	bls.n	800366c <_malloc_r+0x68>
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	441c      	add	r4, r3
 8003668:	6025      	str	r5, [r4, #0]
 800366a:	e004      	b.n	8003676 <_malloc_r+0x72>
 800366c:	6863      	ldr	r3, [r4, #4]
 800366e:	42a2      	cmp	r2, r4
 8003670:	bf0c      	ite	eq
 8003672:	600b      	streq	r3, [r1, #0]
 8003674:	6053      	strne	r3, [r2, #4]
 8003676:	4630      	mov	r0, r6
 8003678:	f000 ff7e 	bl	8004578 <__malloc_unlock>
 800367c:	f104 000b 	add.w	r0, r4, #11
 8003680:	1d23      	adds	r3, r4, #4
 8003682:	f020 0007 	bic.w	r0, r0, #7
 8003686:	1ac2      	subs	r2, r0, r3
 8003688:	d0cc      	beq.n	8003624 <_malloc_r+0x20>
 800368a:	1a1b      	subs	r3, r3, r0
 800368c:	50a3      	str	r3, [r4, r2]
 800368e:	e7c9      	b.n	8003624 <_malloc_r+0x20>
 8003690:	4622      	mov	r2, r4
 8003692:	6864      	ldr	r4, [r4, #4]
 8003694:	e7cc      	b.n	8003630 <_malloc_r+0x2c>
 8003696:	1cc4      	adds	r4, r0, #3
 8003698:	f024 0403 	bic.w	r4, r4, #3
 800369c:	42a0      	cmp	r0, r4
 800369e:	d0e3      	beq.n	8003668 <_malloc_r+0x64>
 80036a0:	1a21      	subs	r1, r4, r0
 80036a2:	4630      	mov	r0, r6
 80036a4:	f000 fc52 	bl	8003f4c <_sbrk_r>
 80036a8:	3001      	adds	r0, #1
 80036aa:	d1dd      	bne.n	8003668 <_malloc_r+0x64>
 80036ac:	e7cf      	b.n	800364e <_malloc_r+0x4a>
 80036ae:	bf00      	nop
 80036b0:	2000058c 	.word	0x2000058c
 80036b4:	20000590 	.word	0x20000590

080036b8 <__ssputs_r>:
 80036b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036bc:	688e      	ldr	r6, [r1, #8]
 80036be:	429e      	cmp	r6, r3
 80036c0:	4682      	mov	sl, r0
 80036c2:	460c      	mov	r4, r1
 80036c4:	4690      	mov	r8, r2
 80036c6:	461f      	mov	r7, r3
 80036c8:	d838      	bhi.n	800373c <__ssputs_r+0x84>
 80036ca:	898a      	ldrh	r2, [r1, #12]
 80036cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036d0:	d032      	beq.n	8003738 <__ssputs_r+0x80>
 80036d2:	6825      	ldr	r5, [r4, #0]
 80036d4:	6909      	ldr	r1, [r1, #16]
 80036d6:	eba5 0901 	sub.w	r9, r5, r1
 80036da:	6965      	ldr	r5, [r4, #20]
 80036dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036e4:	3301      	adds	r3, #1
 80036e6:	444b      	add	r3, r9
 80036e8:	106d      	asrs	r5, r5, #1
 80036ea:	429d      	cmp	r5, r3
 80036ec:	bf38      	it	cc
 80036ee:	461d      	movcc	r5, r3
 80036f0:	0553      	lsls	r3, r2, #21
 80036f2:	d531      	bpl.n	8003758 <__ssputs_r+0xa0>
 80036f4:	4629      	mov	r1, r5
 80036f6:	f7ff ff85 	bl	8003604 <_malloc_r>
 80036fa:	4606      	mov	r6, r0
 80036fc:	b950      	cbnz	r0, 8003714 <__ssputs_r+0x5c>
 80036fe:	230c      	movs	r3, #12
 8003700:	f8ca 3000 	str.w	r3, [sl]
 8003704:	89a3      	ldrh	r3, [r4, #12]
 8003706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800370a:	81a3      	strh	r3, [r4, #12]
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003714:	6921      	ldr	r1, [r4, #16]
 8003716:	464a      	mov	r2, r9
 8003718:	f7ff fe76 	bl	8003408 <memcpy>
 800371c:	89a3      	ldrh	r3, [r4, #12]
 800371e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003726:	81a3      	strh	r3, [r4, #12]
 8003728:	6126      	str	r6, [r4, #16]
 800372a:	6165      	str	r5, [r4, #20]
 800372c:	444e      	add	r6, r9
 800372e:	eba5 0509 	sub.w	r5, r5, r9
 8003732:	6026      	str	r6, [r4, #0]
 8003734:	60a5      	str	r5, [r4, #8]
 8003736:	463e      	mov	r6, r7
 8003738:	42be      	cmp	r6, r7
 800373a:	d900      	bls.n	800373e <__ssputs_r+0x86>
 800373c:	463e      	mov	r6, r7
 800373e:	4632      	mov	r2, r6
 8003740:	6820      	ldr	r0, [r4, #0]
 8003742:	4641      	mov	r1, r8
 8003744:	f000 fef8 	bl	8004538 <memmove>
 8003748:	68a3      	ldr	r3, [r4, #8]
 800374a:	6822      	ldr	r2, [r4, #0]
 800374c:	1b9b      	subs	r3, r3, r6
 800374e:	4432      	add	r2, r6
 8003750:	60a3      	str	r3, [r4, #8]
 8003752:	6022      	str	r2, [r4, #0]
 8003754:	2000      	movs	r0, #0
 8003756:	e7db      	b.n	8003710 <__ssputs_r+0x58>
 8003758:	462a      	mov	r2, r5
 800375a:	f000 ff13 	bl	8004584 <_realloc_r>
 800375e:	4606      	mov	r6, r0
 8003760:	2800      	cmp	r0, #0
 8003762:	d1e1      	bne.n	8003728 <__ssputs_r+0x70>
 8003764:	6921      	ldr	r1, [r4, #16]
 8003766:	4650      	mov	r0, sl
 8003768:	f7ff fefc 	bl	8003564 <_free_r>
 800376c:	e7c7      	b.n	80036fe <__ssputs_r+0x46>
	...

08003770 <_svfiprintf_r>:
 8003770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003774:	4698      	mov	r8, r3
 8003776:	898b      	ldrh	r3, [r1, #12]
 8003778:	061b      	lsls	r3, r3, #24
 800377a:	b09d      	sub	sp, #116	; 0x74
 800377c:	4607      	mov	r7, r0
 800377e:	460d      	mov	r5, r1
 8003780:	4614      	mov	r4, r2
 8003782:	d50e      	bpl.n	80037a2 <_svfiprintf_r+0x32>
 8003784:	690b      	ldr	r3, [r1, #16]
 8003786:	b963      	cbnz	r3, 80037a2 <_svfiprintf_r+0x32>
 8003788:	2140      	movs	r1, #64	; 0x40
 800378a:	f7ff ff3b 	bl	8003604 <_malloc_r>
 800378e:	6028      	str	r0, [r5, #0]
 8003790:	6128      	str	r0, [r5, #16]
 8003792:	b920      	cbnz	r0, 800379e <_svfiprintf_r+0x2e>
 8003794:	230c      	movs	r3, #12
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	f04f 30ff 	mov.w	r0, #4294967295
 800379c:	e0d1      	b.n	8003942 <_svfiprintf_r+0x1d2>
 800379e:	2340      	movs	r3, #64	; 0x40
 80037a0:	616b      	str	r3, [r5, #20]
 80037a2:	2300      	movs	r3, #0
 80037a4:	9309      	str	r3, [sp, #36]	; 0x24
 80037a6:	2320      	movs	r3, #32
 80037a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80037b0:	2330      	movs	r3, #48	; 0x30
 80037b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800395c <_svfiprintf_r+0x1ec>
 80037b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037ba:	f04f 0901 	mov.w	r9, #1
 80037be:	4623      	mov	r3, r4
 80037c0:	469a      	mov	sl, r3
 80037c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037c6:	b10a      	cbz	r2, 80037cc <_svfiprintf_r+0x5c>
 80037c8:	2a25      	cmp	r2, #37	; 0x25
 80037ca:	d1f9      	bne.n	80037c0 <_svfiprintf_r+0x50>
 80037cc:	ebba 0b04 	subs.w	fp, sl, r4
 80037d0:	d00b      	beq.n	80037ea <_svfiprintf_r+0x7a>
 80037d2:	465b      	mov	r3, fp
 80037d4:	4622      	mov	r2, r4
 80037d6:	4629      	mov	r1, r5
 80037d8:	4638      	mov	r0, r7
 80037da:	f7ff ff6d 	bl	80036b8 <__ssputs_r>
 80037de:	3001      	adds	r0, #1
 80037e0:	f000 80aa 	beq.w	8003938 <_svfiprintf_r+0x1c8>
 80037e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037e6:	445a      	add	r2, fp
 80037e8:	9209      	str	r2, [sp, #36]	; 0x24
 80037ea:	f89a 3000 	ldrb.w	r3, [sl]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 80a2 	beq.w	8003938 <_svfiprintf_r+0x1c8>
 80037f4:	2300      	movs	r3, #0
 80037f6:	f04f 32ff 	mov.w	r2, #4294967295
 80037fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037fe:	f10a 0a01 	add.w	sl, sl, #1
 8003802:	9304      	str	r3, [sp, #16]
 8003804:	9307      	str	r3, [sp, #28]
 8003806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800380a:	931a      	str	r3, [sp, #104]	; 0x68
 800380c:	4654      	mov	r4, sl
 800380e:	2205      	movs	r2, #5
 8003810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003814:	4851      	ldr	r0, [pc, #324]	; (800395c <_svfiprintf_r+0x1ec>)
 8003816:	f7fc fceb 	bl	80001f0 <memchr>
 800381a:	9a04      	ldr	r2, [sp, #16]
 800381c:	b9d8      	cbnz	r0, 8003856 <_svfiprintf_r+0xe6>
 800381e:	06d0      	lsls	r0, r2, #27
 8003820:	bf44      	itt	mi
 8003822:	2320      	movmi	r3, #32
 8003824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003828:	0711      	lsls	r1, r2, #28
 800382a:	bf44      	itt	mi
 800382c:	232b      	movmi	r3, #43	; 0x2b
 800382e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003832:	f89a 3000 	ldrb.w	r3, [sl]
 8003836:	2b2a      	cmp	r3, #42	; 0x2a
 8003838:	d015      	beq.n	8003866 <_svfiprintf_r+0xf6>
 800383a:	9a07      	ldr	r2, [sp, #28]
 800383c:	4654      	mov	r4, sl
 800383e:	2000      	movs	r0, #0
 8003840:	f04f 0c0a 	mov.w	ip, #10
 8003844:	4621      	mov	r1, r4
 8003846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800384a:	3b30      	subs	r3, #48	; 0x30
 800384c:	2b09      	cmp	r3, #9
 800384e:	d94e      	bls.n	80038ee <_svfiprintf_r+0x17e>
 8003850:	b1b0      	cbz	r0, 8003880 <_svfiprintf_r+0x110>
 8003852:	9207      	str	r2, [sp, #28]
 8003854:	e014      	b.n	8003880 <_svfiprintf_r+0x110>
 8003856:	eba0 0308 	sub.w	r3, r0, r8
 800385a:	fa09 f303 	lsl.w	r3, r9, r3
 800385e:	4313      	orrs	r3, r2
 8003860:	9304      	str	r3, [sp, #16]
 8003862:	46a2      	mov	sl, r4
 8003864:	e7d2      	b.n	800380c <_svfiprintf_r+0x9c>
 8003866:	9b03      	ldr	r3, [sp, #12]
 8003868:	1d19      	adds	r1, r3, #4
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	9103      	str	r1, [sp, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	bfbb      	ittet	lt
 8003872:	425b      	neglt	r3, r3
 8003874:	f042 0202 	orrlt.w	r2, r2, #2
 8003878:	9307      	strge	r3, [sp, #28]
 800387a:	9307      	strlt	r3, [sp, #28]
 800387c:	bfb8      	it	lt
 800387e:	9204      	strlt	r2, [sp, #16]
 8003880:	7823      	ldrb	r3, [r4, #0]
 8003882:	2b2e      	cmp	r3, #46	; 0x2e
 8003884:	d10c      	bne.n	80038a0 <_svfiprintf_r+0x130>
 8003886:	7863      	ldrb	r3, [r4, #1]
 8003888:	2b2a      	cmp	r3, #42	; 0x2a
 800388a:	d135      	bne.n	80038f8 <_svfiprintf_r+0x188>
 800388c:	9b03      	ldr	r3, [sp, #12]
 800388e:	1d1a      	adds	r2, r3, #4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	9203      	str	r2, [sp, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	bfb8      	it	lt
 8003898:	f04f 33ff 	movlt.w	r3, #4294967295
 800389c:	3402      	adds	r4, #2
 800389e:	9305      	str	r3, [sp, #20]
 80038a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800396c <_svfiprintf_r+0x1fc>
 80038a4:	7821      	ldrb	r1, [r4, #0]
 80038a6:	2203      	movs	r2, #3
 80038a8:	4650      	mov	r0, sl
 80038aa:	f7fc fca1 	bl	80001f0 <memchr>
 80038ae:	b140      	cbz	r0, 80038c2 <_svfiprintf_r+0x152>
 80038b0:	2340      	movs	r3, #64	; 0x40
 80038b2:	eba0 000a 	sub.w	r0, r0, sl
 80038b6:	fa03 f000 	lsl.w	r0, r3, r0
 80038ba:	9b04      	ldr	r3, [sp, #16]
 80038bc:	4303      	orrs	r3, r0
 80038be:	3401      	adds	r4, #1
 80038c0:	9304      	str	r3, [sp, #16]
 80038c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038c6:	4826      	ldr	r0, [pc, #152]	; (8003960 <_svfiprintf_r+0x1f0>)
 80038c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038cc:	2206      	movs	r2, #6
 80038ce:	f7fc fc8f 	bl	80001f0 <memchr>
 80038d2:	2800      	cmp	r0, #0
 80038d4:	d038      	beq.n	8003948 <_svfiprintf_r+0x1d8>
 80038d6:	4b23      	ldr	r3, [pc, #140]	; (8003964 <_svfiprintf_r+0x1f4>)
 80038d8:	bb1b      	cbnz	r3, 8003922 <_svfiprintf_r+0x1b2>
 80038da:	9b03      	ldr	r3, [sp, #12]
 80038dc:	3307      	adds	r3, #7
 80038de:	f023 0307 	bic.w	r3, r3, #7
 80038e2:	3308      	adds	r3, #8
 80038e4:	9303      	str	r3, [sp, #12]
 80038e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038e8:	4433      	add	r3, r6
 80038ea:	9309      	str	r3, [sp, #36]	; 0x24
 80038ec:	e767      	b.n	80037be <_svfiprintf_r+0x4e>
 80038ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80038f2:	460c      	mov	r4, r1
 80038f4:	2001      	movs	r0, #1
 80038f6:	e7a5      	b.n	8003844 <_svfiprintf_r+0xd4>
 80038f8:	2300      	movs	r3, #0
 80038fa:	3401      	adds	r4, #1
 80038fc:	9305      	str	r3, [sp, #20]
 80038fe:	4619      	mov	r1, r3
 8003900:	f04f 0c0a 	mov.w	ip, #10
 8003904:	4620      	mov	r0, r4
 8003906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800390a:	3a30      	subs	r2, #48	; 0x30
 800390c:	2a09      	cmp	r2, #9
 800390e:	d903      	bls.n	8003918 <_svfiprintf_r+0x1a8>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0c5      	beq.n	80038a0 <_svfiprintf_r+0x130>
 8003914:	9105      	str	r1, [sp, #20]
 8003916:	e7c3      	b.n	80038a0 <_svfiprintf_r+0x130>
 8003918:	fb0c 2101 	mla	r1, ip, r1, r2
 800391c:	4604      	mov	r4, r0
 800391e:	2301      	movs	r3, #1
 8003920:	e7f0      	b.n	8003904 <_svfiprintf_r+0x194>
 8003922:	ab03      	add	r3, sp, #12
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	462a      	mov	r2, r5
 8003928:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <_svfiprintf_r+0x1f8>)
 800392a:	a904      	add	r1, sp, #16
 800392c:	4638      	mov	r0, r7
 800392e:	f3af 8000 	nop.w
 8003932:	1c42      	adds	r2, r0, #1
 8003934:	4606      	mov	r6, r0
 8003936:	d1d6      	bne.n	80038e6 <_svfiprintf_r+0x176>
 8003938:	89ab      	ldrh	r3, [r5, #12]
 800393a:	065b      	lsls	r3, r3, #25
 800393c:	f53f af2c 	bmi.w	8003798 <_svfiprintf_r+0x28>
 8003940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003942:	b01d      	add	sp, #116	; 0x74
 8003944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003948:	ab03      	add	r3, sp, #12
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	462a      	mov	r2, r5
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <_svfiprintf_r+0x1f8>)
 8003950:	a904      	add	r1, sp, #16
 8003952:	4638      	mov	r0, r7
 8003954:	f000 f9d4 	bl	8003d00 <_printf_i>
 8003958:	e7eb      	b.n	8003932 <_svfiprintf_r+0x1c2>
 800395a:	bf00      	nop
 800395c:	08004d1e 	.word	0x08004d1e
 8003960:	08004d28 	.word	0x08004d28
 8003964:	00000000 	.word	0x00000000
 8003968:	080036b9 	.word	0x080036b9
 800396c:	08004d24 	.word	0x08004d24

08003970 <__sfputc_r>:
 8003970:	6893      	ldr	r3, [r2, #8]
 8003972:	3b01      	subs	r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	b410      	push	{r4}
 8003978:	6093      	str	r3, [r2, #8]
 800397a:	da08      	bge.n	800398e <__sfputc_r+0x1e>
 800397c:	6994      	ldr	r4, [r2, #24]
 800397e:	42a3      	cmp	r3, r4
 8003980:	db01      	blt.n	8003986 <__sfputc_r+0x16>
 8003982:	290a      	cmp	r1, #10
 8003984:	d103      	bne.n	800398e <__sfputc_r+0x1e>
 8003986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800398a:	f000 baef 	b.w	8003f6c <__swbuf_r>
 800398e:	6813      	ldr	r3, [r2, #0]
 8003990:	1c58      	adds	r0, r3, #1
 8003992:	6010      	str	r0, [r2, #0]
 8003994:	7019      	strb	r1, [r3, #0]
 8003996:	4608      	mov	r0, r1
 8003998:	f85d 4b04 	ldr.w	r4, [sp], #4
 800399c:	4770      	bx	lr

0800399e <__sfputs_r>:
 800399e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a0:	4606      	mov	r6, r0
 80039a2:	460f      	mov	r7, r1
 80039a4:	4614      	mov	r4, r2
 80039a6:	18d5      	adds	r5, r2, r3
 80039a8:	42ac      	cmp	r4, r5
 80039aa:	d101      	bne.n	80039b0 <__sfputs_r+0x12>
 80039ac:	2000      	movs	r0, #0
 80039ae:	e007      	b.n	80039c0 <__sfputs_r+0x22>
 80039b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039b4:	463a      	mov	r2, r7
 80039b6:	4630      	mov	r0, r6
 80039b8:	f7ff ffda 	bl	8003970 <__sfputc_r>
 80039bc:	1c43      	adds	r3, r0, #1
 80039be:	d1f3      	bne.n	80039a8 <__sfputs_r+0xa>
 80039c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039c4 <_vfiprintf_r>:
 80039c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c8:	460d      	mov	r5, r1
 80039ca:	b09d      	sub	sp, #116	; 0x74
 80039cc:	4614      	mov	r4, r2
 80039ce:	4698      	mov	r8, r3
 80039d0:	4606      	mov	r6, r0
 80039d2:	b118      	cbz	r0, 80039dc <_vfiprintf_r+0x18>
 80039d4:	6983      	ldr	r3, [r0, #24]
 80039d6:	b90b      	cbnz	r3, 80039dc <_vfiprintf_r+0x18>
 80039d8:	f000 fcaa 	bl	8004330 <__sinit>
 80039dc:	4b89      	ldr	r3, [pc, #548]	; (8003c04 <_vfiprintf_r+0x240>)
 80039de:	429d      	cmp	r5, r3
 80039e0:	d11b      	bne.n	8003a1a <_vfiprintf_r+0x56>
 80039e2:	6875      	ldr	r5, [r6, #4]
 80039e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039e6:	07d9      	lsls	r1, r3, #31
 80039e8:	d405      	bmi.n	80039f6 <_vfiprintf_r+0x32>
 80039ea:	89ab      	ldrh	r3, [r5, #12]
 80039ec:	059a      	lsls	r2, r3, #22
 80039ee:	d402      	bmi.n	80039f6 <_vfiprintf_r+0x32>
 80039f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039f2:	f000 fd3b 	bl	800446c <__retarget_lock_acquire_recursive>
 80039f6:	89ab      	ldrh	r3, [r5, #12]
 80039f8:	071b      	lsls	r3, r3, #28
 80039fa:	d501      	bpl.n	8003a00 <_vfiprintf_r+0x3c>
 80039fc:	692b      	ldr	r3, [r5, #16]
 80039fe:	b9eb      	cbnz	r3, 8003a3c <_vfiprintf_r+0x78>
 8003a00:	4629      	mov	r1, r5
 8003a02:	4630      	mov	r0, r6
 8003a04:	f000 fb04 	bl	8004010 <__swsetup_r>
 8003a08:	b1c0      	cbz	r0, 8003a3c <_vfiprintf_r+0x78>
 8003a0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a0c:	07dc      	lsls	r4, r3, #31
 8003a0e:	d50e      	bpl.n	8003a2e <_vfiprintf_r+0x6a>
 8003a10:	f04f 30ff 	mov.w	r0, #4294967295
 8003a14:	b01d      	add	sp, #116	; 0x74
 8003a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a1a:	4b7b      	ldr	r3, [pc, #492]	; (8003c08 <_vfiprintf_r+0x244>)
 8003a1c:	429d      	cmp	r5, r3
 8003a1e:	d101      	bne.n	8003a24 <_vfiprintf_r+0x60>
 8003a20:	68b5      	ldr	r5, [r6, #8]
 8003a22:	e7df      	b.n	80039e4 <_vfiprintf_r+0x20>
 8003a24:	4b79      	ldr	r3, [pc, #484]	; (8003c0c <_vfiprintf_r+0x248>)
 8003a26:	429d      	cmp	r5, r3
 8003a28:	bf08      	it	eq
 8003a2a:	68f5      	ldreq	r5, [r6, #12]
 8003a2c:	e7da      	b.n	80039e4 <_vfiprintf_r+0x20>
 8003a2e:	89ab      	ldrh	r3, [r5, #12]
 8003a30:	0598      	lsls	r0, r3, #22
 8003a32:	d4ed      	bmi.n	8003a10 <_vfiprintf_r+0x4c>
 8003a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a36:	f000 fd1a 	bl	800446e <__retarget_lock_release_recursive>
 8003a3a:	e7e9      	b.n	8003a10 <_vfiprintf_r+0x4c>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a40:	2320      	movs	r3, #32
 8003a42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a4a:	2330      	movs	r3, #48	; 0x30
 8003a4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003c10 <_vfiprintf_r+0x24c>
 8003a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a54:	f04f 0901 	mov.w	r9, #1
 8003a58:	4623      	mov	r3, r4
 8003a5a:	469a      	mov	sl, r3
 8003a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a60:	b10a      	cbz	r2, 8003a66 <_vfiprintf_r+0xa2>
 8003a62:	2a25      	cmp	r2, #37	; 0x25
 8003a64:	d1f9      	bne.n	8003a5a <_vfiprintf_r+0x96>
 8003a66:	ebba 0b04 	subs.w	fp, sl, r4
 8003a6a:	d00b      	beq.n	8003a84 <_vfiprintf_r+0xc0>
 8003a6c:	465b      	mov	r3, fp
 8003a6e:	4622      	mov	r2, r4
 8003a70:	4629      	mov	r1, r5
 8003a72:	4630      	mov	r0, r6
 8003a74:	f7ff ff93 	bl	800399e <__sfputs_r>
 8003a78:	3001      	adds	r0, #1
 8003a7a:	f000 80aa 	beq.w	8003bd2 <_vfiprintf_r+0x20e>
 8003a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a80:	445a      	add	r2, fp
 8003a82:	9209      	str	r2, [sp, #36]	; 0x24
 8003a84:	f89a 3000 	ldrb.w	r3, [sl]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80a2 	beq.w	8003bd2 <_vfiprintf_r+0x20e>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f04f 32ff 	mov.w	r2, #4294967295
 8003a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a98:	f10a 0a01 	add.w	sl, sl, #1
 8003a9c:	9304      	str	r3, [sp, #16]
 8003a9e:	9307      	str	r3, [sp, #28]
 8003aa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003aa4:	931a      	str	r3, [sp, #104]	; 0x68
 8003aa6:	4654      	mov	r4, sl
 8003aa8:	2205      	movs	r2, #5
 8003aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aae:	4858      	ldr	r0, [pc, #352]	; (8003c10 <_vfiprintf_r+0x24c>)
 8003ab0:	f7fc fb9e 	bl	80001f0 <memchr>
 8003ab4:	9a04      	ldr	r2, [sp, #16]
 8003ab6:	b9d8      	cbnz	r0, 8003af0 <_vfiprintf_r+0x12c>
 8003ab8:	06d1      	lsls	r1, r2, #27
 8003aba:	bf44      	itt	mi
 8003abc:	2320      	movmi	r3, #32
 8003abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ac2:	0713      	lsls	r3, r2, #28
 8003ac4:	bf44      	itt	mi
 8003ac6:	232b      	movmi	r3, #43	; 0x2b
 8003ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003acc:	f89a 3000 	ldrb.w	r3, [sl]
 8003ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ad2:	d015      	beq.n	8003b00 <_vfiprintf_r+0x13c>
 8003ad4:	9a07      	ldr	r2, [sp, #28]
 8003ad6:	4654      	mov	r4, sl
 8003ad8:	2000      	movs	r0, #0
 8003ada:	f04f 0c0a 	mov.w	ip, #10
 8003ade:	4621      	mov	r1, r4
 8003ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ae4:	3b30      	subs	r3, #48	; 0x30
 8003ae6:	2b09      	cmp	r3, #9
 8003ae8:	d94e      	bls.n	8003b88 <_vfiprintf_r+0x1c4>
 8003aea:	b1b0      	cbz	r0, 8003b1a <_vfiprintf_r+0x156>
 8003aec:	9207      	str	r2, [sp, #28]
 8003aee:	e014      	b.n	8003b1a <_vfiprintf_r+0x156>
 8003af0:	eba0 0308 	sub.w	r3, r0, r8
 8003af4:	fa09 f303 	lsl.w	r3, r9, r3
 8003af8:	4313      	orrs	r3, r2
 8003afa:	9304      	str	r3, [sp, #16]
 8003afc:	46a2      	mov	sl, r4
 8003afe:	e7d2      	b.n	8003aa6 <_vfiprintf_r+0xe2>
 8003b00:	9b03      	ldr	r3, [sp, #12]
 8003b02:	1d19      	adds	r1, r3, #4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	9103      	str	r1, [sp, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bfbb      	ittet	lt
 8003b0c:	425b      	neglt	r3, r3
 8003b0e:	f042 0202 	orrlt.w	r2, r2, #2
 8003b12:	9307      	strge	r3, [sp, #28]
 8003b14:	9307      	strlt	r3, [sp, #28]
 8003b16:	bfb8      	it	lt
 8003b18:	9204      	strlt	r2, [sp, #16]
 8003b1a:	7823      	ldrb	r3, [r4, #0]
 8003b1c:	2b2e      	cmp	r3, #46	; 0x2e
 8003b1e:	d10c      	bne.n	8003b3a <_vfiprintf_r+0x176>
 8003b20:	7863      	ldrb	r3, [r4, #1]
 8003b22:	2b2a      	cmp	r3, #42	; 0x2a
 8003b24:	d135      	bne.n	8003b92 <_vfiprintf_r+0x1ce>
 8003b26:	9b03      	ldr	r3, [sp, #12]
 8003b28:	1d1a      	adds	r2, r3, #4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	9203      	str	r2, [sp, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bfb8      	it	lt
 8003b32:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b36:	3402      	adds	r4, #2
 8003b38:	9305      	str	r3, [sp, #20]
 8003b3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003c20 <_vfiprintf_r+0x25c>
 8003b3e:	7821      	ldrb	r1, [r4, #0]
 8003b40:	2203      	movs	r2, #3
 8003b42:	4650      	mov	r0, sl
 8003b44:	f7fc fb54 	bl	80001f0 <memchr>
 8003b48:	b140      	cbz	r0, 8003b5c <_vfiprintf_r+0x198>
 8003b4a:	2340      	movs	r3, #64	; 0x40
 8003b4c:	eba0 000a 	sub.w	r0, r0, sl
 8003b50:	fa03 f000 	lsl.w	r0, r3, r0
 8003b54:	9b04      	ldr	r3, [sp, #16]
 8003b56:	4303      	orrs	r3, r0
 8003b58:	3401      	adds	r4, #1
 8003b5a:	9304      	str	r3, [sp, #16]
 8003b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b60:	482c      	ldr	r0, [pc, #176]	; (8003c14 <_vfiprintf_r+0x250>)
 8003b62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b66:	2206      	movs	r2, #6
 8003b68:	f7fc fb42 	bl	80001f0 <memchr>
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	d03f      	beq.n	8003bf0 <_vfiprintf_r+0x22c>
 8003b70:	4b29      	ldr	r3, [pc, #164]	; (8003c18 <_vfiprintf_r+0x254>)
 8003b72:	bb1b      	cbnz	r3, 8003bbc <_vfiprintf_r+0x1f8>
 8003b74:	9b03      	ldr	r3, [sp, #12]
 8003b76:	3307      	adds	r3, #7
 8003b78:	f023 0307 	bic.w	r3, r3, #7
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	9303      	str	r3, [sp, #12]
 8003b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b82:	443b      	add	r3, r7
 8003b84:	9309      	str	r3, [sp, #36]	; 0x24
 8003b86:	e767      	b.n	8003a58 <_vfiprintf_r+0x94>
 8003b88:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	2001      	movs	r0, #1
 8003b90:	e7a5      	b.n	8003ade <_vfiprintf_r+0x11a>
 8003b92:	2300      	movs	r3, #0
 8003b94:	3401      	adds	r4, #1
 8003b96:	9305      	str	r3, [sp, #20]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f04f 0c0a 	mov.w	ip, #10
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ba4:	3a30      	subs	r2, #48	; 0x30
 8003ba6:	2a09      	cmp	r2, #9
 8003ba8:	d903      	bls.n	8003bb2 <_vfiprintf_r+0x1ee>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0c5      	beq.n	8003b3a <_vfiprintf_r+0x176>
 8003bae:	9105      	str	r1, [sp, #20]
 8003bb0:	e7c3      	b.n	8003b3a <_vfiprintf_r+0x176>
 8003bb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e7f0      	b.n	8003b9e <_vfiprintf_r+0x1da>
 8003bbc:	ab03      	add	r3, sp, #12
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	462a      	mov	r2, r5
 8003bc2:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <_vfiprintf_r+0x258>)
 8003bc4:	a904      	add	r1, sp, #16
 8003bc6:	4630      	mov	r0, r6
 8003bc8:	f3af 8000 	nop.w
 8003bcc:	4607      	mov	r7, r0
 8003bce:	1c78      	adds	r0, r7, #1
 8003bd0:	d1d6      	bne.n	8003b80 <_vfiprintf_r+0x1bc>
 8003bd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bd4:	07d9      	lsls	r1, r3, #31
 8003bd6:	d405      	bmi.n	8003be4 <_vfiprintf_r+0x220>
 8003bd8:	89ab      	ldrh	r3, [r5, #12]
 8003bda:	059a      	lsls	r2, r3, #22
 8003bdc:	d402      	bmi.n	8003be4 <_vfiprintf_r+0x220>
 8003bde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003be0:	f000 fc45 	bl	800446e <__retarget_lock_release_recursive>
 8003be4:	89ab      	ldrh	r3, [r5, #12]
 8003be6:	065b      	lsls	r3, r3, #25
 8003be8:	f53f af12 	bmi.w	8003a10 <_vfiprintf_r+0x4c>
 8003bec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bee:	e711      	b.n	8003a14 <_vfiprintf_r+0x50>
 8003bf0:	ab03      	add	r3, sp, #12
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	462a      	mov	r2, r5
 8003bf6:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <_vfiprintf_r+0x258>)
 8003bf8:	a904      	add	r1, sp, #16
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f000 f880 	bl	8003d00 <_printf_i>
 8003c00:	e7e4      	b.n	8003bcc <_vfiprintf_r+0x208>
 8003c02:	bf00      	nop
 8003c04:	08004d74 	.word	0x08004d74
 8003c08:	08004d94 	.word	0x08004d94
 8003c0c:	08004d54 	.word	0x08004d54
 8003c10:	08004d1e 	.word	0x08004d1e
 8003c14:	08004d28 	.word	0x08004d28
 8003c18:	00000000 	.word	0x00000000
 8003c1c:	0800399f 	.word	0x0800399f
 8003c20:	08004d24 	.word	0x08004d24

08003c24 <_printf_common>:
 8003c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c28:	4616      	mov	r6, r2
 8003c2a:	4699      	mov	r9, r3
 8003c2c:	688a      	ldr	r2, [r1, #8]
 8003c2e:	690b      	ldr	r3, [r1, #16]
 8003c30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c34:	4293      	cmp	r3, r2
 8003c36:	bfb8      	it	lt
 8003c38:	4613      	movlt	r3, r2
 8003c3a:	6033      	str	r3, [r6, #0]
 8003c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c40:	4607      	mov	r7, r0
 8003c42:	460c      	mov	r4, r1
 8003c44:	b10a      	cbz	r2, 8003c4a <_printf_common+0x26>
 8003c46:	3301      	adds	r3, #1
 8003c48:	6033      	str	r3, [r6, #0]
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	0699      	lsls	r1, r3, #26
 8003c4e:	bf42      	ittt	mi
 8003c50:	6833      	ldrmi	r3, [r6, #0]
 8003c52:	3302      	addmi	r3, #2
 8003c54:	6033      	strmi	r3, [r6, #0]
 8003c56:	6825      	ldr	r5, [r4, #0]
 8003c58:	f015 0506 	ands.w	r5, r5, #6
 8003c5c:	d106      	bne.n	8003c6c <_printf_common+0x48>
 8003c5e:	f104 0a19 	add.w	sl, r4, #25
 8003c62:	68e3      	ldr	r3, [r4, #12]
 8003c64:	6832      	ldr	r2, [r6, #0]
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	42ab      	cmp	r3, r5
 8003c6a:	dc26      	bgt.n	8003cba <_printf_common+0x96>
 8003c6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c70:	1e13      	subs	r3, r2, #0
 8003c72:	6822      	ldr	r2, [r4, #0]
 8003c74:	bf18      	it	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	0692      	lsls	r2, r2, #26
 8003c7a:	d42b      	bmi.n	8003cd4 <_printf_common+0xb0>
 8003c7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c80:	4649      	mov	r1, r9
 8003c82:	4638      	mov	r0, r7
 8003c84:	47c0      	blx	r8
 8003c86:	3001      	adds	r0, #1
 8003c88:	d01e      	beq.n	8003cc8 <_printf_common+0xa4>
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	68e5      	ldr	r5, [r4, #12]
 8003c8e:	6832      	ldr	r2, [r6, #0]
 8003c90:	f003 0306 	and.w	r3, r3, #6
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	bf08      	it	eq
 8003c98:	1aad      	subeq	r5, r5, r2
 8003c9a:	68a3      	ldr	r3, [r4, #8]
 8003c9c:	6922      	ldr	r2, [r4, #16]
 8003c9e:	bf0c      	ite	eq
 8003ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ca4:	2500      	movne	r5, #0
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	bfc4      	itt	gt
 8003caa:	1a9b      	subgt	r3, r3, r2
 8003cac:	18ed      	addgt	r5, r5, r3
 8003cae:	2600      	movs	r6, #0
 8003cb0:	341a      	adds	r4, #26
 8003cb2:	42b5      	cmp	r5, r6
 8003cb4:	d11a      	bne.n	8003cec <_printf_common+0xc8>
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	e008      	b.n	8003ccc <_printf_common+0xa8>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	4652      	mov	r2, sl
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	4638      	mov	r0, r7
 8003cc2:	47c0      	blx	r8
 8003cc4:	3001      	adds	r0, #1
 8003cc6:	d103      	bne.n	8003cd0 <_printf_common+0xac>
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd0:	3501      	adds	r5, #1
 8003cd2:	e7c6      	b.n	8003c62 <_printf_common+0x3e>
 8003cd4:	18e1      	adds	r1, r4, r3
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	2030      	movs	r0, #48	; 0x30
 8003cda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cde:	4422      	add	r2, r4
 8003ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ce4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ce8:	3302      	adds	r3, #2
 8003cea:	e7c7      	b.n	8003c7c <_printf_common+0x58>
 8003cec:	2301      	movs	r3, #1
 8003cee:	4622      	mov	r2, r4
 8003cf0:	4649      	mov	r1, r9
 8003cf2:	4638      	mov	r0, r7
 8003cf4:	47c0      	blx	r8
 8003cf6:	3001      	adds	r0, #1
 8003cf8:	d0e6      	beq.n	8003cc8 <_printf_common+0xa4>
 8003cfa:	3601      	adds	r6, #1
 8003cfc:	e7d9      	b.n	8003cb2 <_printf_common+0x8e>
	...

08003d00 <_printf_i>:
 8003d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d04:	460c      	mov	r4, r1
 8003d06:	4691      	mov	r9, r2
 8003d08:	7e27      	ldrb	r7, [r4, #24]
 8003d0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003d0c:	2f78      	cmp	r7, #120	; 0x78
 8003d0e:	4680      	mov	r8, r0
 8003d10:	469a      	mov	sl, r3
 8003d12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d16:	d807      	bhi.n	8003d28 <_printf_i+0x28>
 8003d18:	2f62      	cmp	r7, #98	; 0x62
 8003d1a:	d80a      	bhi.n	8003d32 <_printf_i+0x32>
 8003d1c:	2f00      	cmp	r7, #0
 8003d1e:	f000 80d8 	beq.w	8003ed2 <_printf_i+0x1d2>
 8003d22:	2f58      	cmp	r7, #88	; 0x58
 8003d24:	f000 80a3 	beq.w	8003e6e <_printf_i+0x16e>
 8003d28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d30:	e03a      	b.n	8003da8 <_printf_i+0xa8>
 8003d32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d36:	2b15      	cmp	r3, #21
 8003d38:	d8f6      	bhi.n	8003d28 <_printf_i+0x28>
 8003d3a:	a001      	add	r0, pc, #4	; (adr r0, 8003d40 <_printf_i+0x40>)
 8003d3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003d40:	08003d99 	.word	0x08003d99
 8003d44:	08003dad 	.word	0x08003dad
 8003d48:	08003d29 	.word	0x08003d29
 8003d4c:	08003d29 	.word	0x08003d29
 8003d50:	08003d29 	.word	0x08003d29
 8003d54:	08003d29 	.word	0x08003d29
 8003d58:	08003dad 	.word	0x08003dad
 8003d5c:	08003d29 	.word	0x08003d29
 8003d60:	08003d29 	.word	0x08003d29
 8003d64:	08003d29 	.word	0x08003d29
 8003d68:	08003d29 	.word	0x08003d29
 8003d6c:	08003eb9 	.word	0x08003eb9
 8003d70:	08003ddd 	.word	0x08003ddd
 8003d74:	08003e9b 	.word	0x08003e9b
 8003d78:	08003d29 	.word	0x08003d29
 8003d7c:	08003d29 	.word	0x08003d29
 8003d80:	08003edb 	.word	0x08003edb
 8003d84:	08003d29 	.word	0x08003d29
 8003d88:	08003ddd 	.word	0x08003ddd
 8003d8c:	08003d29 	.word	0x08003d29
 8003d90:	08003d29 	.word	0x08003d29
 8003d94:	08003ea3 	.word	0x08003ea3
 8003d98:	680b      	ldr	r3, [r1, #0]
 8003d9a:	1d1a      	adds	r2, r3, #4
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	600a      	str	r2, [r1, #0]
 8003da0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0a3      	b.n	8003ef4 <_printf_i+0x1f4>
 8003dac:	6825      	ldr	r5, [r4, #0]
 8003dae:	6808      	ldr	r0, [r1, #0]
 8003db0:	062e      	lsls	r6, r5, #24
 8003db2:	f100 0304 	add.w	r3, r0, #4
 8003db6:	d50a      	bpl.n	8003dce <_printf_i+0xce>
 8003db8:	6805      	ldr	r5, [r0, #0]
 8003dba:	600b      	str	r3, [r1, #0]
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	da03      	bge.n	8003dc8 <_printf_i+0xc8>
 8003dc0:	232d      	movs	r3, #45	; 0x2d
 8003dc2:	426d      	negs	r5, r5
 8003dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dc8:	485e      	ldr	r0, [pc, #376]	; (8003f44 <_printf_i+0x244>)
 8003dca:	230a      	movs	r3, #10
 8003dcc:	e019      	b.n	8003e02 <_printf_i+0x102>
 8003dce:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003dd2:	6805      	ldr	r5, [r0, #0]
 8003dd4:	600b      	str	r3, [r1, #0]
 8003dd6:	bf18      	it	ne
 8003dd8:	b22d      	sxthne	r5, r5
 8003dda:	e7ef      	b.n	8003dbc <_printf_i+0xbc>
 8003ddc:	680b      	ldr	r3, [r1, #0]
 8003dde:	6825      	ldr	r5, [r4, #0]
 8003de0:	1d18      	adds	r0, r3, #4
 8003de2:	6008      	str	r0, [r1, #0]
 8003de4:	0628      	lsls	r0, r5, #24
 8003de6:	d501      	bpl.n	8003dec <_printf_i+0xec>
 8003de8:	681d      	ldr	r5, [r3, #0]
 8003dea:	e002      	b.n	8003df2 <_printf_i+0xf2>
 8003dec:	0669      	lsls	r1, r5, #25
 8003dee:	d5fb      	bpl.n	8003de8 <_printf_i+0xe8>
 8003df0:	881d      	ldrh	r5, [r3, #0]
 8003df2:	4854      	ldr	r0, [pc, #336]	; (8003f44 <_printf_i+0x244>)
 8003df4:	2f6f      	cmp	r7, #111	; 0x6f
 8003df6:	bf0c      	ite	eq
 8003df8:	2308      	moveq	r3, #8
 8003dfa:	230a      	movne	r3, #10
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e02:	6866      	ldr	r6, [r4, #4]
 8003e04:	60a6      	str	r6, [r4, #8]
 8003e06:	2e00      	cmp	r6, #0
 8003e08:	bfa2      	ittt	ge
 8003e0a:	6821      	ldrge	r1, [r4, #0]
 8003e0c:	f021 0104 	bicge.w	r1, r1, #4
 8003e10:	6021      	strge	r1, [r4, #0]
 8003e12:	b90d      	cbnz	r5, 8003e18 <_printf_i+0x118>
 8003e14:	2e00      	cmp	r6, #0
 8003e16:	d04d      	beq.n	8003eb4 <_printf_i+0x1b4>
 8003e18:	4616      	mov	r6, r2
 8003e1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e1e:	fb03 5711 	mls	r7, r3, r1, r5
 8003e22:	5dc7      	ldrb	r7, [r0, r7]
 8003e24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e28:	462f      	mov	r7, r5
 8003e2a:	42bb      	cmp	r3, r7
 8003e2c:	460d      	mov	r5, r1
 8003e2e:	d9f4      	bls.n	8003e1a <_printf_i+0x11a>
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d10b      	bne.n	8003e4c <_printf_i+0x14c>
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	07df      	lsls	r7, r3, #31
 8003e38:	d508      	bpl.n	8003e4c <_printf_i+0x14c>
 8003e3a:	6923      	ldr	r3, [r4, #16]
 8003e3c:	6861      	ldr	r1, [r4, #4]
 8003e3e:	4299      	cmp	r1, r3
 8003e40:	bfde      	ittt	le
 8003e42:	2330      	movle	r3, #48	; 0x30
 8003e44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e4c:	1b92      	subs	r2, r2, r6
 8003e4e:	6122      	str	r2, [r4, #16]
 8003e50:	f8cd a000 	str.w	sl, [sp]
 8003e54:	464b      	mov	r3, r9
 8003e56:	aa03      	add	r2, sp, #12
 8003e58:	4621      	mov	r1, r4
 8003e5a:	4640      	mov	r0, r8
 8003e5c:	f7ff fee2 	bl	8003c24 <_printf_common>
 8003e60:	3001      	adds	r0, #1
 8003e62:	d14c      	bne.n	8003efe <_printf_i+0x1fe>
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295
 8003e68:	b004      	add	sp, #16
 8003e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e6e:	4835      	ldr	r0, [pc, #212]	; (8003f44 <_printf_i+0x244>)
 8003e70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	680e      	ldr	r6, [r1, #0]
 8003e78:	061f      	lsls	r7, r3, #24
 8003e7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003e7e:	600e      	str	r6, [r1, #0]
 8003e80:	d514      	bpl.n	8003eac <_printf_i+0x1ac>
 8003e82:	07d9      	lsls	r1, r3, #31
 8003e84:	bf44      	itt	mi
 8003e86:	f043 0320 	orrmi.w	r3, r3, #32
 8003e8a:	6023      	strmi	r3, [r4, #0]
 8003e8c:	b91d      	cbnz	r5, 8003e96 <_printf_i+0x196>
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	f023 0320 	bic.w	r3, r3, #32
 8003e94:	6023      	str	r3, [r4, #0]
 8003e96:	2310      	movs	r3, #16
 8003e98:	e7b0      	b.n	8003dfc <_printf_i+0xfc>
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	f043 0320 	orr.w	r3, r3, #32
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	2378      	movs	r3, #120	; 0x78
 8003ea4:	4828      	ldr	r0, [pc, #160]	; (8003f48 <_printf_i+0x248>)
 8003ea6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003eaa:	e7e3      	b.n	8003e74 <_printf_i+0x174>
 8003eac:	065e      	lsls	r6, r3, #25
 8003eae:	bf48      	it	mi
 8003eb0:	b2ad      	uxthmi	r5, r5
 8003eb2:	e7e6      	b.n	8003e82 <_printf_i+0x182>
 8003eb4:	4616      	mov	r6, r2
 8003eb6:	e7bb      	b.n	8003e30 <_printf_i+0x130>
 8003eb8:	680b      	ldr	r3, [r1, #0]
 8003eba:	6826      	ldr	r6, [r4, #0]
 8003ebc:	6960      	ldr	r0, [r4, #20]
 8003ebe:	1d1d      	adds	r5, r3, #4
 8003ec0:	600d      	str	r5, [r1, #0]
 8003ec2:	0635      	lsls	r5, r6, #24
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	d501      	bpl.n	8003ecc <_printf_i+0x1cc>
 8003ec8:	6018      	str	r0, [r3, #0]
 8003eca:	e002      	b.n	8003ed2 <_printf_i+0x1d2>
 8003ecc:	0671      	lsls	r1, r6, #25
 8003ece:	d5fb      	bpl.n	8003ec8 <_printf_i+0x1c8>
 8003ed0:	8018      	strh	r0, [r3, #0]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	6123      	str	r3, [r4, #16]
 8003ed6:	4616      	mov	r6, r2
 8003ed8:	e7ba      	b.n	8003e50 <_printf_i+0x150>
 8003eda:	680b      	ldr	r3, [r1, #0]
 8003edc:	1d1a      	adds	r2, r3, #4
 8003ede:	600a      	str	r2, [r1, #0]
 8003ee0:	681e      	ldr	r6, [r3, #0]
 8003ee2:	6862      	ldr	r2, [r4, #4]
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4630      	mov	r0, r6
 8003ee8:	f7fc f982 	bl	80001f0 <memchr>
 8003eec:	b108      	cbz	r0, 8003ef2 <_printf_i+0x1f2>
 8003eee:	1b80      	subs	r0, r0, r6
 8003ef0:	6060      	str	r0, [r4, #4]
 8003ef2:	6863      	ldr	r3, [r4, #4]
 8003ef4:	6123      	str	r3, [r4, #16]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003efc:	e7a8      	b.n	8003e50 <_printf_i+0x150>
 8003efe:	6923      	ldr	r3, [r4, #16]
 8003f00:	4632      	mov	r2, r6
 8003f02:	4649      	mov	r1, r9
 8003f04:	4640      	mov	r0, r8
 8003f06:	47d0      	blx	sl
 8003f08:	3001      	adds	r0, #1
 8003f0a:	d0ab      	beq.n	8003e64 <_printf_i+0x164>
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	079b      	lsls	r3, r3, #30
 8003f10:	d413      	bmi.n	8003f3a <_printf_i+0x23a>
 8003f12:	68e0      	ldr	r0, [r4, #12]
 8003f14:	9b03      	ldr	r3, [sp, #12]
 8003f16:	4298      	cmp	r0, r3
 8003f18:	bfb8      	it	lt
 8003f1a:	4618      	movlt	r0, r3
 8003f1c:	e7a4      	b.n	8003e68 <_printf_i+0x168>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4632      	mov	r2, r6
 8003f22:	4649      	mov	r1, r9
 8003f24:	4640      	mov	r0, r8
 8003f26:	47d0      	blx	sl
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d09b      	beq.n	8003e64 <_printf_i+0x164>
 8003f2c:	3501      	adds	r5, #1
 8003f2e:	68e3      	ldr	r3, [r4, #12]
 8003f30:	9903      	ldr	r1, [sp, #12]
 8003f32:	1a5b      	subs	r3, r3, r1
 8003f34:	42ab      	cmp	r3, r5
 8003f36:	dcf2      	bgt.n	8003f1e <_printf_i+0x21e>
 8003f38:	e7eb      	b.n	8003f12 <_printf_i+0x212>
 8003f3a:	2500      	movs	r5, #0
 8003f3c:	f104 0619 	add.w	r6, r4, #25
 8003f40:	e7f5      	b.n	8003f2e <_printf_i+0x22e>
 8003f42:	bf00      	nop
 8003f44:	08004d2f 	.word	0x08004d2f
 8003f48:	08004d40 	.word	0x08004d40

08003f4c <_sbrk_r>:
 8003f4c:	b538      	push	{r3, r4, r5, lr}
 8003f4e:	4d06      	ldr	r5, [pc, #24]	; (8003f68 <_sbrk_r+0x1c>)
 8003f50:	2300      	movs	r3, #0
 8003f52:	4604      	mov	r4, r0
 8003f54:	4608      	mov	r0, r1
 8003f56:	602b      	str	r3, [r5, #0]
 8003f58:	f7fe fa40 	bl	80023dc <_sbrk>
 8003f5c:	1c43      	adds	r3, r0, #1
 8003f5e:	d102      	bne.n	8003f66 <_sbrk_r+0x1a>
 8003f60:	682b      	ldr	r3, [r5, #0]
 8003f62:	b103      	cbz	r3, 8003f66 <_sbrk_r+0x1a>
 8003f64:	6023      	str	r3, [r4, #0]
 8003f66:	bd38      	pop	{r3, r4, r5, pc}
 8003f68:	200006e4 	.word	0x200006e4

08003f6c <__swbuf_r>:
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	460e      	mov	r6, r1
 8003f70:	4614      	mov	r4, r2
 8003f72:	4605      	mov	r5, r0
 8003f74:	b118      	cbz	r0, 8003f7e <__swbuf_r+0x12>
 8003f76:	6983      	ldr	r3, [r0, #24]
 8003f78:	b90b      	cbnz	r3, 8003f7e <__swbuf_r+0x12>
 8003f7a:	f000 f9d9 	bl	8004330 <__sinit>
 8003f7e:	4b21      	ldr	r3, [pc, #132]	; (8004004 <__swbuf_r+0x98>)
 8003f80:	429c      	cmp	r4, r3
 8003f82:	d12b      	bne.n	8003fdc <__swbuf_r+0x70>
 8003f84:	686c      	ldr	r4, [r5, #4]
 8003f86:	69a3      	ldr	r3, [r4, #24]
 8003f88:	60a3      	str	r3, [r4, #8]
 8003f8a:	89a3      	ldrh	r3, [r4, #12]
 8003f8c:	071a      	lsls	r2, r3, #28
 8003f8e:	d52f      	bpl.n	8003ff0 <__swbuf_r+0x84>
 8003f90:	6923      	ldr	r3, [r4, #16]
 8003f92:	b36b      	cbz	r3, 8003ff0 <__swbuf_r+0x84>
 8003f94:	6923      	ldr	r3, [r4, #16]
 8003f96:	6820      	ldr	r0, [r4, #0]
 8003f98:	1ac0      	subs	r0, r0, r3
 8003f9a:	6963      	ldr	r3, [r4, #20]
 8003f9c:	b2f6      	uxtb	r6, r6
 8003f9e:	4283      	cmp	r3, r0
 8003fa0:	4637      	mov	r7, r6
 8003fa2:	dc04      	bgt.n	8003fae <__swbuf_r+0x42>
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	f000 f92e 	bl	8004208 <_fflush_r>
 8003fac:	bb30      	cbnz	r0, 8003ffc <__swbuf_r+0x90>
 8003fae:	68a3      	ldr	r3, [r4, #8]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	60a3      	str	r3, [r4, #8]
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	6022      	str	r2, [r4, #0]
 8003fba:	701e      	strb	r6, [r3, #0]
 8003fbc:	6963      	ldr	r3, [r4, #20]
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	4283      	cmp	r3, r0
 8003fc2:	d004      	beq.n	8003fce <__swbuf_r+0x62>
 8003fc4:	89a3      	ldrh	r3, [r4, #12]
 8003fc6:	07db      	lsls	r3, r3, #31
 8003fc8:	d506      	bpl.n	8003fd8 <__swbuf_r+0x6c>
 8003fca:	2e0a      	cmp	r6, #10
 8003fcc:	d104      	bne.n	8003fd8 <__swbuf_r+0x6c>
 8003fce:	4621      	mov	r1, r4
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	f000 f919 	bl	8004208 <_fflush_r>
 8003fd6:	b988      	cbnz	r0, 8003ffc <__swbuf_r+0x90>
 8003fd8:	4638      	mov	r0, r7
 8003fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <__swbuf_r+0x9c>)
 8003fde:	429c      	cmp	r4, r3
 8003fe0:	d101      	bne.n	8003fe6 <__swbuf_r+0x7a>
 8003fe2:	68ac      	ldr	r4, [r5, #8]
 8003fe4:	e7cf      	b.n	8003f86 <__swbuf_r+0x1a>
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <__swbuf_r+0xa0>)
 8003fe8:	429c      	cmp	r4, r3
 8003fea:	bf08      	it	eq
 8003fec:	68ec      	ldreq	r4, [r5, #12]
 8003fee:	e7ca      	b.n	8003f86 <__swbuf_r+0x1a>
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	f000 f80c 	bl	8004010 <__swsetup_r>
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d0cb      	beq.n	8003f94 <__swbuf_r+0x28>
 8003ffc:	f04f 37ff 	mov.w	r7, #4294967295
 8004000:	e7ea      	b.n	8003fd8 <__swbuf_r+0x6c>
 8004002:	bf00      	nop
 8004004:	08004d74 	.word	0x08004d74
 8004008:	08004d94 	.word	0x08004d94
 800400c:	08004d54 	.word	0x08004d54

08004010 <__swsetup_r>:
 8004010:	4b32      	ldr	r3, [pc, #200]	; (80040dc <__swsetup_r+0xcc>)
 8004012:	b570      	push	{r4, r5, r6, lr}
 8004014:	681d      	ldr	r5, [r3, #0]
 8004016:	4606      	mov	r6, r0
 8004018:	460c      	mov	r4, r1
 800401a:	b125      	cbz	r5, 8004026 <__swsetup_r+0x16>
 800401c:	69ab      	ldr	r3, [r5, #24]
 800401e:	b913      	cbnz	r3, 8004026 <__swsetup_r+0x16>
 8004020:	4628      	mov	r0, r5
 8004022:	f000 f985 	bl	8004330 <__sinit>
 8004026:	4b2e      	ldr	r3, [pc, #184]	; (80040e0 <__swsetup_r+0xd0>)
 8004028:	429c      	cmp	r4, r3
 800402a:	d10f      	bne.n	800404c <__swsetup_r+0x3c>
 800402c:	686c      	ldr	r4, [r5, #4]
 800402e:	89a3      	ldrh	r3, [r4, #12]
 8004030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004034:	0719      	lsls	r1, r3, #28
 8004036:	d42c      	bmi.n	8004092 <__swsetup_r+0x82>
 8004038:	06dd      	lsls	r5, r3, #27
 800403a:	d411      	bmi.n	8004060 <__swsetup_r+0x50>
 800403c:	2309      	movs	r3, #9
 800403e:	6033      	str	r3, [r6, #0]
 8004040:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004044:	81a3      	strh	r3, [r4, #12]
 8004046:	f04f 30ff 	mov.w	r0, #4294967295
 800404a:	e03e      	b.n	80040ca <__swsetup_r+0xba>
 800404c:	4b25      	ldr	r3, [pc, #148]	; (80040e4 <__swsetup_r+0xd4>)
 800404e:	429c      	cmp	r4, r3
 8004050:	d101      	bne.n	8004056 <__swsetup_r+0x46>
 8004052:	68ac      	ldr	r4, [r5, #8]
 8004054:	e7eb      	b.n	800402e <__swsetup_r+0x1e>
 8004056:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <__swsetup_r+0xd8>)
 8004058:	429c      	cmp	r4, r3
 800405a:	bf08      	it	eq
 800405c:	68ec      	ldreq	r4, [r5, #12]
 800405e:	e7e6      	b.n	800402e <__swsetup_r+0x1e>
 8004060:	0758      	lsls	r0, r3, #29
 8004062:	d512      	bpl.n	800408a <__swsetup_r+0x7a>
 8004064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004066:	b141      	cbz	r1, 800407a <__swsetup_r+0x6a>
 8004068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800406c:	4299      	cmp	r1, r3
 800406e:	d002      	beq.n	8004076 <__swsetup_r+0x66>
 8004070:	4630      	mov	r0, r6
 8004072:	f7ff fa77 	bl	8003564 <_free_r>
 8004076:	2300      	movs	r3, #0
 8004078:	6363      	str	r3, [r4, #52]	; 0x34
 800407a:	89a3      	ldrh	r3, [r4, #12]
 800407c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004080:	81a3      	strh	r3, [r4, #12]
 8004082:	2300      	movs	r3, #0
 8004084:	6063      	str	r3, [r4, #4]
 8004086:	6923      	ldr	r3, [r4, #16]
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	89a3      	ldrh	r3, [r4, #12]
 800408c:	f043 0308 	orr.w	r3, r3, #8
 8004090:	81a3      	strh	r3, [r4, #12]
 8004092:	6923      	ldr	r3, [r4, #16]
 8004094:	b94b      	cbnz	r3, 80040aa <__swsetup_r+0x9a>
 8004096:	89a3      	ldrh	r3, [r4, #12]
 8004098:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800409c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a0:	d003      	beq.n	80040aa <__swsetup_r+0x9a>
 80040a2:	4621      	mov	r1, r4
 80040a4:	4630      	mov	r0, r6
 80040a6:	f000 fa07 	bl	80044b8 <__smakebuf_r>
 80040aa:	89a0      	ldrh	r0, [r4, #12]
 80040ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040b0:	f010 0301 	ands.w	r3, r0, #1
 80040b4:	d00a      	beq.n	80040cc <__swsetup_r+0xbc>
 80040b6:	2300      	movs	r3, #0
 80040b8:	60a3      	str	r3, [r4, #8]
 80040ba:	6963      	ldr	r3, [r4, #20]
 80040bc:	425b      	negs	r3, r3
 80040be:	61a3      	str	r3, [r4, #24]
 80040c0:	6923      	ldr	r3, [r4, #16]
 80040c2:	b943      	cbnz	r3, 80040d6 <__swsetup_r+0xc6>
 80040c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040c8:	d1ba      	bne.n	8004040 <__swsetup_r+0x30>
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	0781      	lsls	r1, r0, #30
 80040ce:	bf58      	it	pl
 80040d0:	6963      	ldrpl	r3, [r4, #20]
 80040d2:	60a3      	str	r3, [r4, #8]
 80040d4:	e7f4      	b.n	80040c0 <__swsetup_r+0xb0>
 80040d6:	2000      	movs	r0, #0
 80040d8:	e7f7      	b.n	80040ca <__swsetup_r+0xba>
 80040da:	bf00      	nop
 80040dc:	20000004 	.word	0x20000004
 80040e0:	08004d74 	.word	0x08004d74
 80040e4:	08004d94 	.word	0x08004d94
 80040e8:	08004d54 	.word	0x08004d54

080040ec <abort>:
 80040ec:	b508      	push	{r3, lr}
 80040ee:	2006      	movs	r0, #6
 80040f0:	f000 fa96 	bl	8004620 <raise>
 80040f4:	2001      	movs	r0, #1
 80040f6:	f7fe f8f9 	bl	80022ec <_exit>
	...

080040fc <__sflush_r>:
 80040fc:	898a      	ldrh	r2, [r1, #12]
 80040fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004102:	4605      	mov	r5, r0
 8004104:	0710      	lsls	r0, r2, #28
 8004106:	460c      	mov	r4, r1
 8004108:	d458      	bmi.n	80041bc <__sflush_r+0xc0>
 800410a:	684b      	ldr	r3, [r1, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	dc05      	bgt.n	800411c <__sflush_r+0x20>
 8004110:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	dc02      	bgt.n	800411c <__sflush_r+0x20>
 8004116:	2000      	movs	r0, #0
 8004118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800411c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800411e:	2e00      	cmp	r6, #0
 8004120:	d0f9      	beq.n	8004116 <__sflush_r+0x1a>
 8004122:	2300      	movs	r3, #0
 8004124:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004128:	682f      	ldr	r7, [r5, #0]
 800412a:	602b      	str	r3, [r5, #0]
 800412c:	d032      	beq.n	8004194 <__sflush_r+0x98>
 800412e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004130:	89a3      	ldrh	r3, [r4, #12]
 8004132:	075a      	lsls	r2, r3, #29
 8004134:	d505      	bpl.n	8004142 <__sflush_r+0x46>
 8004136:	6863      	ldr	r3, [r4, #4]
 8004138:	1ac0      	subs	r0, r0, r3
 800413a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800413c:	b10b      	cbz	r3, 8004142 <__sflush_r+0x46>
 800413e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004140:	1ac0      	subs	r0, r0, r3
 8004142:	2300      	movs	r3, #0
 8004144:	4602      	mov	r2, r0
 8004146:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004148:	6a21      	ldr	r1, [r4, #32]
 800414a:	4628      	mov	r0, r5
 800414c:	47b0      	blx	r6
 800414e:	1c43      	adds	r3, r0, #1
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	d106      	bne.n	8004162 <__sflush_r+0x66>
 8004154:	6829      	ldr	r1, [r5, #0]
 8004156:	291d      	cmp	r1, #29
 8004158:	d82c      	bhi.n	80041b4 <__sflush_r+0xb8>
 800415a:	4a2a      	ldr	r2, [pc, #168]	; (8004204 <__sflush_r+0x108>)
 800415c:	40ca      	lsrs	r2, r1
 800415e:	07d6      	lsls	r6, r2, #31
 8004160:	d528      	bpl.n	80041b4 <__sflush_r+0xb8>
 8004162:	2200      	movs	r2, #0
 8004164:	6062      	str	r2, [r4, #4]
 8004166:	04d9      	lsls	r1, r3, #19
 8004168:	6922      	ldr	r2, [r4, #16]
 800416a:	6022      	str	r2, [r4, #0]
 800416c:	d504      	bpl.n	8004178 <__sflush_r+0x7c>
 800416e:	1c42      	adds	r2, r0, #1
 8004170:	d101      	bne.n	8004176 <__sflush_r+0x7a>
 8004172:	682b      	ldr	r3, [r5, #0]
 8004174:	b903      	cbnz	r3, 8004178 <__sflush_r+0x7c>
 8004176:	6560      	str	r0, [r4, #84]	; 0x54
 8004178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800417a:	602f      	str	r7, [r5, #0]
 800417c:	2900      	cmp	r1, #0
 800417e:	d0ca      	beq.n	8004116 <__sflush_r+0x1a>
 8004180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004184:	4299      	cmp	r1, r3
 8004186:	d002      	beq.n	800418e <__sflush_r+0x92>
 8004188:	4628      	mov	r0, r5
 800418a:	f7ff f9eb 	bl	8003564 <_free_r>
 800418e:	2000      	movs	r0, #0
 8004190:	6360      	str	r0, [r4, #52]	; 0x34
 8004192:	e7c1      	b.n	8004118 <__sflush_r+0x1c>
 8004194:	6a21      	ldr	r1, [r4, #32]
 8004196:	2301      	movs	r3, #1
 8004198:	4628      	mov	r0, r5
 800419a:	47b0      	blx	r6
 800419c:	1c41      	adds	r1, r0, #1
 800419e:	d1c7      	bne.n	8004130 <__sflush_r+0x34>
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0c4      	beq.n	8004130 <__sflush_r+0x34>
 80041a6:	2b1d      	cmp	r3, #29
 80041a8:	d001      	beq.n	80041ae <__sflush_r+0xb2>
 80041aa:	2b16      	cmp	r3, #22
 80041ac:	d101      	bne.n	80041b2 <__sflush_r+0xb6>
 80041ae:	602f      	str	r7, [r5, #0]
 80041b0:	e7b1      	b.n	8004116 <__sflush_r+0x1a>
 80041b2:	89a3      	ldrh	r3, [r4, #12]
 80041b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041b8:	81a3      	strh	r3, [r4, #12]
 80041ba:	e7ad      	b.n	8004118 <__sflush_r+0x1c>
 80041bc:	690f      	ldr	r7, [r1, #16]
 80041be:	2f00      	cmp	r7, #0
 80041c0:	d0a9      	beq.n	8004116 <__sflush_r+0x1a>
 80041c2:	0793      	lsls	r3, r2, #30
 80041c4:	680e      	ldr	r6, [r1, #0]
 80041c6:	bf08      	it	eq
 80041c8:	694b      	ldreq	r3, [r1, #20]
 80041ca:	600f      	str	r7, [r1, #0]
 80041cc:	bf18      	it	ne
 80041ce:	2300      	movne	r3, #0
 80041d0:	eba6 0807 	sub.w	r8, r6, r7
 80041d4:	608b      	str	r3, [r1, #8]
 80041d6:	f1b8 0f00 	cmp.w	r8, #0
 80041da:	dd9c      	ble.n	8004116 <__sflush_r+0x1a>
 80041dc:	6a21      	ldr	r1, [r4, #32]
 80041de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041e0:	4643      	mov	r3, r8
 80041e2:	463a      	mov	r2, r7
 80041e4:	4628      	mov	r0, r5
 80041e6:	47b0      	blx	r6
 80041e8:	2800      	cmp	r0, #0
 80041ea:	dc06      	bgt.n	80041fa <__sflush_r+0xfe>
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f2:	81a3      	strh	r3, [r4, #12]
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	e78e      	b.n	8004118 <__sflush_r+0x1c>
 80041fa:	4407      	add	r7, r0
 80041fc:	eba8 0800 	sub.w	r8, r8, r0
 8004200:	e7e9      	b.n	80041d6 <__sflush_r+0xda>
 8004202:	bf00      	nop
 8004204:	20400001 	.word	0x20400001

08004208 <_fflush_r>:
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	690b      	ldr	r3, [r1, #16]
 800420c:	4605      	mov	r5, r0
 800420e:	460c      	mov	r4, r1
 8004210:	b913      	cbnz	r3, 8004218 <_fflush_r+0x10>
 8004212:	2500      	movs	r5, #0
 8004214:	4628      	mov	r0, r5
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	b118      	cbz	r0, 8004222 <_fflush_r+0x1a>
 800421a:	6983      	ldr	r3, [r0, #24]
 800421c:	b90b      	cbnz	r3, 8004222 <_fflush_r+0x1a>
 800421e:	f000 f887 	bl	8004330 <__sinit>
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <_fflush_r+0x6c>)
 8004224:	429c      	cmp	r4, r3
 8004226:	d11b      	bne.n	8004260 <_fflush_r+0x58>
 8004228:	686c      	ldr	r4, [r5, #4]
 800422a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0ef      	beq.n	8004212 <_fflush_r+0xa>
 8004232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004234:	07d0      	lsls	r0, r2, #31
 8004236:	d404      	bmi.n	8004242 <_fflush_r+0x3a>
 8004238:	0599      	lsls	r1, r3, #22
 800423a:	d402      	bmi.n	8004242 <_fflush_r+0x3a>
 800423c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800423e:	f000 f915 	bl	800446c <__retarget_lock_acquire_recursive>
 8004242:	4628      	mov	r0, r5
 8004244:	4621      	mov	r1, r4
 8004246:	f7ff ff59 	bl	80040fc <__sflush_r>
 800424a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800424c:	07da      	lsls	r2, r3, #31
 800424e:	4605      	mov	r5, r0
 8004250:	d4e0      	bmi.n	8004214 <_fflush_r+0xc>
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	059b      	lsls	r3, r3, #22
 8004256:	d4dd      	bmi.n	8004214 <_fflush_r+0xc>
 8004258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800425a:	f000 f908 	bl	800446e <__retarget_lock_release_recursive>
 800425e:	e7d9      	b.n	8004214 <_fflush_r+0xc>
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <_fflush_r+0x70>)
 8004262:	429c      	cmp	r4, r3
 8004264:	d101      	bne.n	800426a <_fflush_r+0x62>
 8004266:	68ac      	ldr	r4, [r5, #8]
 8004268:	e7df      	b.n	800422a <_fflush_r+0x22>
 800426a:	4b04      	ldr	r3, [pc, #16]	; (800427c <_fflush_r+0x74>)
 800426c:	429c      	cmp	r4, r3
 800426e:	bf08      	it	eq
 8004270:	68ec      	ldreq	r4, [r5, #12]
 8004272:	e7da      	b.n	800422a <_fflush_r+0x22>
 8004274:	08004d74 	.word	0x08004d74
 8004278:	08004d94 	.word	0x08004d94
 800427c:	08004d54 	.word	0x08004d54

08004280 <std>:
 8004280:	2300      	movs	r3, #0
 8004282:	b510      	push	{r4, lr}
 8004284:	4604      	mov	r4, r0
 8004286:	e9c0 3300 	strd	r3, r3, [r0]
 800428a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800428e:	6083      	str	r3, [r0, #8]
 8004290:	8181      	strh	r1, [r0, #12]
 8004292:	6643      	str	r3, [r0, #100]	; 0x64
 8004294:	81c2      	strh	r2, [r0, #14]
 8004296:	6183      	str	r3, [r0, #24]
 8004298:	4619      	mov	r1, r3
 800429a:	2208      	movs	r2, #8
 800429c:	305c      	adds	r0, #92	; 0x5c
 800429e:	f7ff f8c1 	bl	8003424 <memset>
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <std+0x38>)
 80042a4:	6263      	str	r3, [r4, #36]	; 0x24
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <std+0x3c>)
 80042a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <std+0x40>)
 80042ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <std+0x44>)
 80042b0:	6224      	str	r4, [r4, #32]
 80042b2:	6323      	str	r3, [r4, #48]	; 0x30
 80042b4:	bd10      	pop	{r4, pc}
 80042b6:	bf00      	nop
 80042b8:	08004659 	.word	0x08004659
 80042bc:	0800467b 	.word	0x0800467b
 80042c0:	080046b3 	.word	0x080046b3
 80042c4:	080046d7 	.word	0x080046d7

080042c8 <_cleanup_r>:
 80042c8:	4901      	ldr	r1, [pc, #4]	; (80042d0 <_cleanup_r+0x8>)
 80042ca:	f000 b8af 	b.w	800442c <_fwalk_reent>
 80042ce:	bf00      	nop
 80042d0:	08004209 	.word	0x08004209

080042d4 <__sfmoreglue>:
 80042d4:	b570      	push	{r4, r5, r6, lr}
 80042d6:	1e4a      	subs	r2, r1, #1
 80042d8:	2568      	movs	r5, #104	; 0x68
 80042da:	4355      	muls	r5, r2
 80042dc:	460e      	mov	r6, r1
 80042de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042e2:	f7ff f98f 	bl	8003604 <_malloc_r>
 80042e6:	4604      	mov	r4, r0
 80042e8:	b140      	cbz	r0, 80042fc <__sfmoreglue+0x28>
 80042ea:	2100      	movs	r1, #0
 80042ec:	e9c0 1600 	strd	r1, r6, [r0]
 80042f0:	300c      	adds	r0, #12
 80042f2:	60a0      	str	r0, [r4, #8]
 80042f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042f8:	f7ff f894 	bl	8003424 <memset>
 80042fc:	4620      	mov	r0, r4
 80042fe:	bd70      	pop	{r4, r5, r6, pc}

08004300 <__sfp_lock_acquire>:
 8004300:	4801      	ldr	r0, [pc, #4]	; (8004308 <__sfp_lock_acquire+0x8>)
 8004302:	f000 b8b3 	b.w	800446c <__retarget_lock_acquire_recursive>
 8004306:	bf00      	nop
 8004308:	200006e0 	.word	0x200006e0

0800430c <__sfp_lock_release>:
 800430c:	4801      	ldr	r0, [pc, #4]	; (8004314 <__sfp_lock_release+0x8>)
 800430e:	f000 b8ae 	b.w	800446e <__retarget_lock_release_recursive>
 8004312:	bf00      	nop
 8004314:	200006e0 	.word	0x200006e0

08004318 <__sinit_lock_acquire>:
 8004318:	4801      	ldr	r0, [pc, #4]	; (8004320 <__sinit_lock_acquire+0x8>)
 800431a:	f000 b8a7 	b.w	800446c <__retarget_lock_acquire_recursive>
 800431e:	bf00      	nop
 8004320:	200006db 	.word	0x200006db

08004324 <__sinit_lock_release>:
 8004324:	4801      	ldr	r0, [pc, #4]	; (800432c <__sinit_lock_release+0x8>)
 8004326:	f000 b8a2 	b.w	800446e <__retarget_lock_release_recursive>
 800432a:	bf00      	nop
 800432c:	200006db 	.word	0x200006db

08004330 <__sinit>:
 8004330:	b510      	push	{r4, lr}
 8004332:	4604      	mov	r4, r0
 8004334:	f7ff fff0 	bl	8004318 <__sinit_lock_acquire>
 8004338:	69a3      	ldr	r3, [r4, #24]
 800433a:	b11b      	cbz	r3, 8004344 <__sinit+0x14>
 800433c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004340:	f7ff bff0 	b.w	8004324 <__sinit_lock_release>
 8004344:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004348:	6523      	str	r3, [r4, #80]	; 0x50
 800434a:	4b13      	ldr	r3, [pc, #76]	; (8004398 <__sinit+0x68>)
 800434c:	4a13      	ldr	r2, [pc, #76]	; (800439c <__sinit+0x6c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	62a2      	str	r2, [r4, #40]	; 0x28
 8004352:	42a3      	cmp	r3, r4
 8004354:	bf04      	itt	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	61a3      	streq	r3, [r4, #24]
 800435a:	4620      	mov	r0, r4
 800435c:	f000 f820 	bl	80043a0 <__sfp>
 8004360:	6060      	str	r0, [r4, #4]
 8004362:	4620      	mov	r0, r4
 8004364:	f000 f81c 	bl	80043a0 <__sfp>
 8004368:	60a0      	str	r0, [r4, #8]
 800436a:	4620      	mov	r0, r4
 800436c:	f000 f818 	bl	80043a0 <__sfp>
 8004370:	2200      	movs	r2, #0
 8004372:	60e0      	str	r0, [r4, #12]
 8004374:	2104      	movs	r1, #4
 8004376:	6860      	ldr	r0, [r4, #4]
 8004378:	f7ff ff82 	bl	8004280 <std>
 800437c:	68a0      	ldr	r0, [r4, #8]
 800437e:	2201      	movs	r2, #1
 8004380:	2109      	movs	r1, #9
 8004382:	f7ff ff7d 	bl	8004280 <std>
 8004386:	68e0      	ldr	r0, [r4, #12]
 8004388:	2202      	movs	r2, #2
 800438a:	2112      	movs	r1, #18
 800438c:	f7ff ff78 	bl	8004280 <std>
 8004390:	2301      	movs	r3, #1
 8004392:	61a3      	str	r3, [r4, #24]
 8004394:	e7d2      	b.n	800433c <__sinit+0xc>
 8004396:	bf00      	nop
 8004398:	08004c68 	.word	0x08004c68
 800439c:	080042c9 	.word	0x080042c9

080043a0 <__sfp>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	4607      	mov	r7, r0
 80043a4:	f7ff ffac 	bl	8004300 <__sfp_lock_acquire>
 80043a8:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <__sfp+0x84>)
 80043aa:	681e      	ldr	r6, [r3, #0]
 80043ac:	69b3      	ldr	r3, [r6, #24]
 80043ae:	b913      	cbnz	r3, 80043b6 <__sfp+0x16>
 80043b0:	4630      	mov	r0, r6
 80043b2:	f7ff ffbd 	bl	8004330 <__sinit>
 80043b6:	3648      	adds	r6, #72	; 0x48
 80043b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043bc:	3b01      	subs	r3, #1
 80043be:	d503      	bpl.n	80043c8 <__sfp+0x28>
 80043c0:	6833      	ldr	r3, [r6, #0]
 80043c2:	b30b      	cbz	r3, 8004408 <__sfp+0x68>
 80043c4:	6836      	ldr	r6, [r6, #0]
 80043c6:	e7f7      	b.n	80043b8 <__sfp+0x18>
 80043c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043cc:	b9d5      	cbnz	r5, 8004404 <__sfp+0x64>
 80043ce:	4b16      	ldr	r3, [pc, #88]	; (8004428 <__sfp+0x88>)
 80043d0:	60e3      	str	r3, [r4, #12]
 80043d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043d6:	6665      	str	r5, [r4, #100]	; 0x64
 80043d8:	f000 f847 	bl	800446a <__retarget_lock_init_recursive>
 80043dc:	f7ff ff96 	bl	800430c <__sfp_lock_release>
 80043e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80043e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80043e8:	6025      	str	r5, [r4, #0]
 80043ea:	61a5      	str	r5, [r4, #24]
 80043ec:	2208      	movs	r2, #8
 80043ee:	4629      	mov	r1, r5
 80043f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043f4:	f7ff f816 	bl	8003424 <memset>
 80043f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004400:	4620      	mov	r0, r4
 8004402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004404:	3468      	adds	r4, #104	; 0x68
 8004406:	e7d9      	b.n	80043bc <__sfp+0x1c>
 8004408:	2104      	movs	r1, #4
 800440a:	4638      	mov	r0, r7
 800440c:	f7ff ff62 	bl	80042d4 <__sfmoreglue>
 8004410:	4604      	mov	r4, r0
 8004412:	6030      	str	r0, [r6, #0]
 8004414:	2800      	cmp	r0, #0
 8004416:	d1d5      	bne.n	80043c4 <__sfp+0x24>
 8004418:	f7ff ff78 	bl	800430c <__sfp_lock_release>
 800441c:	230c      	movs	r3, #12
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	e7ee      	b.n	8004400 <__sfp+0x60>
 8004422:	bf00      	nop
 8004424:	08004c68 	.word	0x08004c68
 8004428:	ffff0001 	.word	0xffff0001

0800442c <_fwalk_reent>:
 800442c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004430:	4606      	mov	r6, r0
 8004432:	4688      	mov	r8, r1
 8004434:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004438:	2700      	movs	r7, #0
 800443a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800443e:	f1b9 0901 	subs.w	r9, r9, #1
 8004442:	d505      	bpl.n	8004450 <_fwalk_reent+0x24>
 8004444:	6824      	ldr	r4, [r4, #0]
 8004446:	2c00      	cmp	r4, #0
 8004448:	d1f7      	bne.n	800443a <_fwalk_reent+0xe>
 800444a:	4638      	mov	r0, r7
 800444c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004450:	89ab      	ldrh	r3, [r5, #12]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d907      	bls.n	8004466 <_fwalk_reent+0x3a>
 8004456:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800445a:	3301      	adds	r3, #1
 800445c:	d003      	beq.n	8004466 <_fwalk_reent+0x3a>
 800445e:	4629      	mov	r1, r5
 8004460:	4630      	mov	r0, r6
 8004462:	47c0      	blx	r8
 8004464:	4307      	orrs	r7, r0
 8004466:	3568      	adds	r5, #104	; 0x68
 8004468:	e7e9      	b.n	800443e <_fwalk_reent+0x12>

0800446a <__retarget_lock_init_recursive>:
 800446a:	4770      	bx	lr

0800446c <__retarget_lock_acquire_recursive>:
 800446c:	4770      	bx	lr

0800446e <__retarget_lock_release_recursive>:
 800446e:	4770      	bx	lr

08004470 <__swhatbuf_r>:
 8004470:	b570      	push	{r4, r5, r6, lr}
 8004472:	460e      	mov	r6, r1
 8004474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004478:	2900      	cmp	r1, #0
 800447a:	b096      	sub	sp, #88	; 0x58
 800447c:	4614      	mov	r4, r2
 800447e:	461d      	mov	r5, r3
 8004480:	da07      	bge.n	8004492 <__swhatbuf_r+0x22>
 8004482:	2300      	movs	r3, #0
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	89b3      	ldrh	r3, [r6, #12]
 8004488:	061a      	lsls	r2, r3, #24
 800448a:	d410      	bmi.n	80044ae <__swhatbuf_r+0x3e>
 800448c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004490:	e00e      	b.n	80044b0 <__swhatbuf_r+0x40>
 8004492:	466a      	mov	r2, sp
 8004494:	f000 f946 	bl	8004724 <_fstat_r>
 8004498:	2800      	cmp	r0, #0
 800449a:	dbf2      	blt.n	8004482 <__swhatbuf_r+0x12>
 800449c:	9a01      	ldr	r2, [sp, #4]
 800449e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044a6:	425a      	negs	r2, r3
 80044a8:	415a      	adcs	r2, r3
 80044aa:	602a      	str	r2, [r5, #0]
 80044ac:	e7ee      	b.n	800448c <__swhatbuf_r+0x1c>
 80044ae:	2340      	movs	r3, #64	; 0x40
 80044b0:	2000      	movs	r0, #0
 80044b2:	6023      	str	r3, [r4, #0]
 80044b4:	b016      	add	sp, #88	; 0x58
 80044b6:	bd70      	pop	{r4, r5, r6, pc}

080044b8 <__smakebuf_r>:
 80044b8:	898b      	ldrh	r3, [r1, #12]
 80044ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044bc:	079d      	lsls	r5, r3, #30
 80044be:	4606      	mov	r6, r0
 80044c0:	460c      	mov	r4, r1
 80044c2:	d507      	bpl.n	80044d4 <__smakebuf_r+0x1c>
 80044c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	6123      	str	r3, [r4, #16]
 80044cc:	2301      	movs	r3, #1
 80044ce:	6163      	str	r3, [r4, #20]
 80044d0:	b002      	add	sp, #8
 80044d2:	bd70      	pop	{r4, r5, r6, pc}
 80044d4:	ab01      	add	r3, sp, #4
 80044d6:	466a      	mov	r2, sp
 80044d8:	f7ff ffca 	bl	8004470 <__swhatbuf_r>
 80044dc:	9900      	ldr	r1, [sp, #0]
 80044de:	4605      	mov	r5, r0
 80044e0:	4630      	mov	r0, r6
 80044e2:	f7ff f88f 	bl	8003604 <_malloc_r>
 80044e6:	b948      	cbnz	r0, 80044fc <__smakebuf_r+0x44>
 80044e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ec:	059a      	lsls	r2, r3, #22
 80044ee:	d4ef      	bmi.n	80044d0 <__smakebuf_r+0x18>
 80044f0:	f023 0303 	bic.w	r3, r3, #3
 80044f4:	f043 0302 	orr.w	r3, r3, #2
 80044f8:	81a3      	strh	r3, [r4, #12]
 80044fa:	e7e3      	b.n	80044c4 <__smakebuf_r+0xc>
 80044fc:	4b0d      	ldr	r3, [pc, #52]	; (8004534 <__smakebuf_r+0x7c>)
 80044fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	6020      	str	r0, [r4, #0]
 8004504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004508:	81a3      	strh	r3, [r4, #12]
 800450a:	9b00      	ldr	r3, [sp, #0]
 800450c:	6163      	str	r3, [r4, #20]
 800450e:	9b01      	ldr	r3, [sp, #4]
 8004510:	6120      	str	r0, [r4, #16]
 8004512:	b15b      	cbz	r3, 800452c <__smakebuf_r+0x74>
 8004514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004518:	4630      	mov	r0, r6
 800451a:	f000 f915 	bl	8004748 <_isatty_r>
 800451e:	b128      	cbz	r0, 800452c <__smakebuf_r+0x74>
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	f023 0303 	bic.w	r3, r3, #3
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	81a3      	strh	r3, [r4, #12]
 800452c:	89a0      	ldrh	r0, [r4, #12]
 800452e:	4305      	orrs	r5, r0
 8004530:	81a5      	strh	r5, [r4, #12]
 8004532:	e7cd      	b.n	80044d0 <__smakebuf_r+0x18>
 8004534:	080042c9 	.word	0x080042c9

08004538 <memmove>:
 8004538:	4288      	cmp	r0, r1
 800453a:	b510      	push	{r4, lr}
 800453c:	eb01 0402 	add.w	r4, r1, r2
 8004540:	d902      	bls.n	8004548 <memmove+0x10>
 8004542:	4284      	cmp	r4, r0
 8004544:	4623      	mov	r3, r4
 8004546:	d807      	bhi.n	8004558 <memmove+0x20>
 8004548:	1e43      	subs	r3, r0, #1
 800454a:	42a1      	cmp	r1, r4
 800454c:	d008      	beq.n	8004560 <memmove+0x28>
 800454e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004552:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004556:	e7f8      	b.n	800454a <memmove+0x12>
 8004558:	4402      	add	r2, r0
 800455a:	4601      	mov	r1, r0
 800455c:	428a      	cmp	r2, r1
 800455e:	d100      	bne.n	8004562 <memmove+0x2a>
 8004560:	bd10      	pop	{r4, pc}
 8004562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800456a:	e7f7      	b.n	800455c <memmove+0x24>

0800456c <__malloc_lock>:
 800456c:	4801      	ldr	r0, [pc, #4]	; (8004574 <__malloc_lock+0x8>)
 800456e:	f7ff bf7d 	b.w	800446c <__retarget_lock_acquire_recursive>
 8004572:	bf00      	nop
 8004574:	200006dc 	.word	0x200006dc

08004578 <__malloc_unlock>:
 8004578:	4801      	ldr	r0, [pc, #4]	; (8004580 <__malloc_unlock+0x8>)
 800457a:	f7ff bf78 	b.w	800446e <__retarget_lock_release_recursive>
 800457e:	bf00      	nop
 8004580:	200006dc 	.word	0x200006dc

08004584 <_realloc_r>:
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	4607      	mov	r7, r0
 8004588:	4614      	mov	r4, r2
 800458a:	460e      	mov	r6, r1
 800458c:	b921      	cbnz	r1, 8004598 <_realloc_r+0x14>
 800458e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004592:	4611      	mov	r1, r2
 8004594:	f7ff b836 	b.w	8003604 <_malloc_r>
 8004598:	b922      	cbnz	r2, 80045a4 <_realloc_r+0x20>
 800459a:	f7fe ffe3 	bl	8003564 <_free_r>
 800459e:	4625      	mov	r5, r4
 80045a0:	4628      	mov	r0, r5
 80045a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045a4:	f000 f8f2 	bl	800478c <_malloc_usable_size_r>
 80045a8:	42a0      	cmp	r0, r4
 80045aa:	d20f      	bcs.n	80045cc <_realloc_r+0x48>
 80045ac:	4621      	mov	r1, r4
 80045ae:	4638      	mov	r0, r7
 80045b0:	f7ff f828 	bl	8003604 <_malloc_r>
 80045b4:	4605      	mov	r5, r0
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d0f2      	beq.n	80045a0 <_realloc_r+0x1c>
 80045ba:	4631      	mov	r1, r6
 80045bc:	4622      	mov	r2, r4
 80045be:	f7fe ff23 	bl	8003408 <memcpy>
 80045c2:	4631      	mov	r1, r6
 80045c4:	4638      	mov	r0, r7
 80045c6:	f7fe ffcd 	bl	8003564 <_free_r>
 80045ca:	e7e9      	b.n	80045a0 <_realloc_r+0x1c>
 80045cc:	4635      	mov	r5, r6
 80045ce:	e7e7      	b.n	80045a0 <_realloc_r+0x1c>

080045d0 <_raise_r>:
 80045d0:	291f      	cmp	r1, #31
 80045d2:	b538      	push	{r3, r4, r5, lr}
 80045d4:	4604      	mov	r4, r0
 80045d6:	460d      	mov	r5, r1
 80045d8:	d904      	bls.n	80045e4 <_raise_r+0x14>
 80045da:	2316      	movs	r3, #22
 80045dc:	6003      	str	r3, [r0, #0]
 80045de:	f04f 30ff 	mov.w	r0, #4294967295
 80045e2:	bd38      	pop	{r3, r4, r5, pc}
 80045e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80045e6:	b112      	cbz	r2, 80045ee <_raise_r+0x1e>
 80045e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80045ec:	b94b      	cbnz	r3, 8004602 <_raise_r+0x32>
 80045ee:	4620      	mov	r0, r4
 80045f0:	f000 f830 	bl	8004654 <_getpid_r>
 80045f4:	462a      	mov	r2, r5
 80045f6:	4601      	mov	r1, r0
 80045f8:	4620      	mov	r0, r4
 80045fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045fe:	f000 b817 	b.w	8004630 <_kill_r>
 8004602:	2b01      	cmp	r3, #1
 8004604:	d00a      	beq.n	800461c <_raise_r+0x4c>
 8004606:	1c59      	adds	r1, r3, #1
 8004608:	d103      	bne.n	8004612 <_raise_r+0x42>
 800460a:	2316      	movs	r3, #22
 800460c:	6003      	str	r3, [r0, #0]
 800460e:	2001      	movs	r0, #1
 8004610:	e7e7      	b.n	80045e2 <_raise_r+0x12>
 8004612:	2400      	movs	r4, #0
 8004614:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004618:	4628      	mov	r0, r5
 800461a:	4798      	blx	r3
 800461c:	2000      	movs	r0, #0
 800461e:	e7e0      	b.n	80045e2 <_raise_r+0x12>

08004620 <raise>:
 8004620:	4b02      	ldr	r3, [pc, #8]	; (800462c <raise+0xc>)
 8004622:	4601      	mov	r1, r0
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	f7ff bfd3 	b.w	80045d0 <_raise_r>
 800462a:	bf00      	nop
 800462c:	20000004 	.word	0x20000004

08004630 <_kill_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4d07      	ldr	r5, [pc, #28]	; (8004650 <_kill_r+0x20>)
 8004634:	2300      	movs	r3, #0
 8004636:	4604      	mov	r4, r0
 8004638:	4608      	mov	r0, r1
 800463a:	4611      	mov	r1, r2
 800463c:	602b      	str	r3, [r5, #0]
 800463e:	f7fd fe45 	bl	80022cc <_kill>
 8004642:	1c43      	adds	r3, r0, #1
 8004644:	d102      	bne.n	800464c <_kill_r+0x1c>
 8004646:	682b      	ldr	r3, [r5, #0]
 8004648:	b103      	cbz	r3, 800464c <_kill_r+0x1c>
 800464a:	6023      	str	r3, [r4, #0]
 800464c:	bd38      	pop	{r3, r4, r5, pc}
 800464e:	bf00      	nop
 8004650:	200006e4 	.word	0x200006e4

08004654 <_getpid_r>:
 8004654:	f7fd be32 	b.w	80022bc <_getpid>

08004658 <__sread>:
 8004658:	b510      	push	{r4, lr}
 800465a:	460c      	mov	r4, r1
 800465c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004660:	f000 f89c 	bl	800479c <_read_r>
 8004664:	2800      	cmp	r0, #0
 8004666:	bfab      	itete	ge
 8004668:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800466a:	89a3      	ldrhlt	r3, [r4, #12]
 800466c:	181b      	addge	r3, r3, r0
 800466e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004672:	bfac      	ite	ge
 8004674:	6563      	strge	r3, [r4, #84]	; 0x54
 8004676:	81a3      	strhlt	r3, [r4, #12]
 8004678:	bd10      	pop	{r4, pc}

0800467a <__swrite>:
 800467a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800467e:	461f      	mov	r7, r3
 8004680:	898b      	ldrh	r3, [r1, #12]
 8004682:	05db      	lsls	r3, r3, #23
 8004684:	4605      	mov	r5, r0
 8004686:	460c      	mov	r4, r1
 8004688:	4616      	mov	r6, r2
 800468a:	d505      	bpl.n	8004698 <__swrite+0x1e>
 800468c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004690:	2302      	movs	r3, #2
 8004692:	2200      	movs	r2, #0
 8004694:	f000 f868 	bl	8004768 <_lseek_r>
 8004698:	89a3      	ldrh	r3, [r4, #12]
 800469a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800469e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046a2:	81a3      	strh	r3, [r4, #12]
 80046a4:	4632      	mov	r2, r6
 80046a6:	463b      	mov	r3, r7
 80046a8:	4628      	mov	r0, r5
 80046aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046ae:	f000 b817 	b.w	80046e0 <_write_r>

080046b2 <__sseek>:
 80046b2:	b510      	push	{r4, lr}
 80046b4:	460c      	mov	r4, r1
 80046b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ba:	f000 f855 	bl	8004768 <_lseek_r>
 80046be:	1c43      	adds	r3, r0, #1
 80046c0:	89a3      	ldrh	r3, [r4, #12]
 80046c2:	bf15      	itete	ne
 80046c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80046c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046ce:	81a3      	strheq	r3, [r4, #12]
 80046d0:	bf18      	it	ne
 80046d2:	81a3      	strhne	r3, [r4, #12]
 80046d4:	bd10      	pop	{r4, pc}

080046d6 <__sclose>:
 80046d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046da:	f000 b813 	b.w	8004704 <_close_r>
	...

080046e0 <_write_r>:
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	4d07      	ldr	r5, [pc, #28]	; (8004700 <_write_r+0x20>)
 80046e4:	4604      	mov	r4, r0
 80046e6:	4608      	mov	r0, r1
 80046e8:	4611      	mov	r1, r2
 80046ea:	2200      	movs	r2, #0
 80046ec:	602a      	str	r2, [r5, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	f7fd fe23 	bl	800233a <_write>
 80046f4:	1c43      	adds	r3, r0, #1
 80046f6:	d102      	bne.n	80046fe <_write_r+0x1e>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	b103      	cbz	r3, 80046fe <_write_r+0x1e>
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	bd38      	pop	{r3, r4, r5, pc}
 8004700:	200006e4 	.word	0x200006e4

08004704 <_close_r>:
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	4d06      	ldr	r5, [pc, #24]	; (8004720 <_close_r+0x1c>)
 8004708:	2300      	movs	r3, #0
 800470a:	4604      	mov	r4, r0
 800470c:	4608      	mov	r0, r1
 800470e:	602b      	str	r3, [r5, #0]
 8004710:	f7fd fe2f 	bl	8002372 <_close>
 8004714:	1c43      	adds	r3, r0, #1
 8004716:	d102      	bne.n	800471e <_close_r+0x1a>
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	b103      	cbz	r3, 800471e <_close_r+0x1a>
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	bd38      	pop	{r3, r4, r5, pc}
 8004720:	200006e4 	.word	0x200006e4

08004724 <_fstat_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4d07      	ldr	r5, [pc, #28]	; (8004744 <_fstat_r+0x20>)
 8004728:	2300      	movs	r3, #0
 800472a:	4604      	mov	r4, r0
 800472c:	4608      	mov	r0, r1
 800472e:	4611      	mov	r1, r2
 8004730:	602b      	str	r3, [r5, #0]
 8004732:	f7fd fe2a 	bl	800238a <_fstat>
 8004736:	1c43      	adds	r3, r0, #1
 8004738:	d102      	bne.n	8004740 <_fstat_r+0x1c>
 800473a:	682b      	ldr	r3, [r5, #0]
 800473c:	b103      	cbz	r3, 8004740 <_fstat_r+0x1c>
 800473e:	6023      	str	r3, [r4, #0]
 8004740:	bd38      	pop	{r3, r4, r5, pc}
 8004742:	bf00      	nop
 8004744:	200006e4 	.word	0x200006e4

08004748 <_isatty_r>:
 8004748:	b538      	push	{r3, r4, r5, lr}
 800474a:	4d06      	ldr	r5, [pc, #24]	; (8004764 <_isatty_r+0x1c>)
 800474c:	2300      	movs	r3, #0
 800474e:	4604      	mov	r4, r0
 8004750:	4608      	mov	r0, r1
 8004752:	602b      	str	r3, [r5, #0]
 8004754:	f7fd fe29 	bl	80023aa <_isatty>
 8004758:	1c43      	adds	r3, r0, #1
 800475a:	d102      	bne.n	8004762 <_isatty_r+0x1a>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	b103      	cbz	r3, 8004762 <_isatty_r+0x1a>
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	bd38      	pop	{r3, r4, r5, pc}
 8004764:	200006e4 	.word	0x200006e4

08004768 <_lseek_r>:
 8004768:	b538      	push	{r3, r4, r5, lr}
 800476a:	4d07      	ldr	r5, [pc, #28]	; (8004788 <_lseek_r+0x20>)
 800476c:	4604      	mov	r4, r0
 800476e:	4608      	mov	r0, r1
 8004770:	4611      	mov	r1, r2
 8004772:	2200      	movs	r2, #0
 8004774:	602a      	str	r2, [r5, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	f7fd fe22 	bl	80023c0 <_lseek>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d102      	bne.n	8004786 <_lseek_r+0x1e>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	b103      	cbz	r3, 8004786 <_lseek_r+0x1e>
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	bd38      	pop	{r3, r4, r5, pc}
 8004788:	200006e4 	.word	0x200006e4

0800478c <_malloc_usable_size_r>:
 800478c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004790:	1f18      	subs	r0, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	bfbc      	itt	lt
 8004796:	580b      	ldrlt	r3, [r1, r0]
 8004798:	18c0      	addlt	r0, r0, r3
 800479a:	4770      	bx	lr

0800479c <_read_r>:
 800479c:	b538      	push	{r3, r4, r5, lr}
 800479e:	4d07      	ldr	r5, [pc, #28]	; (80047bc <_read_r+0x20>)
 80047a0:	4604      	mov	r4, r0
 80047a2:	4608      	mov	r0, r1
 80047a4:	4611      	mov	r1, r2
 80047a6:	2200      	movs	r2, #0
 80047a8:	602a      	str	r2, [r5, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	f7fd fda8 	bl	8002300 <_read>
 80047b0:	1c43      	adds	r3, r0, #1
 80047b2:	d102      	bne.n	80047ba <_read_r+0x1e>
 80047b4:	682b      	ldr	r3, [r5, #0]
 80047b6:	b103      	cbz	r3, 80047ba <_read_r+0x1e>
 80047b8:	6023      	str	r3, [r4, #0]
 80047ba:	bd38      	pop	{r3, r4, r5, pc}
 80047bc:	200006e4 	.word	0x200006e4

080047c0 <_init>:
 80047c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c2:	bf00      	nop
 80047c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047c6:	bc08      	pop	{r3}
 80047c8:	469e      	mov	lr, r3
 80047ca:	4770      	bx	lr

080047cc <_fini>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	bf00      	nop
 80047d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d2:	bc08      	pop	{r3}
 80047d4:	469e      	mov	lr, r3
 80047d6:	4770      	bx	lr
