
cmsis-testing-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  08003e08  08003e08  00013e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800419c  0800419c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800419c  0800419c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800419c  0800419c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800419c  0800419c  0001419c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041a0  080041a0  000141a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080041a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000068  0800420c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  0800420c  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000077e3  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001459  00000000  00000000  0002787b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003b8  00000000  00000000  00028cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000310  00000000  00000000  00029090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00003f4a  00000000  00000000  000293a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00051353  00000000  00000000  0002d2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0007e63d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000184c  00000000  00000000  0007e690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000e295  00000000  00000000  0007fedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003df0 	.word	0x08003df0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003df0 	.word	0x08003df0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000298:	4a04      	ldr	r2, [pc, #16]	; (80002ac <GFX_SetFont+0x1c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	6013      	str	r3, [r2, #0]
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000490 	.word	0x20000490

080002b0 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b089      	sub	sp, #36	; 0x24
 80002b4:	af02      	add	r7, sp, #8
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	4611      	mov	r1, r2
 80002bc:	461a      	mov	r2, r3
 80002be:	460b      	mov	r3, r1
 80002c0:	71fb      	strb	r3, [r7, #7]
 80002c2:	4613      	mov	r3, r2
 80002c4:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	2b7e      	cmp	r3, #126	; 0x7e
 80002ca:	f200 80a3 	bhi.w	8000414 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80002ce:	2300      	movs	r3, #0
 80002d0:	75fb      	strb	r3, [r7, #23]
 80002d2:	e096      	b.n	8000402 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80002d4:	4b51      	ldr	r3, [pc, #324]	; (800041c <GFX_DrawChar+0x16c>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	3b20      	subs	r3, #32
 80002dc:	494f      	ldr	r1, [pc, #316]	; (800041c <GFX_DrawChar+0x16c>)
 80002de:	6809      	ldr	r1, [r1, #0]
 80002e0:	3101      	adds	r1, #1
 80002e2:	7809      	ldrb	r1, [r1, #0]
 80002e4:	fb01 f103 	mul.w	r1, r1, r3
 80002e8:	7dfb      	ldrb	r3, [r7, #23]
 80002ea:	440b      	add	r3, r1
 80002ec:	3302      	adds	r3, #2
 80002ee:	4413      	add	r3, r2
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80002f4:	2300      	movs	r3, #0
 80002f6:	757b      	strb	r3, [r7, #21]
 80002f8:	e078      	b.n	80003ec <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 80002fa:	7dbb      	ldrb	r3, [r7, #22]
 80002fc:	f003 0301 	and.w	r3, r3, #1
 8000300:	2b00      	cmp	r3, #0
 8000302:	d032      	beq.n	800036a <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8000304:	4b46      	ldr	r3, [pc, #280]	; (8000420 <GFX_DrawChar+0x170>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d113      	bne.n	8000334 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 800030c:	7dfb      	ldrb	r3, [r7, #23]
 800030e:	b29a      	uxth	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	b29b      	uxth	r3, r3
 8000314:	4413      	add	r3, r2
 8000316:	b29b      	uxth	r3, r3
 8000318:	b218      	sxth	r0, r3
 800031a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800031e:	b29a      	uxth	r2, r3
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	b29b      	uxth	r3, r3
 8000324:	4413      	add	r3, r2
 8000326:	b29b      	uxth	r3, r3
 8000328:	b21b      	sxth	r3, r3
 800032a:	79ba      	ldrb	r2, [r7, #6]
 800032c:	4619      	mov	r1, r3
 800032e:	f000 fb1f 	bl	8000970 <SSD1306_DrawPixel>
 8000332:	e052      	b.n	80003da <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8000334:	7dfb      	ldrb	r3, [r7, #23]
 8000336:	4a3a      	ldr	r2, [pc, #232]	; (8000420 <GFX_DrawChar+0x170>)
 8000338:	7812      	ldrb	r2, [r2, #0]
 800033a:	fb02 f203 	mul.w	r2, r2, r3
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	18d0      	adds	r0, r2, r3
 8000342:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000346:	4a36      	ldr	r2, [pc, #216]	; (8000420 <GFX_DrawChar+0x170>)
 8000348:	7812      	ldrb	r2, [r2, #0]
 800034a:	fb02 f203 	mul.w	r2, r2, r3
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	18d1      	adds	r1, r2, r3
 8000352:	4b33      	ldr	r3, [pc, #204]	; (8000420 <GFX_DrawChar+0x170>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	b29a      	uxth	r2, r3
 8000358:	4b31      	ldr	r3, [pc, #196]	; (8000420 <GFX_DrawChar+0x170>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	b29c      	uxth	r4, r3
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	4623      	mov	r3, r4
 8000364:	f000 f9a3 	bl	80006ae <GFX_DrawFillRectangle>
 8000368:	e037      	b.n	80003da <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800036a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800036e:	2b00      	cmp	r3, #0
 8000370:	d133      	bne.n	80003da <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8000372:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <GFX_DrawChar+0x170>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d114      	bne.n	80003a4 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 800037a:	7dfb      	ldrb	r3, [r7, #23]
 800037c:	b29a      	uxth	r2, r3
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	b29b      	uxth	r3, r3
 8000382:	4413      	add	r3, r2
 8000384:	b29b      	uxth	r3, r3
 8000386:	b218      	sxth	r0, r3
 8000388:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800038c:	b29a      	uxth	r2, r3
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	b29b      	uxth	r3, r3
 8000392:	4413      	add	r3, r2
 8000394:	b29b      	uxth	r3, r3
 8000396:	b21b      	sxth	r3, r3
 8000398:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800039c:	4619      	mov	r1, r3
 800039e:	f000 fae7 	bl	8000970 <SSD1306_DrawPixel>
 80003a2:	e01a      	b.n	80003da <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80003a4:	7dfb      	ldrb	r3, [r7, #23]
 80003a6:	4a1e      	ldr	r2, [pc, #120]	; (8000420 <GFX_DrawChar+0x170>)
 80003a8:	7812      	ldrb	r2, [r2, #0]
 80003aa:	fb02 f203 	mul.w	r2, r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	18d0      	adds	r0, r2, r3
 80003b2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80003b6:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <GFX_DrawChar+0x170>)
 80003b8:	7812      	ldrb	r2, [r2, #0]
 80003ba:	fb02 f203 	mul.w	r2, r2, r3
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	18d1      	adds	r1, r2, r3
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <GFX_DrawChar+0x170>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <GFX_DrawChar+0x170>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	b29c      	uxth	r4, r3
 80003ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80003d2:	9300      	str	r3, [sp, #0]
 80003d4:	4623      	mov	r3, r4
 80003d6:	f000 f96a 	bl	80006ae <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80003da:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	3301      	adds	r3, #1
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	757b      	strb	r3, [r7, #21]
 80003e6:	7dbb      	ldrb	r3, [r7, #22]
 80003e8:	085b      	lsrs	r3, r3, #1
 80003ea:	75bb      	strb	r3, [r7, #22]
 80003ec:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80003f0:	4a0a      	ldr	r2, [pc, #40]	; (800041c <GFX_DrawChar+0x16c>)
 80003f2:	6812      	ldr	r2, [r2, #0]
 80003f4:	7812      	ldrb	r2, [r2, #0]
 80003f6:	4293      	cmp	r3, r2
 80003f8:	f6ff af7f 	blt.w	80002fa <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80003fc:	7dfb      	ldrb	r3, [r7, #23]
 80003fe:	3301      	adds	r3, #1
 8000400:	75fb      	strb	r3, [r7, #23]
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <GFX_DrawChar+0x16c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	3301      	adds	r3, #1
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	7dfa      	ldrb	r2, [r7, #23]
 800040c:	429a      	cmp	r2, r3
 800040e:	f4ff af61 	bcc.w	80002d4 <GFX_DrawChar+0x24>
 8000412:	e000      	b.n	8000416 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8000414:	bf00      	nop
            }
        }
    }
}
 8000416:	371c      	adds	r7, #28
 8000418:	46bd      	mov	sp, r7
 800041a:	bd90      	pop	{r4, r7, pc}
 800041c:	20000490 	.word	0x20000490
 8000420:	20000000 	.word	0x20000000

08000424 <GFX_DrawString>:


void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af02      	add	r7, sp, #8
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	607a      	str	r2, [r7, #4]
 8000430:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 800043c:	e03e      	b.n	80004bc <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 800043e:	78f9      	ldrb	r1, [r7, #3]
 8000440:	7cfa      	ldrb	r2, [r7, #19]
 8000442:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000446:	9300      	str	r3, [sp, #0]
 8000448:	460b      	mov	r3, r1
 800044a:	68b9      	ldr	r1, [r7, #8]
 800044c:	6978      	ldr	r0, [r7, #20]
 800044e:	f7ff ff2f 	bl	80002b0 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8000452:	4b20      	ldr	r3, [pc, #128]	; (80004d4 <GFX_DrawString+0xb0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	461a      	mov	r2, r3
 800045c:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <GFX_DrawString+0xb4>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	fb03 f302 	mul.w	r3, r3, r2
 8000464:	3301      	adds	r3, #1
 8000466:	697a      	ldr	r2, [r7, #20]
 8000468:	4413      	add	r3, r2
 800046a:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 800046c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d120      	bne.n	80004b6 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8000474:	2300      	movs	r3, #0
 8000476:	74bb      	strb	r3, [r7, #18]
 8000478:	e012      	b.n	80004a0 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	b29b      	uxth	r3, r3
 800047e:	3b01      	subs	r3, #1
 8000480:	b29b      	uxth	r3, r3
 8000482:	b218      	sxth	r0, r3
 8000484:	7cbb      	ldrb	r3, [r7, #18]
 8000486:	b29a      	uxth	r2, r3
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	b29b      	uxth	r3, r3
 800048c:	4413      	add	r3, r2
 800048e:	b29b      	uxth	r3, r3
 8000490:	b21b      	sxth	r3, r3
 8000492:	2200      	movs	r2, #0
 8000494:	4619      	mov	r1, r3
 8000496:	f000 fa6b 	bl	8000970 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 800049a:	7cbb      	ldrb	r3, [r7, #18]
 800049c:	3301      	adds	r3, #1
 800049e:	74bb      	strb	r3, [r7, #18]
 80004a0:	7cba      	ldrb	r2, [r7, #18]
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <GFX_DrawString+0xb0>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	4619      	mov	r1, r3
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <GFX_DrawString+0xb4>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	fb03 f301 	mul.w	r3, r3, r1
 80004b2:	429a      	cmp	r2, r3
 80004b4:	dbe1      	blt.n	800047a <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	607a      	str	r2, [r7, #4]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1ba      	bne.n	800043e <GFX_DrawString+0x1a>
	}
}
 80004c8:	bf00      	nop
 80004ca:	bf00      	nop
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000490 	.word	0x20000490
 80004d8:	20000000 	.word	0x20000000

080004dc <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08c      	sub	sp, #48	; 0x30
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
 80004e8:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80004ea:	683a      	ldr	r2, [r7, #0]
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80004f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80004f8:	6879      	ldr	r1, [r7, #4]
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	1acb      	subs	r3, r1, r3
 80004fe:	2b00      	cmp	r3, #0
 8000500:	bfb8      	it	lt
 8000502:	425b      	neglt	r3, r3
 8000504:	429a      	cmp	r2, r3
 8000506:	bfcc      	ite	gt
 8000508:	2301      	movgt	r3, #1
 800050a:	2300      	movle	r3, #0
 800050c:	b2db      	uxtb	r3, r3
 800050e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8000510:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000514:	2b00      	cmp	r3, #0
 8000516:	d00b      	beq.n	8000530 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000522:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	623b      	str	r3, [r7, #32]
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	6a3b      	ldr	r3, [r7, #32]
 800052e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dd0b      	ble.n	8000550 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	61fb      	str	r3, [r7, #28]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	61bb      	str	r3, [r7, #24]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	b29a      	uxth	r2, r3
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	b29b      	uxth	r3, r3
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	b29b      	uxth	r3, r3
 800055c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	bfb8      	it	lt
 8000568:	425b      	neglt	r3, r3
 800056a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 800056c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000570:	0fda      	lsrs	r2, r3, #31
 8000572:	4413      	add	r3, r2
 8000574:	105b      	asrs	r3, r3, #1
 8000576:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000578:	68ba      	ldr	r2, [r7, #8]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	da02      	bge.n	8000586 <GFX_WriteLine+0xaa>
	        ystep = 1;
 8000580:	2301      	movs	r3, #1
 8000582:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000584:	e030      	b.n	80005e8 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 8000586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800058a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 800058c:	e02c      	b.n	80005e8 <GFX_WriteLine+0x10c>
	        if (steep) {
 800058e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000592:	2b00      	cmp	r3, #0
 8000594:	d009      	beq.n	80005aa <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	b21b      	sxth	r3, r3
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	b211      	sxth	r1, r2
 800059e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f9e4 	bl	8000970 <SSD1306_DrawPixel>
 80005a8:	e008      	b.n	80005bc <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	b21b      	sxth	r3, r3
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	b211      	sxth	r1, r2
 80005b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f9da 	bl	8000970 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80005bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80005be:	8abb      	ldrh	r3, [r7, #20]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80005c6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	da09      	bge.n	80005e2 <GFX_WriteLine+0x106>
	            y_start += ystep;
 80005ce:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	4413      	add	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80005d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80005da:	8afb      	ldrh	r3, [r7, #22]
 80005dc:	4413      	add	r3, r2
 80005de:	b29b      	uxth	r3, r3
 80005e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	3301      	adds	r3, #1
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	ddce      	ble.n	800058e <GFX_WriteLine+0xb2>
	        }
	    }
}
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	3730      	adds	r7, #48	; 0x30
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b086      	sub	sp, #24
 80005fe:	af02      	add	r7, sp, #8
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
 8000606:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	1e5a      	subs	r2, r3, #1
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	4613      	mov	r3, r2
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	68b9      	ldr	r1, [r7, #8]
 800061a:	68f8      	ldr	r0, [r7, #12]
 800061c:	f7ff ff5e 	bl	80004dc <GFX_WriteLine>
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af02      	add	r7, sp, #8
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
 8000634:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4413      	add	r3, r2
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	78fb      	ldrb	r3, [r7, #3]
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	68b9      	ldr	r1, [r7, #8]
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f7ff ff48 	bl	80004dc <GFX_WriteLine>
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	4611      	mov	r1, r2
 8000660:	461a      	mov	r2, r3
 8000662:	460b      	mov	r3, r1
 8000664:	80fb      	strh	r3, [r7, #6]
 8000666:	4613      	mov	r3, r2
 8000668:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 800066a:	88fa      	ldrh	r2, [r7, #6]
 800066c:	7e3b      	ldrb	r3, [r7, #24]
 800066e:	68b9      	ldr	r1, [r7, #8]
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ffd9 	bl	8000628 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 8000676:	88ba      	ldrh	r2, [r7, #4]
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	4413      	add	r3, r2
 800067c:	1e59      	subs	r1, r3, #1
 800067e:	88fa      	ldrh	r2, [r7, #6]
 8000680:	7e3b      	ldrb	r3, [r7, #24]
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	f7ff ffd0 	bl	8000628 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 8000688:	88ba      	ldrh	r2, [r7, #4]
 800068a:	7e3b      	ldrb	r3, [r7, #24]
 800068c:	68b9      	ldr	r1, [r7, #8]
 800068e:	68f8      	ldr	r0, [r7, #12]
 8000690:	f7ff ffb3 	bl	80005fa <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 8000694:	88fa      	ldrh	r2, [r7, #6]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	4413      	add	r3, r2
 800069a:	1e58      	subs	r0, r3, #1
 800069c:	88ba      	ldrh	r2, [r7, #4]
 800069e:	7e3b      	ldrb	r3, [r7, #24]
 80006a0:	68b9      	ldr	r1, [r7, #8]
 80006a2:	f7ff ffaa 	bl	80005fa <GFX_DrawFastVLine>

}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b086      	sub	sp, #24
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	60f8      	str	r0, [r7, #12]
 80006b6:	60b9      	str	r1, [r7, #8]
 80006b8:	4611      	mov	r1, r2
 80006ba:	461a      	mov	r2, r3
 80006bc:	460b      	mov	r3, r1
 80006be:	80fb      	strh	r3, [r7, #6]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	e009      	b.n	80006de <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 80006ca:	88ba      	ldrh	r2, [r7, #4]
 80006cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	6978      	ldr	r0, [r7, #20]
 80006d4:	f7ff ff91 	bl	80005fa <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	3301      	adds	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	88fa      	ldrh	r2, [r7, #6]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	4413      	add	r3, r2
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	dbef      	blt.n	80006ca <GFX_DrawFillRectangle+0x1c>
    }

}
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <GFX_DrawFillCircleHelper>:
    }
}
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, uint8_t color)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	4611      	mov	r1, r2
 8000700:	461a      	mov	r2, r3
 8000702:	460b      	mov	r3, r1
 8000704:	80fb      	strh	r3, [r7, #6]
 8000706:	4613      	mov	r3, r2
 8000708:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	f1c3 0301 	rsb	r3, r3, #1
 8000710:	b29b      	uxth	r3, r3
 8000712:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8000714:	2301      	movs	r3, #1
 8000716:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	461a      	mov	r2, r3
 800071c:	03d2      	lsls	r2, r2, #15
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	b29b      	uxth	r3, r3
 8000724:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800072e:	e077      	b.n	8000820 <GFX_DrawFillCircleHelper+0x12c>
        if (f >= 0) {
 8000730:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000734:	2b00      	cmp	r3, #0
 8000736:	db0e      	blt.n	8000756 <GFX_DrawFillCircleHelper+0x62>
            y--;
 8000738:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800073c:	b29b      	uxth	r3, r3
 800073e:	3b01      	subs	r3, #1
 8000740:	b29b      	uxth	r3, r3
 8000742:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8000744:	8b7b      	ldrh	r3, [r7, #26]
 8000746:	3302      	adds	r3, #2
 8000748:	b29b      	uxth	r3, r3
 800074a:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800074c:	8bfa      	ldrh	r2, [r7, #30]
 800074e:	8b7b      	ldrh	r3, [r7, #26]
 8000750:	4413      	add	r3, r2
 8000752:	b29b      	uxth	r3, r3
 8000754:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8000756:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800075a:	b29b      	uxth	r3, r3
 800075c:	3301      	adds	r3, #1
 800075e:	b29b      	uxth	r3, r3
 8000760:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8000762:	8bbb      	ldrh	r3, [r7, #28]
 8000764:	3302      	adds	r3, #2
 8000766:	b29b      	uxth	r3, r3
 8000768:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800076a:	8bfa      	ldrh	r2, [r7, #30]
 800076c:	8bbb      	ldrh	r3, [r7, #28]
 800076e:	4413      	add	r3, r2
 8000770:	b29b      	uxth	r3, r3
 8000772:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8000774:	797b      	ldrb	r3, [r7, #5]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	2b00      	cmp	r3, #0
 800077c:	d025      	beq.n	80007ca <GFX_DrawFillCircleHelper+0xd6>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 800077e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	18d0      	adds	r0, r2, r3
 8000786:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	1ad1      	subs	r1, r2, r3
 800078e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800079a:	441a      	add	r2, r3
 800079c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007a0:	f7ff ff2b 	bl	80005fa <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80007a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	18d0      	adds	r0, r2, r3
 80007ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	1ad1      	subs	r1, r2, r3
 80007b4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80007c0:	441a      	add	r2, r3
 80007c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007c6:	f7ff ff18 	bl	80005fa <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80007ca:	797b      	ldrb	r3, [r7, #5]
 80007cc:	f003 0302 	and.w	r3, r3, #2
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d025      	beq.n	8000820 <GFX_DrawFillCircleHelper+0x12c>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80007d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	1ad0      	subs	r0, r2, r3
 80007dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	1ad1      	subs	r1, r2, r3
 80007e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80007f0:	441a      	add	r2, r3
 80007f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007f6:	f7ff ff00 	bl	80005fa <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 80007fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	1ad0      	subs	r0, r2, r3
 8000802:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	1ad1      	subs	r1, r2, r3
 800080a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000816:	441a      	add	r2, r3
 8000818:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800081c:	f7ff feed 	bl	80005fa <GFX_DrawFastVLine>
    while (x<y) {
 8000820:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000824:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000828:	429a      	cmp	r2, r3
 800082a:	db81      	blt.n	8000730 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800082c:	bf00      	nop
 800082e:	bf00      	nop
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <GFX_DrawFillRoundRectangle>:
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
}
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, uint8_t color)
{
 8000836:	b590      	push	{r4, r7, lr}
 8000838:	b087      	sub	sp, #28
 800083a:	af02      	add	r7, sp, #8
 800083c:	60f8      	str	r0, [r7, #12]
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	4611      	mov	r1, r2
 8000842:	461a      	mov	r2, r3
 8000844:	460b      	mov	r3, r1
 8000846:	80fb      	strh	r3, [r7, #6]
 8000848:	4613      	mov	r3, r2
 800084a:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 800084c:	8c3a      	ldrh	r2, [r7, #32]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	18d0      	adds	r0, r2, r3
 8000852:	8c3b      	ldrh	r3, [r7, #32]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	b29b      	uxth	r3, r3
 8000858:	88fa      	ldrh	r2, [r7, #6]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	b29a      	uxth	r2, r3
 800085e:	88b9      	ldrh	r1, [r7, #4]
 8000860:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	460b      	mov	r3, r1
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	f7ff ff20 	bl	80006ae <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800086e:	88fa      	ldrh	r2, [r7, #6]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	441a      	add	r2, r3
 8000874:	8c3b      	ldrh	r3, [r7, #32]
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	1e58      	subs	r0, r3, #1
 800087a:	8c3a      	ldrh	r2, [r7, #32]
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	18d1      	adds	r1, r2, r3
 8000880:	8c3b      	ldrh	r3, [r7, #32]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	b29b      	uxth	r3, r3
 8000886:	88ba      	ldrh	r2, [r7, #4]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	b29b      	uxth	r3, r3
 800088c:	3b01      	subs	r3, #1
 800088e:	b29b      	uxth	r3, r3
 8000890:	b21b      	sxth	r3, r3
 8000892:	8c3c      	ldrh	r4, [r7, #32]
 8000894:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000898:	9201      	str	r2, [sp, #4]
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2301      	movs	r3, #1
 800089e:	4622      	mov	r2, r4
 80008a0:	f7ff ff28 	bl	80006f4 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80008a4:	8c3a      	ldrh	r2, [r7, #32]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	18d0      	adds	r0, r2, r3
 80008aa:	8c3a      	ldrh	r2, [r7, #32]
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	18d1      	adds	r1, r2, r3
 80008b0:	8c3b      	ldrh	r3, [r7, #32]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	88ba      	ldrh	r2, [r7, #4]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	3b01      	subs	r3, #1
 80008be:	b29b      	uxth	r3, r3
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	8c3c      	ldrh	r4, [r7, #32]
 80008c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80008c8:	9201      	str	r2, [sp, #4]
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2302      	movs	r3, #2
 80008ce:	4622      	mov	r2, r4
 80008d0:	f7ff ff10 	bl	80006f4 <GFX_DrawFillCircleHelper>
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd90      	pop	{r4, r7, pc}

080008dc <SSD1306_Command>:

static uint8_t buffer [SSD1306_BUFFERSIZE];


void SSD1306_Command(uint8_t Command)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	I2C_Transmit(oled_i2c, SSD1306_ADDRESS, SSD1306_REG_COMMAND, &Command, 1);
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <SSD1306_Command+0x24>)
 80008e8:	6818      	ldr	r0, [r3, #0]
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	2201      	movs	r2, #1
 80008ee:	9200      	str	r2, [sp, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	213c      	movs	r1, #60	; 0x3c
 80008f4:	f001 fec6 	bl	8002684 <I2C_Transmit>

}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000494 	.word	0x20000494

08000904 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af02      	add	r7, sp, #8
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	807b      	strh	r3, [r7, #2]
	I2C_Transmit(oled_i2c, SSD1306_ADDRESS , SSD1306_REG_DATA, Data, Size);
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <SSD1306_Data+0x28>)
 8000912:	6818      	ldr	r0, [r3, #0]
 8000914:	887b      	ldrh	r3, [r7, #2]
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2240      	movs	r2, #64	; 0x40
 800091c:	213c      	movs	r1, #60	; 0x3c
 800091e:	f001 feb1 	bl	8002684 <I2C_Transmit>

}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000494 	.word	0x20000494

08000930 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d002      	beq.n	8000946 <SSD1306_Clear+0x16>
 8000940:	2b01      	cmp	r3, #1
 8000942:	d007      	beq.n	8000954 <SSD1306_Clear+0x24>

	case YELLOWBLUE:
		memset(buffer,0xFF,SSD1306_BUFFERSIZE);
		break;
	}
}
 8000944:	e00d      	b.n	8000962 <SSD1306_Clear+0x32>
		memset(buffer,0x00,SSD1306_BUFFERSIZE);
 8000946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800094a:	2100      	movs	r1, #0
 800094c:	4807      	ldr	r0, [pc, #28]	; (800096c <SSD1306_Clear+0x3c>)
 800094e:	f002 f873 	bl	8002a38 <memset>
		break;
 8000952:	e006      	b.n	8000962 <SSD1306_Clear+0x32>
		memset(buffer,0xFF,SSD1306_BUFFERSIZE);
 8000954:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000958:	21ff      	movs	r1, #255	; 0xff
 800095a:	4804      	ldr	r0, [pc, #16]	; (800096c <SSD1306_Clear+0x3c>)
 800095c:	f002 f86c 	bl	8002a38 <memset>
		break;
 8000960:	bf00      	nop
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000084 	.word	0x20000084

08000970 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t color) {
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	80fb      	strh	r3, [r7, #6]
 800097a:	460b      	mov	r3, r1
 800097c:	80bb      	strh	r3, [r7, #4]
 800097e:	4613      	mov	r3, r2
 8000980:	70fb      	strb	r3, [r7, #3]

	if ((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDWIDTH))
 8000982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000986:	2b00      	cmp	r3, #0
 8000988:	f2c0 8087 	blt.w	8000a9a <SSD1306_DrawPixel+0x12a>
 800098c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000990:	2b7f      	cmp	r3, #127	; 0x7f
 8000992:	f300 8082 	bgt.w	8000a9a <SSD1306_DrawPixel+0x12a>
 8000996:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	db7d      	blt.n	8000a9a <SSD1306_DrawPixel+0x12a>
 800099e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009a2:	2b7f      	cmp	r3, #127	; 0x7f
 80009a4:	dc79      	bgt.n	8000a9a <SSD1306_DrawPixel+0x12a>
		return;
    switch (color) {
 80009a6:	78fb      	ldrb	r3, [r7, #3]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d051      	beq.n	8000a50 <SSD1306_DrawPixel+0xe0>
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	dc75      	bgt.n	8000a9c <SSD1306_DrawPixel+0x12c>
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d026      	beq.n	8000a02 <SSD1306_DrawPixel+0x92>
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d171      	bne.n	8000a9c <SSD1306_DrawPixel+0x12c>
    case SSD1306_COLOR_YELLOWBLUE:
    //buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7)); // byte 0 on the left side near GND
    buffer[(y/8) * SSD1306_LCDWIDTH + (SSD1306_LCDWIDTH - 1 - x)] |= (1 << (y & 7)); //  byte 0 on the right side near SDA
 80009b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	da00      	bge.n	80009c2 <SSD1306_DrawPixel+0x52>
 80009c0:	3307      	adds	r3, #7
 80009c2:	10db      	asrs	r3, r3, #3
 80009c4:	b218      	sxth	r0, r3
 80009c6:	4603      	mov	r3, r0
 80009c8:	01da      	lsls	r2, r3, #7
 80009ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ce:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80009d2:	4413      	add	r3, r2
 80009d4:	4a34      	ldr	r2, [pc, #208]	; (8000aa8 <SSD1306_DrawPixel+0x138>)
 80009d6:	5cd3      	ldrb	r3, [r2, r3]
 80009d8:	b25a      	sxtb	r2, r3
 80009da:	88bb      	ldrh	r3, [r7, #4]
 80009dc:	f003 0307 	and.w	r3, r3, #7
 80009e0:	2101      	movs	r1, #1
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	b25b      	sxtb	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b259      	sxtb	r1, r3
 80009ec:	4603      	mov	r3, r0
 80009ee:	01da      	lsls	r2, r3, #7
 80009f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009f4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80009f8:	4413      	add	r3, r2
 80009fa:	b2c9      	uxtb	r1, r1
 80009fc:	4a2a      	ldr	r2, [pc, #168]	; (8000aa8 <SSD1306_DrawPixel+0x138>)
 80009fe:	54d1      	strb	r1, [r2, r3]

      break;
 8000a00:	e04c      	b.n	8000a9c <SSD1306_DrawPixel+0x12c>
    case SSD1306_COLOR_BLACK:
      //buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
    	buffer[(y/8) * SSD1306_LCDWIDTH + (SSD1306_LCDWIDTH - 1 - x)] &= ~(1 << (y & 7));
 8000a02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	da00      	bge.n	8000a0c <SSD1306_DrawPixel+0x9c>
 8000a0a:	3307      	adds	r3, #7
 8000a0c:	10db      	asrs	r3, r3, #3
 8000a0e:	b218      	sxth	r0, r3
 8000a10:	4603      	mov	r3, r0
 8000a12:	01da      	lsls	r2, r3, #7
 8000a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a18:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a22      	ldr	r2, [pc, #136]	; (8000aa8 <SSD1306_DrawPixel+0x138>)
 8000a20:	5cd3      	ldrb	r3, [r2, r3]
 8000a22:	b25a      	sxtb	r2, r3
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a30:	b25b      	sxtb	r3, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	4013      	ands	r3, r2
 8000a38:	b259      	sxtb	r1, r3
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	01da      	lsls	r2, r3, #7
 8000a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a42:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000a46:	4413      	add	r3, r2
 8000a48:	b2c9      	uxtb	r1, r1
 8000a4a:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <SSD1306_DrawPixel+0x138>)
 8000a4c:	54d1      	strb	r1, [r2, r3]
      break;
 8000a4e:	e025      	b.n	8000a9c <SSD1306_DrawPixel+0x12c>
    case SSD1306_INVERSE:
      //buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
    	buffer[(y/8) * SSD1306_LCDWIDTH + (SSD1306_LCDWIDTH - 1 - x)] ^= (1 << (y & 7));
 8000a50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	da00      	bge.n	8000a5a <SSD1306_DrawPixel+0xea>
 8000a58:	3307      	adds	r3, #7
 8000a5a:	10db      	asrs	r3, r3, #3
 8000a5c:	b218      	sxth	r0, r3
 8000a5e:	4603      	mov	r3, r0
 8000a60:	01da      	lsls	r2, r3, #7
 8000a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a66:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a0e      	ldr	r2, [pc, #56]	; (8000aa8 <SSD1306_DrawPixel+0x138>)
 8000a6e:	5cd3      	ldrb	r3, [r2, r3]
 8000a70:	b25a      	sxtb	r2, r3
 8000a72:	88bb      	ldrh	r3, [r7, #4]
 8000a74:	f003 0307 	and.w	r3, r3, #7
 8000a78:	2101      	movs	r1, #1
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	4053      	eors	r3, r2
 8000a82:	b259      	sxtb	r1, r3
 8000a84:	4603      	mov	r3, r0
 8000a86:	01da      	lsls	r2, r3, #7
 8000a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a8c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000a90:	4413      	add	r3, r2
 8000a92:	b2c9      	uxtb	r1, r1
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <SSD1306_DrawPixel+0x138>)
 8000a96:	54d1      	strb	r1, [r2, r3]
      break;
 8000a98:	e000      	b.n	8000a9c <SSD1306_DrawPixel+0x12c>
		return;
 8000a9a:	bf00      	nop
    }
  }
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000084 	.word	0x20000084

08000aac <SSD1306_Display>:


void SSD1306_Display(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0

	  SSD1306_Command(SSD1306_PAGEADDR);
 8000ab0:	2022      	movs	r0, #34	; 0x22
 8000ab2:	f7ff ff13 	bl	80008dc <SSD1306_Command>
	  SSD1306_Command(0);				// Page start address
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff ff10 	bl	80008dc <SSD1306_Command>
	  SSD1306_Command(0xFF);				// Page end (not really, but works here)
 8000abc:	20ff      	movs	r0, #255	; 0xff
 8000abe:	f7ff ff0d 	bl	80008dc <SSD1306_Command>
	  SSD1306_Command(SSD1306_COLUMNADDR);
 8000ac2:	2021      	movs	r0, #33	; 0x21
 8000ac4:	f7ff ff0a 	bl	80008dc <SSD1306_Command>
	  SSD1306_Command(0);				// Column start address
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f7ff ff07 	bl	80008dc <SSD1306_Command>
	  SSD1306_Command(SSD1306_LCDWIDTH - 1); 		// Column end address
 8000ace:	207f      	movs	r0, #127	; 0x7f
 8000ad0:	f7ff ff04 	bl	80008dc <SSD1306_Command>

	  SSD1306_Data(buffer,SSD1306_BUFFERSIZE);
 8000ad4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <SSD1306_Display+0x38>)
 8000ada:	f7ff ff13 	bl	8000904 <SSD1306_Data>


}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000084 	.word	0x20000084

08000ae8 <SSD1306_Init>:
void SSD1306_Init(I2C_Handle_t *i2c)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8000af0:	4a2a      	ldr	r2, [pc, #168]	; (8000b9c <SSD1306_Init+0xb4>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8000af6:	20ae      	movs	r0, #174	; 0xae
 8000af8:	f7ff fef0 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8000afc:	20d5      	movs	r0, #213	; 0xd5
 8000afe:	f7ff feed 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(0x80);
 8000b02:	2080      	movs	r0, #128	; 0x80
 8000b04:	f7ff feea 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(SSD1306_SETMULTIPLEX);
 8000b08:	20a8      	movs	r0, #168	; 0xa8
 8000b0a:	f7ff fee7 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8000b0e:	203f      	movs	r0, #63	; 0x3f
 8000b10:	f7ff fee4 	bl	80008dc <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8000b14:	20d3      	movs	r0, #211	; 0xd3
 8000b16:	f7ff fee1 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(0x00);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fede 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(0x80);
 8000b20:	2080      	movs	r0, #128	; 0x80
 8000b22:	f7ff fedb 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(SSD1306_CHARGEPUMP);
 8000b26:	208d      	movs	r0, #141	; 0x8d
 8000b28:	f7ff fed8 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(0x14);
 8000b2c:	2014      	movs	r0, #20
 8000b2e:	f7ff fed5 	bl	80008dc <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE);
 8000b32:	2020      	movs	r0, #32
 8000b34:	f7ff fed2 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(0x00);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f7ff fecf 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP);
 8000b3e:	20a0      	movs	r0, #160	; 0xa0
 8000b40:	f7ff fecc 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 8000b44:	20c8      	movs	r0, #200	; 0xc8
 8000b46:	f7ff fec9 	bl	80008dc <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8000b4a:	20da      	movs	r0, #218	; 0xda
 8000b4c:	f7ff fec6 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(0x12);
 8000b50:	2012      	movs	r0, #18
 8000b52:	f7ff fec3 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8000b56:	2081      	movs	r0, #129	; 0x81
 8000b58:	f7ff fec0 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(0xFF);
 8000b5c:	20ff      	movs	r0, #255	; 0xff
 8000b5e:	f7ff febd 	bl	80008dc <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8000b62:	20d9      	movs	r0, #217	; 0xd9
 8000b64:	f7ff feba 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(0xF1);
 8000b68:	20f1      	movs	r0, #241	; 0xf1
 8000b6a:	f7ff feb7 	bl	80008dc <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT);
 8000b6e:	20db      	movs	r0, #219	; 0xdb
 8000b70:	f7ff feb4 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(0x40);
 8000b74:	2040      	movs	r0, #64	; 0x40
 8000b76:	f7ff feb1 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME);
 8000b7a:	20a4      	movs	r0, #164	; 0xa4
 8000b7c:	f7ff feae 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);
 8000b80:	20a6      	movs	r0, #166	; 0xa6
 8000b82:	f7ff feab 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8000b86:	202e      	movs	r0, #46	; 0x2e
 8000b88:	f7ff fea8 	bl	80008dc <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYON);
 8000b8c:	20af      	movs	r0, #175	; 0xaf
 8000b8e:	f7ff fea5 	bl	80008dc <SSD1306_Command>


}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000494 	.word	0x20000494

08000ba0 <snek_ui_drawbutton>:
#include "Snek.h"

snek_game_t g_snek_game;

static void snek_ui_drawbutton(uint8_t *p_text, uint8_t count, uint8_t select)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b087      	sub	sp, #28
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]
 8000bac:	4613      	mov	r3, r2
 8000bae:	70bb      	strb	r3, [r7, #2]
	// lcd width - char size - spaces between chars
	uint8_t string_start_pos = ((SSD1306_LCDWIDTH - (strlen((char*) p_text) * 5) - strlen((char*) p_text))) / 2;
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff fb15 	bl	80001e0 <strlen>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	4613      	mov	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	189c      	adds	r4, r3, r2
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff fb0e 	bl	80001e0 <strlen>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4423      	add	r3, r4
 8000bc8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000bcc:	085b      	lsrs	r3, r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]

	GFX_DrawFillRectangle(0, count * SNEK_UI_BUTTON_OFFSET, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, BLACK);
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	230f      	movs	r3, #15
 8000bdc:	2280      	movs	r2, #128	; 0x80
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff fd65 	bl	80006ae <GFX_DrawFillRectangle>
	//draw selected button
	if (select)
 8000be4:	78bb      	ldrb	r3, [r7, #2]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d015      	beq.n	8000c16 <snek_ui_drawbutton+0x76>
	{
		GFX_DrawFillRectangle(0, count * SNEK_UI_BUTTON_OFFSET, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, YELLOWBLUE);
 8000bea:	78fb      	ldrb	r3, [r7, #3]
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	2280      	movs	r2, #128	; 0x80
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff fd58 	bl	80006ae <GFX_DrawFillRectangle>
		GFX_DrawString(string_start_pos, (count * SNEK_UI_BUTTON_OFFSET) + SNEK_UI_CHAR_OFFSET, (char*) p_text, BLACK,
 8000bfe:	7bf8      	ldrb	r0, [r7, #15]
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	011b      	lsls	r3, r3, #4
 8000c04:	3304      	adds	r3, #4
 8000c06:	4619      	mov	r1, r3
 8000c08:	2301      	movs	r3, #1
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	f7ff fc08 	bl	8000424 <GFX_DrawString>
		GFX_DrawRectangle(0, count * SNEK_UI_BUTTON_OFFSET, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, YELLOWBLUE);
		GFX_DrawString(string_start_pos, (count * SNEK_UI_BUTTON_OFFSET) + SNEK_UI_CHAR_OFFSET, (char*) p_text, YELLOWBLUE,
		BLACK);
	}

	return;
 8000c14:	e015      	b.n	8000c42 <snek_ui_drawbutton+0xa2>
		GFX_DrawRectangle(0, count * SNEK_UI_BUTTON_OFFSET, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, YELLOWBLUE);
 8000c16:	78fb      	ldrb	r3, [r7, #3]
 8000c18:	011b      	lsls	r3, r3, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	230f      	movs	r3, #15
 8000c22:	2280      	movs	r2, #128	; 0x80
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff fd15 	bl	8000654 <GFX_DrawRectangle>
		GFX_DrawString(string_start_pos, (count * SNEK_UI_BUTTON_OFFSET) + SNEK_UI_CHAR_OFFSET, (char*) p_text, YELLOWBLUE,
 8000c2a:	7bf8      	ldrb	r0, [r7, #15]
 8000c2c:	78fb      	ldrb	r3, [r7, #3]
 8000c2e:	011b      	lsls	r3, r3, #4
 8000c30:	3304      	adds	r3, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	2300      	movs	r3, #0
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	f7ff fbf2 	bl	8000424 <GFX_DrawString>
	return;
 8000c40:	bf00      	nop
}
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd90      	pop	{r4, r7, pc}

08000c48 <snek_gamestate_init>:

static void snek_gamestate_init(snek_game_t *p_snek_game)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

	// switch to menu screen
	p_snek_game->game_state = GAMESTATE_MENUMAIN;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
	// set button on first button
	p_snek_game->menu_buttons = BUTTON_START;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	705a      	strb	r2, [r3, #1]
	SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_START);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	889b      	ldrh	r3, [r3, #4]
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	809a      	strh	r2, [r3, #4]
	// set bit to draw menu for the first time
	SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	885b      	ldrh	r3, [r3, #2]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	805a      	strh	r2, [r3, #2]
	SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_ERROR_NODE);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	889b      	ldrh	r3, [r3, #4]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	809a      	strh	r2, [r3, #4]

}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <snek_gamesate_mainmenu>:

static void snek_gamesate_mainmenu(snek_game_t *p_snek_game)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	// check if there is a menu update
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	885b      	ldrh	r3, [r3, #2]
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	0a1b      	lsrs	r3, r3, #8
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d06c      	beq.n	8000d8c <snek_gamesate_mainmenu+0xf4>
	{
		//draw SNEK->Buttons
		snek_ui_drawbutton((uint8_t*) "Start", 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4881      	ldr	r0, [pc, #516]	; (8000ebc <snek_gamesate_mainmenu+0x224>)
 8000cb8:	f7ff ff72 	bl	8000ba0 <snek_ui_drawbutton>
		snek_ui_drawbutton((uint8_t*) "High scores", 1, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	487f      	ldr	r0, [pc, #508]	; (8000ec0 <snek_gamesate_mainmenu+0x228>)
 8000cc2:	f7ff ff6d 	bl	8000ba0 <snek_ui_drawbutton>
		snek_ui_drawbutton((uint8_t*) "Settings", 2, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2102      	movs	r1, #2
 8000cca:	487e      	ldr	r0, [pc, #504]	; (8000ec4 <snek_gamesate_mainmenu+0x22c>)
 8000ccc:	f7ff ff68 	bl	8000ba0 <snek_ui_drawbutton>
		snek_ui_drawbutton((uint8_t*) "About", 3, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2103      	movs	r1, #3
 8000cd4:	487c      	ldr	r0, [pc, #496]	; (8000ec8 <snek_gamesate_mainmenu+0x230>)
 8000cd6:	f7ff ff63 	bl	8000ba0 <snek_ui_drawbutton>

		// clear active buttons bits
		p_snek_game->SR1 &= ~(15U << SNEK_SR1_ACTIVE_BUTTON_START);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	889b      	ldrh	r3, [r3, #4]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	f023 030f 	bic.w	r3, r3, #15
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	809a      	strh	r2, [r3, #4]

		//draw selected button
		//set active window bit
		switch (p_snek_game->menu_buttons)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	785b      	ldrb	r3, [r3, #1]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d842      	bhi.n	8000d78 <snek_gamesate_mainmenu+0xe0>
 8000cf2:	a201      	add	r2, pc, #4	; (adr r2, 8000cf8 <snek_gamesate_mainmenu+0x60>)
 8000cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf8:	08000d09 	.word	0x08000d09
 8000cfc:	08000d25 	.word	0x08000d25
 8000d00:	08000d41 	.word	0x08000d41
 8000d04:	08000d5d 	.word	0x08000d5d
		{
		case (BUTTON_START):
			snek_ui_drawbutton((uint8_t*) "Start", 0, 1);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	486b      	ldr	r0, [pc, #428]	; (8000ebc <snek_gamesate_mainmenu+0x224>)
 8000d0e:	f7ff ff47 	bl	8000ba0 <snek_ui_drawbutton>
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_START);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	889b      	ldrh	r3, [r3, #4]
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	809a      	strh	r2, [r3, #4]
			break;
 8000d22:	e029      	b.n	8000d78 <snek_gamesate_mainmenu+0xe0>

		case (BUTTON_SCORES):
			snek_ui_drawbutton((uint8_t*) "High scores", 1, 1);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2101      	movs	r1, #1
 8000d28:	4865      	ldr	r0, [pc, #404]	; (8000ec0 <snek_gamesate_mainmenu+0x228>)
 8000d2a:	f7ff ff39 	bl	8000ba0 <snek_ui_drawbutton>
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_SCORES);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	889b      	ldrh	r3, [r3, #4]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	809a      	strh	r2, [r3, #4]
			break;
 8000d3e:	e01b      	b.n	8000d78 <snek_gamesate_mainmenu+0xe0>

		case (BUTTON_SETTINGS):
			snek_ui_drawbutton((uint8_t*) "Settings", 2, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2102      	movs	r1, #2
 8000d44:	485f      	ldr	r0, [pc, #380]	; (8000ec4 <snek_gamesate_mainmenu+0x22c>)
 8000d46:	f7ff ff2b 	bl	8000ba0 <snek_ui_drawbutton>
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_SETTINGS);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	889b      	ldrh	r3, [r3, #4]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	809a      	strh	r2, [r3, #4]
			break;
 8000d5a:	e00d      	b.n	8000d78 <snek_gamesate_mainmenu+0xe0>

		case (BUTTON_ABOUT):
			snek_ui_drawbutton((uint8_t*) "About", 3, 1);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2103      	movs	r1, #3
 8000d60:	4859      	ldr	r0, [pc, #356]	; (8000ec8 <snek_gamesate_mainmenu+0x230>)
 8000d62:	f7ff ff1d 	bl	8000ba0 <snek_ui_drawbutton>
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_ABOUT);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	889b      	ldrh	r3, [r3, #4]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	809a      	strh	r2, [r3, #4]
			break;
 8000d76:	bf00      	nop
		}

		// sent data to OLED
		SSD1306_Display();
 8000d78:	f7ff fe98 	bl	8000aac <SSD1306_Display>
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	885b      	ldrh	r3, [r3, #2]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	805a      	strh	r2, [r3, #2]
	}

	// check if button down is clicked
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	885b      	ldrh	r3, [r3, #2]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d01c      	beq.n	8000dd4 <snek_gamesate_mainmenu+0x13c>
	{
		// move button cursor down
		p_snek_game->menu_buttons = (p_snek_game->menu_buttons + 1) % 4;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	785b      	ldrb	r3, [r3, #1]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	425a      	negs	r2, r3
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	f002 0203 	and.w	r2, r2, #3
 8000daa:	bf58      	it	pl
 8000dac:	4253      	negpl	r3, r2
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	705a      	strb	r2, [r3, #1]
		SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	885b      	ldrh	r3, [r3, #2]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	885b      	ldrh	r3, [r3, #2]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	f023 0301 	bic.w	r3, r3, #1
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	805a      	strh	r2, [r3, #2]
	}

	// check if button up is clicked
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	885b      	ldrh	r3, [r3, #2]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	085b      	lsrs	r3, r3, #1
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d01c      	beq.n	8000e20 <snek_gamesate_mainmenu+0x188>
	{
		// move button up
		p_snek_game->menu_buttons = (p_snek_game->menu_buttons + 3) % 4;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	785b      	ldrb	r3, [r3, #1]
 8000dea:	3303      	adds	r3, #3
 8000dec:	425a      	negs	r2, r3
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	f002 0203 	and.w	r2, r2, #3
 8000df6:	bf58      	it	pl
 8000df8:	4253      	negpl	r3, r2
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	705a      	strb	r2, [r3, #1]
		SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	885b      	ldrh	r3, [r3, #2]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	885b      	ldrh	r3, [r3, #2]
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	f023 0302 	bic.w	r3, r3, #2
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	805a      	strh	r2, [r3, #2]
	}

	// check if enter is clicked
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER))
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	885b      	ldrh	r3, [r3, #2]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d040      	beq.n	8000eb4 <snek_gamesate_mainmenu+0x21c>
	{
		// change menu screen
		if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_START))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	889b      	ldrh	r3, [r3, #4]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00b      	beq.n	8000e58 <snek_gamesate_mainmenu+0x1c0>
		{
			p_snek_game->game_state = GAMESTATE_GAME;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2205      	movs	r2, #5
 8000e44:	701a      	strb	r2, [r3, #0]
			SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_INIT_NEWSCREEN);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	885b      	ldrh	r3, [r3, #2]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	805a      	strh	r2, [r3, #2]
 8000e56:	e025      	b.n	8000ea4 <snek_gamesate_mainmenu+0x20c>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_SCORES))
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	889b      	ldrh	r3, [r3, #4]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	085b      	lsrs	r3, r3, #1
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <snek_gamesate_mainmenu+0x1da>
		{
			p_snek_game->game_state = GAMESTATE_MENUSCORES;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	701a      	strb	r2, [r3, #0]
 8000e70:	e018      	b.n	8000ea4 <snek_gamesate_mainmenu+0x20c>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_ABOUT))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	08db      	lsrs	r3, r3, #3
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <snek_gamesate_mainmenu+0x1f4>
		{
			p_snek_game->game_state = GAMESTATE_MENUABOUT;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2203      	movs	r2, #3
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	e00b      	b.n	8000ea4 <snek_gamesate_mainmenu+0x20c>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_SETTINGS))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	889b      	ldrh	r3, [r3, #4]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <snek_gamesate_mainmenu+0x20c>
		{
			p_snek_game->game_state = GAMESTATE_MENUSETTINGS;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	701a      	strb	r2, [r3, #0]
		}

		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	885b      	ldrh	r3, [r3, #2]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	f023 0310 	bic.w	r3, r3, #16
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	805a      	strh	r2, [r3, #2]

	}
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	08003e08 	.word	0x08003e08
 8000ec0:	08003e10 	.word	0x08003e10
 8000ec4:	08003e1c 	.word	0x08003e1c
 8000ec8:	08003e28 	.word	0x08003e28

08000ecc <snek_map_clearmap>:

/*
 * snek map functions are used to clear and update current game state
 */
static void snek_map_clearmap(snek_game_t *p_snek_game)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	memset(p_snek_game->game_map, 0, sizeof(node_t) * SNEK_UI_NO_NODES);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3307      	adds	r3, #7
 8000ed8:	f44f 7290 	mov.w	r2, #288	; 0x120
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 fdaa 	bl	8002a38 <memset>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <snek_map_createnode>:

static void snek_map_createnode(snek_game_t *p_snek_game, uint8_t new_node_number)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	70fb      	strb	r3, [r7, #3]

	if (!(SNEK_CHECK_NODE_LIMITS(new_node_number)))
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	2b5f      	cmp	r3, #95	; 0x5f
 8000efc:	d908      	bls.n	8000f10 <snek_map_createnode+0x24>
	{
		SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ERROR_NODE);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	889b      	ldrh	r3, [r3, #4]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	809a      	strh	r2, [r3, #4]
		return;
 8000f0e:	e048      	b.n	8000fa2 <snek_map_createnode+0xb6>
	}

	p_snek_game->game_map[new_node_number].node_taken = 1;
 8000f10:	78fa      	ldrb	r2, [r7, #3]
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	4613      	mov	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4413      	add	r3, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	3307      	adds	r3, #7
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]

	// if this first node made
	if (p_snek_game->snek_lenght == 0)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10d      	bne.n	8000f48 <snek_map_createnode+0x5c>
	{
		// to first node assign null to last position
		p_snek_game->game_map[new_node_number].last_node_pos = SNEK_NULL_NODE;
 8000f2c:	78fa      	ldrb	r2, [r7, #3]
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	3308      	adds	r3, #8
 8000f3a:	2264      	movs	r2, #100	; 0x64
 8000f3c:	701a      	strb	r2, [r3, #0]

		p_snek_game->tail_address = new_node_number;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	78fa      	ldrb	r2, [r7, #3]
 8000f42:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8000f46:	e017      	b.n	8000f78 <snek_map_createnode+0x8c>
	}
	else
	{
		// to the next node assign position of last head
		p_snek_game->game_map[new_node_number].last_node_pos = p_snek_game->head_address;
 8000f48:	78fa      	ldrb	r2, [r7, #3]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 0127 	ldrb.w	r0, [r3, #295]	; 0x127
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	3308      	adds	r3, #8
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	701a      	strb	r2, [r3, #0]
		// to the last head assign node that we are creating
		p_snek_game->game_map[p_snek_game->head_address].next_node_pos = new_node_number;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8000f66:	4619      	mov	r1, r3
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	440b      	add	r3, r1
 8000f70:	4413      	add	r3, r2
 8000f72:	3309      	adds	r3, #9
 8000f74:	78fa      	ldrb	r2, [r7, #3]
 8000f76:	701a      	strb	r2, [r3, #0]

	}

	// we are creating head to next node is NULL
	p_snek_game->game_map[new_node_number].next_node_pos = SNEK_NULL_NODE;
 8000f78:	78fa      	ldrb	r2, [r7, #3]
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	3309      	adds	r3, #9
 8000f86:	2264      	movs	r2, #100	; 0x64
 8000f88:	701a      	strb	r2, [r3, #0]
	// node that we are creating is new head
	p_snek_game->head_address = new_node_number;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	78fa      	ldrb	r2, [r7, #3]
 8000f8e:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
	p_snek_game->snek_lenght++;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a

}
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <snek_map_deletenode>:

static void snek_map_deletenode(snek_game_t *p_snek_game, uint8_t last_node_number)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
	uint8_t temp_node_pos;

	if (!(SNEK_CHECK_NODE_LIMITS(last_node_number)))
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	2b5f      	cmp	r3, #95	; 0x5f
 8000fbc:	d908      	bls.n	8000fd0 <snek_map_deletenode+0x24>
	{
		SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ERROR_NODE);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	889b      	ldrh	r3, [r3, #4]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	809a      	strh	r2, [r3, #4]
		return;
 8000fce:	e044      	b.n	800105a <snek_map_deletenode+0xae>
	}

	// save new tail to temporary buffer
	temp_node_pos = p_snek_game->game_map[p_snek_game->tail_address].next_node_pos;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	440b      	add	r3, r1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	3309      	adds	r3, #9
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	73fb      	strb	r3, [r7, #15]

	// clear node
	p_snek_game->game_map[p_snek_game->tail_address].last_node_pos = 0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8000fee:	4619      	mov	r1, r3
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	440b      	add	r3, r1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	3308      	adds	r3, #8
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
	p_snek_game->game_map[p_snek_game->tail_address].next_node_pos = 0;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8001006:	4619      	mov	r1, r3
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	460b      	mov	r3, r1
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	440b      	add	r3, r1
 8001010:	4413      	add	r3, r2
 8001012:	3309      	adds	r3, #9
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
	p_snek_game->game_map[p_snek_game->tail_address].node_taken = 0;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800101e:	4619      	mov	r1, r3
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	440b      	add	r3, r1
 8001028:	4413      	add	r3, r2
 800102a:	3307      	adds	r3, #7
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]

	// assign new tail
	p_snek_game->tail_address = temp_node_pos;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
	p_snek_game->game_map[temp_node_pos].last_node_pos = SNEK_NULL_NODE;
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	440b      	add	r3, r1
 8001044:	3308      	adds	r3, #8
 8001046:	2264      	movs	r2, #100	; 0x64
 8001048:	701a      	strb	r2, [r3, #0]
	p_snek_game->snek_lenght--;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8001050:	3b01      	subs	r3, #1
 8001052:	b29a      	uxth	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a

}
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <snek_map_drawnode>:

static void snek_map_drawnode(snek_game_t *p_snek_game, uint8_t new_node_number)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af02      	add	r7, sp, #8
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
	snek_map_createnode(p_snek_game, new_node_number);
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	4619      	mov	r1, r3
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff39 	bl	8000eec <snek_map_createnode>
	// draw node square
	uint8_t temp_x_pos = ((new_node_number % 16) * 8);
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	f003 030f 	and.w	r3, r3, #15
 8001080:	b2db      	uxtb	r3, r3
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	73fb      	strb	r3, [r7, #15]
	uint8_t temp_y_pos = 16 + ((new_node_number / 16) * 8);
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	b2db      	uxtb	r3, r3
 800108c:	3302      	adds	r3, #2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	73bb      	strb	r3, [r7, #14]
	GFX_DrawFillRectangle(temp_x_pos, temp_y_pos, SNEK_UI_NODE_HEIGHT, SNEK_UI_NODE_WIDTH, YELLOWBLUE);
 8001094:	7bf8      	ldrb	r0, [r7, #15]
 8001096:	7bb9      	ldrb	r1, [r7, #14]
 8001098:	2301      	movs	r3, #1
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2308      	movs	r3, #8
 800109e:	2208      	movs	r2, #8
 80010a0:	f7ff fb05 	bl	80006ae <GFX_DrawFillRectangle>
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <snek_map_erasenode>:

static void snek_map_erasenode(snek_game_t *p_snek_game, uint8_t last_node_number)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70fb      	strb	r3, [r7, #3]
	snek_map_deletenode(p_snek_game, last_node_number);
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	4619      	mov	r1, r3
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff75 	bl	8000fac <snek_map_deletenode>
	// draw node square
	uint8_t temp_x_pos = ((last_node_number % 16) * 8);
 80010c2:	78fb      	ldrb	r3, [r7, #3]
 80010c4:	f003 030f 	and.w	r3, r3, #15
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	73fb      	strb	r3, [r7, #15]
	uint8_t temp_y_pos = 16 + ((last_node_number / 16) * 8);
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	091b      	lsrs	r3, r3, #4
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	3302      	adds	r3, #2
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	73bb      	strb	r3, [r7, #14]
	GFX_DrawFillRectangle(temp_x_pos, temp_y_pos, SNEK_UI_NODE_HEIGHT, SNEK_UI_NODE_WIDTH, BLACK);
 80010dc:	7bf8      	ldrb	r0, [r7, #15]
 80010de:	7bb9      	ldrb	r1, [r7, #14]
 80010e0:	2300      	movs	r3, #0
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2308      	movs	r3, #8
 80010e6:	2208      	movs	r2, #8
 80010e8:	f7ff fae1 	bl	80006ae <GFX_DrawFillRectangle>
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <snek_map_drawfruity>:

static void snek_map_drawfruity(snek_game_t *p_snek_game, uint8_t fruity_node)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	70fb      	strb	r3, [r7, #3]
	// draw node square
	uint8_t temp_x_pos = ((fruity_node % 16) * 8);
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	b2db      	uxtb	r3, r3
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	73fb      	strb	r3, [r7, #15]
	uint8_t temp_y_pos = 16 + ((fruity_node / 16) * 8);
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	b2db      	uxtb	r3, r3
 8001112:	3302      	adds	r3, #2
 8001114:	b2db      	uxtb	r3, r3
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	73bb      	strb	r3, [r7, #14]

	GFX_DrawFillRoundRectangle(temp_x_pos, temp_y_pos, SNEK_UI_NODE_HEIGHT, SNEK_UI_NODE_WIDTH, 1, YELLOWBLUE);
 800111a:	7bf8      	ldrb	r0, [r7, #15]
 800111c:	7bb9      	ldrb	r1, [r7, #14]
 800111e:	2301      	movs	r3, #1
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	2301      	movs	r3, #1
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2308      	movs	r3, #8
 8001128:	2208      	movs	r2, #8
 800112a:	f7ff fb84 	bl	8000836 <GFX_DrawFillRoundRectangle>
	//GFX_DrawFillRectangle(temp_x_pos, temp_y_pos, SNEK_UI_NODE_HEIGHT, SNEK_UI_NODE_WIDTH, YELLOWBLUE);
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <snek_gamestate_game>:


static void snek_gamestate_game(snek_game_t *p_snek_game)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af02      	add	r7, sp, #8
 800113e:	6078      	str	r0, [r7, #4]
	// draw first screen
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_INIT_NEWSCREEN))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	885b      	ldrh	r3, [r3, #2]
 8001144:	b29b      	uxth	r3, r3
 8001146:	0a5b      	lsrs	r3, r3, #9
 8001148:	b29b      	uxth	r3, r3
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d047      	beq.n	80011e2 <snek_gamestate_game+0xaa>
	{
		// init parameters
		p_snek_game->snek_lenght = 0;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
		snek_map_clearmap(p_snek_game);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff feb6 	bl	8000ecc <snek_map_clearmap>
		SSD1306_Clear(BLACK);
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fbe5 	bl	8000930 <SSD1306_Clear>
		// draw scorebox as a top button
		GFX_DrawRectangle(0, 0, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, YELLOWBLUE);
 8001166:	2301      	movs	r3, #1
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	230f      	movs	r3, #15
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	2100      	movs	r1, #0
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff fa6f 	bl	8000654 <GFX_DrawRectangle>
		GFX_DrawString(5, 0 + SNEK_UI_CHAR_OFFSET, "SNEK", YELLOWBLUE, BLACK);
 8001176:	2300      	movs	r3, #0
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	4a97      	ldr	r2, [pc, #604]	; (80013dc <snek_gamestate_game+0x2a4>)
 800117e:	2104      	movs	r1, #4
 8001180:	2005      	movs	r0, #5
 8001182:	f7ff f94f 	bl	8000424 <GFX_DrawString>
		GFX_DrawString(60, 0 + SNEK_UI_CHAR_OFFSET, "SCORE: 0", YELLOWBLUE, BLACK);
 8001186:	2300      	movs	r3, #0
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	4a94      	ldr	r2, [pc, #592]	; (80013e0 <snek_gamestate_game+0x2a8>)
 800118e:	2104      	movs	r1, #4
 8001190:	203c      	movs	r0, #60	; 0x3c
 8001192:	f7ff f947 	bl	8000424 <GFX_DrawString>

		// create snake in game map

		snek_map_drawnode(p_snek_game, 40);
 8001196:	2128      	movs	r1, #40	; 0x28
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff63 	bl	8001064 <snek_map_drawnode>
		snek_map_drawnode(p_snek_game, 41);
 800119e:	2129      	movs	r1, #41	; 0x29
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff5f 	bl	8001064 <snek_map_drawnode>
		snek_map_drawnode(p_snek_game, 42);
 80011a6:	212a      	movs	r1, #42	; 0x2a
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff5b 	bl	8001064 <snek_map_drawnode>

		// set first movement as right
		SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	889b      	ldrh	r3, [r3, #4]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	809a      	strh	r2, [r3, #4]

		SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_NO_FRUITY);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	889b      	ldrh	r3, [r3, #4]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	809a      	strh	r2, [r3, #4]

		SSD1306_Display();
 80011ce:	f7ff fc6d 	bl	8000aac <SSD1306_Display>
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_INIT_NEWSCREEN);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	885b      	ldrh	r3, [r3, #2]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011dc:	b29a      	uxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	805a      	strh	r2, [r3, #2]

	}

	SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	885b      	ldrh	r3, [r3, #2]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	805a      	strh	r2, [r3, #2]

	// game tick
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	885b      	ldrh	r3, [r3, #2]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 81fa 	beq.w	80015fa <snek_gamestate_game+0x4c2>
	{
		// check if direction change is required

		// if we are moving vertically
		if ((SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN)) || (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP)))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	889b      	ldrh	r3, [r3, #4]
 800120a:	b29b      	uxth	r3, r3
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	b29b      	uxth	r3, r3
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d108      	bne.n	800122a <snek_gamestate_game+0xf2>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	889b      	ldrh	r3, [r3, #4]
 800121c:	b29b      	uxth	r3, r3
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	b29b      	uxth	r3, r3
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d064      	beq.n	80012f4 <snek_gamestate_game+0x1bc>
		{
			// ignore up/down buttons and change snek new movement direction
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	885b      	ldrh	r3, [r3, #2]
 800122e:	b29b      	uxth	r3, r3
 8001230:	f023 0301 	bic.w	r3, r3, #1
 8001234:	b29a      	uxth	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	805a      	strh	r2, [r3, #2]
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	885b      	ldrh	r3, [r3, #2]
 800123e:	b29b      	uxth	r3, r3
 8001240:	f023 0302 	bic.w	r3, r3, #2
 8001244:	b29a      	uxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	805a      	strh	r2, [r3, #2]

			if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	885b      	ldrh	r3, [r3, #2]
 800124e:	b29b      	uxth	r3, r3
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	b29b      	uxth	r3, r3
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d020      	beq.n	800129e <snek_gamestate_game+0x166>
			{
				// set new direction, reset old direction and button flag
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	889b      	ldrh	r3, [r3, #4]
 8001260:	b29b      	uxth	r3, r3
 8001262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001266:	b29a      	uxth	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	809a      	strh	r2, [r3, #4]
				SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_LEFT);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	889b      	ldrh	r3, [r3, #4]
 8001270:	b29b      	uxth	r3, r3
 8001272:	f023 0304 	bic.w	r3, r3, #4
 8001276:	b29a      	uxth	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	809a      	strh	r2, [r3, #4]
				SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	889b      	ldrh	r3, [r3, #4]
 8001280:	b29b      	uxth	r3, r3
 8001282:	f023 0310 	bic.w	r3, r3, #16
 8001286:	b29a      	uxth	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	809a      	strh	r2, [r3, #4]
				SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	889b      	ldrh	r3, [r3, #4]
 8001290:	b29b      	uxth	r3, r3
 8001292:	f023 0320 	bic.w	r3, r3, #32
 8001296:	b29a      	uxth	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	809a      	strh	r2, [r3, #4]
			if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 800129c:	e0a2      	b.n	80013e4 <snek_gamestate_game+0x2ac>
			}
			else if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	885b      	ldrh	r3, [r3, #2]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 8099 	beq.w	80013e4 <snek_gamestate_game+0x2ac>
			{
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	889b      	ldrh	r3, [r3, #4]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012bc:	b29a      	uxth	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	809a      	strh	r2, [r3, #4]
				SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_RIGHT);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	889b      	ldrh	r3, [r3, #4]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	f023 0308 	bic.w	r3, r3, #8
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	809a      	strh	r2, [r3, #4]
				SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	889b      	ldrh	r3, [r3, #4]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	f023 0310 	bic.w	r3, r3, #16
 80012dc:	b29a      	uxth	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	809a      	strh	r2, [r3, #4]
				SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	889b      	ldrh	r3, [r3, #4]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	f023 0320 	bic.w	r3, r3, #32
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	809a      	strh	r2, [r3, #4]
			if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 80012f2:	e077      	b.n	80013e4 <snek_gamestate_game+0x2ac>
			}
		}
		else if ((SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT)) || (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT)))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	889b      	ldrh	r3, [r3, #4]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	099b      	lsrs	r3, r3, #6
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d108      	bne.n	8001318 <snek_gamestate_game+0x1e0>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	889b      	ldrh	r3, [r3, #4]
 800130a:	b29b      	uxth	r3, r3
 800130c:	09db      	lsrs	r3, r3, #7
 800130e:	b29b      	uxth	r3, r3
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b00      	cmp	r3, #0
 8001316:	d066      	beq.n	80013e6 <snek_gamestate_game+0x2ae>
		{
			// same if we are in horizontal movement
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	885b      	ldrh	r3, [r3, #2]
 800131c:	b29b      	uxth	r3, r3
 800131e:	f023 0304 	bic.w	r3, r3, #4
 8001322:	b29a      	uxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	805a      	strh	r2, [r3, #2]
			SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	885b      	ldrh	r3, [r3, #2]
 800132c:	b29b      	uxth	r3, r3
 800132e:	f023 0308 	bic.w	r3, r3, #8
 8001332:	b29a      	uxth	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	805a      	strh	r2, [r3, #2]

			if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	885b      	ldrh	r3, [r3, #2]
 800133c:	b29b      	uxth	r3, r3
 800133e:	085b      	lsrs	r3, r3, #1
 8001340:	b29b      	uxth	r3, r3
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d020      	beq.n	800138c <snek_gamestate_game+0x254>
			{
				// set new direction, reset old direction and button flag
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	889b      	ldrh	r3, [r3, #4]
 800134e:	b29b      	uxth	r3, r3
 8001350:	f043 0320 	orr.w	r3, r3, #32
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	809a      	strh	r2, [r3, #4]
				SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_UP);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	889b      	ldrh	r3, [r3, #4]
 800135e:	b29b      	uxth	r3, r3
 8001360:	f023 0302 	bic.w	r3, r3, #2
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	809a      	strh	r2, [r3, #4]
				SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	889b      	ldrh	r3, [r3, #4]
 800136e:	b29b      	uxth	r3, r3
 8001370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001374:	b29a      	uxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	809a      	strh	r2, [r3, #4]
				SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	889b      	ldrh	r3, [r3, #4]
 800137e:	b29b      	uxth	r3, r3
 8001380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001384:	b29a      	uxth	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	809a      	strh	r2, [r3, #4]
 800138a:	e02c      	b.n	80013e6 <snek_gamestate_game+0x2ae>
			}
			else if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	885b      	ldrh	r3, [r3, #2]
 8001390:	b29b      	uxth	r3, r3
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d025      	beq.n	80013e6 <snek_gamestate_game+0x2ae>
			{
				SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	889b      	ldrh	r3, [r3, #4]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	f043 0310 	orr.w	r3, r3, #16
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	809a      	strh	r2, [r3, #4]
				SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_DOWN);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	889b      	ldrh	r3, [r3, #4]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	809a      	strh	r2, [r3, #4]
				SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	889b      	ldrh	r3, [r3, #4]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	809a      	strh	r2, [r3, #4]
				SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	889b      	ldrh	r3, [r3, #4]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	809a      	strh	r2, [r3, #4]
 80013da:	e004      	b.n	80013e6 <snek_gamestate_game+0x2ae>
 80013dc:	08003e30 	.word	0x08003e30
 80013e0:	08003e38 	.word	0x08003e38
			if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 80013e4:	bf00      	nop
			}
		}

		// create fruity if its neccessary
		if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_NO_FRUITY))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	889b      	ldrh	r3, [r3, #4]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	0a5b      	lsrs	r3, r3, #9
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d02a      	beq.n	800144e <snek_gamestate_game+0x316>
		{
			// look for a place for a fruity node
			do
			{
				p_snek_game->fruity_node = rand() % 96;
 80013f8:	f001 fb26 	bl	8002a48 <rand>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b80      	ldr	r3, [pc, #512]	; (8001600 <snek_gamestate_game+0x4c8>)
 8001400:	fb83 1302 	smull	r1, r3, r3, r2
 8001404:	1119      	asrs	r1, r3, #4
 8001406:	17d3      	asrs	r3, r2, #31
 8001408:	1ac9      	subs	r1, r1, r3
 800140a:	460b      	mov	r3, r1
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	440b      	add	r3, r1
 8001410:	015b      	lsls	r3, r3, #5
 8001412:	1ad1      	subs	r1, r2, r3
 8001414:	b2ca      	uxtb	r2, r1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	719a      	strb	r2, [r3, #6]
			} while (p_snek_game->game_map[p_snek_game->fruity_node].node_taken);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	799b      	ldrb	r3, [r3, #6]
 800141e:	4619      	mov	r1, r3
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	460b      	mov	r3, r1
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	440b      	add	r3, r1
 8001428:	4413      	add	r3, r2
 800142a:	3307      	adds	r3, #7
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1e2      	bne.n	80013f8 <snek_gamestate_game+0x2c0>

			snek_map_drawfruity(p_snek_game, p_snek_game->fruity_node);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	799b      	ldrb	r3, [r3, #6]
 8001436:	4619      	mov	r1, r3
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fe5b 	bl	80010f4 <snek_map_drawfruity>
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_NO_FRUITY);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	889b      	ldrh	r3, [r3, #4]
 8001442:	b29b      	uxth	r3, r3
 8001444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001448:	b29a      	uxth	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	809a      	strh	r2, [r3, #4]
		}

		// delay
		for (uint32_t i = 0; i < 840000; i++)
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	e002      	b.n	800145a <snek_gamestate_game+0x322>
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	4a69      	ldr	r2, [pc, #420]	; (8001604 <snek_gamestate_game+0x4cc>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d9f8      	bls.n	8001454 <snek_gamestate_game+0x31c>

		}

		// calculate next node position in array
		uint8_t temp_new_head;
		if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	889b      	ldrh	r3, [r3, #4]
 8001466:	b29b      	uxth	r3, r3
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	b29b      	uxth	r3, r3
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d01b      	beq.n	80014ac <snek_gamestate_game+0x374>
		{
			// head = same column + new row
			temp_new_head = (p_snek_game->head_address) % 16 + ((((p_snek_game->head_address / 16) + 1) % 6 * 16));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	b2d8      	uxtb	r0, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	b2db      	uxtb	r3, r3
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	4b5c      	ldr	r3, [pc, #368]	; (8001600 <snek_gamestate_game+0x4c8>)
 800148e:	fb83 3102 	smull	r3, r1, r3, r2
 8001492:	17d3      	asrs	r3, r2, #31
 8001494:	1ac9      	subs	r1, r1, r3
 8001496:	460b      	mov	r3, r1
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	440b      	add	r3, r1
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	1ad1      	subs	r1, r2, r3
 80014a0:	b2cb      	uxtb	r3, r1
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4403      	add	r3, r0
 80014a8:	74fb      	strb	r3, [r7, #19]
 80014aa:	e061      	b.n	8001570 <snek_gamestate_game+0x438>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	889b      	ldrh	r3, [r3, #4]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d01b      	beq.n	80014f6 <snek_gamestate_game+0x3be>
		{
			// head = same column + new row
			temp_new_head = (p_snek_game->head_address) % 16 + ((((p_snek_game->head_address / 16) + 5) % 6 * 16));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	b2d8      	uxtb	r0, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	1d5a      	adds	r2, r3, #5
 80014d6:	4b4a      	ldr	r3, [pc, #296]	; (8001600 <snek_gamestate_game+0x4c8>)
 80014d8:	fb83 3102 	smull	r3, r1, r3, r2
 80014dc:	17d3      	asrs	r3, r2, #31
 80014de:	1ac9      	subs	r1, r1, r3
 80014e0:	460b      	mov	r3, r1
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	440b      	add	r3, r1
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	1ad1      	subs	r1, r2, r3
 80014ea:	b2cb      	uxtb	r3, r1
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4403      	add	r3, r0
 80014f2:	74fb      	strb	r3, [r7, #19]
 80014f4:	e03c      	b.n	8001570 <snek_gamestate_game+0x438>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	889b      	ldrh	r3, [r3, #4]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	099b      	lsrs	r3, r3, #6
 80014fe:	b29b      	uxth	r3, r3
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d015      	beq.n	8001534 <snek_gamestate_game+0x3fc>
		{
			//head = new column + same row
			temp_new_head = (p_snek_game->head_address + 15) % 16 + ((p_snek_game->head_address / 16) * 16);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 800150e:	330f      	adds	r3, #15
 8001510:	425a      	negs	r2, r3
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	f002 020f 	and.w	r2, r2, #15
 800151a:	bf58      	it	pl
 800151c:	4253      	negpl	r3, r2
 800151e:	b2da      	uxtb	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	b2db      	uxtb	r3, r3
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4413      	add	r3, r2
 8001530:	74fb      	strb	r3, [r7, #19]
 8001532:	e01d      	b.n	8001570 <snek_gamestate_game+0x438>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	889b      	ldrh	r3, [r3, #4]
 8001538:	b29b      	uxth	r3, r3
 800153a:	09db      	lsrs	r3, r3, #7
 800153c:	b29b      	uxth	r3, r3
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d014      	beq.n	8001570 <snek_gamestate_game+0x438>
		{
			//head = new column + same row
			temp_new_head = (p_snek_game->head_address + 1) % 16 + ((p_snek_game->head_address / 16) * 16);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 800154c:	3301      	adds	r3, #1
 800154e:	425a      	negs	r2, r3
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	f002 020f 	and.w	r2, r2, #15
 8001558:	bf58      	it	pl
 800155a:	4253      	negpl	r3, r2
 800155c:	b2da      	uxtb	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8001564:	091b      	lsrs	r3, r3, #4
 8001566:	b2db      	uxtb	r3, r3
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4413      	add	r3, r2
 800156e:	74fb      	strb	r3, [r7, #19]
		}

		// check if new node is taken -> if yes then collision
		if (p_snek_game->game_map[temp_new_head].node_taken)
 8001570:	7cfa      	ldrb	r2, [r7, #19]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	440b      	add	r3, r1
 800157c:	3307      	adds	r3, #7
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d00b      	beq.n	800159c <snek_gamestate_game+0x464>
		{
			p_snek_game->game_state = GAMESTATE_OVER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2206      	movs	r2, #6
 8001588:	701a      	strb	r2, [r3, #0]
			SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_INIT_NEWSCREEN);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	885b      	ldrh	r3, [r3, #2]
 800158e:	b29b      	uxth	r3, r3
 8001590:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001594:	b29a      	uxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	805a      	strh	r2, [r3, #2]
 800159a:	e02e      	b.n	80015fa <snek_gamestate_game+0x4c2>
			return;
		}

		// check if next node is fruity node
		if (p_snek_game->fruity_node == temp_new_head)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	799b      	ldrb	r3, [r3, #6]
 80015a0:	7cfa      	ldrb	r2, [r7, #19]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d108      	bne.n	80015b8 <snek_gamestate_game+0x480>
		{
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_NO_FRUITY);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	889b      	ldrh	r3, [r3, #4]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	809a      	strh	r2, [r3, #4]
 80015b6:	e006      	b.n	80015c6 <snek_gamestate_game+0x48e>

		}
		else
		{
			// erase tail
			snek_map_erasenode(p_snek_game, p_snek_game->tail_address);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 80015be:	4619      	mov	r1, r3
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fd73 	bl	80010ac <snek_map_erasenode>
		}

		snek_map_drawnode(p_snek_game, temp_new_head);
 80015c6:	7cfb      	ldrb	r3, [r7, #19]
 80015c8:	4619      	mov	r1, r3
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fd4a 	bl	8001064 <snek_map_drawnode>

		uint8_t temp_msg[8];
		sprintf((char*) temp_msg, "%d", (p_snek_game->snek_lenght - 3));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 80015d6:	1eda      	subs	r2, r3, #3
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	490a      	ldr	r1, [pc, #40]	; (8001608 <snek_gamestate_game+0x4d0>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 fa72 	bl	8002ac8 <siprintf>
		GFX_DrawString(102, 0 + SNEK_UI_CHAR_OFFSET, (char*) temp_msg, YELLOWBLUE, BLACK);
 80015e4:	f107 0208 	add.w	r2, r7, #8
 80015e8:	2300      	movs	r3, #0
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2301      	movs	r3, #1
 80015ee:	2104      	movs	r1, #4
 80015f0:	2066      	movs	r0, #102	; 0x66
 80015f2:	f7fe ff17 	bl	8000424 <GFX_DrawString>

		SSD1306_Display();
 80015f6:	f7ff fa59 	bl	8000aac <SSD1306_Display>
	}
}
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2aaaaaab 	.word	0x2aaaaaab
 8001604:	000cd13f 	.word	0x000cd13f
 8001608:	08003e44 	.word	0x08003e44

0800160c <snek_gamestate_over>:

static void snek_gamestate_over(snek_game_t *p_snek_game)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	; 0x30
 8001610:	af02      	add	r7, sp, #8
 8001612:	6078      	str	r0, [r7, #4]
	// init game over screen
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_INIT_NEWSCREEN))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	885b      	ldrh	r3, [r3, #2]
 8001618:	b29b      	uxth	r3, r3
 800161a:	0a5b      	lsrs	r3, r3, #9
 800161c:	b29b      	uxth	r3, r3
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d068      	beq.n	80016f8 <snek_gamestate_over+0xec>
	{
		// game over animation
		for (uint8_t count = 0; count < SSD1306_LCDWIDTH; count++)
 8001626:	2300      	movs	r3, #0
 8001628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800162c:	e016      	b.n	800165c <snek_gamestate_over+0x50>
		{
			GFX_DrawFillRectangle((count % 16) * 8, (count / 16) * 8, SNEK_UI_NODE_WIDTH, SNEK_UI_NODE_HEIGHT, YELLOWBLUE);
 800162e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	00d8      	lsls	r0, r3, #3
 8001638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	b2db      	uxtb	r3, r3
 8001640:	00d9      	lsls	r1, r3, #3
 8001642:	2301      	movs	r3, #1
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2308      	movs	r3, #8
 8001648:	2208      	movs	r2, #8
 800164a:	f7ff f830 	bl	80006ae <GFX_DrawFillRectangle>

			SSD1306_Display();
 800164e:	f7ff fa2d 	bl	8000aac <SSD1306_Display>
		for (uint8_t count = 0; count < SSD1306_LCDWIDTH; count++)
 8001652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001656:	3301      	adds	r3, #1
 8001658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800165c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001660:	2b00      	cmp	r3, #0
 8001662:	dae4      	bge.n	800162e <snek_gamestate_over+0x22>
		}

		uint8_t msg[16];

		sprintf((char*) msg, "Score: %d", (p_snek_game->snek_lenght - 3));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 800166a:	1eda      	subs	r2, r3, #3
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	49b6      	ldr	r1, [pc, #728]	; (800194c <snek_gamestate_over+0x340>)
 8001672:	4618      	mov	r0, r3
 8001674:	f001 fa28 	bl	8002ac8 <siprintf>

		// draw ui
		snek_ui_drawbutton((uint8_t*) "Game over", 0, 1);
 8001678:	2201      	movs	r2, #1
 800167a:	2100      	movs	r1, #0
 800167c:	48b4      	ldr	r0, [pc, #720]	; (8001950 <snek_gamestate_over+0x344>)
 800167e:	f7ff fa8f 	bl	8000ba0 <snek_ui_drawbutton>
		snek_ui_drawbutton((uint8_t*) msg, 1, 1);
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	2201      	movs	r2, #1
 8001688:	2101      	movs	r1, #1
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fa88 	bl	8000ba0 <snek_ui_drawbutton>
		snek_ui_drawbutton((uint8_t*) "Name:", 2, 1);
 8001690:	2201      	movs	r2, #1
 8001692:	2102      	movs	r1, #2
 8001694:	48af      	ldr	r0, [pc, #700]	; (8001954 <snek_gamestate_over+0x348>)
 8001696:	f7ff fa83 	bl	8000ba0 <snek_ui_drawbutton>
		snek_ui_drawbutton((uint8_t*) "", 3, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2103      	movs	r1, #3
 800169e:	48ae      	ldr	r0, [pc, #696]	; (8001958 <snek_gamestate_over+0x34c>)
 80016a0:	f7ff fa7e 	bl	8000ba0 <snek_ui_drawbutton>

		// draw ok button
		GFX_DrawRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, YELLOWBLUE);
 80016a4:	2301      	movs	r3, #1
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	230b      	movs	r3, #11
 80016aa:	2214      	movs	r2, #20
 80016ac:	2132      	movs	r1, #50	; 0x32
 80016ae:	206a      	movs	r0, #106	; 0x6a
 80016b0:	f7fe ffd0 	bl	8000654 <GFX_DrawRectangle>
		GFX_DrawString(SNEK_UI_OK_BUTTON_POS_X + 4, SNEK_UI_OK_BUTTON_POS_Y + 1, "OK", YELLOWBLUE, BLACK);
 80016b4:	2300      	movs	r3, #0
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	4aa8      	ldr	r2, [pc, #672]	; (800195c <snek_gamestate_over+0x350>)
 80016bc:	2133      	movs	r1, #51	; 0x33
 80016be:	206e      	movs	r0, #110	; 0x6e
 80016c0:	f7fe feb0 	bl	8000424 <GFX_DrawString>
		// init text editor values
		p_snek_game->txt_edit.pos = 0;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
		p_snek_game->txt_edit.val = 'A';
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2241      	movs	r2, #65	; 0x41
 80016d0:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
		memset(p_snek_game->txt_edit.name, ' ', 16);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80016da:	2210      	movs	r2, #16
 80016dc:	2120      	movs	r1, #32
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 f9aa 	bl	8002a38 <memset>

		SSD1306_Display();
 80016e4:	f7ff f9e2 	bl	8000aac <SSD1306_Display>
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_INIT_NEWSCREEN);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	885b      	ldrh	r3, [r3, #2]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	805a      	strh	r2, [r3, #2]

	}

	// delay
	for (uint32_t i = 0; i < 840000; i++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
 80016fc:	e002      	b.n	8001704 <snek_gamestate_over+0xf8>
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	3301      	adds	r3, #1
 8001702:	623b      	str	r3, [r7, #32]
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	4a96      	ldr	r2, [pc, #600]	; (8001960 <snek_gamestate_over+0x354>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d9f8      	bls.n	80016fe <snek_gamestate_over+0xf2>
	{

	}

	// check if there is a letter to change
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	885b      	ldrh	r3, [r3, #2]
 8001710:	b29b      	uxth	r3, r3
 8001712:	085b      	lsrs	r3, r3, #1
 8001714:	b29b      	uxth	r3, r3
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d01a      	beq.n	8001754 <snek_gamestate_over+0x148>
	{
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	885b      	ldrh	r3, [r3, #2]
 8001722:	b29b      	uxth	r3, r3
 8001724:	f023 0302 	bic.w	r3, r3, #2
 8001728:	b29a      	uxth	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	805a      	strh	r2, [r3, #2]
		(p_snek_game->txt_edit.val > 'Z') ? p_snek_game->txt_edit.val = 'A' : p_snek_game->txt_edit.val++;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8001734:	2b5a      	cmp	r3, #90	; 0x5a
 8001736:	d904      	bls.n	8001742 <snek_gamestate_over+0x136>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2241      	movs	r2, #65	; 0x41
 800173c:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 8001740:	e029      	b.n	8001796 <snek_gamestate_over+0x18a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8001748:	3301      	adds	r3, #1
 800174a:	b2da      	uxtb	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 8001752:	e020      	b.n	8001796 <snek_gamestate_over+0x18a>
	}
	else if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	885b      	ldrh	r3, [r3, #2]
 8001758:	b29b      	uxth	r3, r3
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d019      	beq.n	8001796 <snek_gamestate_over+0x18a>
	{
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	885b      	ldrh	r3, [r3, #2]
 8001766:	b29b      	uxth	r3, r3
 8001768:	f023 0301 	bic.w	r3, r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	805a      	strh	r2, [r3, #2]
		(p_snek_game->txt_edit.val < 'A') ? p_snek_game->txt_edit.val = 'Z' : p_snek_game->txt_edit.val--;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8001778:	2b40      	cmp	r3, #64	; 0x40
 800177a:	d804      	bhi.n	8001786 <snek_gamestate_over+0x17a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	225a      	movs	r2, #90	; 0x5a
 8001780:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 8001784:	e007      	b.n	8001796 <snek_gamestate_over+0x18a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 800178c:	3b01      	subs	r3, #1
 800178e:	b2da      	uxtb	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	}

	// check if there is position to change
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	885b      	ldrh	r3, [r3, #2]
 800179a:	b29b      	uxth	r3, r3
 800179c:	08db      	lsrs	r3, r3, #3
 800179e:	b29b      	uxth	r3, r3
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d025      	beq.n	80017f4 <snek_gamestate_over+0x1e8>
	{
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	885b      	ldrh	r3, [r3, #2]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	f023 0308 	bic.w	r3, r3, #8
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	805a      	strh	r2, [r3, #2]
		(p_snek_game->txt_edit.pos == SNEK_UI_MAX_NAME_LENGHT) ? p_snek_game->txt_edit.pos = 0 : p_snek_game->txt_edit.pos++;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d104      	bne.n	80017cc <snek_gamestate_over+0x1c0>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 80017ca:	e007      	b.n	80017dc <snek_gamestate_over+0x1d0>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80017d2:	3301      	adds	r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
		p_snek_game->txt_edit.val = p_snek_game->txt_edit.name[p_snek_game->txt_edit.pos];
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80017e2:	461a      	mov	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	f893 212e 	ldrb.w	r2, [r3, #302]	; 0x12e
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 80017f2:	e02d      	b.n	8001850 <snek_gamestate_over+0x244>
	}
	else if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	885b      	ldrh	r3, [r3, #2]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d024      	beq.n	8001850 <snek_gamestate_over+0x244>
	{
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	885b      	ldrh	r3, [r3, #2]
 800180a:	b29b      	uxth	r3, r3
 800180c:	f023 0304 	bic.w	r3, r3, #4
 8001810:	b29a      	uxth	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	805a      	strh	r2, [r3, #2]
		(p_snek_game->txt_edit.pos == 0) ? p_snek_game->txt_edit.pos = SNEK_UI_MAX_NAME_LENGHT : p_snek_game->txt_edit.pos--;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800181c:	2b00      	cmp	r3, #0
 800181e:	d104      	bne.n	800182a <snek_gamestate_over+0x21e>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2208      	movs	r2, #8
 8001824:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 8001828:	e007      	b.n	800183a <snek_gamestate_over+0x22e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001830:	3b01      	subs	r3, #1
 8001832:	b2da      	uxtb	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
		p_snek_game->txt_edit.val = p_snek_game->txt_edit.name[p_snek_game->txt_edit.pos];
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001840:	461a      	mov	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	f893 212e 	ldrb.w	r2, [r3, #302]	; 0x12e
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	}

	// jump between letters
	if (p_snek_game->txt_edit.pos != SNEK_UI_MAX_NAME_LENGHT)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001856:	2b08      	cmp	r3, #8
 8001858:	d02b      	beq.n	80018b2 <snek_gamestate_over+0x2a6>
	{

		GFX_DrawChar((p_snek_game->txt_edit.pos * 6) + SNEK_UI_TXT_EDITOR_OFFSET_LEFT, SSD1306_LCDHEIGHT - SNEK_UI_TXT_EDITOR_OFFSET_BOTTOM,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001860:	461a      	mov	r2, r3
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	3328      	adds	r3, #40	; 0x28
 800186c:	4618      	mov	r0, r3
				p_snek_game->txt_edit.val, YELLOWBLUE,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
		GFX_DrawChar((p_snek_game->txt_edit.pos * 6) + SNEK_UI_TXT_EDITOR_OFFSET_LEFT, SSD1306_LCDHEIGHT - SNEK_UI_TXT_EDITOR_OFFSET_BOTTOM,
 8001874:	2300      	movs	r3, #0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2301      	movs	r3, #1
 800187a:	2134      	movs	r1, #52	; 0x34
 800187c:	f7fe fd18 	bl	80002b0 <GFX_DrawChar>
				BLACK);

		// power off ok button
		GFX_DrawFillRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, BLACK);
 8001880:	2300      	movs	r3, #0
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	230b      	movs	r3, #11
 8001886:	2214      	movs	r2, #20
 8001888:	2132      	movs	r1, #50	; 0x32
 800188a:	206a      	movs	r0, #106	; 0x6a
 800188c:	f7fe ff0f 	bl	80006ae <GFX_DrawFillRectangle>
		GFX_DrawRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, YELLOWBLUE);
 8001890:	2301      	movs	r3, #1
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	230b      	movs	r3, #11
 8001896:	2214      	movs	r2, #20
 8001898:	2132      	movs	r1, #50	; 0x32
 800189a:	206a      	movs	r0, #106	; 0x6a
 800189c:	f7fe feda 	bl	8000654 <GFX_DrawRectangle>
		GFX_DrawString(SNEK_UI_OK_BUTTON_POS_X + 4, SNEK_UI_OK_BUTTON_POS_Y + 1, "OK", YELLOWBLUE, BLACK);
 80018a0:	2300      	movs	r3, #0
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2301      	movs	r3, #1
 80018a6:	4a2d      	ldr	r2, [pc, #180]	; (800195c <snek_gamestate_over+0x350>)
 80018a8:	2133      	movs	r1, #51	; 0x33
 80018aa:	206e      	movs	r0, #110	; 0x6e
 80018ac:	f7fe fdba 	bl	8000424 <GFX_DrawString>
 80018b0:	e017      	b.n	80018e2 <snek_gamestate_over+0x2d6>
	}
	else
	{
		// highlight ok button
		GFX_DrawFillRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, YELLOWBLUE);
 80018b2:	2301      	movs	r3, #1
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	230b      	movs	r3, #11
 80018b8:	2214      	movs	r2, #20
 80018ba:	2132      	movs	r1, #50	; 0x32
 80018bc:	206a      	movs	r0, #106	; 0x6a
 80018be:	f7fe fef6 	bl	80006ae <GFX_DrawFillRectangle>
		GFX_DrawRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, BLACK);
 80018c2:	2300      	movs	r3, #0
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	230b      	movs	r3, #11
 80018c8:	2214      	movs	r2, #20
 80018ca:	2132      	movs	r1, #50	; 0x32
 80018cc:	206a      	movs	r0, #106	; 0x6a
 80018ce:	f7fe fec1 	bl	8000654 <GFX_DrawRectangle>
		GFX_DrawString(SNEK_UI_OK_BUTTON_POS_X + 4, SNEK_UI_OK_BUTTON_POS_Y + 1, "OK", BLACK, YELLOWBLUE);
 80018d2:	2301      	movs	r3, #1
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2300      	movs	r3, #0
 80018d8:	4a20      	ldr	r2, [pc, #128]	; (800195c <snek_gamestate_over+0x350>)
 80018da:	2133      	movs	r1, #51	; 0x33
 80018dc:	206e      	movs	r0, #110	; 0x6e
 80018de:	f7fe fda1 	bl	8000424 <GFX_DrawString>
	}

	p_snek_game->txt_edit.name[p_snek_game->txt_edit.pos] = p_snek_game->txt_edit.val;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80018e8:	4619      	mov	r1, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e

	SSD1306_Display();
 80018f8:	f7ff f8d8 	bl	8000aac <SSD1306_Display>

	// check if button enter is clicked and go back to main menu
	if (SNEK_CHECK_BIT(p_snek_game->CR1,SNEK_CR1_BUTTON_ENTER) && (p_snek_game->txt_edit.pos == SNEK_UI_MAX_NAME_LENGHT))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	885b      	ldrh	r3, [r3, #2]
 8001900:	b29b      	uxth	r3, r3
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	b29b      	uxth	r3, r3
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d019      	beq.n	8001942 <snek_gamestate_over+0x336>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001914:	2b08      	cmp	r3, #8
 8001916:	d114      	bne.n	8001942 <snek_gamestate_over+0x336>
	{
		for (uint32_t i = 0; i < 840000; i++)
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	e002      	b.n	8001924 <snek_gamestate_over+0x318>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3301      	adds	r3, #1
 8001922:	61fb      	str	r3, [r7, #28]
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <snek_gamestate_over+0x354>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d9f8      	bls.n	800191e <snek_gamestate_over+0x312>
		{

		}
		// save data on eeprom
		p_snek_game->game_state = GAMESTATE_SAVE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2207      	movs	r2, #7
 8001930:	701a      	strb	r2, [r3, #0]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	885b      	ldrh	r3, [r3, #2]
 8001936:	b29b      	uxth	r3, r3
 8001938:	f023 0310 	bic.w	r3, r3, #16
 800193c:	b29a      	uxth	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	805a      	strh	r2, [r3, #2]
	}
}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	; 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	08003e48 	.word	0x08003e48
 8001950:	08003e54 	.word	0x08003e54
 8001954:	08003e60 	.word	0x08003e60
 8001958:	08003e68 	.word	0x08003e68
 800195c:	08003e6c 	.word	0x08003e6c
 8001960:	000cd13f 	.word	0x000cd13f

08001964 <snek_gamesate_save>:

static void snek_gamesate_save(snek_game_t *p_snek_game)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	// read scores from eeprom
	// check if score is qualifying to top
	// send new scores to eeprom

	SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_INIT_NEWSCREEN);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	885b      	ldrh	r3, [r3, #2]
 8001970:	b29b      	uxth	r3, r3
 8001972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001976:	b29a      	uxth	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	805a      	strh	r2, [r3, #2]
	p_snek_game->game_state = GAMESTATE_MENUMAIN;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <snek>:

void snek(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	switch (g_snek_game.game_state)
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <snek+0x64>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b07      	cmp	r3, #7
 800199a:	d827      	bhi.n	80019ec <snek+0x5c>
 800199c:	a201      	add	r2, pc, #4	; (adr r2, 80019a4 <snek+0x14>)
 800199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a2:	bf00      	nop
 80019a4:	080019c5 	.word	0x080019c5
 80019a8:	080019cd 	.word	0x080019cd
 80019ac:	080019ed 	.word	0x080019ed
 80019b0:	080019ed 	.word	0x080019ed
 80019b4:	080019ed 	.word	0x080019ed
 80019b8:	080019d5 	.word	0x080019d5
 80019bc:	080019dd 	.word	0x080019dd
 80019c0:	080019e5 	.word	0x080019e5
	{
	case GAMESTATE_INIT:
		snek_gamestate_init(&g_snek_game);
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <snek+0x64>)
 80019c6:	f7ff f93f 	bl	8000c48 <snek_gamestate_init>
		break;
 80019ca:	e010      	b.n	80019ee <snek+0x5e>

	case GAMESTATE_MENUMAIN:
		snek_gamesate_mainmenu(&g_snek_game);
 80019cc:	4809      	ldr	r0, [pc, #36]	; (80019f4 <snek+0x64>)
 80019ce:	f7ff f963 	bl	8000c98 <snek_gamesate_mainmenu>
		break;
 80019d2:	e00c      	b.n	80019ee <snek+0x5e>

	case GAMESTATE_MENUSETTINGS:
		break;

	case GAMESTATE_GAME:
		snek_gamestate_game(&g_snek_game);
 80019d4:	4807      	ldr	r0, [pc, #28]	; (80019f4 <snek+0x64>)
 80019d6:	f7ff fbaf 	bl	8001138 <snek_gamestate_game>
		break;
 80019da:	e008      	b.n	80019ee <snek+0x5e>

	case GAMESTATE_OVER:
		snek_gamestate_over(&g_snek_game);
 80019dc:	4805      	ldr	r0, [pc, #20]	; (80019f4 <snek+0x64>)
 80019de:	f7ff fe15 	bl	800160c <snek_gamestate_over>
		break;
 80019e2:	e004      	b.n	80019ee <snek+0x5e>

	case GAMESTATE_SAVE:
		snek_gamesate_save(&g_snek_game);
 80019e4:	4803      	ldr	r0, [pc, #12]	; (80019f4 <snek+0x64>)
 80019e6:	f7ff ffbd 	bl	8001964 <snek_gamesate_save>
		break;
 80019ea:	e000      	b.n	80019ee <snek+0x5e>

	default:
		break;
 80019ec:	bf00      	nop
	}
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000498 	.word	0x20000498

080019f8 <snek_button_callback>:

void snek_button_callback(uint8_t GPIO_Pin)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
// check if there is already movement to the side that button is clicked
// set button clicked bit in CR1
	switch (GPIO_Pin)
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	2b0e      	cmp	r3, #14
 8001a08:	d84d      	bhi.n	8001aa6 <snek_button_callback+0xae>
 8001a0a:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <snek_button_callback+0x18>)
 8001a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a10:	08001a83 	.word	0x08001a83
 8001a14:	08001a4d 	.word	0x08001a4d
 8001a18:	08001aa7 	.word	0x08001aa7
 8001a1c:	08001aa7 	.word	0x08001aa7
 8001a20:	08001aa7 	.word	0x08001aa7
 8001a24:	08001aa7 	.word	0x08001aa7
 8001a28:	08001aa7 	.word	0x08001aa7
 8001a2c:	08001aa7 	.word	0x08001aa7
 8001a30:	08001aa7 	.word	0x08001aa7
 8001a34:	08001aa7 	.word	0x08001aa7
 8001a38:	08001aa7 	.word	0x08001aa7
 8001a3c:	08001aa7 	.word	0x08001aa7
 8001a40:	08001a95 	.word	0x08001a95
 8001a44:	08001a5f 	.word	0x08001a5f
 8001a48:	08001a71 	.word	0x08001a71
	{
// DOWN
	case SNEK_BUTTON_DOWN:

		SNEK_SET_BIT(g_snek_game.CR1, SNEK_CR1_BUTTON_DOWN);
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <snek_button_callback+0xbc>)
 8001a4e:	885b      	ldrh	r3, [r3, #2]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <snek_button_callback+0xbc>)
 8001a5a:	805a      	strh	r2, [r3, #2]
		break;
 8001a5c:	e023      	b.n	8001aa6 <snek_button_callback+0xae>
		// UP
	case SNEK_BUTTON_UP:

		SNEK_SET_BIT(g_snek_game.CR1, SNEK_CR1_BUTTON_UP);
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <snek_button_callback+0xbc>)
 8001a60:	885b      	ldrh	r3, [r3, #2]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <snek_button_callback+0xbc>)
 8001a6c:	805a      	strh	r2, [r3, #2]
		break;
 8001a6e:	e01a      	b.n	8001aa6 <snek_button_callback+0xae>
		// LEFT
	case SNEK_BUTTON_LEFT:

		SNEK_SET_BIT(g_snek_game.CR1, SNEK_CR1_BUTTON_LEFT);
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <snek_button_callback+0xbc>)
 8001a72:	885b      	ldrh	r3, [r3, #2]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	f043 0304 	orr.w	r3, r3, #4
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <snek_button_callback+0xbc>)
 8001a7e:	805a      	strh	r2, [r3, #2]
		break;
 8001a80:	e011      	b.n	8001aa6 <snek_button_callback+0xae>
		// RIGHT
	case SNEK_BUTTON_RIGHT:

		SNEK_SET_BIT(g_snek_game.CR1, SNEK_CR1_BUTTON_RIGHT);
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <snek_button_callback+0xbc>)
 8001a84:	885b      	ldrh	r3, [r3, #2]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f043 0308 	orr.w	r3, r3, #8
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <snek_button_callback+0xbc>)
 8001a90:	805a      	strh	r2, [r3, #2]
		break;
 8001a92:	e008      	b.n	8001aa6 <snek_button_callback+0xae>
		// ENTER
	case SNEK_BUTTON_ENTER:

		SNEK_SET_BIT(g_snek_game.CR1, SNEK_CR1_BUTTON_ENTER);
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <snek_button_callback+0xbc>)
 8001a96:	885b      	ldrh	r3, [r3, #2]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	f043 0310 	orr.w	r3, r3, #16
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <snek_button_callback+0xbc>)
 8001aa2:	805a      	strh	r2, [r3, #2]
		break;
 8001aa4:	bf00      	nop
	}

}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000498 	.word	0x20000498

08001ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	db0a      	blt.n	8001ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	490c      	ldr	r1, [pc, #48]	; (8001b04 <__NVIC_SetPriority+0x4c>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	0112      	lsls	r2, r2, #4
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	440b      	add	r3, r1
 8001adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae0:	e00a      	b.n	8001af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4908      	ldr	r1, [pc, #32]	; (8001b08 <__NVIC_SetPriority+0x50>)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	3b04      	subs	r3, #4
 8001af0:	0112      	lsls	r2, r2, #4
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	440b      	add	r3, r1
 8001af6:	761a      	strb	r2, [r3, #24]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000e100 	.word	0xe000e100
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b1c:	d301      	bcc.n	8001b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00f      	b.n	8001b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <SysTick_Config+0x40>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f7ff ffc2 	bl	8001ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <SysTick_Config+0x40>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <SysTick_Config+0x40>)
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	e000e010 	.word	0xe000e010

08001b50 <main>:
void I2C1Config(I2C_Handle_t *phI2C1);

volatile uint32_t TickS;

int main()
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
	I2C_Handle_t hI2C1;

	SysTick_Config(84000000);
 8001b56:	480d      	ldr	r0, [pc, #52]	; (8001b8c <main+0x3c>)
 8001b58:	f7ff ffd8 	bl	8001b0c <SysTick_Config>

	// Configure RCC
	SysClockInit();
 8001b5c:	f000 f888 	bl	8001c70 <SysClockInit>

	// Configure GPIO pins
	GPIOConfig();
 8001b60:	f000 f8aa 	bl	8001cb8 <GPIOConfig>

	// Configure I2C peripherals
	I2C1Config(&hI2C1);
 8001b64:	463b      	mov	r3, r7
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f8e2 	bl	8001d30 <I2C1Config>
	SSD1306_Init(&hI2C1);
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe ffba 	bl	8000ae8 <SSD1306_Init>

	SSD1306_Clear(SSD1306_COLOR_BLACK);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7fe fedb 	bl	8000930 <SSD1306_Clear>
	GFX_SetFont(font_8x5);
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <main+0x40>)
 8001b7c:	f7fe fb88 	bl	8000290 <GFX_SetFont>

	SSD1306_Display();
 8001b80:	f7fe ff94 	bl	8000aac <SSD1306_Display>



	while(1)
	{
		snek();
 8001b84:	f7ff ff04 	bl	8001990 <snek>
 8001b88:	e7fc      	b.n	8001b84 <main+0x34>
 8001b8a:	bf00      	nop
 8001b8c:	0501bd00 	.word	0x0501bd00
 8001b90:	08003e70 	.word	0x08003e70

08001b94 <EXTI1_IRQHandler>:
	}
}

// handler for button RIGHT
void EXTI1_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
	uint8_t _tempGPIOPin;

	if (EXTI->PR & (0b1 << SNEK_BUTTON_RIGHT))
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <EXTI1_IRQHandler+0x2c>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <EXTI1_IRQHandler+0x1c>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_RIGHT);
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f000 fbc2 	bl	8002330 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_RIGHT;
 8001bac:	2301      	movs	r3, #1
 8001bae:	71fb      	strb	r3, [r7, #7]
	}

	snek_button_callback(_tempGPIOPin);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ff20 	bl	80019f8 <snek_button_callback>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40013c00 	.word	0x40013c00

08001bc4 <EXTI2_IRQHandler>:

// handler for button DOWN
void EXTI2_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
	uint8_t _tempGPIOPin;

	if (EXTI->PR & (0b1 << SNEK_BUTTON_DOWN))
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <EXTI2_IRQHandler+0x2c>)
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d004      	beq.n	8001be0 <EXTI2_IRQHandler+0x1c>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_DOWN);
 8001bd6:	2002      	movs	r0, #2
 8001bd8:	f000 fbaa 	bl	8002330 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_DOWN;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	71fb      	strb	r3, [r7, #7]
	}

	snek_button_callback(_tempGPIOPin);
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff08 	bl	80019f8 <snek_button_callback>
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40013c00 	.word	0x40013c00

08001bf4 <EXTI15_10_IRQHandler>:

// handler for buttons up/left/enter
void EXTI15_10_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
	uint8_t _tempGPIOPin;
	// if button is clicked
	if (EXTI->PR & (0b1 << SNEK_BUTTON_UP))
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <EXTI15_10_IRQHandler+0x5c>)
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <EXTI15_10_IRQHandler+0x1e>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_UP);
 8001c06:	200e      	movs	r0, #14
 8001c08:	f000 fb92 	bl	8002330 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_UP;
 8001c0c:	230e      	movs	r3, #14
 8001c0e:	71fb      	strb	r3, [r7, #7]
 8001c10:	e016      	b.n	8001c40 <EXTI15_10_IRQHandler+0x4c>
	}
	else if (EXTI->PR & (0b1 << SNEK_BUTTON_LEFT))
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <EXTI15_10_IRQHandler+0x5c>)
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <EXTI15_10_IRQHandler+0x36>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_LEFT);
 8001c1e:	200f      	movs	r0, #15
 8001c20:	f000 fb86 	bl	8002330 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_LEFT;
 8001c24:	230f      	movs	r3, #15
 8001c26:	71fb      	strb	r3, [r7, #7]
 8001c28:	e00a      	b.n	8001c40 <EXTI15_10_IRQHandler+0x4c>
	}

	else if (EXTI->PR & (0b1 << SNEK_BUTTON_ENTER))
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <EXTI15_10_IRQHandler+0x5c>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d004      	beq.n	8001c40 <EXTI15_10_IRQHandler+0x4c>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_ENTER);
 8001c36:	200d      	movs	r0, #13
 8001c38:	f000 fb7a 	bl	8002330 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_ENTER;
 8001c3c:	230d      	movs	r3, #13
 8001c3e:	71fb      	strb	r3, [r7, #7]
	}

	snek_button_callback(_tempGPIOPin);
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fed8 	bl	80019f8 <snek_button_callback>
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40013c00 	.word	0x40013c00

08001c54 <SysTick_Handler>:

void SysTick_Handler()
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
	TickS++;
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <SysTick_Handler+0x18>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	4a03      	ldr	r2, [pc, #12]	; (8001c6c <SysTick_Handler+0x18>)
 8001c60:	6013      	str	r3, [r2, #0]
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	200005d0 	.word	0x200005d0

08001c70 <SysClockInit>:

// system clock init function
void SysClockInit(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
	RCC_ClockInitTypeDef pClockInit;

	pClockInit.APB1Prescaler = RCC_ABP1_PRESCALER_DIV2;
 8001c76:	2304      	movs	r3, #4
 8001c78:	713b      	strb	r3, [r7, #4]
	pClockInit.APB2Prescaler = RCC_ABP2_PRESCALER_NODIV;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	717b      	strb	r3, [r7, #5]
	pClockInit.FLASHLatency = RCC_FLASHLATENCY_2WS;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	70bb      	strb	r3, [r7, #2]
	pClockInit.HPREPrescaler = RCC_HPRE_PRESCALER_NODIV;
 8001c82:	2300      	movs	r3, #0
 8001c84:	70fb      	strb	r3, [r7, #3]
	pClockInit.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c86:	2300      	movs	r3, #0
 8001c88:	703b      	strb	r3, [r7, #0]
	pClockInit.VOSScale = RCC_VOS_SCALE2;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	707b      	strb	r3, [r7, #1]
	pClockInit.PLL.PLLSource = RCC_PLL_SOURCE_HSI;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	71fb      	strb	r3, [r7, #7]
	pClockInit.PLL.PLLState = RCC_PLL_STATE_ENABLE;
 8001c92:	2301      	movs	r3, #1
 8001c94:	71bb      	strb	r3, [r7, #6]
	pClockInit.PLL.PLLM = 16;
 8001c96:	2310      	movs	r3, #16
 8001c98:	723b      	strb	r3, [r7, #8]
	pClockInit.PLL.PLLN = 336;
 8001c9a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001c9e:	817b      	strh	r3, [r7, #10]
	pClockInit.PLL.PLLP = RCC_PLLP_DIV4;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	733b      	strb	r3, [r7, #12]
	pClockInit.PLL.PLLQ = 7;
 8001ca4:	2307      	movs	r3, #7
 8001ca6:	737b      	strb	r3, [r7, #13]

	RCC_InitClock(&pClockInit);
 8001ca8:	463b      	mov	r3, r7
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fd68 	bl	8002780 <RCC_InitClock>
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <GPIOConfig>:

//configure GPIO used in the project
void GPIOConfig(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOx;
	GPIOx.PinConfig.PinNumber = GPIO_PIN_5;
 8001cbe:	2305      	movs	r3, #5
 8001cc0:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_OUTPUT;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	727b      	strb	r3, [r7, #9]
	GPIOx.PinConfig.OutputType = GPIO_PIN_OT_PP;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	72bb      	strb	r3, [r7, #10]
	GPIOx.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	733b      	strb	r3, [r7, #12]
	GPIOx.pGPIOx = GPIOA;
 8001cce:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <GPIOConfig+0x70>)
 8001cd0:	607b      	str	r3, [r7, #4]
	GPIO_InitPin(&GPIOx);
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 f99d 	bl	8002014 <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_13;
 8001cda:	230d      	movs	r3, #13
 8001cdc:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_EXTI_FT;
 8001cde:	2304      	movs	r3, #4
 8001ce0:	727b      	strb	r3, [r7, #9]
	GPIOx.pGPIOx = GPIOB;
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <GPIOConfig+0x74>)
 8001ce4:	607b      	str	r3, [r7, #4]
	GPIO_InitPin(&GPIOx);
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 f993 	bl	8002014 <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_14;
 8001cee:	230e      	movs	r3, #14
 8001cf0:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 f98d 	bl	8002014 <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_15;
 8001cfa:	230f      	movs	r3, #15
 8001cfc:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 f987 	bl	8002014 <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_1;
 8001d06:	2301      	movs	r3, #1
 8001d08:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 f981 	bl	8002014 <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_2;
 8001d12:	2302      	movs	r3, #2
 8001d14:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 f97b 	bl	8002014 <GPIO_InitPin>
	
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020400 	.word	0x40020400

08001d30 <I2C1Config>:

void I2C1Config(I2C_Handle_t *phI2C1)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	

	phI2C1->pI2Cx = I2C1;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <I2C1Config+0x28>)
 8001d3c:	601a      	str	r2, [r3, #0]
	phI2C1->I2CConfig.ABP1FrequencyMHz = 42;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	222a      	movs	r2, #42	; 0x2a
 8001d42:	711a      	strb	r2, [r3, #4]
	phI2C1->I2CConfig.Speed = I2C_SPEED_FAST_DUTY0;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	715a      	strb	r2, [r3, #5]

	I2C_Init(phI2C1);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fbba 	bl	80024c4 <I2C_Init>
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40005400 	.word	0x40005400

08001d5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
	return 1;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_kill>:

int _kill(int pid, int sig)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d76:	f000 fe35 	bl	80029e4 <__errno>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2216      	movs	r2, #22
 8001d7e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_exit>:

void _exit (int status)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ffe7 	bl	8001d6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d9e:	e7fe      	b.n	8001d9e <_exit+0x12>

08001da0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	e00a      	b.n	8001dc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001db2:	f3af 8000 	nop.w
 8001db6:	4601      	mov	r1, r0
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	60ba      	str	r2, [r7, #8]
 8001dbe:	b2ca      	uxtb	r2, r1
 8001dc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	dbf0      	blt.n	8001db2 <_read+0x12>
	}

return len;
 8001dd0:	687b      	ldr	r3, [r7, #4]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	e009      	b.n	8001e00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	60ba      	str	r2, [r7, #8]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	dbf1      	blt.n	8001dec <_write+0x12>
	}
	return len;
 8001e08:	687b      	ldr	r3, [r7, #4]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <_close>:

int _close(int file)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
	return -1;
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e3a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <_isatty>:

int _isatty(int file)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
	return 1;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e84:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <_sbrk+0x5c>)
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <_sbrk+0x60>)
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <_sbrk+0x64>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <_sbrk+0x68>)
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d207      	bcs.n	8001ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eac:	f000 fd9a 	bl	80029e4 <__errno>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eba:	e009      	b.n	8001ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <_sbrk+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a05      	ldr	r2, [pc, #20]	; (8001ee0 <_sbrk+0x64>)
 8001ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20018000 	.word	0x20018000
 8001edc:	00000400 	.word	0x00000400
 8001ee0:	20000484 	.word	0x20000484
 8001ee4:	200005e8 	.word	0x200005e8

08001ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <SystemInit+0x20>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <SystemInit+0x20>)
 8001ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f10:	480d      	ldr	r0, [pc, #52]	; (8001f48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f12:	490e      	ldr	r1, [pc, #56]	; (8001f4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f14:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f18:	e002      	b.n	8001f20 <LoopCopyDataInit>

08001f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1e:	3304      	adds	r3, #4

08001f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f24:	d3f9      	bcc.n	8001f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f26:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f28:	4c0b      	ldr	r4, [pc, #44]	; (8001f58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f2c:	e001      	b.n	8001f32 <LoopFillZerobss>

08001f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f30:	3204      	adds	r2, #4

08001f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f34:	d3fb      	bcc.n	8001f2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f36:	f7ff ffd7 	bl	8001ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f3a:	f000 fd59 	bl	80029f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f3e:	f7ff fe07 	bl	8001b50 <main>
  bx  lr    
 8001f42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001f50:	080041a4 	.word	0x080041a4
  ldr r2, =_sbss
 8001f54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f58:	200005e4 	.word	0x200005e4

08001f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC_IRQHandler>
	...

08001f60 <GPIO_ClockEnable>:
 *
 * @param[*GPIO] - base address of gpiox peripheral
 * @return - void
 */
static void GPIO_ClockEnable(GPIO_TypeDef *GPIO)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	if (GPIO == GPIOA)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a23      	ldr	r2, [pc, #140]	; (8001ff8 <GPIO_ClockEnable+0x98>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d106      	bne.n	8001f7e <GPIO_ClockEnable+0x1e>
	{
		RCC_CLOCK_GPIOA_ENABLE();
 8001f70:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <GPIO_ClockEnable+0x9c>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	4a21      	ldr	r2, [pc, #132]	; (8001ffc <GPIO_ClockEnable+0x9c>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6313      	str	r3, [r2, #48]	; 0x30
	else if (GPIO == GPIOH)
	{
		RCC_CLOCK_GPIOH_ENABLE();
	}

}
 8001f7c:	e035      	b.n	8001fea <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOB)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <GPIO_ClockEnable+0xa0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d106      	bne.n	8001f94 <GPIO_ClockEnable+0x34>
		RCC_CLOCK_GPIOB_ENABLE();
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <GPIO_ClockEnable+0x9c>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <GPIO_ClockEnable+0x9c>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001f92:	e02a      	b.n	8001fea <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOC)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a1b      	ldr	r2, [pc, #108]	; (8002004 <GPIO_ClockEnable+0xa4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d106      	bne.n	8001faa <GPIO_ClockEnable+0x4a>
		RCC_CLOCK_GPIOC_ENABLE();
 8001f9c:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <GPIO_ClockEnable+0x9c>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	4a16      	ldr	r2, [pc, #88]	; (8001ffc <GPIO_ClockEnable+0x9c>)
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001fa8:	e01f      	b.n	8001fea <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOD)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a16      	ldr	r2, [pc, #88]	; (8002008 <GPIO_ClockEnable+0xa8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d106      	bne.n	8001fc0 <GPIO_ClockEnable+0x60>
		RCC_CLOCK_GPIOD_ENABLE();
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <GPIO_ClockEnable+0x9c>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a11      	ldr	r2, [pc, #68]	; (8001ffc <GPIO_ClockEnable+0x9c>)
 8001fb8:	f043 0308 	orr.w	r3, r3, #8
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001fbe:	e014      	b.n	8001fea <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a12      	ldr	r2, [pc, #72]	; (800200c <GPIO_ClockEnable+0xac>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d106      	bne.n	8001fd6 <GPIO_ClockEnable+0x76>
		RCC_CLOCK_GPIOE_ENABLE();
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <GPIO_ClockEnable+0x9c>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <GPIO_ClockEnable+0x9c>)
 8001fce:	f043 0310 	orr.w	r3, r3, #16
 8001fd2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001fd4:	e009      	b.n	8001fea <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOH)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <GPIO_ClockEnable+0xb0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d105      	bne.n	8001fea <GPIO_ClockEnable+0x8a>
		RCC_CLOCK_GPIOH_ENABLE();
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <GPIO_ClockEnable+0x9c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <GPIO_ClockEnable+0x9c>)
 8001fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020400 	.word	0x40020400
 8002004:	40020800 	.word	0x40020800
 8002008:	40020c00 	.word	0x40020c00
 800200c:	40021000 	.word	0x40021000
 8002010:	40021c00 	.word	0x40021c00

08002014 <GPIO_InitPin>:
 *
 * @param[*hGPIO] - handler to GPIO structure that contains peripheral base address and pin configuration
 * @return - void
 */
void GPIO_InitPin(GPIO_Handle_t *hGPIO)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

	//enable clock
	GPIO_ClockEnable(hGPIO->pGPIOx);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff9d 	bl	8001f60 <GPIO_ClockEnable>

	// mode selection
	if (hGPIO->PinConfig.Mode < GPIO_PIN_MODE_EXTI_FT)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	795b      	ldrb	r3, [r3, #5]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d81f      	bhi.n	800206e <GPIO_InitPin+0x5a>
	{
		// non IRQ mode
	hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	791b      	ldrb	r3, [r3, #4]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2103      	movs	r1, #3
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	4619      	mov	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	400a      	ands	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
	hGPIO->pGPIOx->MODER |= hGPIO->PinConfig.Mode << (hGPIO->PinConfig.PinNumber * 2);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	795b      	ldrb	r3, [r3, #5]
 8002056:	4619      	mov	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	791b      	ldrb	r3, [r3, #4]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	4619      	mov	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	e0a9      	b.n	80021c2 <GPIO_InitPin+0x1ae>
	else
	{
		//IRQ mode

		//set as input
		hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	791b      	ldrb	r3, [r3, #4]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2103      	movs	r1, #3
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	4619      	mov	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	400a      	ands	r2, r1
 800208a:	601a      	str	r2, [r3, #0]
		//interrupt mask
		EXTI->IMR |= (0b1 << hGPIO->PinConfig.PinNumber);
 800208c:	4b9e      	ldr	r3, [pc, #632]	; (8002308 <GPIO_InitPin+0x2f4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	7912      	ldrb	r2, [r2, #4]
 8002094:	4611      	mov	r1, r2
 8002096:	2201      	movs	r2, #1
 8002098:	408a      	lsls	r2, r1
 800209a:	4611      	mov	r1, r2
 800209c:	4a9a      	ldr	r2, [pc, #616]	; (8002308 <GPIO_InitPin+0x2f4>)
 800209e:	430b      	orrs	r3, r1
 80020a0:	6013      	str	r3, [r2, #0]

		//rising/falling trigger
		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	795b      	ldrb	r3, [r3, #5]
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d003      	beq.n	80020b2 <GPIO_InitPin+0x9e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	795b      	ldrb	r3, [r3, #5]
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d10a      	bne.n	80020c8 <GPIO_InitPin+0xb4>
		{
			EXTI->FTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 80020b2:	4b95      	ldr	r3, [pc, #596]	; (8002308 <GPIO_InitPin+0x2f4>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	7912      	ldrb	r2, [r2, #4]
 80020ba:	4611      	mov	r1, r2
 80020bc:	2201      	movs	r2, #1
 80020be:	408a      	lsls	r2, r1
 80020c0:	4611      	mov	r1, r2
 80020c2:	4a91      	ldr	r2, [pc, #580]	; (8002308 <GPIO_InitPin+0x2f4>)
 80020c4:	430b      	orrs	r3, r1
 80020c6:	60d3      	str	r3, [r2, #12]
		}

		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_RT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	795b      	ldrb	r3, [r3, #5]
 80020cc:	2b05      	cmp	r3, #5
 80020ce:	d003      	beq.n	80020d8 <GPIO_InitPin+0xc4>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	795b      	ldrb	r3, [r3, #5]
 80020d4:	2b06      	cmp	r3, #6
 80020d6:	d10a      	bne.n	80020ee <GPIO_InitPin+0xda>
		{
			EXTI->RTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 80020d8:	4b8b      	ldr	r3, [pc, #556]	; (8002308 <GPIO_InitPin+0x2f4>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	7912      	ldrb	r2, [r2, #4]
 80020e0:	4611      	mov	r1, r2
 80020e2:	2201      	movs	r2, #1
 80020e4:	408a      	lsls	r2, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	4a87      	ldr	r2, [pc, #540]	; (8002308 <GPIO_InitPin+0x2f4>)
 80020ea:	430b      	orrs	r3, r1
 80020ec:	6093      	str	r3, [r2, #8]
		}

		//enable NVIC interrupt
		if (hGPIO->PinConfig.PinNumber < GPIO_PIN_5)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	791b      	ldrb	r3, [r3, #4]
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d80c      	bhi.n	8002110 <GPIO_InitPin+0xfc>
		{
			// positions for EXTI interrupts in NVIC vector table are 6-10
			NVIC->ISER[0] |= (0b1 << (hGPIO->PinConfig.PinNumber + 6));
 80020f6:	4b85      	ldr	r3, [pc, #532]	; (800230c <GPIO_InitPin+0x2f8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	7912      	ldrb	r2, [r2, #4]
 80020fe:	3206      	adds	r2, #6
 8002100:	2101      	movs	r1, #1
 8002102:	fa01 f202 	lsl.w	r2, r1, r2
 8002106:	4611      	mov	r1, r2
 8002108:	4a80      	ldr	r2, [pc, #512]	; (800230c <GPIO_InitPin+0x2f8>)
 800210a:	430b      	orrs	r3, r1
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e010      	b.n	8002132 <GPIO_InitPin+0x11e>
		}
		else if (hGPIO->PinConfig.PinNumber < GPIO_PIN_10)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	791b      	ldrb	r3, [r3, #4]
 8002114:	2b09      	cmp	r3, #9
 8002116:	d806      	bhi.n	8002126 <GPIO_InitPin+0x112>
		{
			// position for EXTI9_5 is 23
			NVIC->ISER[0] |= (0b1 << 23);
 8002118:	4b7c      	ldr	r3, [pc, #496]	; (800230c <GPIO_InitPin+0x2f8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a7b      	ldr	r2, [pc, #492]	; (800230c <GPIO_InitPin+0x2f8>)
 800211e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	e005      	b.n	8002132 <GPIO_InitPin+0x11e>
		}
		else
		{
			// position for EXTI15_10 is 40
			NVIC->ISER[1] |= (0b1 << 8);
 8002126:	4b79      	ldr	r3, [pc, #484]	; (800230c <GPIO_InitPin+0x2f8>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4a78      	ldr	r2, [pc, #480]	; (800230c <GPIO_InitPin+0x2f8>)
 800212c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002130:	6053      	str	r3, [r2, #4]
		}

		// set SYSCFG for external IRQ
		// enable clock
		RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002132:	4b77      	ldr	r3, [pc, #476]	; (8002310 <GPIO_InitPin+0x2fc>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a76      	ldr	r2, [pc, #472]	; (8002310 <GPIO_InitPin+0x2fc>)
 8002138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
		// get 4 bits code for certain port
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(hGPIO->pGPIOx);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a74      	ldr	r2, [pc, #464]	; (8002314 <GPIO_InitPin+0x300>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d024      	beq.n	8002192 <GPIO_InitPin+0x17e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a72      	ldr	r2, [pc, #456]	; (8002318 <GPIO_InitPin+0x304>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01d      	beq.n	800218e <GPIO_InitPin+0x17a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a71      	ldr	r2, [pc, #452]	; (800231c <GPIO_InitPin+0x308>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d016      	beq.n	800218a <GPIO_InitPin+0x176>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a6f      	ldr	r2, [pc, #444]	; (8002320 <GPIO_InitPin+0x30c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00f      	beq.n	8002186 <GPIO_InitPin+0x172>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a6e      	ldr	r2, [pc, #440]	; (8002324 <GPIO_InitPin+0x310>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d008      	beq.n	8002182 <GPIO_InitPin+0x16e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a6c      	ldr	r2, [pc, #432]	; (8002328 <GPIO_InitPin+0x314>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <GPIO_InitPin+0x16a>
 800217a:	2307      	movs	r3, #7
 800217c:	e00a      	b.n	8002194 <GPIO_InitPin+0x180>
 800217e:	2300      	movs	r3, #0
 8002180:	e008      	b.n	8002194 <GPIO_InitPin+0x180>
 8002182:	2304      	movs	r3, #4
 8002184:	e006      	b.n	8002194 <GPIO_InitPin+0x180>
 8002186:	2303      	movs	r3, #3
 8002188:	e004      	b.n	8002194 <GPIO_InitPin+0x180>
 800218a:	2302      	movs	r3, #2
 800218c:	e002      	b.n	8002194 <GPIO_InitPin+0x180>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <GPIO_InitPin+0x180>
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
		// put it in syscfg register
		SYSCFG->EXTICR[hGPIO->PinConfig.PinNumber / 4] |= (portcode << ((hGPIO->PinConfig.PinNumber % 4) * 4));
 8002196:	4a65      	ldr	r2, [pc, #404]	; (800232c <GPIO_InitPin+0x318>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	791b      	ldrb	r3, [r3, #4]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	b2d8      	uxtb	r0, r3
 80021a0:	4603      	mov	r3, r0
 80021a2:	3302      	adds	r3, #2
 80021a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a8:	7bf9      	ldrb	r1, [r7, #15]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	7912      	ldrb	r2, [r2, #4]
 80021ae:	f002 0203 	and.w	r2, r2, #3
 80021b2:	0092      	lsls	r2, r2, #2
 80021b4:	fa01 f202 	lsl.w	r2, r1, r2
 80021b8:	495c      	ldr	r1, [pc, #368]	; (800232c <GPIO_InitPin+0x318>)
 80021ba:	431a      	orrs	r2, r3
 80021bc:	1c83      	adds	r3, r0, #2
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	// set speed and output type for mode output or AF
	if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_OUTPUT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	795b      	ldrb	r3, [r3, #5]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d003      	beq.n	80021d2 <GPIO_InitPin+0x1be>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	795b      	ldrb	r3, [r3, #5]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d13b      	bne.n	800224a <GPIO_InitPin+0x236>
	{
		//speed selection
		hGPIO->pGPIOx->OSPEEDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	791b      	ldrb	r3, [r3, #4]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2103      	movs	r1, #3
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	4619      	mov	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	400a      	ands	r2, r1
 80021ee:	609a      	str	r2, [r3, #8]
		hGPIO->pGPIOx->OSPEEDR |= hGPIO->PinConfig.OutputSpeed << (hGPIO->PinConfig.PinNumber * 2);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	79db      	ldrb	r3, [r3, #7]
 80021fa:	4619      	mov	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	791b      	ldrb	r3, [r3, #4]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	4619      	mov	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	609a      	str	r2, [r3, #8]

		//output type selection
		hGPIO->pGPIOx->OTYPER &= ~(0b1 << (hGPIO->PinConfig.PinNumber));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	791b      	ldrb	r3, [r3, #4]
 800221a:	4619      	mov	r1, r3
 800221c:	2301      	movs	r3, #1
 800221e:	408b      	lsls	r3, r1
 8002220:	43db      	mvns	r3, r3
 8002222:	4619      	mov	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	400a      	ands	r2, r1
 800222a:	605a      	str	r2, [r3, #4]
		hGPIO->pGPIOx->OTYPER |= hGPIO->PinConfig.OutputType << (hGPIO->PinConfig.PinNumber);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	799b      	ldrb	r3, [r3, #6]
 8002236:	4619      	mov	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	791b      	ldrb	r3, [r3, #4]
 800223c:	fa01 f303 	lsl.w	r3, r1, r3
 8002240:	4619      	mov	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	605a      	str	r2, [r3, #4]
	}

	// set alternate function bits
	if (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	795b      	ldrb	r3, [r3, #5]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d137      	bne.n	80022c2 <GPIO_InitPin+0x2ae>
	{
		// clear 4 AF bits and set new value
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] &= ~(15UL << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	7912      	ldrb	r2, [r2, #4]
 800225a:	08d2      	lsrs	r2, r2, #3
 800225c:	b2d0      	uxtb	r0, r2
 800225e:	4602      	mov	r2, r0
 8002260:	3208      	adds	r2, #8
 8002262:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	791b      	ldrb	r3, [r3, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	220f      	movs	r2, #15
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4011      	ands	r1, r2
 800227e:	f100 0208 	add.w	r2, r0, #8
 8002282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] |= (hGPIO->PinConfig.AF << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	7912      	ldrb	r2, [r2, #4]
 800228e:	08d2      	lsrs	r2, r2, #3
 8002290:	b2d1      	uxtb	r1, r2
 8002292:	460a      	mov	r2, r1
 8002294:	3208      	adds	r2, #8
 8002296:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7a5b      	ldrb	r3, [r3, #9]
 800229e:	4618      	mov	r0, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	791b      	ldrb	r3, [r3, #4]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	fa00 f303 	lsl.w	r3, r0, r3
 80022ae:	461c      	mov	r4, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4608      	mov	r0, r1
 80022b6:	ea42 0104 	orr.w	r1, r2, r4
 80022ba:	f100 0208 	add.w	r2, r0, #8
 80022be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	// pull ups pull downs
	hGPIO->pGPIOx->PUPDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	791b      	ldrb	r3, [r3, #4]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	2103      	movs	r1, #3
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	4619      	mov	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	400a      	ands	r2, r1
 80022de:	60da      	str	r2, [r3, #12]
	hGPIO->pGPIOx->PUPDR |= (hGPIO->PinConfig.PullUpPullDown << (hGPIO->PinConfig.PinNumber * 2));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7a1b      	ldrb	r3, [r3, #8]
 80022ea:	4619      	mov	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	791b      	ldrb	r3, [r3, #4]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	4619      	mov	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	60da      	str	r2, [r3, #12]

}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	bd90      	pop	{r4, r7, pc}
 8002308:	40013c00 	.word	0x40013c00
 800230c:	e000e100 	.word	0xe000e100
 8002310:	40023800 	.word	0x40023800
 8002314:	40020000 	.word	0x40020000
 8002318:	40020400 	.word	0x40020400
 800231c:	40020800 	.word	0x40020800
 8002320:	40020c00 	.word	0x40020c00
 8002324:	40021000 	.word	0x40021000
 8002328:	40021c00 	.word	0x40021c00
 800232c:	40013800 	.word	0x40013800

08002330 <GPIO_ClearPendingEXTIFlag>:
 *
 * @param[PinNumber] - GPIO_PIN_x @PinNumber
 * @return - void
 */
void GPIO_ClearPendingEXTIFlag(uint8_t PinNumber)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= (0b1 << PinNumber);
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <GPIO_ClearPendingEXTIFlag+0x2c>)
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	79fa      	ldrb	r2, [r7, #7]
 8002340:	2101      	movs	r1, #1
 8002342:	fa01 f202 	lsl.w	r2, r1, r2
 8002346:	4611      	mov	r1, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <GPIO_ClearPendingEXTIFlag+0x2c>)
 800234a:	430b      	orrs	r3, r1
 800234c:	6153      	str	r3, [r2, #20]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40013c00 	.word	0x40013c00

08002360 <I2C_ClockEnable>:
 *
 * @param[*pI2Cx] - base address of i2c peripheral
 * @return - void
 */
static void I2C_ClockEnable(I2C_TypeDef *pI2Cx)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	if (pI2Cx == I2C1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <I2C_ClockEnable+0x54>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d106      	bne.n	800237e <I2C_ClockEnable+0x1e>
	{
		RCC_CLOCK_I2C1_ENABLE();
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <I2C_ClockEnable+0x58>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	4a10      	ldr	r2, [pc, #64]	; (80023b8 <I2C_ClockEnable+0x58>)
 8002376:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800237a:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else if (pI2Cx == I2C3)
	{
		RCC_CLOCK_I2C3_ENABLE();
	}
}
 800237c:	e014      	b.n	80023a8 <I2C_ClockEnable+0x48>
	else if (pI2Cx == I2C2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a0e      	ldr	r2, [pc, #56]	; (80023bc <I2C_ClockEnable+0x5c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d106      	bne.n	8002394 <I2C_ClockEnable+0x34>
		RCC_CLOCK_I2C2_ENABLE();
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <I2C_ClockEnable+0x58>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	4a0b      	ldr	r2, [pc, #44]	; (80023b8 <I2C_ClockEnable+0x58>)
 800238c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002390:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002392:	e009      	b.n	80023a8 <I2C_ClockEnable+0x48>
	else if (pI2Cx == I2C3)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <I2C_ClockEnable+0x60>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d105      	bne.n	80023a8 <I2C_ClockEnable+0x48>
		RCC_CLOCK_I2C3_ENABLE();
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <I2C_ClockEnable+0x58>)
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <I2C_ClockEnable+0x58>)
 80023a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023a6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	40005400 	.word	0x40005400
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40005800 	.word	0x40005800
 80023c0:	40005c00 	.word	0x40005c00

080023c4 <I2C_InitGPIOPins>:

static void I2C_InitGPIOPins(I2C_TypeDef *pI2Cx, uint8_t AlternatePosition)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t GPIO_SDA, GPIO_SCL;

	if (pI2Cx == I2C1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a35      	ldr	r2, [pc, #212]	; (80024a8 <I2C_InitGPIOPins+0xe4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d112      	bne.n	80023fe <I2C_InitGPIOPins+0x3a>
	{
		// PB6 SCL
		GPIO_SCL.pGPIOx = GPIOB;
 80023d8:	4b34      	ldr	r3, [pc, #208]	; (80024ac <I2C_InitGPIOPins+0xe8>)
 80023da:	60bb      	str	r3, [r7, #8]
		GPIO_SCL.PinConfig.PinNumber = GPIO_PIN_6;
 80023dc:	2306      	movs	r3, #6
 80023de:	733b      	strb	r3, [r7, #12]

		// PB7 SDA
		GPIO_SDA.pGPIOx = GPIOB;
 80023e0:	4b32      	ldr	r3, [pc, #200]	; (80024ac <I2C_InitGPIOPins+0xe8>)
 80023e2:	617b      	str	r3, [r7, #20]
		GPIO_SDA.PinConfig.PinNumber = GPIO_PIN_7;
 80023e4:	2307      	movs	r3, #7
 80023e6:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		GPIO_SCL.PinConfig.AF = GPIO_PIN_AF_AF4;
 80023e8:	2304      	movs	r3, #4
 80023ea:	747b      	strb	r3, [r7, #17]
		GPIO_SDA.PinConfig.AF = GPIO_PIN_AF_AF4;
 80023ec:	2304      	movs	r3, #4
 80023ee:	777b      	strb	r3, [r7, #29]

		if (AlternatePosition == 1)
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d103      	bne.n	80023fe <I2C_InitGPIOPins+0x3a>
		{
			// PB8 SCL
			GPIO_SCL.PinConfig.PinNumber = GPIO_PIN_8;
 80023f6:	2308      	movs	r3, #8
 80023f8:	733b      	strb	r3, [r7, #12]
			// PB9 SDA
			GPIO_SDA.PinConfig.PinNumber = GPIO_PIN_9;
 80023fa:	2309      	movs	r3, #9
 80023fc:	763b      	strb	r3, [r7, #24]
		}


	}

	if (pI2Cx == I2C2)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a2b      	ldr	r2, [pc, #172]	; (80024b0 <I2C_InitGPIOPins+0xec>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d112      	bne.n	800242c <I2C_InitGPIOPins+0x68>
	{

		// PB10 SCL
		GPIO_SCL.pGPIOx = GPIOB;
 8002406:	4b29      	ldr	r3, [pc, #164]	; (80024ac <I2C_InitGPIOPins+0xe8>)
 8002408:	60bb      	str	r3, [r7, #8]
		GPIO_SCL.PinConfig.PinNumber = GPIO_PIN_10;
 800240a:	230a      	movs	r3, #10
 800240c:	733b      	strb	r3, [r7, #12]

		// PB11 SDA
		GPIO_SDA.pGPIOx = GPIOB;
 800240e:	4b27      	ldr	r3, [pc, #156]	; (80024ac <I2C_InitGPIOPins+0xe8>)
 8002410:	617b      	str	r3, [r7, #20]
		GPIO_SDA.PinConfig.PinNumber = GPIO_PIN_11;
 8002412:	230b      	movs	r3, #11
 8002414:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		GPIO_SCL.PinConfig.AF = GPIO_PIN_AF_AF4;
 8002416:	2304      	movs	r3, #4
 8002418:	747b      	strb	r3, [r7, #17]
		GPIO_SDA.PinConfig.AF = GPIO_PIN_AF_AF4;
 800241a:	2304      	movs	r3, #4
 800241c:	777b      	strb	r3, [r7, #29]


		if (AlternatePosition == 1)
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d103      	bne.n	800242c <I2C_InitGPIOPins+0x68>
		{
			// PB3 SDA
			GPIO_SDA.PinConfig.PinNumber = GPIO_PIN_3;
 8002424:	2303      	movs	r3, #3
 8002426:	763b      	strb	r3, [r7, #24]
			GPIO_SDA.PinConfig.AF = GPIO_PIN_AF_AF9;
 8002428:	2309      	movs	r3, #9
 800242a:	777b      	strb	r3, [r7, #29]
		}


	}

	if (pI2Cx == I2C3)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a21      	ldr	r2, [pc, #132]	; (80024b4 <I2C_InitGPIOPins+0xf0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d11a      	bne.n	800246a <I2C_InitGPIOPins+0xa6>
	{

		// PA8 SCL
		GPIO_SCL.pGPIOx = GPIOA;
 8002434:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <I2C_InitGPIOPins+0xf4>)
 8002436:	60bb      	str	r3, [r7, #8]
		GPIO_SCL.PinConfig.PinNumber = GPIO_PIN_8;
 8002438:	2308      	movs	r3, #8
 800243a:	733b      	strb	r3, [r7, #12]

		// PB9 SDA
		GPIO_SDA.pGPIOx = GPIOB;
 800243c:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <I2C_InitGPIOPins+0xe8>)
 800243e:	617b      	str	r3, [r7, #20]
		GPIO_SDA.PinConfig.PinNumber = GPIO_PIN_4;
 8002440:	2304      	movs	r3, #4
 8002442:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		GPIO_SCL.PinConfig.AF = GPIO_PIN_AF_AF4;
 8002444:	2304      	movs	r3, #4
 8002446:	747b      	strb	r3, [r7, #17]
		GPIO_SDA.PinConfig.AF = GPIO_PIN_AF_AF4;
 8002448:	2304      	movs	r3, #4
 800244a:	777b      	strb	r3, [r7, #29]

		if (AlternatePosition == 1)
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d10b      	bne.n	800246a <I2C_InitGPIOPins+0xa6>
		{
			RCC_CLOCK_GPIOC_ENABLE();
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <I2C_InitGPIOPins+0xf8>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a19      	ldr	r2, [pc, #100]	; (80024bc <I2C_InitGPIOPins+0xf8>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
			// PC9 SDA
			GPIO_SDA.pGPIOx = GPIOC;
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <I2C_InitGPIOPins+0xfc>)
 8002460:	617b      	str	r3, [r7, #20]
			GPIO_SDA.PinConfig.PinNumber = GPIO_PIN_9;
 8002462:	2309      	movs	r3, #9
 8002464:	763b      	strb	r3, [r7, #24]

			// Alternate Function
			GPIO_SDA.PinConfig.AF = GPIO_PIN_AF_AF9;
 8002466:	2309      	movs	r3, #9
 8002468:	777b      	strb	r3, [r7, #29]
		}

	}

	// Mode AF
	GPIO_SCL.PinConfig.Mode = GPIO_PIN_MODE_AF;
 800246a:	2302      	movs	r3, #2
 800246c:	737b      	strb	r3, [r7, #13]
	GPIO_SDA.PinConfig.Mode = GPIO_PIN_MODE_AF;
 800246e:	2302      	movs	r3, #2
 8002470:	767b      	strb	r3, [r7, #25]

	// Output type open drain
	GPIO_SCL.PinConfig.OutputType = GPIO_PIN_OT_OD;
 8002472:	2301      	movs	r3, #1
 8002474:	73bb      	strb	r3, [r7, #14]
	GPIO_SDA.PinConfig.OutputType = GPIO_PIN_OT_OD;
 8002476:	2301      	movs	r3, #1
 8002478:	76bb      	strb	r3, [r7, #26]

	// Output speed very high
	GPIO_SCL.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 800247a:	2303      	movs	r3, #3
 800247c:	73fb      	strb	r3, [r7, #15]
	GPIO_SDA.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	76fb      	strb	r3, [r7, #27]

	// Pull ups
	GPIO_SCL.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	743b      	strb	r3, [r7, #16]
	GPIO_SDA.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	773b      	strb	r3, [r7, #28]

	GPIO_InitPin(&GPIO_SDA);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fdc0 	bl	8002014 <GPIO_InitPin>
	GPIO_InitPin(&GPIO_SCL);
 8002494:	f107 0308 	add.w	r3, r7, #8
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff fdbb 	bl	8002014 <GPIO_InitPin>

}
 800249e:	bf00      	nop
 80024a0:	3720      	adds	r7, #32
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40005400 	.word	0x40005400
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40005800 	.word	0x40005800
 80024b4:	40005c00 	.word	0x40005c00
 80024b8:	40020000 	.word	0x40020000
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020800 	.word	0x40020800

080024c4 <I2C_Init>:
 *
 * @param[*phI2C] - handler to i2c structure
 * @return - void
 */
uint8_t I2C_Init(I2C_Handle_t *phI2C)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	// enable peripheral clock
	I2C_ClockEnable(phI2C->pI2Cx);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff45 	bl	8002360 <I2C_ClockEnable>

	// init GPIO pins
	I2C_InitGPIOPins(phI2C->pI2Cx, 0);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff71 	bl	80023c4 <I2C_InitGPIOPins>

	//reset I2C
	phI2C->pI2Cx->CR1 |= I2C_CR1_SWRST;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024f0:	601a      	str	r2, [r3, #0]
	phI2C->pI2Cx->CR1 &= ~(I2C_CR1_SWRST);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002500:	601a      	str	r2, [r3, #0]

	// check frequency limits
	if (phI2C->I2CConfig.ABP1FrequencyMHz < I2C_FREQUENCY_MINIMUM || phI2C->I2CConfig.ABP1FrequencyMHz > I2C_FREQUENCY_MAXIMUM)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	791b      	ldrb	r3, [r3, #4]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d903      	bls.n	8002512 <I2C_Init+0x4e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	791b      	ldrb	r3, [r3, #4]
 800250e:	2b32      	cmp	r3, #50	; 0x32
 8002510:	d901      	bls.n	8002516 <I2C_Init+0x52>
	{
		return I2C_ERROR_WRONG_FREQUENCY;
 8002512:	2301      	movs	r3, #1
 8002514:	e0af      	b.n	8002676 <I2C_Init+0x1b2>
	}

	// set frequency (same as ABP1 frequency)
	phI2C->pI2Cx->CR2 &= ~(I2C_CR2_FREQ);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002524:	605a      	str	r2, [r3, #4]
	phI2C->pI2Cx->CR2 |= (phI2C->I2CConfig.ABP1FrequencyMHz << I2C_CR2_FREQ_Pos);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	791b      	ldrb	r3, [r3, #4]
 8002530:	4619      	mov	r1, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]

	// set speed
	uint16_t _tempCCR, _tempTRISE;
	// set slow mode, reset DUTY
	phI2C->pI2Cx->CCR &= ~(I2C_CCR_FS);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	69da      	ldr	r2, [r3, #28]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002548:	61da      	str	r2, [r3, #28]
	phI2C->pI2Cx->CCR &= ~(I2C_CCR_DUTY);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69da      	ldr	r2, [r3, #28]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002558:	61da      	str	r2, [r3, #28]


	// CCR calculation for slow mode -> values are coming from RM CCR register and result is in [ns]
	// (Thigh + Tlow) / (CEOFF * PCLK)
	_tempCCR = (I2C_CCR_SM_THIGH + I2C_CCR_SM_TLOW) / (I2C_CCR_SM_COEFF * (1000 / phI2C->I2CConfig.ABP1FrequencyMHz));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	791b      	ldrb	r3, [r3, #4]
 800255e:	461a      	mov	r2, r3
 8002560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002564:	fb93 f3f2 	sdiv	r3, r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	f242 7210 	movw	r2, #10000	; 0x2710
 800256e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002572:	81fb      	strh	r3, [r7, #14]

	// TRISE calculation for slow mode -> equation is from RM
	_tempTRISE = ((I2C_CCR_SM_TR_SCL * phI2C->I2CConfig.ABP1FrequencyMHz) / 1000) + 1;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	791b      	ldrb	r3, [r3, #4]
 8002578:	461a      	mov	r2, r3
 800257a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257e:	fb03 f302 	mul.w	r3, r3, r2
 8002582:	4a3f      	ldr	r2, [pc, #252]	; (8002680 <I2C_Init+0x1bc>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	099b      	lsrs	r3, r3, #6
 800258a:	b29b      	uxth	r3, r3
 800258c:	3301      	adds	r3, #1
 800258e:	81bb      	strh	r3, [r7, #12]

	// fast mode
	if (phI2C->I2CConfig.Speed != I2C_SPEED_SLOW)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	795b      	ldrb	r3, [r3, #5]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d043      	beq.n	8002620 <I2C_Init+0x15c>
	{
		// set fast mode
		phI2C->pI2Cx->CCR |= I2C_CCR_FS;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025a6:	61da      	str	r2, [r3, #28]
		// calculate CCR for fast mode with DUTY 0
		_tempCCR = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW) / (I2C_CCR_FM_COEFF_DUTY0 * (1000 / phI2C->I2CConfig.ABP1FrequencyMHz));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	791b      	ldrb	r3, [r3, #4]
 80025ac:	461a      	mov	r2, r3
 80025ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80025b6:	461a      	mov	r2, r3
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80025c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c6:	81fb      	strh	r3, [r7, #14]
		// calculate TRISE for fast mode
		_tempTRISE = ((I2C_CCR_FM_TR_SCL * phI2C->I2CConfig.ABP1FrequencyMHz) / 1000) + 1;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	791b      	ldrb	r3, [r3, #4]
 80025cc:	461a      	mov	r2, r3
 80025ce:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80025d2:	fb03 f302 	mul.w	r3, r3, r2
 80025d6:	4a2a      	ldr	r2, [pc, #168]	; (8002680 <I2C_Init+0x1bc>)
 80025d8:	fba2 2303 	umull	r2, r3, r2, r3
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	81bb      	strh	r3, [r7, #12]
		if (phI2C->I2CConfig.Speed == I2C_SPEED_FAST_DUTY1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	795b      	ldrb	r3, [r3, #5]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d119      	bne.n	8002620 <I2C_Init+0x15c>
		{
			// set DUTY flag
			phI2C->pI2Cx->CCR |= I2C_CCR_DUTY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69da      	ldr	r2, [r3, #28]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025fa:	61da      	str	r2, [r3, #28]
			// calculate CCR with fast mode DUTY1
			_tempCCR = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW) / (I2C_CCR_FM_COEFF_DUTY1 * (1000 / phI2C->I2CConfig.ABP1FrequencyMHz));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	791b      	ldrb	r3, [r3, #4]
 8002600:	461a      	mov	r2, r3
 8002602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002606:	fb93 f3f2 	sdiv	r3, r3, r2
 800260a:	461a      	mov	r2, r3
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	009a      	lsls	r2, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	81fb      	strh	r3, [r7, #14]
		}
	}
	phI2C->pI2Cx->CCR &= ~(I2C_CCR_CCR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800262e:	f023 030f 	bic.w	r3, r3, #15
 8002632:	61d3      	str	r3, [r2, #28]
	phI2C->pI2Cx->CCR |= (_tempCCR << I2C_CCR_CCR_Pos);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	69d9      	ldr	r1, [r3, #28]
 800263a:	89fa      	ldrh	r2, [r7, #14]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	61da      	str	r2, [r3, #28]

	// write correct TRISE to the register
	phI2C->pI2Cx->TRISE &= ~(I2C_TRISE_TRISE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6a1a      	ldr	r2, [r3, #32]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002652:	621a      	str	r2, [r3, #32]
	phI2C->pI2Cx->TRISE |= (_tempTRISE << I2C_TRISE_TRISE_Pos);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6a19      	ldr	r1, [r3, #32]
 800265a:	89ba      	ldrh	r2, [r7, #12]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	621a      	str	r2, [r3, #32]


	// enable I2c
	phI2C->pI2Cx->CR1 |= I2C_CR1_PE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

	return 0;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	10624dd3 	.word	0x10624dd3

08002684 <I2C_Transmit>:

uint8_t I2C_Transmit(I2C_Handle_t *phI2C, uint8_t SlaveAddres, uint8_t MemAddress, uint8_t *pDataBuffer,uint32_t DataSize)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	607b      	str	r3, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	72fb      	strb	r3, [r7, #11]
 8002692:	4613      	mov	r3, r2
 8002694:	72bb      	strb	r3, [r7, #10]
	uint8_t _temp8reg;
	uint32_t _txDataToSend = DataSize;
 8002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002698:	61fb      	str	r3, [r7, #28]
	uint32_t _txDataIndex = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
//1.0 Set START BIT
	phI2C->pI2Cx->CR1 |= I2C_CR1_ACK;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026ac:	601a      	str	r2, [r3, #0]
	phI2C->pI2Cx->CR1 |= I2C_CR1_START;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026bc:	601a      	str	r2, [r3, #0]

//1.1 Wait until SB flag is set
	while (!(I2C_SR1_SB & phI2C->pI2Cx->SR1))
 80026be:	bf00      	nop
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f8      	beq.n	80026c0 <I2C_Transmit+0x3c>
		;
//1.2 Clear SB by reading SR1
	_temp8reg = phI2C->pI2Cx->SR1;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	75fb      	strb	r3, [r7, #23]
//2. Put slave address in DR register - If transmitting set slave addres LSB to 0, reciever 1
	phI2C->pI2Cx->DR = (SlaveAddres << 1);
 80026d6:	7afb      	ldrb	r3, [r7, #11]
 80026d8:	005a      	lsls	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	611a      	str	r2, [r3, #16]
//3. ADDR bit set by hardware

	// wait until ADDR is set
	while (!(I2C_SR1_ADDR & phI2C->pI2Cx->SR1))
 80026e0:	bf00      	nop
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f8      	beq.n	80026e2 <I2C_Transmit+0x5e>
		;
//4. ADDR is cleared by reading SR1 , Read SR2
	_temp8reg = phI2C->pI2Cx->SR1;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	75fb      	strb	r3, [r7, #23]
	_temp8reg = phI2C->pI2Cx->SR2;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	75fb      	strb	r3, [r7, #23]
//5. TxE bit is set when acknowledge bit is sent
	while (!(phI2C->pI2Cx->SR1 & I2C_SR1_TXE))
 8002700:	bf00      	nop
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f8      	beq.n	8002702 <I2C_Transmit+0x7e>
		;
//6. Write memory address to DR to clear TxE
	phI2C->pI2Cx->DR = MemAddress;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	7aba      	ldrb	r2, [r7, #10]
 8002716:	611a      	str	r2, [r3, #16]

//7. Data transfer
	while(_txDataToSend > 0)
 8002718:	e027      	b.n	800276a <I2C_Transmit+0xe6>
	{
		// wait until data register is empty
		while (!(phI2C->pI2Cx->SR1 & I2C_SR1_TXE))
 800271a:	bf00      	nop
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f8      	beq.n	800271c <I2C_Transmit+0x98>
			;

		// put data in data register
		phI2C->pI2Cx->DR = pDataBuffer[_txDataIndex];
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	4413      	add	r3, r2
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	611a      	str	r2, [r3, #16]

		//change counters
		_txDataToSend--;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	3b01      	subs	r3, #1
 800273c:	61fb      	str	r3, [r7, #28]
		_txDataIndex++;
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	3301      	adds	r3, #1
 8002742:	61bb      	str	r3, [r7, #24]


//8. After last bit is written to DR register , Set STOP bit  and interface is going back to slave mode
		if(_txDataToSend == 0)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10f      	bne.n	800276a <I2C_Transmit+0xe6>
		{
			// check if data transfer is finsihed
			while (!(phI2C->pI2Cx->SR1 & I2C_SR1_BTF))
 800274a:	bf00      	nop
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f8      	beq.n	800274c <I2C_Transmit+0xc8>
				;
			// stop transfer
			phI2C->pI2Cx->CR1 |= I2C_CR1_STOP;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002768:	601a      	str	r2, [r3, #0]
	while(_txDataToSend > 0)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1d4      	bne.n	800271a <I2C_Transmit+0x96>
		}

	}


	return 0;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3724      	adds	r7, #36	; 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <RCC_InitClock>:
 * 7. Select system clock
 * @param[*GPIO] - base address of gpiox peripheral
 * @return - void
 */
uint8_t RCC_InitClock(RCC_ClockInitTypeDef *pClockInit)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

/* 1. Enable HSI/HSE as main source RCC->CR */

	//enable HSI/HSE
	if (pClockInit->OscillatorType == RCC_OSCILLATORTYPE_HSI)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10d      	bne.n	80027ac <RCC_InitClock+0x2c>
	{
		// set HSI flag
		RCC->CR |= RCC_CR_HSION;
 8002790:	4b91      	ldr	r3, [pc, #580]	; (80029d8 <RCC_InitClock+0x258>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a90      	ldr	r2, [pc, #576]	; (80029d8 <RCC_InitClock+0x258>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6013      	str	r3, [r2, #0]
		// wait until HSI is on
		while (!(RCC->CR & RCC_CR_HSIRDY))
 800279c:	bf00      	nop
 800279e:	4b8e      	ldr	r3, [pc, #568]	; (80029d8 <RCC_InitClock+0x258>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f9      	beq.n	800279e <RCC_InitClock+0x1e>
 80027aa:	e010      	b.n	80027ce <RCC_InitClock+0x4e>
			;
	}
	else if (pClockInit->OscillatorType == RCC_OSCILLATORTYPE_HSE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d10c      	bne.n	80027ce <RCC_InitClock+0x4e>
	{
		// set HSE flag
		RCC->CR |= RCC_CR_HSEON;
 80027b4:	4b88      	ldr	r3, [pc, #544]	; (80029d8 <RCC_InitClock+0x258>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a87      	ldr	r2, [pc, #540]	; (80029d8 <RCC_InitClock+0x258>)
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027be:	6013      	str	r3, [r2, #0]
		// wait until HSE is on
		while (!(RCC->CR & RCC_CR_HSERDY))
 80027c0:	bf00      	nop
 80027c2:	4b85      	ldr	r3, [pc, #532]	; (80029d8 <RCC_InitClock+0x258>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f9      	beq.n	80027c2 <RCC_InitClock+0x42>
			;
	}

/* 2. Set regulator scaling PWR->VOS if necessary before PLL is ON */
	PWR->CR &= ~(PWR_CR_VOS);
 80027ce:	4b83      	ldr	r3, [pc, #524]	; (80029dc <RCC_InitClock+0x25c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a82      	ldr	r2, [pc, #520]	; (80029dc <RCC_InitClock+0x25c>)
 80027d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80027d8:	6013      	str	r3, [r2, #0]
	PWR->CR |= (pClockInit->VOSScale << PWR_CR_VOS_Pos);
 80027da:	4b80      	ldr	r3, [pc, #512]	; (80029dc <RCC_InitClock+0x25c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	7852      	ldrb	r2, [r2, #1]
 80027e2:	0392      	lsls	r2, r2, #14
 80027e4:	4611      	mov	r1, r2
 80027e6:	4a7d      	ldr	r2, [pc, #500]	; (80029dc <RCC_InitClock+0x25c>)
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6013      	str	r3, [r2, #0]

/* 3. Configure Flash and Latency settings */
	// enable data, instruction and prefetch cache
	FLASH->ACR |= (FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN);
 80027ec:	4b7c      	ldr	r3, [pc, #496]	; (80029e0 <RCC_InitClock+0x260>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a7b      	ldr	r2, [pc, #492]	; (80029e0 <RCC_InitClock+0x260>)
 80027f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027f6:	6013      	str	r3, [r2, #0]
	// to read correct from flash at certain voltage and frequency latency between read has to be set correctly
	// this table can be found in reference manual
	FLASH->ACR &= ~(FLASH_ACR_LATENCY);
 80027f8:	4b79      	ldr	r3, [pc, #484]	; (80029e0 <RCC_InitClock+0x260>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a78      	ldr	r2, [pc, #480]	; (80029e0 <RCC_InitClock+0x260>)
 80027fe:	f023 0307 	bic.w	r3, r3, #7
 8002802:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (pClockInit->FLASHLatency << FLASH_ACR_LATENCY_Pos);
 8002804:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <RCC_InitClock+0x260>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	7892      	ldrb	r2, [r2, #2]
 800280c:	4611      	mov	r1, r2
 800280e:	4a74      	ldr	r2, [pc, #464]	; (80029e0 <RCC_InitClock+0x260>)
 8002810:	430b      	orrs	r3, r1
 8002812:	6013      	str	r3, [r2, #0]

/* 4. Configure HCLK, PCLK1, PCLK2 */
	// configure AHB prescaler
	RCC->CFGR &= ~(RCC_CFGR_HPRE);
 8002814:	4b70      	ldr	r3, [pc, #448]	; (80029d8 <RCC_InitClock+0x258>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	4a6f      	ldr	r2, [pc, #444]	; (80029d8 <RCC_InitClock+0x258>)
 800281a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800281e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (pClockInit->HPREPrescaler << RCC_CFGR_HPRE_Pos);
 8002820:	4b6d      	ldr	r3, [pc, #436]	; (80029d8 <RCC_InitClock+0x258>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	78d2      	ldrb	r2, [r2, #3]
 8002828:	0112      	lsls	r2, r2, #4
 800282a:	4611      	mov	r1, r2
 800282c:	4a6a      	ldr	r2, [pc, #424]	; (80029d8 <RCC_InitClock+0x258>)
 800282e:	430b      	orrs	r3, r1
 8002830:	6093      	str	r3, [r2, #8]

	// configure APB1 prescaler
	RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 8002832:	4b69      	ldr	r3, [pc, #420]	; (80029d8 <RCC_InitClock+0x258>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	4a68      	ldr	r2, [pc, #416]	; (80029d8 <RCC_InitClock+0x258>)
 8002838:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800283c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (pClockInit->APB1Prescaler << RCC_CFGR_PPRE1_Pos);
 800283e:	4b66      	ldr	r3, [pc, #408]	; (80029d8 <RCC_InitClock+0x258>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	7912      	ldrb	r2, [r2, #4]
 8002846:	0292      	lsls	r2, r2, #10
 8002848:	4611      	mov	r1, r2
 800284a:	4a63      	ldr	r2, [pc, #396]	; (80029d8 <RCC_InitClock+0x258>)
 800284c:	430b      	orrs	r3, r1
 800284e:	6093      	str	r3, [r2, #8]

	// configure APB2 prescaler
	RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 8002850:	4b61      	ldr	r3, [pc, #388]	; (80029d8 <RCC_InitClock+0x258>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a60      	ldr	r2, [pc, #384]	; (80029d8 <RCC_InitClock+0x258>)
 8002856:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800285a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (pClockInit->APB2Prescaler << RCC_CFGR_PPRE2_Pos);
 800285c:	4b5e      	ldr	r3, [pc, #376]	; (80029d8 <RCC_InitClock+0x258>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	7952      	ldrb	r2, [r2, #5]
 8002864:	0352      	lsls	r2, r2, #13
 8002866:	4611      	mov	r1, r2
 8002868:	4a5b      	ldr	r2, [pc, #364]	; (80029d8 <RCC_InitClock+0x258>)
 800286a:	430b      	orrs	r3, r1
 800286c:	6093      	str	r3, [r2, #8]
/* 5. Configure PLL */

			// PLL - phase-locked loop - clock generation engine in the MCU

			// if PLL is enable
			if (pClockInit->PLL.PLLState == RCC_PLL_STATE_ENABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002874:	2b01      	cmp	r3, #1
 8002876:	f040 8088 	bne.w	800298a <RCC_InitClock+0x20a>
			{
				// init PLL source
				RCC->PLLCFGR |= (pClockInit->PLL.PLLSource << RCC_PLLCFGR_PLLSRC_Pos);
 800287a:	4b57      	ldr	r3, [pc, #348]	; (80029d8 <RCC_InitClock+0x258>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	79d2      	ldrb	r2, [r2, #7]
 8002882:	0592      	lsls	r2, r2, #22
 8002884:	4611      	mov	r1, r2
 8002886:	4a54      	ldr	r2, [pc, #336]	; (80029d8 <RCC_InitClock+0x258>)
 8002888:	430b      	orrs	r3, r1
 800288a:	6053      	str	r3, [r2, #4]

				// PLLM - division factor for the main PLL
				// It is recommended to put source frequency in range of 1 - 2Mhz (2Mhz recommended)
				// Frequency after this division operation is input of VCO (voltage controlled oscillator)

				if (pClockInit->PLL.PLLM < 3 || pClockInit->PLL.PLLM > 63)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7a1b      	ldrb	r3, [r3, #8]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d903      	bls.n	800289c <RCC_InitClock+0x11c>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7a1b      	ldrb	r3, [r3, #8]
 8002898:	2b3f      	cmp	r3, #63	; 0x3f
 800289a:	d901      	bls.n	80028a0 <RCC_InitClock+0x120>
				{
					return PLL_CONFIG_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e095      	b.n	80029cc <RCC_InitClock+0x24c>
				}
				RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM);
 80028a0:	4b4d      	ldr	r3, [pc, #308]	; (80029d8 <RCC_InitClock+0x258>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a4c      	ldr	r2, [pc, #304]	; (80029d8 <RCC_InitClock+0x258>)
 80028a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028aa:	6053      	str	r3, [r2, #4]
				RCC->PLLCFGR |= (pClockInit->PLL.PLLM << RCC_PLLCFGR_PLLM_Pos);
 80028ac:	4b4a      	ldr	r3, [pc, #296]	; (80029d8 <RCC_InitClock+0x258>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	7a12      	ldrb	r2, [r2, #8]
 80028b4:	4611      	mov	r1, r2
 80028b6:	4a48      	ldr	r2, [pc, #288]	; (80029d8 <RCC_InitClock+0x258>)
 80028b8:	430b      	orrs	r3, r1
 80028ba:	6053      	str	r3, [r2, #4]

				// PLLN - multiplication factor for VCO
				// After this operation value should be between 192 and 432 MHz
				// Frequency after this operation is output of VCO

				if (pClockInit->PLL.PLLN < 2 || pClockInit->PLL.PLLM > 432)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	895b      	ldrh	r3, [r3, #10]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d801      	bhi.n	80028c8 <RCC_InitClock+0x148>
				{
					return PLL_CONFIG_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e081      	b.n	80029cc <RCC_InitClock+0x24c>
				}
				RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN);
 80028c8:	4b43      	ldr	r3, [pc, #268]	; (80029d8 <RCC_InitClock+0x258>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a42      	ldr	r2, [pc, #264]	; (80029d8 <RCC_InitClock+0x258>)
 80028ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80028d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d6:	6053      	str	r3, [r2, #4]
				RCC->PLLCFGR |= (pClockInit->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos);
 80028d8:	4b3f      	ldr	r3, [pc, #252]	; (80029d8 <RCC_InitClock+0x258>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	8952      	ldrh	r2, [r2, #10]
 80028e0:	0192      	lsls	r2, r2, #6
 80028e2:	4611      	mov	r1, r2
 80028e4:	4a3c      	ldr	r2, [pc, #240]	; (80029d8 <RCC_InitClock+0x258>)
 80028e6:	430b      	orrs	r3, r1
 80028e8:	6053      	str	r3, [r2, #4]
				// PLLP - division factor for main system clock
				// After this operation values should not exceed 84MHz
				// Frequency after this operation is frequency of main system clock

				// 2 bits register so value can not be more than 3
				if (pClockInit->PLL.PLLP > 3)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	7b1b      	ldrb	r3, [r3, #12]
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d901      	bls.n	80028f6 <RCC_InitClock+0x176>
				{
					return PLL_CONFIG_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e06a      	b.n	80029cc <RCC_InitClock+0x24c>
				}
				RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP);
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <RCC_InitClock+0x258>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4a37      	ldr	r2, [pc, #220]	; (80029d8 <RCC_InitClock+0x258>)
 80028fc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002900:	6053      	str	r3, [r2, #4]
				RCC->PLLCFGR |= (pClockInit->PLL.PLLP << RCC_PLLCFGR_PLLP_Pos);
 8002902:	4b35      	ldr	r3, [pc, #212]	; (80029d8 <RCC_InitClock+0x258>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	7b12      	ldrb	r2, [r2, #12]
 800290a:	0412      	lsls	r2, r2, #16
 800290c:	4611      	mov	r1, r2
 800290e:	4a32      	ldr	r2, [pc, #200]	; (80029d8 <RCC_InitClock+0x258>)
 8002910:	430b      	orrs	r3, r1
 8002912:	6053      	str	r3, [r2, #4]
				// PLLQ - ) division factor for USB OTG FS, SDIO and random number generator clocks
				// The USB OTG FS requires a 48 MHz clock to work correctly. The SDIO and the
				// random number generator need a frequency lower than or equal to 48 MHz to work
				// correctly

				if (pClockInit->PLL.PLLQ < 2 || pClockInit->PLL.PLLQ > 15)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7b5b      	ldrb	r3, [r3, #13]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d903      	bls.n	8002924 <RCC_InitClock+0x1a4>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7b5b      	ldrb	r3, [r3, #13]
 8002920:	2b0f      	cmp	r3, #15
 8002922:	d901      	bls.n	8002928 <RCC_InitClock+0x1a8>
				{
					return PLL_CONFIG_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e051      	b.n	80029cc <RCC_InitClock+0x24c>
				}
				RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLQ);
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <RCC_InitClock+0x258>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a2a      	ldr	r2, [pc, #168]	; (80029d8 <RCC_InitClock+0x258>)
 800292e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002932:	6053      	str	r3, [r2, #4]
				RCC->PLLCFGR |= (pClockInit->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos);
 8002934:	4b28      	ldr	r3, [pc, #160]	; (80029d8 <RCC_InitClock+0x258>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	7b52      	ldrb	r2, [r2, #13]
 800293c:	0612      	lsls	r2, r2, #24
 800293e:	4611      	mov	r1, r2
 8002940:	4a25      	ldr	r2, [pc, #148]	; (80029d8 <RCC_InitClock+0x258>)
 8002942:	430b      	orrs	r3, r1
 8002944:	6053      	str	r3, [r2, #4]

/* 6. Enable the PLL */
				RCC->CR |= (RCC_PLL_STATE_ENABLE << RCC_CR_PLLON_Pos);
 8002946:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <RCC_InitClock+0x258>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a23      	ldr	r2, [pc, #140]	; (80029d8 <RCC_InitClock+0x258>)
 800294c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002950:	6013      	str	r3, [r2, #0]

				// wait until PLL is ready
				while (!(RCC->CR & RCC_CR_PLLRDY))
 8002952:	bf00      	nop
 8002954:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <RCC_InitClock+0x258>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f9      	beq.n	8002954 <RCC_InitClock+0x1d4>
					;
/* 7. Select system clock switch */
				// set PLL as system clock
				RCC->CFGR &= ~(RCC_CFGR_SW);
 8002960:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <RCC_InitClock+0x258>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <RCC_InitClock+0x258>)
 8002966:	f023 0303 	bic.w	r3, r3, #3
 800296a:	6093      	str	r3, [r2, #8]
				RCC->CFGR |= RCC_CFGR_SW_PLL;
 800296c:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <RCC_InitClock+0x258>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <RCC_InitClock+0x258>)
 8002972:	f043 0302 	orr.w	r3, r3, #2
 8002976:	6093      	str	r3, [r2, #8]
				while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8002978:	bf00      	nop
 800297a:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <RCC_InitClock+0x258>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b08      	cmp	r3, #8
 8002984:	d1f9      	bne.n	800297a <RCC_InitClock+0x1fa>

				return 0;
 8002986:	2300      	movs	r3, #0
 8002988:	e020      	b.n	80029cc <RCC_InitClock+0x24c>
			}
			else
			{
/* 6. Disable the PLL */
				RCC->CR = (RCC_PLL_STATE_DISABLE << RCC_CR_PLLON_Pos);
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <RCC_InitClock+0x258>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

				// wait until PLL is disables
				while (!(RCC->CR & RCC_CR_PLLRDY));
 8002990:	bf00      	nop
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <RCC_InitClock+0x258>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f9      	beq.n	8002992 <RCC_InitClock+0x212>
/* 7. Select system clock switch */
				// set HSI or HE as main system clock
				RCC->CFGR &= ~(RCC_CFGR_SW);
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <RCC_InitClock+0x258>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	4a0d      	ldr	r2, [pc, #52]	; (80029d8 <RCC_InitClock+0x258>)
 80029a4:	f023 0303 	bic.w	r3, r3, #3
 80029a8:	6093      	str	r3, [r2, #8]
				RCC->CFGR |= (pClockInit->OscillatorType << RCC_CFGR_SW_Pos);
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <RCC_InitClock+0x258>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	7812      	ldrb	r2, [r2, #0]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4a08      	ldr	r2, [pc, #32]	; (80029d8 <RCC_InitClock+0x258>)
 80029b6:	430b      	orrs	r3, r1
 80029b8:	6093      	str	r3, [r2, #8]

				// wait until HSI/HSE is set as a clock source
				while((RCC->CFGR & (pClockInit->OscillatorType << RCC_CFGR_SW_Pos)) != RCC_CFGR_SWS_PLL);
 80029ba:	bf00      	nop
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <RCC_InitClock+0x258>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	7812      	ldrb	r2, [r2, #0]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d1f8      	bne.n	80029bc <RCC_InitClock+0x23c>

			}

	return 0;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40007000 	.word	0x40007000
 80029e0:	40023c00 	.word	0x40023c00

080029e4 <__errno>:
 80029e4:	4b01      	ldr	r3, [pc, #4]	; (80029ec <__errno+0x8>)
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	20000004 	.word	0x20000004

080029f0 <__libc_init_array>:
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	4d0d      	ldr	r5, [pc, #52]	; (8002a28 <__libc_init_array+0x38>)
 80029f4:	4c0d      	ldr	r4, [pc, #52]	; (8002a2c <__libc_init_array+0x3c>)
 80029f6:	1b64      	subs	r4, r4, r5
 80029f8:	10a4      	asrs	r4, r4, #2
 80029fa:	2600      	movs	r6, #0
 80029fc:	42a6      	cmp	r6, r4
 80029fe:	d109      	bne.n	8002a14 <__libc_init_array+0x24>
 8002a00:	4d0b      	ldr	r5, [pc, #44]	; (8002a30 <__libc_init_array+0x40>)
 8002a02:	4c0c      	ldr	r4, [pc, #48]	; (8002a34 <__libc_init_array+0x44>)
 8002a04:	f001 f9f4 	bl	8003df0 <_init>
 8002a08:	1b64      	subs	r4, r4, r5
 8002a0a:	10a4      	asrs	r4, r4, #2
 8002a0c:	2600      	movs	r6, #0
 8002a0e:	42a6      	cmp	r6, r4
 8002a10:	d105      	bne.n	8002a1e <__libc_init_array+0x2e>
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
 8002a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a18:	4798      	blx	r3
 8002a1a:	3601      	adds	r6, #1
 8002a1c:	e7ee      	b.n	80029fc <__libc_init_array+0xc>
 8002a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a22:	4798      	blx	r3
 8002a24:	3601      	adds	r6, #1
 8002a26:	e7f2      	b.n	8002a0e <__libc_init_array+0x1e>
 8002a28:	0800419c 	.word	0x0800419c
 8002a2c:	0800419c 	.word	0x0800419c
 8002a30:	0800419c 	.word	0x0800419c
 8002a34:	080041a0 	.word	0x080041a0

08002a38 <memset>:
 8002a38:	4402      	add	r2, r0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d100      	bne.n	8002a42 <memset+0xa>
 8002a40:	4770      	bx	lr
 8002a42:	f803 1b01 	strb.w	r1, [r3], #1
 8002a46:	e7f9      	b.n	8002a3c <memset+0x4>

08002a48 <rand>:
 8002a48:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <rand+0x60>)
 8002a4a:	b510      	push	{r4, lr}
 8002a4c:	681c      	ldr	r4, [r3, #0]
 8002a4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a50:	b9b3      	cbnz	r3, 8002a80 <rand+0x38>
 8002a52:	2018      	movs	r0, #24
 8002a54:	f000 f888 	bl	8002b68 <malloc>
 8002a58:	63a0      	str	r0, [r4, #56]	; 0x38
 8002a5a:	b928      	cbnz	r0, 8002a68 <rand+0x20>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <rand+0x64>)
 8002a60:	4813      	ldr	r0, [pc, #76]	; (8002ab0 <rand+0x68>)
 8002a62:	214e      	movs	r1, #78	; 0x4e
 8002a64:	f000 f850 	bl	8002b08 <__assert_func>
 8002a68:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <rand+0x6c>)
 8002a6a:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <rand+0x70>)
 8002a6c:	e9c0 2300 	strd	r2, r3, [r0]
 8002a70:	4b12      	ldr	r3, [pc, #72]	; (8002abc <rand+0x74>)
 8002a72:	6083      	str	r3, [r0, #8]
 8002a74:	230b      	movs	r3, #11
 8002a76:	8183      	strh	r3, [r0, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002a80:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002a82:	480f      	ldr	r0, [pc, #60]	; (8002ac0 <rand+0x78>)
 8002a84:	690a      	ldr	r2, [r1, #16]
 8002a86:	694b      	ldr	r3, [r1, #20]
 8002a88:	4c0e      	ldr	r4, [pc, #56]	; (8002ac4 <rand+0x7c>)
 8002a8a:	4350      	muls	r0, r2
 8002a8c:	fb04 0003 	mla	r0, r4, r3, r0
 8002a90:	fba2 3404 	umull	r3, r4, r2, r4
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	4404      	add	r4, r0
 8002a98:	f144 0000 	adc.w	r0, r4, #0
 8002a9c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8002aa0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002aa4:	bd10      	pop	{r4, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000004 	.word	0x20000004
 8002aac:	08004054 	.word	0x08004054
 8002ab0:	0800406b 	.word	0x0800406b
 8002ab4:	abcd330e 	.word	0xabcd330e
 8002ab8:	e66d1234 	.word	0xe66d1234
 8002abc:	0005deec 	.word	0x0005deec
 8002ac0:	5851f42d 	.word	0x5851f42d
 8002ac4:	4c957f2d 	.word	0x4c957f2d

08002ac8 <siprintf>:
 8002ac8:	b40e      	push	{r1, r2, r3}
 8002aca:	b500      	push	{lr}
 8002acc:	b09c      	sub	sp, #112	; 0x70
 8002ace:	ab1d      	add	r3, sp, #116	; 0x74
 8002ad0:	9002      	str	r0, [sp, #8]
 8002ad2:	9006      	str	r0, [sp, #24]
 8002ad4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ad8:	4809      	ldr	r0, [pc, #36]	; (8002b00 <siprintf+0x38>)
 8002ada:	9107      	str	r1, [sp, #28]
 8002adc:	9104      	str	r1, [sp, #16]
 8002ade:	4909      	ldr	r1, [pc, #36]	; (8002b04 <siprintf+0x3c>)
 8002ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ae4:	9105      	str	r1, [sp, #20]
 8002ae6:	6800      	ldr	r0, [r0, #0]
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	a902      	add	r1, sp, #8
 8002aec:	f000 f94a 	bl	8002d84 <_svfiprintf_r>
 8002af0:	9b02      	ldr	r3, [sp, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	b01c      	add	sp, #112	; 0x70
 8002af8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002afc:	b003      	add	sp, #12
 8002afe:	4770      	bx	lr
 8002b00:	20000004 	.word	0x20000004
 8002b04:	ffff0208 	.word	0xffff0208

08002b08 <__assert_func>:
 8002b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b0a:	4614      	mov	r4, r2
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <__assert_func+0x2c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4605      	mov	r5, r0
 8002b14:	68d8      	ldr	r0, [r3, #12]
 8002b16:	b14c      	cbz	r4, 8002b2c <__assert_func+0x24>
 8002b18:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <__assert_func+0x30>)
 8002b1a:	9100      	str	r1, [sp, #0]
 8002b1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002b20:	4906      	ldr	r1, [pc, #24]	; (8002b3c <__assert_func+0x34>)
 8002b22:	462b      	mov	r3, r5
 8002b24:	f000 f80e 	bl	8002b44 <fiprintf>
 8002b28:	f000 fdea 	bl	8003700 <abort>
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <__assert_func+0x38>)
 8002b2e:	461c      	mov	r4, r3
 8002b30:	e7f3      	b.n	8002b1a <__assert_func+0x12>
 8002b32:	bf00      	nop
 8002b34:	20000004 	.word	0x20000004
 8002b38:	080040ca 	.word	0x080040ca
 8002b3c:	080040d7 	.word	0x080040d7
 8002b40:	08004105 	.word	0x08004105

08002b44 <fiprintf>:
 8002b44:	b40e      	push	{r1, r2, r3}
 8002b46:	b503      	push	{r0, r1, lr}
 8002b48:	4601      	mov	r1, r0
 8002b4a:	ab03      	add	r3, sp, #12
 8002b4c:	4805      	ldr	r0, [pc, #20]	; (8002b64 <fiprintf+0x20>)
 8002b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b52:	6800      	ldr	r0, [r0, #0]
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	f000 fa3f 	bl	8002fd8 <_vfiprintf_r>
 8002b5a:	b002      	add	sp, #8
 8002b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b60:	b003      	add	sp, #12
 8002b62:	4770      	bx	lr
 8002b64:	20000004 	.word	0x20000004

08002b68 <malloc>:
 8002b68:	4b02      	ldr	r3, [pc, #8]	; (8002b74 <malloc+0xc>)
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	f000 b853 	b.w	8002c18 <_malloc_r>
 8002b72:	bf00      	nop
 8002b74:	20000004 	.word	0x20000004

08002b78 <_free_r>:
 8002b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b7a:	2900      	cmp	r1, #0
 8002b7c:	d048      	beq.n	8002c10 <_free_r+0x98>
 8002b7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b82:	9001      	str	r0, [sp, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f1a1 0404 	sub.w	r4, r1, #4
 8002b8a:	bfb8      	it	lt
 8002b8c:	18e4      	addlt	r4, r4, r3
 8002b8e:	f001 f805 	bl	8003b9c <__malloc_lock>
 8002b92:	4a20      	ldr	r2, [pc, #128]	; (8002c14 <_free_r+0x9c>)
 8002b94:	9801      	ldr	r0, [sp, #4]
 8002b96:	6813      	ldr	r3, [r2, #0]
 8002b98:	4615      	mov	r5, r2
 8002b9a:	b933      	cbnz	r3, 8002baa <_free_r+0x32>
 8002b9c:	6063      	str	r3, [r4, #4]
 8002b9e:	6014      	str	r4, [r2, #0]
 8002ba0:	b003      	add	sp, #12
 8002ba2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ba6:	f000 bfff 	b.w	8003ba8 <__malloc_unlock>
 8002baa:	42a3      	cmp	r3, r4
 8002bac:	d90b      	bls.n	8002bc6 <_free_r+0x4e>
 8002bae:	6821      	ldr	r1, [r4, #0]
 8002bb0:	1862      	adds	r2, r4, r1
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	bf04      	itt	eq
 8002bb6:	681a      	ldreq	r2, [r3, #0]
 8002bb8:	685b      	ldreq	r3, [r3, #4]
 8002bba:	6063      	str	r3, [r4, #4]
 8002bbc:	bf04      	itt	eq
 8002bbe:	1852      	addeq	r2, r2, r1
 8002bc0:	6022      	streq	r2, [r4, #0]
 8002bc2:	602c      	str	r4, [r5, #0]
 8002bc4:	e7ec      	b.n	8002ba0 <_free_r+0x28>
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	b10b      	cbz	r3, 8002bd0 <_free_r+0x58>
 8002bcc:	42a3      	cmp	r3, r4
 8002bce:	d9fa      	bls.n	8002bc6 <_free_r+0x4e>
 8002bd0:	6811      	ldr	r1, [r2, #0]
 8002bd2:	1855      	adds	r5, r2, r1
 8002bd4:	42a5      	cmp	r5, r4
 8002bd6:	d10b      	bne.n	8002bf0 <_free_r+0x78>
 8002bd8:	6824      	ldr	r4, [r4, #0]
 8002bda:	4421      	add	r1, r4
 8002bdc:	1854      	adds	r4, r2, r1
 8002bde:	42a3      	cmp	r3, r4
 8002be0:	6011      	str	r1, [r2, #0]
 8002be2:	d1dd      	bne.n	8002ba0 <_free_r+0x28>
 8002be4:	681c      	ldr	r4, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	6053      	str	r3, [r2, #4]
 8002bea:	4421      	add	r1, r4
 8002bec:	6011      	str	r1, [r2, #0]
 8002bee:	e7d7      	b.n	8002ba0 <_free_r+0x28>
 8002bf0:	d902      	bls.n	8002bf8 <_free_r+0x80>
 8002bf2:	230c      	movs	r3, #12
 8002bf4:	6003      	str	r3, [r0, #0]
 8002bf6:	e7d3      	b.n	8002ba0 <_free_r+0x28>
 8002bf8:	6825      	ldr	r5, [r4, #0]
 8002bfa:	1961      	adds	r1, r4, r5
 8002bfc:	428b      	cmp	r3, r1
 8002bfe:	bf04      	itt	eq
 8002c00:	6819      	ldreq	r1, [r3, #0]
 8002c02:	685b      	ldreq	r3, [r3, #4]
 8002c04:	6063      	str	r3, [r4, #4]
 8002c06:	bf04      	itt	eq
 8002c08:	1949      	addeq	r1, r1, r5
 8002c0a:	6021      	streq	r1, [r4, #0]
 8002c0c:	6054      	str	r4, [r2, #4]
 8002c0e:	e7c7      	b.n	8002ba0 <_free_r+0x28>
 8002c10:	b003      	add	sp, #12
 8002c12:	bd30      	pop	{r4, r5, pc}
 8002c14:	20000488 	.word	0x20000488

08002c18 <_malloc_r>:
 8002c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1a:	1ccd      	adds	r5, r1, #3
 8002c1c:	f025 0503 	bic.w	r5, r5, #3
 8002c20:	3508      	adds	r5, #8
 8002c22:	2d0c      	cmp	r5, #12
 8002c24:	bf38      	it	cc
 8002c26:	250c      	movcc	r5, #12
 8002c28:	2d00      	cmp	r5, #0
 8002c2a:	4606      	mov	r6, r0
 8002c2c:	db01      	blt.n	8002c32 <_malloc_r+0x1a>
 8002c2e:	42a9      	cmp	r1, r5
 8002c30:	d903      	bls.n	8002c3a <_malloc_r+0x22>
 8002c32:	230c      	movs	r3, #12
 8002c34:	6033      	str	r3, [r6, #0]
 8002c36:	2000      	movs	r0, #0
 8002c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c3a:	f000 ffaf 	bl	8003b9c <__malloc_lock>
 8002c3e:	4921      	ldr	r1, [pc, #132]	; (8002cc4 <_malloc_r+0xac>)
 8002c40:	680a      	ldr	r2, [r1, #0]
 8002c42:	4614      	mov	r4, r2
 8002c44:	b99c      	cbnz	r4, 8002c6e <_malloc_r+0x56>
 8002c46:	4f20      	ldr	r7, [pc, #128]	; (8002cc8 <_malloc_r+0xb0>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	b923      	cbnz	r3, 8002c56 <_malloc_r+0x3e>
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	4630      	mov	r0, r6
 8002c50:	f000 fc86 	bl	8003560 <_sbrk_r>
 8002c54:	6038      	str	r0, [r7, #0]
 8002c56:	4629      	mov	r1, r5
 8002c58:	4630      	mov	r0, r6
 8002c5a:	f000 fc81 	bl	8003560 <_sbrk_r>
 8002c5e:	1c43      	adds	r3, r0, #1
 8002c60:	d123      	bne.n	8002caa <_malloc_r+0x92>
 8002c62:	230c      	movs	r3, #12
 8002c64:	6033      	str	r3, [r6, #0]
 8002c66:	4630      	mov	r0, r6
 8002c68:	f000 ff9e 	bl	8003ba8 <__malloc_unlock>
 8002c6c:	e7e3      	b.n	8002c36 <_malloc_r+0x1e>
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	1b5b      	subs	r3, r3, r5
 8002c72:	d417      	bmi.n	8002ca4 <_malloc_r+0x8c>
 8002c74:	2b0b      	cmp	r3, #11
 8002c76:	d903      	bls.n	8002c80 <_malloc_r+0x68>
 8002c78:	6023      	str	r3, [r4, #0]
 8002c7a:	441c      	add	r4, r3
 8002c7c:	6025      	str	r5, [r4, #0]
 8002c7e:	e004      	b.n	8002c8a <_malloc_r+0x72>
 8002c80:	6863      	ldr	r3, [r4, #4]
 8002c82:	42a2      	cmp	r2, r4
 8002c84:	bf0c      	ite	eq
 8002c86:	600b      	streq	r3, [r1, #0]
 8002c88:	6053      	strne	r3, [r2, #4]
 8002c8a:	4630      	mov	r0, r6
 8002c8c:	f000 ff8c 	bl	8003ba8 <__malloc_unlock>
 8002c90:	f104 000b 	add.w	r0, r4, #11
 8002c94:	1d23      	adds	r3, r4, #4
 8002c96:	f020 0007 	bic.w	r0, r0, #7
 8002c9a:	1ac2      	subs	r2, r0, r3
 8002c9c:	d0cc      	beq.n	8002c38 <_malloc_r+0x20>
 8002c9e:	1a1b      	subs	r3, r3, r0
 8002ca0:	50a3      	str	r3, [r4, r2]
 8002ca2:	e7c9      	b.n	8002c38 <_malloc_r+0x20>
 8002ca4:	4622      	mov	r2, r4
 8002ca6:	6864      	ldr	r4, [r4, #4]
 8002ca8:	e7cc      	b.n	8002c44 <_malloc_r+0x2c>
 8002caa:	1cc4      	adds	r4, r0, #3
 8002cac:	f024 0403 	bic.w	r4, r4, #3
 8002cb0:	42a0      	cmp	r0, r4
 8002cb2:	d0e3      	beq.n	8002c7c <_malloc_r+0x64>
 8002cb4:	1a21      	subs	r1, r4, r0
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	f000 fc52 	bl	8003560 <_sbrk_r>
 8002cbc:	3001      	adds	r0, #1
 8002cbe:	d1dd      	bne.n	8002c7c <_malloc_r+0x64>
 8002cc0:	e7cf      	b.n	8002c62 <_malloc_r+0x4a>
 8002cc2:	bf00      	nop
 8002cc4:	20000488 	.word	0x20000488
 8002cc8:	2000048c 	.word	0x2000048c

08002ccc <__ssputs_r>:
 8002ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd0:	688e      	ldr	r6, [r1, #8]
 8002cd2:	429e      	cmp	r6, r3
 8002cd4:	4682      	mov	sl, r0
 8002cd6:	460c      	mov	r4, r1
 8002cd8:	4690      	mov	r8, r2
 8002cda:	461f      	mov	r7, r3
 8002cdc:	d838      	bhi.n	8002d50 <__ssputs_r+0x84>
 8002cde:	898a      	ldrh	r2, [r1, #12]
 8002ce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ce4:	d032      	beq.n	8002d4c <__ssputs_r+0x80>
 8002ce6:	6825      	ldr	r5, [r4, #0]
 8002ce8:	6909      	ldr	r1, [r1, #16]
 8002cea:	eba5 0901 	sub.w	r9, r5, r1
 8002cee:	6965      	ldr	r5, [r4, #20]
 8002cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	444b      	add	r3, r9
 8002cfc:	106d      	asrs	r5, r5, #1
 8002cfe:	429d      	cmp	r5, r3
 8002d00:	bf38      	it	cc
 8002d02:	461d      	movcc	r5, r3
 8002d04:	0553      	lsls	r3, r2, #21
 8002d06:	d531      	bpl.n	8002d6c <__ssputs_r+0xa0>
 8002d08:	4629      	mov	r1, r5
 8002d0a:	f7ff ff85 	bl	8002c18 <_malloc_r>
 8002d0e:	4606      	mov	r6, r0
 8002d10:	b950      	cbnz	r0, 8002d28 <__ssputs_r+0x5c>
 8002d12:	230c      	movs	r3, #12
 8002d14:	f8ca 3000 	str.w	r3, [sl]
 8002d18:	89a3      	ldrh	r3, [r4, #12]
 8002d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d1e:	81a3      	strh	r3, [r4, #12]
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d28:	6921      	ldr	r1, [r4, #16]
 8002d2a:	464a      	mov	r2, r9
 8002d2c:	f000 ff0e 	bl	8003b4c <memcpy>
 8002d30:	89a3      	ldrh	r3, [r4, #12]
 8002d32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3a:	81a3      	strh	r3, [r4, #12]
 8002d3c:	6126      	str	r6, [r4, #16]
 8002d3e:	6165      	str	r5, [r4, #20]
 8002d40:	444e      	add	r6, r9
 8002d42:	eba5 0509 	sub.w	r5, r5, r9
 8002d46:	6026      	str	r6, [r4, #0]
 8002d48:	60a5      	str	r5, [r4, #8]
 8002d4a:	463e      	mov	r6, r7
 8002d4c:	42be      	cmp	r6, r7
 8002d4e:	d900      	bls.n	8002d52 <__ssputs_r+0x86>
 8002d50:	463e      	mov	r6, r7
 8002d52:	4632      	mov	r2, r6
 8002d54:	6820      	ldr	r0, [r4, #0]
 8002d56:	4641      	mov	r1, r8
 8002d58:	f000 ff06 	bl	8003b68 <memmove>
 8002d5c:	68a3      	ldr	r3, [r4, #8]
 8002d5e:	6822      	ldr	r2, [r4, #0]
 8002d60:	1b9b      	subs	r3, r3, r6
 8002d62:	4432      	add	r2, r6
 8002d64:	60a3      	str	r3, [r4, #8]
 8002d66:	6022      	str	r2, [r4, #0]
 8002d68:	2000      	movs	r0, #0
 8002d6a:	e7db      	b.n	8002d24 <__ssputs_r+0x58>
 8002d6c:	462a      	mov	r2, r5
 8002d6e:	f000 ff21 	bl	8003bb4 <_realloc_r>
 8002d72:	4606      	mov	r6, r0
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d1e1      	bne.n	8002d3c <__ssputs_r+0x70>
 8002d78:	6921      	ldr	r1, [r4, #16]
 8002d7a:	4650      	mov	r0, sl
 8002d7c:	f7ff fefc 	bl	8002b78 <_free_r>
 8002d80:	e7c7      	b.n	8002d12 <__ssputs_r+0x46>
	...

08002d84 <_svfiprintf_r>:
 8002d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d88:	4698      	mov	r8, r3
 8002d8a:	898b      	ldrh	r3, [r1, #12]
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	b09d      	sub	sp, #116	; 0x74
 8002d90:	4607      	mov	r7, r0
 8002d92:	460d      	mov	r5, r1
 8002d94:	4614      	mov	r4, r2
 8002d96:	d50e      	bpl.n	8002db6 <_svfiprintf_r+0x32>
 8002d98:	690b      	ldr	r3, [r1, #16]
 8002d9a:	b963      	cbnz	r3, 8002db6 <_svfiprintf_r+0x32>
 8002d9c:	2140      	movs	r1, #64	; 0x40
 8002d9e:	f7ff ff3b 	bl	8002c18 <_malloc_r>
 8002da2:	6028      	str	r0, [r5, #0]
 8002da4:	6128      	str	r0, [r5, #16]
 8002da6:	b920      	cbnz	r0, 8002db2 <_svfiprintf_r+0x2e>
 8002da8:	230c      	movs	r3, #12
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	f04f 30ff 	mov.w	r0, #4294967295
 8002db0:	e0d1      	b.n	8002f56 <_svfiprintf_r+0x1d2>
 8002db2:	2340      	movs	r3, #64	; 0x40
 8002db4:	616b      	str	r3, [r5, #20]
 8002db6:	2300      	movs	r3, #0
 8002db8:	9309      	str	r3, [sp, #36]	; 0x24
 8002dba:	2320      	movs	r3, #32
 8002dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dc4:	2330      	movs	r3, #48	; 0x30
 8002dc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002f70 <_svfiprintf_r+0x1ec>
 8002dca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002dce:	f04f 0901 	mov.w	r9, #1
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	469a      	mov	sl, r3
 8002dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dda:	b10a      	cbz	r2, 8002de0 <_svfiprintf_r+0x5c>
 8002ddc:	2a25      	cmp	r2, #37	; 0x25
 8002dde:	d1f9      	bne.n	8002dd4 <_svfiprintf_r+0x50>
 8002de0:	ebba 0b04 	subs.w	fp, sl, r4
 8002de4:	d00b      	beq.n	8002dfe <_svfiprintf_r+0x7a>
 8002de6:	465b      	mov	r3, fp
 8002de8:	4622      	mov	r2, r4
 8002dea:	4629      	mov	r1, r5
 8002dec:	4638      	mov	r0, r7
 8002dee:	f7ff ff6d 	bl	8002ccc <__ssputs_r>
 8002df2:	3001      	adds	r0, #1
 8002df4:	f000 80aa 	beq.w	8002f4c <_svfiprintf_r+0x1c8>
 8002df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dfa:	445a      	add	r2, fp
 8002dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8002dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 80a2 	beq.w	8002f4c <_svfiprintf_r+0x1c8>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e12:	f10a 0a01 	add.w	sl, sl, #1
 8002e16:	9304      	str	r3, [sp, #16]
 8002e18:	9307      	str	r3, [sp, #28]
 8002e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8002e20:	4654      	mov	r4, sl
 8002e22:	2205      	movs	r2, #5
 8002e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e28:	4851      	ldr	r0, [pc, #324]	; (8002f70 <_svfiprintf_r+0x1ec>)
 8002e2a:	f7fd f9e1 	bl	80001f0 <memchr>
 8002e2e:	9a04      	ldr	r2, [sp, #16]
 8002e30:	b9d8      	cbnz	r0, 8002e6a <_svfiprintf_r+0xe6>
 8002e32:	06d0      	lsls	r0, r2, #27
 8002e34:	bf44      	itt	mi
 8002e36:	2320      	movmi	r3, #32
 8002e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e3c:	0711      	lsls	r1, r2, #28
 8002e3e:	bf44      	itt	mi
 8002e40:	232b      	movmi	r3, #43	; 0x2b
 8002e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e46:	f89a 3000 	ldrb.w	r3, [sl]
 8002e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e4c:	d015      	beq.n	8002e7a <_svfiprintf_r+0xf6>
 8002e4e:	9a07      	ldr	r2, [sp, #28]
 8002e50:	4654      	mov	r4, sl
 8002e52:	2000      	movs	r0, #0
 8002e54:	f04f 0c0a 	mov.w	ip, #10
 8002e58:	4621      	mov	r1, r4
 8002e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e5e:	3b30      	subs	r3, #48	; 0x30
 8002e60:	2b09      	cmp	r3, #9
 8002e62:	d94e      	bls.n	8002f02 <_svfiprintf_r+0x17e>
 8002e64:	b1b0      	cbz	r0, 8002e94 <_svfiprintf_r+0x110>
 8002e66:	9207      	str	r2, [sp, #28]
 8002e68:	e014      	b.n	8002e94 <_svfiprintf_r+0x110>
 8002e6a:	eba0 0308 	sub.w	r3, r0, r8
 8002e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8002e72:	4313      	orrs	r3, r2
 8002e74:	9304      	str	r3, [sp, #16]
 8002e76:	46a2      	mov	sl, r4
 8002e78:	e7d2      	b.n	8002e20 <_svfiprintf_r+0x9c>
 8002e7a:	9b03      	ldr	r3, [sp, #12]
 8002e7c:	1d19      	adds	r1, r3, #4
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	9103      	str	r1, [sp, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bfbb      	ittet	lt
 8002e86:	425b      	neglt	r3, r3
 8002e88:	f042 0202 	orrlt.w	r2, r2, #2
 8002e8c:	9307      	strge	r3, [sp, #28]
 8002e8e:	9307      	strlt	r3, [sp, #28]
 8002e90:	bfb8      	it	lt
 8002e92:	9204      	strlt	r2, [sp, #16]
 8002e94:	7823      	ldrb	r3, [r4, #0]
 8002e96:	2b2e      	cmp	r3, #46	; 0x2e
 8002e98:	d10c      	bne.n	8002eb4 <_svfiprintf_r+0x130>
 8002e9a:	7863      	ldrb	r3, [r4, #1]
 8002e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e9e:	d135      	bne.n	8002f0c <_svfiprintf_r+0x188>
 8002ea0:	9b03      	ldr	r3, [sp, #12]
 8002ea2:	1d1a      	adds	r2, r3, #4
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	9203      	str	r2, [sp, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bfb8      	it	lt
 8002eac:	f04f 33ff 	movlt.w	r3, #4294967295
 8002eb0:	3402      	adds	r4, #2
 8002eb2:	9305      	str	r3, [sp, #20]
 8002eb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002f80 <_svfiprintf_r+0x1fc>
 8002eb8:	7821      	ldrb	r1, [r4, #0]
 8002eba:	2203      	movs	r2, #3
 8002ebc:	4650      	mov	r0, sl
 8002ebe:	f7fd f997 	bl	80001f0 <memchr>
 8002ec2:	b140      	cbz	r0, 8002ed6 <_svfiprintf_r+0x152>
 8002ec4:	2340      	movs	r3, #64	; 0x40
 8002ec6:	eba0 000a 	sub.w	r0, r0, sl
 8002eca:	fa03 f000 	lsl.w	r0, r3, r0
 8002ece:	9b04      	ldr	r3, [sp, #16]
 8002ed0:	4303      	orrs	r3, r0
 8002ed2:	3401      	adds	r4, #1
 8002ed4:	9304      	str	r3, [sp, #16]
 8002ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eda:	4826      	ldr	r0, [pc, #152]	; (8002f74 <_svfiprintf_r+0x1f0>)
 8002edc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ee0:	2206      	movs	r2, #6
 8002ee2:	f7fd f985 	bl	80001f0 <memchr>
 8002ee6:	2800      	cmp	r0, #0
 8002ee8:	d038      	beq.n	8002f5c <_svfiprintf_r+0x1d8>
 8002eea:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <_svfiprintf_r+0x1f4>)
 8002eec:	bb1b      	cbnz	r3, 8002f36 <_svfiprintf_r+0x1b2>
 8002eee:	9b03      	ldr	r3, [sp, #12]
 8002ef0:	3307      	adds	r3, #7
 8002ef2:	f023 0307 	bic.w	r3, r3, #7
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	9303      	str	r3, [sp, #12]
 8002efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002efc:	4433      	add	r3, r6
 8002efe:	9309      	str	r3, [sp, #36]	; 0x24
 8002f00:	e767      	b.n	8002dd2 <_svfiprintf_r+0x4e>
 8002f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f06:	460c      	mov	r4, r1
 8002f08:	2001      	movs	r0, #1
 8002f0a:	e7a5      	b.n	8002e58 <_svfiprintf_r+0xd4>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	3401      	adds	r4, #1
 8002f10:	9305      	str	r3, [sp, #20]
 8002f12:	4619      	mov	r1, r3
 8002f14:	f04f 0c0a 	mov.w	ip, #10
 8002f18:	4620      	mov	r0, r4
 8002f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f1e:	3a30      	subs	r2, #48	; 0x30
 8002f20:	2a09      	cmp	r2, #9
 8002f22:	d903      	bls.n	8002f2c <_svfiprintf_r+0x1a8>
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0c5      	beq.n	8002eb4 <_svfiprintf_r+0x130>
 8002f28:	9105      	str	r1, [sp, #20]
 8002f2a:	e7c3      	b.n	8002eb4 <_svfiprintf_r+0x130>
 8002f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f30:	4604      	mov	r4, r0
 8002f32:	2301      	movs	r3, #1
 8002f34:	e7f0      	b.n	8002f18 <_svfiprintf_r+0x194>
 8002f36:	ab03      	add	r3, sp, #12
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	462a      	mov	r2, r5
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <_svfiprintf_r+0x1f8>)
 8002f3e:	a904      	add	r1, sp, #16
 8002f40:	4638      	mov	r0, r7
 8002f42:	f3af 8000 	nop.w
 8002f46:	1c42      	adds	r2, r0, #1
 8002f48:	4606      	mov	r6, r0
 8002f4a:	d1d6      	bne.n	8002efa <_svfiprintf_r+0x176>
 8002f4c:	89ab      	ldrh	r3, [r5, #12]
 8002f4e:	065b      	lsls	r3, r3, #25
 8002f50:	f53f af2c 	bmi.w	8002dac <_svfiprintf_r+0x28>
 8002f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f56:	b01d      	add	sp, #116	; 0x74
 8002f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f5c:	ab03      	add	r3, sp, #12
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	462a      	mov	r2, r5
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <_svfiprintf_r+0x1f8>)
 8002f64:	a904      	add	r1, sp, #16
 8002f66:	4638      	mov	r0, r7
 8002f68:	f000 f9d4 	bl	8003314 <_printf_i>
 8002f6c:	e7eb      	b.n	8002f46 <_svfiprintf_r+0x1c2>
 8002f6e:	bf00      	nop
 8002f70:	08004106 	.word	0x08004106
 8002f74:	08004110 	.word	0x08004110
 8002f78:	00000000 	.word	0x00000000
 8002f7c:	08002ccd 	.word	0x08002ccd
 8002f80:	0800410c 	.word	0x0800410c

08002f84 <__sfputc_r>:
 8002f84:	6893      	ldr	r3, [r2, #8]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	b410      	push	{r4}
 8002f8c:	6093      	str	r3, [r2, #8]
 8002f8e:	da08      	bge.n	8002fa2 <__sfputc_r+0x1e>
 8002f90:	6994      	ldr	r4, [r2, #24]
 8002f92:	42a3      	cmp	r3, r4
 8002f94:	db01      	blt.n	8002f9a <__sfputc_r+0x16>
 8002f96:	290a      	cmp	r1, #10
 8002f98:	d103      	bne.n	8002fa2 <__sfputc_r+0x1e>
 8002f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f9e:	f000 baef 	b.w	8003580 <__swbuf_r>
 8002fa2:	6813      	ldr	r3, [r2, #0]
 8002fa4:	1c58      	adds	r0, r3, #1
 8002fa6:	6010      	str	r0, [r2, #0]
 8002fa8:	7019      	strb	r1, [r3, #0]
 8002faa:	4608      	mov	r0, r1
 8002fac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <__sfputs_r>:
 8002fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb4:	4606      	mov	r6, r0
 8002fb6:	460f      	mov	r7, r1
 8002fb8:	4614      	mov	r4, r2
 8002fba:	18d5      	adds	r5, r2, r3
 8002fbc:	42ac      	cmp	r4, r5
 8002fbe:	d101      	bne.n	8002fc4 <__sfputs_r+0x12>
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	e007      	b.n	8002fd4 <__sfputs_r+0x22>
 8002fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fc8:	463a      	mov	r2, r7
 8002fca:	4630      	mov	r0, r6
 8002fcc:	f7ff ffda 	bl	8002f84 <__sfputc_r>
 8002fd0:	1c43      	adds	r3, r0, #1
 8002fd2:	d1f3      	bne.n	8002fbc <__sfputs_r+0xa>
 8002fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002fd8 <_vfiprintf_r>:
 8002fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fdc:	460d      	mov	r5, r1
 8002fde:	b09d      	sub	sp, #116	; 0x74
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	4698      	mov	r8, r3
 8002fe4:	4606      	mov	r6, r0
 8002fe6:	b118      	cbz	r0, 8002ff0 <_vfiprintf_r+0x18>
 8002fe8:	6983      	ldr	r3, [r0, #24]
 8002fea:	b90b      	cbnz	r3, 8002ff0 <_vfiprintf_r+0x18>
 8002fec:	f000 fcaa 	bl	8003944 <__sinit>
 8002ff0:	4b89      	ldr	r3, [pc, #548]	; (8003218 <_vfiprintf_r+0x240>)
 8002ff2:	429d      	cmp	r5, r3
 8002ff4:	d11b      	bne.n	800302e <_vfiprintf_r+0x56>
 8002ff6:	6875      	ldr	r5, [r6, #4]
 8002ff8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ffa:	07d9      	lsls	r1, r3, #31
 8002ffc:	d405      	bmi.n	800300a <_vfiprintf_r+0x32>
 8002ffe:	89ab      	ldrh	r3, [r5, #12]
 8003000:	059a      	lsls	r2, r3, #22
 8003002:	d402      	bmi.n	800300a <_vfiprintf_r+0x32>
 8003004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003006:	f000 fd3b 	bl	8003a80 <__retarget_lock_acquire_recursive>
 800300a:	89ab      	ldrh	r3, [r5, #12]
 800300c:	071b      	lsls	r3, r3, #28
 800300e:	d501      	bpl.n	8003014 <_vfiprintf_r+0x3c>
 8003010:	692b      	ldr	r3, [r5, #16]
 8003012:	b9eb      	cbnz	r3, 8003050 <_vfiprintf_r+0x78>
 8003014:	4629      	mov	r1, r5
 8003016:	4630      	mov	r0, r6
 8003018:	f000 fb04 	bl	8003624 <__swsetup_r>
 800301c:	b1c0      	cbz	r0, 8003050 <_vfiprintf_r+0x78>
 800301e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003020:	07dc      	lsls	r4, r3, #31
 8003022:	d50e      	bpl.n	8003042 <_vfiprintf_r+0x6a>
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	b01d      	add	sp, #116	; 0x74
 800302a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800302e:	4b7b      	ldr	r3, [pc, #492]	; (800321c <_vfiprintf_r+0x244>)
 8003030:	429d      	cmp	r5, r3
 8003032:	d101      	bne.n	8003038 <_vfiprintf_r+0x60>
 8003034:	68b5      	ldr	r5, [r6, #8]
 8003036:	e7df      	b.n	8002ff8 <_vfiprintf_r+0x20>
 8003038:	4b79      	ldr	r3, [pc, #484]	; (8003220 <_vfiprintf_r+0x248>)
 800303a:	429d      	cmp	r5, r3
 800303c:	bf08      	it	eq
 800303e:	68f5      	ldreq	r5, [r6, #12]
 8003040:	e7da      	b.n	8002ff8 <_vfiprintf_r+0x20>
 8003042:	89ab      	ldrh	r3, [r5, #12]
 8003044:	0598      	lsls	r0, r3, #22
 8003046:	d4ed      	bmi.n	8003024 <_vfiprintf_r+0x4c>
 8003048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800304a:	f000 fd1a 	bl	8003a82 <__retarget_lock_release_recursive>
 800304e:	e7e9      	b.n	8003024 <_vfiprintf_r+0x4c>
 8003050:	2300      	movs	r3, #0
 8003052:	9309      	str	r3, [sp, #36]	; 0x24
 8003054:	2320      	movs	r3, #32
 8003056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800305a:	f8cd 800c 	str.w	r8, [sp, #12]
 800305e:	2330      	movs	r3, #48	; 0x30
 8003060:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003224 <_vfiprintf_r+0x24c>
 8003064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003068:	f04f 0901 	mov.w	r9, #1
 800306c:	4623      	mov	r3, r4
 800306e:	469a      	mov	sl, r3
 8003070:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003074:	b10a      	cbz	r2, 800307a <_vfiprintf_r+0xa2>
 8003076:	2a25      	cmp	r2, #37	; 0x25
 8003078:	d1f9      	bne.n	800306e <_vfiprintf_r+0x96>
 800307a:	ebba 0b04 	subs.w	fp, sl, r4
 800307e:	d00b      	beq.n	8003098 <_vfiprintf_r+0xc0>
 8003080:	465b      	mov	r3, fp
 8003082:	4622      	mov	r2, r4
 8003084:	4629      	mov	r1, r5
 8003086:	4630      	mov	r0, r6
 8003088:	f7ff ff93 	bl	8002fb2 <__sfputs_r>
 800308c:	3001      	adds	r0, #1
 800308e:	f000 80aa 	beq.w	80031e6 <_vfiprintf_r+0x20e>
 8003092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003094:	445a      	add	r2, fp
 8003096:	9209      	str	r2, [sp, #36]	; 0x24
 8003098:	f89a 3000 	ldrb.w	r3, [sl]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80a2 	beq.w	80031e6 <_vfiprintf_r+0x20e>
 80030a2:	2300      	movs	r3, #0
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295
 80030a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030ac:	f10a 0a01 	add.w	sl, sl, #1
 80030b0:	9304      	str	r3, [sp, #16]
 80030b2:	9307      	str	r3, [sp, #28]
 80030b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030b8:	931a      	str	r3, [sp, #104]	; 0x68
 80030ba:	4654      	mov	r4, sl
 80030bc:	2205      	movs	r2, #5
 80030be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030c2:	4858      	ldr	r0, [pc, #352]	; (8003224 <_vfiprintf_r+0x24c>)
 80030c4:	f7fd f894 	bl	80001f0 <memchr>
 80030c8:	9a04      	ldr	r2, [sp, #16]
 80030ca:	b9d8      	cbnz	r0, 8003104 <_vfiprintf_r+0x12c>
 80030cc:	06d1      	lsls	r1, r2, #27
 80030ce:	bf44      	itt	mi
 80030d0:	2320      	movmi	r3, #32
 80030d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030d6:	0713      	lsls	r3, r2, #28
 80030d8:	bf44      	itt	mi
 80030da:	232b      	movmi	r3, #43	; 0x2b
 80030dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030e0:	f89a 3000 	ldrb.w	r3, [sl]
 80030e4:	2b2a      	cmp	r3, #42	; 0x2a
 80030e6:	d015      	beq.n	8003114 <_vfiprintf_r+0x13c>
 80030e8:	9a07      	ldr	r2, [sp, #28]
 80030ea:	4654      	mov	r4, sl
 80030ec:	2000      	movs	r0, #0
 80030ee:	f04f 0c0a 	mov.w	ip, #10
 80030f2:	4621      	mov	r1, r4
 80030f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030f8:	3b30      	subs	r3, #48	; 0x30
 80030fa:	2b09      	cmp	r3, #9
 80030fc:	d94e      	bls.n	800319c <_vfiprintf_r+0x1c4>
 80030fe:	b1b0      	cbz	r0, 800312e <_vfiprintf_r+0x156>
 8003100:	9207      	str	r2, [sp, #28]
 8003102:	e014      	b.n	800312e <_vfiprintf_r+0x156>
 8003104:	eba0 0308 	sub.w	r3, r0, r8
 8003108:	fa09 f303 	lsl.w	r3, r9, r3
 800310c:	4313      	orrs	r3, r2
 800310e:	9304      	str	r3, [sp, #16]
 8003110:	46a2      	mov	sl, r4
 8003112:	e7d2      	b.n	80030ba <_vfiprintf_r+0xe2>
 8003114:	9b03      	ldr	r3, [sp, #12]
 8003116:	1d19      	adds	r1, r3, #4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	9103      	str	r1, [sp, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	bfbb      	ittet	lt
 8003120:	425b      	neglt	r3, r3
 8003122:	f042 0202 	orrlt.w	r2, r2, #2
 8003126:	9307      	strge	r3, [sp, #28]
 8003128:	9307      	strlt	r3, [sp, #28]
 800312a:	bfb8      	it	lt
 800312c:	9204      	strlt	r2, [sp, #16]
 800312e:	7823      	ldrb	r3, [r4, #0]
 8003130:	2b2e      	cmp	r3, #46	; 0x2e
 8003132:	d10c      	bne.n	800314e <_vfiprintf_r+0x176>
 8003134:	7863      	ldrb	r3, [r4, #1]
 8003136:	2b2a      	cmp	r3, #42	; 0x2a
 8003138:	d135      	bne.n	80031a6 <_vfiprintf_r+0x1ce>
 800313a:	9b03      	ldr	r3, [sp, #12]
 800313c:	1d1a      	adds	r2, r3, #4
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	9203      	str	r2, [sp, #12]
 8003142:	2b00      	cmp	r3, #0
 8003144:	bfb8      	it	lt
 8003146:	f04f 33ff 	movlt.w	r3, #4294967295
 800314a:	3402      	adds	r4, #2
 800314c:	9305      	str	r3, [sp, #20]
 800314e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003234 <_vfiprintf_r+0x25c>
 8003152:	7821      	ldrb	r1, [r4, #0]
 8003154:	2203      	movs	r2, #3
 8003156:	4650      	mov	r0, sl
 8003158:	f7fd f84a 	bl	80001f0 <memchr>
 800315c:	b140      	cbz	r0, 8003170 <_vfiprintf_r+0x198>
 800315e:	2340      	movs	r3, #64	; 0x40
 8003160:	eba0 000a 	sub.w	r0, r0, sl
 8003164:	fa03 f000 	lsl.w	r0, r3, r0
 8003168:	9b04      	ldr	r3, [sp, #16]
 800316a:	4303      	orrs	r3, r0
 800316c:	3401      	adds	r4, #1
 800316e:	9304      	str	r3, [sp, #16]
 8003170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003174:	482c      	ldr	r0, [pc, #176]	; (8003228 <_vfiprintf_r+0x250>)
 8003176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800317a:	2206      	movs	r2, #6
 800317c:	f7fd f838 	bl	80001f0 <memchr>
 8003180:	2800      	cmp	r0, #0
 8003182:	d03f      	beq.n	8003204 <_vfiprintf_r+0x22c>
 8003184:	4b29      	ldr	r3, [pc, #164]	; (800322c <_vfiprintf_r+0x254>)
 8003186:	bb1b      	cbnz	r3, 80031d0 <_vfiprintf_r+0x1f8>
 8003188:	9b03      	ldr	r3, [sp, #12]
 800318a:	3307      	adds	r3, #7
 800318c:	f023 0307 	bic.w	r3, r3, #7
 8003190:	3308      	adds	r3, #8
 8003192:	9303      	str	r3, [sp, #12]
 8003194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003196:	443b      	add	r3, r7
 8003198:	9309      	str	r3, [sp, #36]	; 0x24
 800319a:	e767      	b.n	800306c <_vfiprintf_r+0x94>
 800319c:	fb0c 3202 	mla	r2, ip, r2, r3
 80031a0:	460c      	mov	r4, r1
 80031a2:	2001      	movs	r0, #1
 80031a4:	e7a5      	b.n	80030f2 <_vfiprintf_r+0x11a>
 80031a6:	2300      	movs	r3, #0
 80031a8:	3401      	adds	r4, #1
 80031aa:	9305      	str	r3, [sp, #20]
 80031ac:	4619      	mov	r1, r3
 80031ae:	f04f 0c0a 	mov.w	ip, #10
 80031b2:	4620      	mov	r0, r4
 80031b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031b8:	3a30      	subs	r2, #48	; 0x30
 80031ba:	2a09      	cmp	r2, #9
 80031bc:	d903      	bls.n	80031c6 <_vfiprintf_r+0x1ee>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0c5      	beq.n	800314e <_vfiprintf_r+0x176>
 80031c2:	9105      	str	r1, [sp, #20]
 80031c4:	e7c3      	b.n	800314e <_vfiprintf_r+0x176>
 80031c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80031ca:	4604      	mov	r4, r0
 80031cc:	2301      	movs	r3, #1
 80031ce:	e7f0      	b.n	80031b2 <_vfiprintf_r+0x1da>
 80031d0:	ab03      	add	r3, sp, #12
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	462a      	mov	r2, r5
 80031d6:	4b16      	ldr	r3, [pc, #88]	; (8003230 <_vfiprintf_r+0x258>)
 80031d8:	a904      	add	r1, sp, #16
 80031da:	4630      	mov	r0, r6
 80031dc:	f3af 8000 	nop.w
 80031e0:	4607      	mov	r7, r0
 80031e2:	1c78      	adds	r0, r7, #1
 80031e4:	d1d6      	bne.n	8003194 <_vfiprintf_r+0x1bc>
 80031e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031e8:	07d9      	lsls	r1, r3, #31
 80031ea:	d405      	bmi.n	80031f8 <_vfiprintf_r+0x220>
 80031ec:	89ab      	ldrh	r3, [r5, #12]
 80031ee:	059a      	lsls	r2, r3, #22
 80031f0:	d402      	bmi.n	80031f8 <_vfiprintf_r+0x220>
 80031f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031f4:	f000 fc45 	bl	8003a82 <__retarget_lock_release_recursive>
 80031f8:	89ab      	ldrh	r3, [r5, #12]
 80031fa:	065b      	lsls	r3, r3, #25
 80031fc:	f53f af12 	bmi.w	8003024 <_vfiprintf_r+0x4c>
 8003200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003202:	e711      	b.n	8003028 <_vfiprintf_r+0x50>
 8003204:	ab03      	add	r3, sp, #12
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	462a      	mov	r2, r5
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <_vfiprintf_r+0x258>)
 800320c:	a904      	add	r1, sp, #16
 800320e:	4630      	mov	r0, r6
 8003210:	f000 f880 	bl	8003314 <_printf_i>
 8003214:	e7e4      	b.n	80031e0 <_vfiprintf_r+0x208>
 8003216:	bf00      	nop
 8003218:	0800415c 	.word	0x0800415c
 800321c:	0800417c 	.word	0x0800417c
 8003220:	0800413c 	.word	0x0800413c
 8003224:	08004106 	.word	0x08004106
 8003228:	08004110 	.word	0x08004110
 800322c:	00000000 	.word	0x00000000
 8003230:	08002fb3 	.word	0x08002fb3
 8003234:	0800410c 	.word	0x0800410c

08003238 <_printf_common>:
 8003238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800323c:	4616      	mov	r6, r2
 800323e:	4699      	mov	r9, r3
 8003240:	688a      	ldr	r2, [r1, #8]
 8003242:	690b      	ldr	r3, [r1, #16]
 8003244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003248:	4293      	cmp	r3, r2
 800324a:	bfb8      	it	lt
 800324c:	4613      	movlt	r3, r2
 800324e:	6033      	str	r3, [r6, #0]
 8003250:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003254:	4607      	mov	r7, r0
 8003256:	460c      	mov	r4, r1
 8003258:	b10a      	cbz	r2, 800325e <_printf_common+0x26>
 800325a:	3301      	adds	r3, #1
 800325c:	6033      	str	r3, [r6, #0]
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	0699      	lsls	r1, r3, #26
 8003262:	bf42      	ittt	mi
 8003264:	6833      	ldrmi	r3, [r6, #0]
 8003266:	3302      	addmi	r3, #2
 8003268:	6033      	strmi	r3, [r6, #0]
 800326a:	6825      	ldr	r5, [r4, #0]
 800326c:	f015 0506 	ands.w	r5, r5, #6
 8003270:	d106      	bne.n	8003280 <_printf_common+0x48>
 8003272:	f104 0a19 	add.w	sl, r4, #25
 8003276:	68e3      	ldr	r3, [r4, #12]
 8003278:	6832      	ldr	r2, [r6, #0]
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	42ab      	cmp	r3, r5
 800327e:	dc26      	bgt.n	80032ce <_printf_common+0x96>
 8003280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003284:	1e13      	subs	r3, r2, #0
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	bf18      	it	ne
 800328a:	2301      	movne	r3, #1
 800328c:	0692      	lsls	r2, r2, #26
 800328e:	d42b      	bmi.n	80032e8 <_printf_common+0xb0>
 8003290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003294:	4649      	mov	r1, r9
 8003296:	4638      	mov	r0, r7
 8003298:	47c0      	blx	r8
 800329a:	3001      	adds	r0, #1
 800329c:	d01e      	beq.n	80032dc <_printf_common+0xa4>
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	68e5      	ldr	r5, [r4, #12]
 80032a2:	6832      	ldr	r2, [r6, #0]
 80032a4:	f003 0306 	and.w	r3, r3, #6
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	bf08      	it	eq
 80032ac:	1aad      	subeq	r5, r5, r2
 80032ae:	68a3      	ldr	r3, [r4, #8]
 80032b0:	6922      	ldr	r2, [r4, #16]
 80032b2:	bf0c      	ite	eq
 80032b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032b8:	2500      	movne	r5, #0
 80032ba:	4293      	cmp	r3, r2
 80032bc:	bfc4      	itt	gt
 80032be:	1a9b      	subgt	r3, r3, r2
 80032c0:	18ed      	addgt	r5, r5, r3
 80032c2:	2600      	movs	r6, #0
 80032c4:	341a      	adds	r4, #26
 80032c6:	42b5      	cmp	r5, r6
 80032c8:	d11a      	bne.n	8003300 <_printf_common+0xc8>
 80032ca:	2000      	movs	r0, #0
 80032cc:	e008      	b.n	80032e0 <_printf_common+0xa8>
 80032ce:	2301      	movs	r3, #1
 80032d0:	4652      	mov	r2, sl
 80032d2:	4649      	mov	r1, r9
 80032d4:	4638      	mov	r0, r7
 80032d6:	47c0      	blx	r8
 80032d8:	3001      	adds	r0, #1
 80032da:	d103      	bne.n	80032e4 <_printf_common+0xac>
 80032dc:	f04f 30ff 	mov.w	r0, #4294967295
 80032e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e4:	3501      	adds	r5, #1
 80032e6:	e7c6      	b.n	8003276 <_printf_common+0x3e>
 80032e8:	18e1      	adds	r1, r4, r3
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	2030      	movs	r0, #48	; 0x30
 80032ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032f2:	4422      	add	r2, r4
 80032f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032fc:	3302      	adds	r3, #2
 80032fe:	e7c7      	b.n	8003290 <_printf_common+0x58>
 8003300:	2301      	movs	r3, #1
 8003302:	4622      	mov	r2, r4
 8003304:	4649      	mov	r1, r9
 8003306:	4638      	mov	r0, r7
 8003308:	47c0      	blx	r8
 800330a:	3001      	adds	r0, #1
 800330c:	d0e6      	beq.n	80032dc <_printf_common+0xa4>
 800330e:	3601      	adds	r6, #1
 8003310:	e7d9      	b.n	80032c6 <_printf_common+0x8e>
	...

08003314 <_printf_i>:
 8003314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003318:	460c      	mov	r4, r1
 800331a:	4691      	mov	r9, r2
 800331c:	7e27      	ldrb	r7, [r4, #24]
 800331e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003320:	2f78      	cmp	r7, #120	; 0x78
 8003322:	4680      	mov	r8, r0
 8003324:	469a      	mov	sl, r3
 8003326:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800332a:	d807      	bhi.n	800333c <_printf_i+0x28>
 800332c:	2f62      	cmp	r7, #98	; 0x62
 800332e:	d80a      	bhi.n	8003346 <_printf_i+0x32>
 8003330:	2f00      	cmp	r7, #0
 8003332:	f000 80d8 	beq.w	80034e6 <_printf_i+0x1d2>
 8003336:	2f58      	cmp	r7, #88	; 0x58
 8003338:	f000 80a3 	beq.w	8003482 <_printf_i+0x16e>
 800333c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003344:	e03a      	b.n	80033bc <_printf_i+0xa8>
 8003346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800334a:	2b15      	cmp	r3, #21
 800334c:	d8f6      	bhi.n	800333c <_printf_i+0x28>
 800334e:	a001      	add	r0, pc, #4	; (adr r0, 8003354 <_printf_i+0x40>)
 8003350:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003354:	080033ad 	.word	0x080033ad
 8003358:	080033c1 	.word	0x080033c1
 800335c:	0800333d 	.word	0x0800333d
 8003360:	0800333d 	.word	0x0800333d
 8003364:	0800333d 	.word	0x0800333d
 8003368:	0800333d 	.word	0x0800333d
 800336c:	080033c1 	.word	0x080033c1
 8003370:	0800333d 	.word	0x0800333d
 8003374:	0800333d 	.word	0x0800333d
 8003378:	0800333d 	.word	0x0800333d
 800337c:	0800333d 	.word	0x0800333d
 8003380:	080034cd 	.word	0x080034cd
 8003384:	080033f1 	.word	0x080033f1
 8003388:	080034af 	.word	0x080034af
 800338c:	0800333d 	.word	0x0800333d
 8003390:	0800333d 	.word	0x0800333d
 8003394:	080034ef 	.word	0x080034ef
 8003398:	0800333d 	.word	0x0800333d
 800339c:	080033f1 	.word	0x080033f1
 80033a0:	0800333d 	.word	0x0800333d
 80033a4:	0800333d 	.word	0x0800333d
 80033a8:	080034b7 	.word	0x080034b7
 80033ac:	680b      	ldr	r3, [r1, #0]
 80033ae:	1d1a      	adds	r2, r3, #4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	600a      	str	r2, [r1, #0]
 80033b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033bc:	2301      	movs	r3, #1
 80033be:	e0a3      	b.n	8003508 <_printf_i+0x1f4>
 80033c0:	6825      	ldr	r5, [r4, #0]
 80033c2:	6808      	ldr	r0, [r1, #0]
 80033c4:	062e      	lsls	r6, r5, #24
 80033c6:	f100 0304 	add.w	r3, r0, #4
 80033ca:	d50a      	bpl.n	80033e2 <_printf_i+0xce>
 80033cc:	6805      	ldr	r5, [r0, #0]
 80033ce:	600b      	str	r3, [r1, #0]
 80033d0:	2d00      	cmp	r5, #0
 80033d2:	da03      	bge.n	80033dc <_printf_i+0xc8>
 80033d4:	232d      	movs	r3, #45	; 0x2d
 80033d6:	426d      	negs	r5, r5
 80033d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033dc:	485e      	ldr	r0, [pc, #376]	; (8003558 <_printf_i+0x244>)
 80033de:	230a      	movs	r3, #10
 80033e0:	e019      	b.n	8003416 <_printf_i+0x102>
 80033e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80033e6:	6805      	ldr	r5, [r0, #0]
 80033e8:	600b      	str	r3, [r1, #0]
 80033ea:	bf18      	it	ne
 80033ec:	b22d      	sxthne	r5, r5
 80033ee:	e7ef      	b.n	80033d0 <_printf_i+0xbc>
 80033f0:	680b      	ldr	r3, [r1, #0]
 80033f2:	6825      	ldr	r5, [r4, #0]
 80033f4:	1d18      	adds	r0, r3, #4
 80033f6:	6008      	str	r0, [r1, #0]
 80033f8:	0628      	lsls	r0, r5, #24
 80033fa:	d501      	bpl.n	8003400 <_printf_i+0xec>
 80033fc:	681d      	ldr	r5, [r3, #0]
 80033fe:	e002      	b.n	8003406 <_printf_i+0xf2>
 8003400:	0669      	lsls	r1, r5, #25
 8003402:	d5fb      	bpl.n	80033fc <_printf_i+0xe8>
 8003404:	881d      	ldrh	r5, [r3, #0]
 8003406:	4854      	ldr	r0, [pc, #336]	; (8003558 <_printf_i+0x244>)
 8003408:	2f6f      	cmp	r7, #111	; 0x6f
 800340a:	bf0c      	ite	eq
 800340c:	2308      	moveq	r3, #8
 800340e:	230a      	movne	r3, #10
 8003410:	2100      	movs	r1, #0
 8003412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003416:	6866      	ldr	r6, [r4, #4]
 8003418:	60a6      	str	r6, [r4, #8]
 800341a:	2e00      	cmp	r6, #0
 800341c:	bfa2      	ittt	ge
 800341e:	6821      	ldrge	r1, [r4, #0]
 8003420:	f021 0104 	bicge.w	r1, r1, #4
 8003424:	6021      	strge	r1, [r4, #0]
 8003426:	b90d      	cbnz	r5, 800342c <_printf_i+0x118>
 8003428:	2e00      	cmp	r6, #0
 800342a:	d04d      	beq.n	80034c8 <_printf_i+0x1b4>
 800342c:	4616      	mov	r6, r2
 800342e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003432:	fb03 5711 	mls	r7, r3, r1, r5
 8003436:	5dc7      	ldrb	r7, [r0, r7]
 8003438:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800343c:	462f      	mov	r7, r5
 800343e:	42bb      	cmp	r3, r7
 8003440:	460d      	mov	r5, r1
 8003442:	d9f4      	bls.n	800342e <_printf_i+0x11a>
 8003444:	2b08      	cmp	r3, #8
 8003446:	d10b      	bne.n	8003460 <_printf_i+0x14c>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	07df      	lsls	r7, r3, #31
 800344c:	d508      	bpl.n	8003460 <_printf_i+0x14c>
 800344e:	6923      	ldr	r3, [r4, #16]
 8003450:	6861      	ldr	r1, [r4, #4]
 8003452:	4299      	cmp	r1, r3
 8003454:	bfde      	ittt	le
 8003456:	2330      	movle	r3, #48	; 0x30
 8003458:	f806 3c01 	strble.w	r3, [r6, #-1]
 800345c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003460:	1b92      	subs	r2, r2, r6
 8003462:	6122      	str	r2, [r4, #16]
 8003464:	f8cd a000 	str.w	sl, [sp]
 8003468:	464b      	mov	r3, r9
 800346a:	aa03      	add	r2, sp, #12
 800346c:	4621      	mov	r1, r4
 800346e:	4640      	mov	r0, r8
 8003470:	f7ff fee2 	bl	8003238 <_printf_common>
 8003474:	3001      	adds	r0, #1
 8003476:	d14c      	bne.n	8003512 <_printf_i+0x1fe>
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	b004      	add	sp, #16
 800347e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003482:	4835      	ldr	r0, [pc, #212]	; (8003558 <_printf_i+0x244>)
 8003484:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003488:	6823      	ldr	r3, [r4, #0]
 800348a:	680e      	ldr	r6, [r1, #0]
 800348c:	061f      	lsls	r7, r3, #24
 800348e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003492:	600e      	str	r6, [r1, #0]
 8003494:	d514      	bpl.n	80034c0 <_printf_i+0x1ac>
 8003496:	07d9      	lsls	r1, r3, #31
 8003498:	bf44      	itt	mi
 800349a:	f043 0320 	orrmi.w	r3, r3, #32
 800349e:	6023      	strmi	r3, [r4, #0]
 80034a0:	b91d      	cbnz	r5, 80034aa <_printf_i+0x196>
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	f023 0320 	bic.w	r3, r3, #32
 80034a8:	6023      	str	r3, [r4, #0]
 80034aa:	2310      	movs	r3, #16
 80034ac:	e7b0      	b.n	8003410 <_printf_i+0xfc>
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	f043 0320 	orr.w	r3, r3, #32
 80034b4:	6023      	str	r3, [r4, #0]
 80034b6:	2378      	movs	r3, #120	; 0x78
 80034b8:	4828      	ldr	r0, [pc, #160]	; (800355c <_printf_i+0x248>)
 80034ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034be:	e7e3      	b.n	8003488 <_printf_i+0x174>
 80034c0:	065e      	lsls	r6, r3, #25
 80034c2:	bf48      	it	mi
 80034c4:	b2ad      	uxthmi	r5, r5
 80034c6:	e7e6      	b.n	8003496 <_printf_i+0x182>
 80034c8:	4616      	mov	r6, r2
 80034ca:	e7bb      	b.n	8003444 <_printf_i+0x130>
 80034cc:	680b      	ldr	r3, [r1, #0]
 80034ce:	6826      	ldr	r6, [r4, #0]
 80034d0:	6960      	ldr	r0, [r4, #20]
 80034d2:	1d1d      	adds	r5, r3, #4
 80034d4:	600d      	str	r5, [r1, #0]
 80034d6:	0635      	lsls	r5, r6, #24
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	d501      	bpl.n	80034e0 <_printf_i+0x1cc>
 80034dc:	6018      	str	r0, [r3, #0]
 80034de:	e002      	b.n	80034e6 <_printf_i+0x1d2>
 80034e0:	0671      	lsls	r1, r6, #25
 80034e2:	d5fb      	bpl.n	80034dc <_printf_i+0x1c8>
 80034e4:	8018      	strh	r0, [r3, #0]
 80034e6:	2300      	movs	r3, #0
 80034e8:	6123      	str	r3, [r4, #16]
 80034ea:	4616      	mov	r6, r2
 80034ec:	e7ba      	b.n	8003464 <_printf_i+0x150>
 80034ee:	680b      	ldr	r3, [r1, #0]
 80034f0:	1d1a      	adds	r2, r3, #4
 80034f2:	600a      	str	r2, [r1, #0]
 80034f4:	681e      	ldr	r6, [r3, #0]
 80034f6:	6862      	ldr	r2, [r4, #4]
 80034f8:	2100      	movs	r1, #0
 80034fa:	4630      	mov	r0, r6
 80034fc:	f7fc fe78 	bl	80001f0 <memchr>
 8003500:	b108      	cbz	r0, 8003506 <_printf_i+0x1f2>
 8003502:	1b80      	subs	r0, r0, r6
 8003504:	6060      	str	r0, [r4, #4]
 8003506:	6863      	ldr	r3, [r4, #4]
 8003508:	6123      	str	r3, [r4, #16]
 800350a:	2300      	movs	r3, #0
 800350c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003510:	e7a8      	b.n	8003464 <_printf_i+0x150>
 8003512:	6923      	ldr	r3, [r4, #16]
 8003514:	4632      	mov	r2, r6
 8003516:	4649      	mov	r1, r9
 8003518:	4640      	mov	r0, r8
 800351a:	47d0      	blx	sl
 800351c:	3001      	adds	r0, #1
 800351e:	d0ab      	beq.n	8003478 <_printf_i+0x164>
 8003520:	6823      	ldr	r3, [r4, #0]
 8003522:	079b      	lsls	r3, r3, #30
 8003524:	d413      	bmi.n	800354e <_printf_i+0x23a>
 8003526:	68e0      	ldr	r0, [r4, #12]
 8003528:	9b03      	ldr	r3, [sp, #12]
 800352a:	4298      	cmp	r0, r3
 800352c:	bfb8      	it	lt
 800352e:	4618      	movlt	r0, r3
 8003530:	e7a4      	b.n	800347c <_printf_i+0x168>
 8003532:	2301      	movs	r3, #1
 8003534:	4632      	mov	r2, r6
 8003536:	4649      	mov	r1, r9
 8003538:	4640      	mov	r0, r8
 800353a:	47d0      	blx	sl
 800353c:	3001      	adds	r0, #1
 800353e:	d09b      	beq.n	8003478 <_printf_i+0x164>
 8003540:	3501      	adds	r5, #1
 8003542:	68e3      	ldr	r3, [r4, #12]
 8003544:	9903      	ldr	r1, [sp, #12]
 8003546:	1a5b      	subs	r3, r3, r1
 8003548:	42ab      	cmp	r3, r5
 800354a:	dcf2      	bgt.n	8003532 <_printf_i+0x21e>
 800354c:	e7eb      	b.n	8003526 <_printf_i+0x212>
 800354e:	2500      	movs	r5, #0
 8003550:	f104 0619 	add.w	r6, r4, #25
 8003554:	e7f5      	b.n	8003542 <_printf_i+0x22e>
 8003556:	bf00      	nop
 8003558:	08004117 	.word	0x08004117
 800355c:	08004128 	.word	0x08004128

08003560 <_sbrk_r>:
 8003560:	b538      	push	{r3, r4, r5, lr}
 8003562:	4d06      	ldr	r5, [pc, #24]	; (800357c <_sbrk_r+0x1c>)
 8003564:	2300      	movs	r3, #0
 8003566:	4604      	mov	r4, r0
 8003568:	4608      	mov	r0, r1
 800356a:	602b      	str	r3, [r5, #0]
 800356c:	f7fe fc86 	bl	8001e7c <_sbrk>
 8003570:	1c43      	adds	r3, r0, #1
 8003572:	d102      	bne.n	800357a <_sbrk_r+0x1a>
 8003574:	682b      	ldr	r3, [r5, #0]
 8003576:	b103      	cbz	r3, 800357a <_sbrk_r+0x1a>
 8003578:	6023      	str	r3, [r4, #0]
 800357a:	bd38      	pop	{r3, r4, r5, pc}
 800357c:	200005e0 	.word	0x200005e0

08003580 <__swbuf_r>:
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	460e      	mov	r6, r1
 8003584:	4614      	mov	r4, r2
 8003586:	4605      	mov	r5, r0
 8003588:	b118      	cbz	r0, 8003592 <__swbuf_r+0x12>
 800358a:	6983      	ldr	r3, [r0, #24]
 800358c:	b90b      	cbnz	r3, 8003592 <__swbuf_r+0x12>
 800358e:	f000 f9d9 	bl	8003944 <__sinit>
 8003592:	4b21      	ldr	r3, [pc, #132]	; (8003618 <__swbuf_r+0x98>)
 8003594:	429c      	cmp	r4, r3
 8003596:	d12b      	bne.n	80035f0 <__swbuf_r+0x70>
 8003598:	686c      	ldr	r4, [r5, #4]
 800359a:	69a3      	ldr	r3, [r4, #24]
 800359c:	60a3      	str	r3, [r4, #8]
 800359e:	89a3      	ldrh	r3, [r4, #12]
 80035a0:	071a      	lsls	r2, r3, #28
 80035a2:	d52f      	bpl.n	8003604 <__swbuf_r+0x84>
 80035a4:	6923      	ldr	r3, [r4, #16]
 80035a6:	b36b      	cbz	r3, 8003604 <__swbuf_r+0x84>
 80035a8:	6923      	ldr	r3, [r4, #16]
 80035aa:	6820      	ldr	r0, [r4, #0]
 80035ac:	1ac0      	subs	r0, r0, r3
 80035ae:	6963      	ldr	r3, [r4, #20]
 80035b0:	b2f6      	uxtb	r6, r6
 80035b2:	4283      	cmp	r3, r0
 80035b4:	4637      	mov	r7, r6
 80035b6:	dc04      	bgt.n	80035c2 <__swbuf_r+0x42>
 80035b8:	4621      	mov	r1, r4
 80035ba:	4628      	mov	r0, r5
 80035bc:	f000 f92e 	bl	800381c <_fflush_r>
 80035c0:	bb30      	cbnz	r0, 8003610 <__swbuf_r+0x90>
 80035c2:	68a3      	ldr	r3, [r4, #8]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	60a3      	str	r3, [r4, #8]
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	6022      	str	r2, [r4, #0]
 80035ce:	701e      	strb	r6, [r3, #0]
 80035d0:	6963      	ldr	r3, [r4, #20]
 80035d2:	3001      	adds	r0, #1
 80035d4:	4283      	cmp	r3, r0
 80035d6:	d004      	beq.n	80035e2 <__swbuf_r+0x62>
 80035d8:	89a3      	ldrh	r3, [r4, #12]
 80035da:	07db      	lsls	r3, r3, #31
 80035dc:	d506      	bpl.n	80035ec <__swbuf_r+0x6c>
 80035de:	2e0a      	cmp	r6, #10
 80035e0:	d104      	bne.n	80035ec <__swbuf_r+0x6c>
 80035e2:	4621      	mov	r1, r4
 80035e4:	4628      	mov	r0, r5
 80035e6:	f000 f919 	bl	800381c <_fflush_r>
 80035ea:	b988      	cbnz	r0, 8003610 <__swbuf_r+0x90>
 80035ec:	4638      	mov	r0, r7
 80035ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <__swbuf_r+0x9c>)
 80035f2:	429c      	cmp	r4, r3
 80035f4:	d101      	bne.n	80035fa <__swbuf_r+0x7a>
 80035f6:	68ac      	ldr	r4, [r5, #8]
 80035f8:	e7cf      	b.n	800359a <__swbuf_r+0x1a>
 80035fa:	4b09      	ldr	r3, [pc, #36]	; (8003620 <__swbuf_r+0xa0>)
 80035fc:	429c      	cmp	r4, r3
 80035fe:	bf08      	it	eq
 8003600:	68ec      	ldreq	r4, [r5, #12]
 8003602:	e7ca      	b.n	800359a <__swbuf_r+0x1a>
 8003604:	4621      	mov	r1, r4
 8003606:	4628      	mov	r0, r5
 8003608:	f000 f80c 	bl	8003624 <__swsetup_r>
 800360c:	2800      	cmp	r0, #0
 800360e:	d0cb      	beq.n	80035a8 <__swbuf_r+0x28>
 8003610:	f04f 37ff 	mov.w	r7, #4294967295
 8003614:	e7ea      	b.n	80035ec <__swbuf_r+0x6c>
 8003616:	bf00      	nop
 8003618:	0800415c 	.word	0x0800415c
 800361c:	0800417c 	.word	0x0800417c
 8003620:	0800413c 	.word	0x0800413c

08003624 <__swsetup_r>:
 8003624:	4b32      	ldr	r3, [pc, #200]	; (80036f0 <__swsetup_r+0xcc>)
 8003626:	b570      	push	{r4, r5, r6, lr}
 8003628:	681d      	ldr	r5, [r3, #0]
 800362a:	4606      	mov	r6, r0
 800362c:	460c      	mov	r4, r1
 800362e:	b125      	cbz	r5, 800363a <__swsetup_r+0x16>
 8003630:	69ab      	ldr	r3, [r5, #24]
 8003632:	b913      	cbnz	r3, 800363a <__swsetup_r+0x16>
 8003634:	4628      	mov	r0, r5
 8003636:	f000 f985 	bl	8003944 <__sinit>
 800363a:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <__swsetup_r+0xd0>)
 800363c:	429c      	cmp	r4, r3
 800363e:	d10f      	bne.n	8003660 <__swsetup_r+0x3c>
 8003640:	686c      	ldr	r4, [r5, #4]
 8003642:	89a3      	ldrh	r3, [r4, #12]
 8003644:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003648:	0719      	lsls	r1, r3, #28
 800364a:	d42c      	bmi.n	80036a6 <__swsetup_r+0x82>
 800364c:	06dd      	lsls	r5, r3, #27
 800364e:	d411      	bmi.n	8003674 <__swsetup_r+0x50>
 8003650:	2309      	movs	r3, #9
 8003652:	6033      	str	r3, [r6, #0]
 8003654:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003658:	81a3      	strh	r3, [r4, #12]
 800365a:	f04f 30ff 	mov.w	r0, #4294967295
 800365e:	e03e      	b.n	80036de <__swsetup_r+0xba>
 8003660:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <__swsetup_r+0xd4>)
 8003662:	429c      	cmp	r4, r3
 8003664:	d101      	bne.n	800366a <__swsetup_r+0x46>
 8003666:	68ac      	ldr	r4, [r5, #8]
 8003668:	e7eb      	b.n	8003642 <__swsetup_r+0x1e>
 800366a:	4b24      	ldr	r3, [pc, #144]	; (80036fc <__swsetup_r+0xd8>)
 800366c:	429c      	cmp	r4, r3
 800366e:	bf08      	it	eq
 8003670:	68ec      	ldreq	r4, [r5, #12]
 8003672:	e7e6      	b.n	8003642 <__swsetup_r+0x1e>
 8003674:	0758      	lsls	r0, r3, #29
 8003676:	d512      	bpl.n	800369e <__swsetup_r+0x7a>
 8003678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800367a:	b141      	cbz	r1, 800368e <__swsetup_r+0x6a>
 800367c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003680:	4299      	cmp	r1, r3
 8003682:	d002      	beq.n	800368a <__swsetup_r+0x66>
 8003684:	4630      	mov	r0, r6
 8003686:	f7ff fa77 	bl	8002b78 <_free_r>
 800368a:	2300      	movs	r3, #0
 800368c:	6363      	str	r3, [r4, #52]	; 0x34
 800368e:	89a3      	ldrh	r3, [r4, #12]
 8003690:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003694:	81a3      	strh	r3, [r4, #12]
 8003696:	2300      	movs	r3, #0
 8003698:	6063      	str	r3, [r4, #4]
 800369a:	6923      	ldr	r3, [r4, #16]
 800369c:	6023      	str	r3, [r4, #0]
 800369e:	89a3      	ldrh	r3, [r4, #12]
 80036a0:	f043 0308 	orr.w	r3, r3, #8
 80036a4:	81a3      	strh	r3, [r4, #12]
 80036a6:	6923      	ldr	r3, [r4, #16]
 80036a8:	b94b      	cbnz	r3, 80036be <__swsetup_r+0x9a>
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b4:	d003      	beq.n	80036be <__swsetup_r+0x9a>
 80036b6:	4621      	mov	r1, r4
 80036b8:	4630      	mov	r0, r6
 80036ba:	f000 fa07 	bl	8003acc <__smakebuf_r>
 80036be:	89a0      	ldrh	r0, [r4, #12]
 80036c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036c4:	f010 0301 	ands.w	r3, r0, #1
 80036c8:	d00a      	beq.n	80036e0 <__swsetup_r+0xbc>
 80036ca:	2300      	movs	r3, #0
 80036cc:	60a3      	str	r3, [r4, #8]
 80036ce:	6963      	ldr	r3, [r4, #20]
 80036d0:	425b      	negs	r3, r3
 80036d2:	61a3      	str	r3, [r4, #24]
 80036d4:	6923      	ldr	r3, [r4, #16]
 80036d6:	b943      	cbnz	r3, 80036ea <__swsetup_r+0xc6>
 80036d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036dc:	d1ba      	bne.n	8003654 <__swsetup_r+0x30>
 80036de:	bd70      	pop	{r4, r5, r6, pc}
 80036e0:	0781      	lsls	r1, r0, #30
 80036e2:	bf58      	it	pl
 80036e4:	6963      	ldrpl	r3, [r4, #20]
 80036e6:	60a3      	str	r3, [r4, #8]
 80036e8:	e7f4      	b.n	80036d4 <__swsetup_r+0xb0>
 80036ea:	2000      	movs	r0, #0
 80036ec:	e7f7      	b.n	80036de <__swsetup_r+0xba>
 80036ee:	bf00      	nop
 80036f0:	20000004 	.word	0x20000004
 80036f4:	0800415c 	.word	0x0800415c
 80036f8:	0800417c 	.word	0x0800417c
 80036fc:	0800413c 	.word	0x0800413c

08003700 <abort>:
 8003700:	b508      	push	{r3, lr}
 8003702:	2006      	movs	r0, #6
 8003704:	f000 faa4 	bl	8003c50 <raise>
 8003708:	2001      	movs	r0, #1
 800370a:	f7fe fb3f 	bl	8001d8c <_exit>
	...

08003710 <__sflush_r>:
 8003710:	898a      	ldrh	r2, [r1, #12]
 8003712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003716:	4605      	mov	r5, r0
 8003718:	0710      	lsls	r0, r2, #28
 800371a:	460c      	mov	r4, r1
 800371c:	d458      	bmi.n	80037d0 <__sflush_r+0xc0>
 800371e:	684b      	ldr	r3, [r1, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	dc05      	bgt.n	8003730 <__sflush_r+0x20>
 8003724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	dc02      	bgt.n	8003730 <__sflush_r+0x20>
 800372a:	2000      	movs	r0, #0
 800372c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003732:	2e00      	cmp	r6, #0
 8003734:	d0f9      	beq.n	800372a <__sflush_r+0x1a>
 8003736:	2300      	movs	r3, #0
 8003738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800373c:	682f      	ldr	r7, [r5, #0]
 800373e:	602b      	str	r3, [r5, #0]
 8003740:	d032      	beq.n	80037a8 <__sflush_r+0x98>
 8003742:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003744:	89a3      	ldrh	r3, [r4, #12]
 8003746:	075a      	lsls	r2, r3, #29
 8003748:	d505      	bpl.n	8003756 <__sflush_r+0x46>
 800374a:	6863      	ldr	r3, [r4, #4]
 800374c:	1ac0      	subs	r0, r0, r3
 800374e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003750:	b10b      	cbz	r3, 8003756 <__sflush_r+0x46>
 8003752:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003754:	1ac0      	subs	r0, r0, r3
 8003756:	2300      	movs	r3, #0
 8003758:	4602      	mov	r2, r0
 800375a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800375c:	6a21      	ldr	r1, [r4, #32]
 800375e:	4628      	mov	r0, r5
 8003760:	47b0      	blx	r6
 8003762:	1c43      	adds	r3, r0, #1
 8003764:	89a3      	ldrh	r3, [r4, #12]
 8003766:	d106      	bne.n	8003776 <__sflush_r+0x66>
 8003768:	6829      	ldr	r1, [r5, #0]
 800376a:	291d      	cmp	r1, #29
 800376c:	d82c      	bhi.n	80037c8 <__sflush_r+0xb8>
 800376e:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <__sflush_r+0x108>)
 8003770:	40ca      	lsrs	r2, r1
 8003772:	07d6      	lsls	r6, r2, #31
 8003774:	d528      	bpl.n	80037c8 <__sflush_r+0xb8>
 8003776:	2200      	movs	r2, #0
 8003778:	6062      	str	r2, [r4, #4]
 800377a:	04d9      	lsls	r1, r3, #19
 800377c:	6922      	ldr	r2, [r4, #16]
 800377e:	6022      	str	r2, [r4, #0]
 8003780:	d504      	bpl.n	800378c <__sflush_r+0x7c>
 8003782:	1c42      	adds	r2, r0, #1
 8003784:	d101      	bne.n	800378a <__sflush_r+0x7a>
 8003786:	682b      	ldr	r3, [r5, #0]
 8003788:	b903      	cbnz	r3, 800378c <__sflush_r+0x7c>
 800378a:	6560      	str	r0, [r4, #84]	; 0x54
 800378c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800378e:	602f      	str	r7, [r5, #0]
 8003790:	2900      	cmp	r1, #0
 8003792:	d0ca      	beq.n	800372a <__sflush_r+0x1a>
 8003794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003798:	4299      	cmp	r1, r3
 800379a:	d002      	beq.n	80037a2 <__sflush_r+0x92>
 800379c:	4628      	mov	r0, r5
 800379e:	f7ff f9eb 	bl	8002b78 <_free_r>
 80037a2:	2000      	movs	r0, #0
 80037a4:	6360      	str	r0, [r4, #52]	; 0x34
 80037a6:	e7c1      	b.n	800372c <__sflush_r+0x1c>
 80037a8:	6a21      	ldr	r1, [r4, #32]
 80037aa:	2301      	movs	r3, #1
 80037ac:	4628      	mov	r0, r5
 80037ae:	47b0      	blx	r6
 80037b0:	1c41      	adds	r1, r0, #1
 80037b2:	d1c7      	bne.n	8003744 <__sflush_r+0x34>
 80037b4:	682b      	ldr	r3, [r5, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0c4      	beq.n	8003744 <__sflush_r+0x34>
 80037ba:	2b1d      	cmp	r3, #29
 80037bc:	d001      	beq.n	80037c2 <__sflush_r+0xb2>
 80037be:	2b16      	cmp	r3, #22
 80037c0:	d101      	bne.n	80037c6 <__sflush_r+0xb6>
 80037c2:	602f      	str	r7, [r5, #0]
 80037c4:	e7b1      	b.n	800372a <__sflush_r+0x1a>
 80037c6:	89a3      	ldrh	r3, [r4, #12]
 80037c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037cc:	81a3      	strh	r3, [r4, #12]
 80037ce:	e7ad      	b.n	800372c <__sflush_r+0x1c>
 80037d0:	690f      	ldr	r7, [r1, #16]
 80037d2:	2f00      	cmp	r7, #0
 80037d4:	d0a9      	beq.n	800372a <__sflush_r+0x1a>
 80037d6:	0793      	lsls	r3, r2, #30
 80037d8:	680e      	ldr	r6, [r1, #0]
 80037da:	bf08      	it	eq
 80037dc:	694b      	ldreq	r3, [r1, #20]
 80037de:	600f      	str	r7, [r1, #0]
 80037e0:	bf18      	it	ne
 80037e2:	2300      	movne	r3, #0
 80037e4:	eba6 0807 	sub.w	r8, r6, r7
 80037e8:	608b      	str	r3, [r1, #8]
 80037ea:	f1b8 0f00 	cmp.w	r8, #0
 80037ee:	dd9c      	ble.n	800372a <__sflush_r+0x1a>
 80037f0:	6a21      	ldr	r1, [r4, #32]
 80037f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80037f4:	4643      	mov	r3, r8
 80037f6:	463a      	mov	r2, r7
 80037f8:	4628      	mov	r0, r5
 80037fa:	47b0      	blx	r6
 80037fc:	2800      	cmp	r0, #0
 80037fe:	dc06      	bgt.n	800380e <__sflush_r+0xfe>
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003806:	81a3      	strh	r3, [r4, #12]
 8003808:	f04f 30ff 	mov.w	r0, #4294967295
 800380c:	e78e      	b.n	800372c <__sflush_r+0x1c>
 800380e:	4407      	add	r7, r0
 8003810:	eba8 0800 	sub.w	r8, r8, r0
 8003814:	e7e9      	b.n	80037ea <__sflush_r+0xda>
 8003816:	bf00      	nop
 8003818:	20400001 	.word	0x20400001

0800381c <_fflush_r>:
 800381c:	b538      	push	{r3, r4, r5, lr}
 800381e:	690b      	ldr	r3, [r1, #16]
 8003820:	4605      	mov	r5, r0
 8003822:	460c      	mov	r4, r1
 8003824:	b913      	cbnz	r3, 800382c <_fflush_r+0x10>
 8003826:	2500      	movs	r5, #0
 8003828:	4628      	mov	r0, r5
 800382a:	bd38      	pop	{r3, r4, r5, pc}
 800382c:	b118      	cbz	r0, 8003836 <_fflush_r+0x1a>
 800382e:	6983      	ldr	r3, [r0, #24]
 8003830:	b90b      	cbnz	r3, 8003836 <_fflush_r+0x1a>
 8003832:	f000 f887 	bl	8003944 <__sinit>
 8003836:	4b14      	ldr	r3, [pc, #80]	; (8003888 <_fflush_r+0x6c>)
 8003838:	429c      	cmp	r4, r3
 800383a:	d11b      	bne.n	8003874 <_fflush_r+0x58>
 800383c:	686c      	ldr	r4, [r5, #4]
 800383e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0ef      	beq.n	8003826 <_fflush_r+0xa>
 8003846:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003848:	07d0      	lsls	r0, r2, #31
 800384a:	d404      	bmi.n	8003856 <_fflush_r+0x3a>
 800384c:	0599      	lsls	r1, r3, #22
 800384e:	d402      	bmi.n	8003856 <_fflush_r+0x3a>
 8003850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003852:	f000 f915 	bl	8003a80 <__retarget_lock_acquire_recursive>
 8003856:	4628      	mov	r0, r5
 8003858:	4621      	mov	r1, r4
 800385a:	f7ff ff59 	bl	8003710 <__sflush_r>
 800385e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003860:	07da      	lsls	r2, r3, #31
 8003862:	4605      	mov	r5, r0
 8003864:	d4e0      	bmi.n	8003828 <_fflush_r+0xc>
 8003866:	89a3      	ldrh	r3, [r4, #12]
 8003868:	059b      	lsls	r3, r3, #22
 800386a:	d4dd      	bmi.n	8003828 <_fflush_r+0xc>
 800386c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800386e:	f000 f908 	bl	8003a82 <__retarget_lock_release_recursive>
 8003872:	e7d9      	b.n	8003828 <_fflush_r+0xc>
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <_fflush_r+0x70>)
 8003876:	429c      	cmp	r4, r3
 8003878:	d101      	bne.n	800387e <_fflush_r+0x62>
 800387a:	68ac      	ldr	r4, [r5, #8]
 800387c:	e7df      	b.n	800383e <_fflush_r+0x22>
 800387e:	4b04      	ldr	r3, [pc, #16]	; (8003890 <_fflush_r+0x74>)
 8003880:	429c      	cmp	r4, r3
 8003882:	bf08      	it	eq
 8003884:	68ec      	ldreq	r4, [r5, #12]
 8003886:	e7da      	b.n	800383e <_fflush_r+0x22>
 8003888:	0800415c 	.word	0x0800415c
 800388c:	0800417c 	.word	0x0800417c
 8003890:	0800413c 	.word	0x0800413c

08003894 <std>:
 8003894:	2300      	movs	r3, #0
 8003896:	b510      	push	{r4, lr}
 8003898:	4604      	mov	r4, r0
 800389a:	e9c0 3300 	strd	r3, r3, [r0]
 800389e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038a2:	6083      	str	r3, [r0, #8]
 80038a4:	8181      	strh	r1, [r0, #12]
 80038a6:	6643      	str	r3, [r0, #100]	; 0x64
 80038a8:	81c2      	strh	r2, [r0, #14]
 80038aa:	6183      	str	r3, [r0, #24]
 80038ac:	4619      	mov	r1, r3
 80038ae:	2208      	movs	r2, #8
 80038b0:	305c      	adds	r0, #92	; 0x5c
 80038b2:	f7ff f8c1 	bl	8002a38 <memset>
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <std+0x38>)
 80038b8:	6263      	str	r3, [r4, #36]	; 0x24
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <std+0x3c>)
 80038bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <std+0x40>)
 80038c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <std+0x44>)
 80038c4:	6224      	str	r4, [r4, #32]
 80038c6:	6323      	str	r3, [r4, #48]	; 0x30
 80038c8:	bd10      	pop	{r4, pc}
 80038ca:	bf00      	nop
 80038cc:	08003c89 	.word	0x08003c89
 80038d0:	08003cab 	.word	0x08003cab
 80038d4:	08003ce3 	.word	0x08003ce3
 80038d8:	08003d07 	.word	0x08003d07

080038dc <_cleanup_r>:
 80038dc:	4901      	ldr	r1, [pc, #4]	; (80038e4 <_cleanup_r+0x8>)
 80038de:	f000 b8af 	b.w	8003a40 <_fwalk_reent>
 80038e2:	bf00      	nop
 80038e4:	0800381d 	.word	0x0800381d

080038e8 <__sfmoreglue>:
 80038e8:	b570      	push	{r4, r5, r6, lr}
 80038ea:	1e4a      	subs	r2, r1, #1
 80038ec:	2568      	movs	r5, #104	; 0x68
 80038ee:	4355      	muls	r5, r2
 80038f0:	460e      	mov	r6, r1
 80038f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80038f6:	f7ff f98f 	bl	8002c18 <_malloc_r>
 80038fa:	4604      	mov	r4, r0
 80038fc:	b140      	cbz	r0, 8003910 <__sfmoreglue+0x28>
 80038fe:	2100      	movs	r1, #0
 8003900:	e9c0 1600 	strd	r1, r6, [r0]
 8003904:	300c      	adds	r0, #12
 8003906:	60a0      	str	r0, [r4, #8]
 8003908:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800390c:	f7ff f894 	bl	8002a38 <memset>
 8003910:	4620      	mov	r0, r4
 8003912:	bd70      	pop	{r4, r5, r6, pc}

08003914 <__sfp_lock_acquire>:
 8003914:	4801      	ldr	r0, [pc, #4]	; (800391c <__sfp_lock_acquire+0x8>)
 8003916:	f000 b8b3 	b.w	8003a80 <__retarget_lock_acquire_recursive>
 800391a:	bf00      	nop
 800391c:	200005dc 	.word	0x200005dc

08003920 <__sfp_lock_release>:
 8003920:	4801      	ldr	r0, [pc, #4]	; (8003928 <__sfp_lock_release+0x8>)
 8003922:	f000 b8ae 	b.w	8003a82 <__retarget_lock_release_recursive>
 8003926:	bf00      	nop
 8003928:	200005dc 	.word	0x200005dc

0800392c <__sinit_lock_acquire>:
 800392c:	4801      	ldr	r0, [pc, #4]	; (8003934 <__sinit_lock_acquire+0x8>)
 800392e:	f000 b8a7 	b.w	8003a80 <__retarget_lock_acquire_recursive>
 8003932:	bf00      	nop
 8003934:	200005d7 	.word	0x200005d7

08003938 <__sinit_lock_release>:
 8003938:	4801      	ldr	r0, [pc, #4]	; (8003940 <__sinit_lock_release+0x8>)
 800393a:	f000 b8a2 	b.w	8003a82 <__retarget_lock_release_recursive>
 800393e:	bf00      	nop
 8003940:	200005d7 	.word	0x200005d7

08003944 <__sinit>:
 8003944:	b510      	push	{r4, lr}
 8003946:	4604      	mov	r4, r0
 8003948:	f7ff fff0 	bl	800392c <__sinit_lock_acquire>
 800394c:	69a3      	ldr	r3, [r4, #24]
 800394e:	b11b      	cbz	r3, 8003958 <__sinit+0x14>
 8003950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003954:	f7ff bff0 	b.w	8003938 <__sinit_lock_release>
 8003958:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800395c:	6523      	str	r3, [r4, #80]	; 0x50
 800395e:	4b13      	ldr	r3, [pc, #76]	; (80039ac <__sinit+0x68>)
 8003960:	4a13      	ldr	r2, [pc, #76]	; (80039b0 <__sinit+0x6c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	62a2      	str	r2, [r4, #40]	; 0x28
 8003966:	42a3      	cmp	r3, r4
 8003968:	bf04      	itt	eq
 800396a:	2301      	moveq	r3, #1
 800396c:	61a3      	streq	r3, [r4, #24]
 800396e:	4620      	mov	r0, r4
 8003970:	f000 f820 	bl	80039b4 <__sfp>
 8003974:	6060      	str	r0, [r4, #4]
 8003976:	4620      	mov	r0, r4
 8003978:	f000 f81c 	bl	80039b4 <__sfp>
 800397c:	60a0      	str	r0, [r4, #8]
 800397e:	4620      	mov	r0, r4
 8003980:	f000 f818 	bl	80039b4 <__sfp>
 8003984:	2200      	movs	r2, #0
 8003986:	60e0      	str	r0, [r4, #12]
 8003988:	2104      	movs	r1, #4
 800398a:	6860      	ldr	r0, [r4, #4]
 800398c:	f7ff ff82 	bl	8003894 <std>
 8003990:	68a0      	ldr	r0, [r4, #8]
 8003992:	2201      	movs	r2, #1
 8003994:	2109      	movs	r1, #9
 8003996:	f7ff ff7d 	bl	8003894 <std>
 800399a:	68e0      	ldr	r0, [r4, #12]
 800399c:	2202      	movs	r2, #2
 800399e:	2112      	movs	r1, #18
 80039a0:	f7ff ff78 	bl	8003894 <std>
 80039a4:	2301      	movs	r3, #1
 80039a6:	61a3      	str	r3, [r4, #24]
 80039a8:	e7d2      	b.n	8003950 <__sinit+0xc>
 80039aa:	bf00      	nop
 80039ac:	08004050 	.word	0x08004050
 80039b0:	080038dd 	.word	0x080038dd

080039b4 <__sfp>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	4607      	mov	r7, r0
 80039b8:	f7ff ffac 	bl	8003914 <__sfp_lock_acquire>
 80039bc:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <__sfp+0x84>)
 80039be:	681e      	ldr	r6, [r3, #0]
 80039c0:	69b3      	ldr	r3, [r6, #24]
 80039c2:	b913      	cbnz	r3, 80039ca <__sfp+0x16>
 80039c4:	4630      	mov	r0, r6
 80039c6:	f7ff ffbd 	bl	8003944 <__sinit>
 80039ca:	3648      	adds	r6, #72	; 0x48
 80039cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	d503      	bpl.n	80039dc <__sfp+0x28>
 80039d4:	6833      	ldr	r3, [r6, #0]
 80039d6:	b30b      	cbz	r3, 8003a1c <__sfp+0x68>
 80039d8:	6836      	ldr	r6, [r6, #0]
 80039da:	e7f7      	b.n	80039cc <__sfp+0x18>
 80039dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80039e0:	b9d5      	cbnz	r5, 8003a18 <__sfp+0x64>
 80039e2:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <__sfp+0x88>)
 80039e4:	60e3      	str	r3, [r4, #12]
 80039e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80039ea:	6665      	str	r5, [r4, #100]	; 0x64
 80039ec:	f000 f847 	bl	8003a7e <__retarget_lock_init_recursive>
 80039f0:	f7ff ff96 	bl	8003920 <__sfp_lock_release>
 80039f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80039f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80039fc:	6025      	str	r5, [r4, #0]
 80039fe:	61a5      	str	r5, [r4, #24]
 8003a00:	2208      	movs	r2, #8
 8003a02:	4629      	mov	r1, r5
 8003a04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a08:	f7ff f816 	bl	8002a38 <memset>
 8003a0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a14:	4620      	mov	r0, r4
 8003a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a18:	3468      	adds	r4, #104	; 0x68
 8003a1a:	e7d9      	b.n	80039d0 <__sfp+0x1c>
 8003a1c:	2104      	movs	r1, #4
 8003a1e:	4638      	mov	r0, r7
 8003a20:	f7ff ff62 	bl	80038e8 <__sfmoreglue>
 8003a24:	4604      	mov	r4, r0
 8003a26:	6030      	str	r0, [r6, #0]
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	d1d5      	bne.n	80039d8 <__sfp+0x24>
 8003a2c:	f7ff ff78 	bl	8003920 <__sfp_lock_release>
 8003a30:	230c      	movs	r3, #12
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	e7ee      	b.n	8003a14 <__sfp+0x60>
 8003a36:	bf00      	nop
 8003a38:	08004050 	.word	0x08004050
 8003a3c:	ffff0001 	.word	0xffff0001

08003a40 <_fwalk_reent>:
 8003a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a44:	4606      	mov	r6, r0
 8003a46:	4688      	mov	r8, r1
 8003a48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a4c:	2700      	movs	r7, #0
 8003a4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a52:	f1b9 0901 	subs.w	r9, r9, #1
 8003a56:	d505      	bpl.n	8003a64 <_fwalk_reent+0x24>
 8003a58:	6824      	ldr	r4, [r4, #0]
 8003a5a:	2c00      	cmp	r4, #0
 8003a5c:	d1f7      	bne.n	8003a4e <_fwalk_reent+0xe>
 8003a5e:	4638      	mov	r0, r7
 8003a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a64:	89ab      	ldrh	r3, [r5, #12]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d907      	bls.n	8003a7a <_fwalk_reent+0x3a>
 8003a6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	d003      	beq.n	8003a7a <_fwalk_reent+0x3a>
 8003a72:	4629      	mov	r1, r5
 8003a74:	4630      	mov	r0, r6
 8003a76:	47c0      	blx	r8
 8003a78:	4307      	orrs	r7, r0
 8003a7a:	3568      	adds	r5, #104	; 0x68
 8003a7c:	e7e9      	b.n	8003a52 <_fwalk_reent+0x12>

08003a7e <__retarget_lock_init_recursive>:
 8003a7e:	4770      	bx	lr

08003a80 <__retarget_lock_acquire_recursive>:
 8003a80:	4770      	bx	lr

08003a82 <__retarget_lock_release_recursive>:
 8003a82:	4770      	bx	lr

08003a84 <__swhatbuf_r>:
 8003a84:	b570      	push	{r4, r5, r6, lr}
 8003a86:	460e      	mov	r6, r1
 8003a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a8c:	2900      	cmp	r1, #0
 8003a8e:	b096      	sub	sp, #88	; 0x58
 8003a90:	4614      	mov	r4, r2
 8003a92:	461d      	mov	r5, r3
 8003a94:	da07      	bge.n	8003aa6 <__swhatbuf_r+0x22>
 8003a96:	2300      	movs	r3, #0
 8003a98:	602b      	str	r3, [r5, #0]
 8003a9a:	89b3      	ldrh	r3, [r6, #12]
 8003a9c:	061a      	lsls	r2, r3, #24
 8003a9e:	d410      	bmi.n	8003ac2 <__swhatbuf_r+0x3e>
 8003aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aa4:	e00e      	b.n	8003ac4 <__swhatbuf_r+0x40>
 8003aa6:	466a      	mov	r2, sp
 8003aa8:	f000 f954 	bl	8003d54 <_fstat_r>
 8003aac:	2800      	cmp	r0, #0
 8003aae:	dbf2      	blt.n	8003a96 <__swhatbuf_r+0x12>
 8003ab0:	9a01      	ldr	r2, [sp, #4]
 8003ab2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003ab6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003aba:	425a      	negs	r2, r3
 8003abc:	415a      	adcs	r2, r3
 8003abe:	602a      	str	r2, [r5, #0]
 8003ac0:	e7ee      	b.n	8003aa0 <__swhatbuf_r+0x1c>
 8003ac2:	2340      	movs	r3, #64	; 0x40
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	6023      	str	r3, [r4, #0]
 8003ac8:	b016      	add	sp, #88	; 0x58
 8003aca:	bd70      	pop	{r4, r5, r6, pc}

08003acc <__smakebuf_r>:
 8003acc:	898b      	ldrh	r3, [r1, #12]
 8003ace:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ad0:	079d      	lsls	r5, r3, #30
 8003ad2:	4606      	mov	r6, r0
 8003ad4:	460c      	mov	r4, r1
 8003ad6:	d507      	bpl.n	8003ae8 <__smakebuf_r+0x1c>
 8003ad8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003adc:	6023      	str	r3, [r4, #0]
 8003ade:	6123      	str	r3, [r4, #16]
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	6163      	str	r3, [r4, #20]
 8003ae4:	b002      	add	sp, #8
 8003ae6:	bd70      	pop	{r4, r5, r6, pc}
 8003ae8:	ab01      	add	r3, sp, #4
 8003aea:	466a      	mov	r2, sp
 8003aec:	f7ff ffca 	bl	8003a84 <__swhatbuf_r>
 8003af0:	9900      	ldr	r1, [sp, #0]
 8003af2:	4605      	mov	r5, r0
 8003af4:	4630      	mov	r0, r6
 8003af6:	f7ff f88f 	bl	8002c18 <_malloc_r>
 8003afa:	b948      	cbnz	r0, 8003b10 <__smakebuf_r+0x44>
 8003afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b00:	059a      	lsls	r2, r3, #22
 8003b02:	d4ef      	bmi.n	8003ae4 <__smakebuf_r+0x18>
 8003b04:	f023 0303 	bic.w	r3, r3, #3
 8003b08:	f043 0302 	orr.w	r3, r3, #2
 8003b0c:	81a3      	strh	r3, [r4, #12]
 8003b0e:	e7e3      	b.n	8003ad8 <__smakebuf_r+0xc>
 8003b10:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <__smakebuf_r+0x7c>)
 8003b12:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b14:	89a3      	ldrh	r3, [r4, #12]
 8003b16:	6020      	str	r0, [r4, #0]
 8003b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b1c:	81a3      	strh	r3, [r4, #12]
 8003b1e:	9b00      	ldr	r3, [sp, #0]
 8003b20:	6163      	str	r3, [r4, #20]
 8003b22:	9b01      	ldr	r3, [sp, #4]
 8003b24:	6120      	str	r0, [r4, #16]
 8003b26:	b15b      	cbz	r3, 8003b40 <__smakebuf_r+0x74>
 8003b28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f000 f923 	bl	8003d78 <_isatty_r>
 8003b32:	b128      	cbz	r0, 8003b40 <__smakebuf_r+0x74>
 8003b34:	89a3      	ldrh	r3, [r4, #12]
 8003b36:	f023 0303 	bic.w	r3, r3, #3
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	81a3      	strh	r3, [r4, #12]
 8003b40:	89a0      	ldrh	r0, [r4, #12]
 8003b42:	4305      	orrs	r5, r0
 8003b44:	81a5      	strh	r5, [r4, #12]
 8003b46:	e7cd      	b.n	8003ae4 <__smakebuf_r+0x18>
 8003b48:	080038dd 	.word	0x080038dd

08003b4c <memcpy>:
 8003b4c:	440a      	add	r2, r1
 8003b4e:	4291      	cmp	r1, r2
 8003b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b54:	d100      	bne.n	8003b58 <memcpy+0xc>
 8003b56:	4770      	bx	lr
 8003b58:	b510      	push	{r4, lr}
 8003b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b62:	4291      	cmp	r1, r2
 8003b64:	d1f9      	bne.n	8003b5a <memcpy+0xe>
 8003b66:	bd10      	pop	{r4, pc}

08003b68 <memmove>:
 8003b68:	4288      	cmp	r0, r1
 8003b6a:	b510      	push	{r4, lr}
 8003b6c:	eb01 0402 	add.w	r4, r1, r2
 8003b70:	d902      	bls.n	8003b78 <memmove+0x10>
 8003b72:	4284      	cmp	r4, r0
 8003b74:	4623      	mov	r3, r4
 8003b76:	d807      	bhi.n	8003b88 <memmove+0x20>
 8003b78:	1e43      	subs	r3, r0, #1
 8003b7a:	42a1      	cmp	r1, r4
 8003b7c:	d008      	beq.n	8003b90 <memmove+0x28>
 8003b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b86:	e7f8      	b.n	8003b7a <memmove+0x12>
 8003b88:	4402      	add	r2, r0
 8003b8a:	4601      	mov	r1, r0
 8003b8c:	428a      	cmp	r2, r1
 8003b8e:	d100      	bne.n	8003b92 <memmove+0x2a>
 8003b90:	bd10      	pop	{r4, pc}
 8003b92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b9a:	e7f7      	b.n	8003b8c <memmove+0x24>

08003b9c <__malloc_lock>:
 8003b9c:	4801      	ldr	r0, [pc, #4]	; (8003ba4 <__malloc_lock+0x8>)
 8003b9e:	f7ff bf6f 	b.w	8003a80 <__retarget_lock_acquire_recursive>
 8003ba2:	bf00      	nop
 8003ba4:	200005d8 	.word	0x200005d8

08003ba8 <__malloc_unlock>:
 8003ba8:	4801      	ldr	r0, [pc, #4]	; (8003bb0 <__malloc_unlock+0x8>)
 8003baa:	f7ff bf6a 	b.w	8003a82 <__retarget_lock_release_recursive>
 8003bae:	bf00      	nop
 8003bb0:	200005d8 	.word	0x200005d8

08003bb4 <_realloc_r>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	4607      	mov	r7, r0
 8003bb8:	4614      	mov	r4, r2
 8003bba:	460e      	mov	r6, r1
 8003bbc:	b921      	cbnz	r1, 8003bc8 <_realloc_r+0x14>
 8003bbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	f7ff b828 	b.w	8002c18 <_malloc_r>
 8003bc8:	b922      	cbnz	r2, 8003bd4 <_realloc_r+0x20>
 8003bca:	f7fe ffd5 	bl	8002b78 <_free_r>
 8003bce:	4625      	mov	r5, r4
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bd4:	f000 f8f2 	bl	8003dbc <_malloc_usable_size_r>
 8003bd8:	42a0      	cmp	r0, r4
 8003bda:	d20f      	bcs.n	8003bfc <_realloc_r+0x48>
 8003bdc:	4621      	mov	r1, r4
 8003bde:	4638      	mov	r0, r7
 8003be0:	f7ff f81a 	bl	8002c18 <_malloc_r>
 8003be4:	4605      	mov	r5, r0
 8003be6:	2800      	cmp	r0, #0
 8003be8:	d0f2      	beq.n	8003bd0 <_realloc_r+0x1c>
 8003bea:	4631      	mov	r1, r6
 8003bec:	4622      	mov	r2, r4
 8003bee:	f7ff ffad 	bl	8003b4c <memcpy>
 8003bf2:	4631      	mov	r1, r6
 8003bf4:	4638      	mov	r0, r7
 8003bf6:	f7fe ffbf 	bl	8002b78 <_free_r>
 8003bfa:	e7e9      	b.n	8003bd0 <_realloc_r+0x1c>
 8003bfc:	4635      	mov	r5, r6
 8003bfe:	e7e7      	b.n	8003bd0 <_realloc_r+0x1c>

08003c00 <_raise_r>:
 8003c00:	291f      	cmp	r1, #31
 8003c02:	b538      	push	{r3, r4, r5, lr}
 8003c04:	4604      	mov	r4, r0
 8003c06:	460d      	mov	r5, r1
 8003c08:	d904      	bls.n	8003c14 <_raise_r+0x14>
 8003c0a:	2316      	movs	r3, #22
 8003c0c:	6003      	str	r3, [r0, #0]
 8003c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c12:	bd38      	pop	{r3, r4, r5, pc}
 8003c14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003c16:	b112      	cbz	r2, 8003c1e <_raise_r+0x1e>
 8003c18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003c1c:	b94b      	cbnz	r3, 8003c32 <_raise_r+0x32>
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f000 f830 	bl	8003c84 <_getpid_r>
 8003c24:	462a      	mov	r2, r5
 8003c26:	4601      	mov	r1, r0
 8003c28:	4620      	mov	r0, r4
 8003c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c2e:	f000 b817 	b.w	8003c60 <_kill_r>
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d00a      	beq.n	8003c4c <_raise_r+0x4c>
 8003c36:	1c59      	adds	r1, r3, #1
 8003c38:	d103      	bne.n	8003c42 <_raise_r+0x42>
 8003c3a:	2316      	movs	r3, #22
 8003c3c:	6003      	str	r3, [r0, #0]
 8003c3e:	2001      	movs	r0, #1
 8003c40:	e7e7      	b.n	8003c12 <_raise_r+0x12>
 8003c42:	2400      	movs	r4, #0
 8003c44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003c48:	4628      	mov	r0, r5
 8003c4a:	4798      	blx	r3
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	e7e0      	b.n	8003c12 <_raise_r+0x12>

08003c50 <raise>:
 8003c50:	4b02      	ldr	r3, [pc, #8]	; (8003c5c <raise+0xc>)
 8003c52:	4601      	mov	r1, r0
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	f7ff bfd3 	b.w	8003c00 <_raise_r>
 8003c5a:	bf00      	nop
 8003c5c:	20000004 	.word	0x20000004

08003c60 <_kill_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4d07      	ldr	r5, [pc, #28]	; (8003c80 <_kill_r+0x20>)
 8003c64:	2300      	movs	r3, #0
 8003c66:	4604      	mov	r4, r0
 8003c68:	4608      	mov	r0, r1
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	602b      	str	r3, [r5, #0]
 8003c6e:	f7fe f87d 	bl	8001d6c <_kill>
 8003c72:	1c43      	adds	r3, r0, #1
 8003c74:	d102      	bne.n	8003c7c <_kill_r+0x1c>
 8003c76:	682b      	ldr	r3, [r5, #0]
 8003c78:	b103      	cbz	r3, 8003c7c <_kill_r+0x1c>
 8003c7a:	6023      	str	r3, [r4, #0]
 8003c7c:	bd38      	pop	{r3, r4, r5, pc}
 8003c7e:	bf00      	nop
 8003c80:	200005e0 	.word	0x200005e0

08003c84 <_getpid_r>:
 8003c84:	f7fe b86a 	b.w	8001d5c <_getpid>

08003c88 <__sread>:
 8003c88:	b510      	push	{r4, lr}
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c90:	f000 f89c 	bl	8003dcc <_read_r>
 8003c94:	2800      	cmp	r0, #0
 8003c96:	bfab      	itete	ge
 8003c98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c9a:	89a3      	ldrhlt	r3, [r4, #12]
 8003c9c:	181b      	addge	r3, r3, r0
 8003c9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ca2:	bfac      	ite	ge
 8003ca4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ca6:	81a3      	strhlt	r3, [r4, #12]
 8003ca8:	bd10      	pop	{r4, pc}

08003caa <__swrite>:
 8003caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cae:	461f      	mov	r7, r3
 8003cb0:	898b      	ldrh	r3, [r1, #12]
 8003cb2:	05db      	lsls	r3, r3, #23
 8003cb4:	4605      	mov	r5, r0
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	4616      	mov	r6, r2
 8003cba:	d505      	bpl.n	8003cc8 <__swrite+0x1e>
 8003cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f000 f868 	bl	8003d98 <_lseek_r>
 8003cc8:	89a3      	ldrh	r3, [r4, #12]
 8003cca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cd2:	81a3      	strh	r3, [r4, #12]
 8003cd4:	4632      	mov	r2, r6
 8003cd6:	463b      	mov	r3, r7
 8003cd8:	4628      	mov	r0, r5
 8003cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cde:	f000 b817 	b.w	8003d10 <_write_r>

08003ce2 <__sseek>:
 8003ce2:	b510      	push	{r4, lr}
 8003ce4:	460c      	mov	r4, r1
 8003ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cea:	f000 f855 	bl	8003d98 <_lseek_r>
 8003cee:	1c43      	adds	r3, r0, #1
 8003cf0:	89a3      	ldrh	r3, [r4, #12]
 8003cf2:	bf15      	itete	ne
 8003cf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003cf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cfe:	81a3      	strheq	r3, [r4, #12]
 8003d00:	bf18      	it	ne
 8003d02:	81a3      	strhne	r3, [r4, #12]
 8003d04:	bd10      	pop	{r4, pc}

08003d06 <__sclose>:
 8003d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d0a:	f000 b813 	b.w	8003d34 <_close_r>
	...

08003d10 <_write_r>:
 8003d10:	b538      	push	{r3, r4, r5, lr}
 8003d12:	4d07      	ldr	r5, [pc, #28]	; (8003d30 <_write_r+0x20>)
 8003d14:	4604      	mov	r4, r0
 8003d16:	4608      	mov	r0, r1
 8003d18:	4611      	mov	r1, r2
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	602a      	str	r2, [r5, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f7fe f85b 	bl	8001dda <_write>
 8003d24:	1c43      	adds	r3, r0, #1
 8003d26:	d102      	bne.n	8003d2e <_write_r+0x1e>
 8003d28:	682b      	ldr	r3, [r5, #0]
 8003d2a:	b103      	cbz	r3, 8003d2e <_write_r+0x1e>
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	bd38      	pop	{r3, r4, r5, pc}
 8003d30:	200005e0 	.word	0x200005e0

08003d34 <_close_r>:
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	4d06      	ldr	r5, [pc, #24]	; (8003d50 <_close_r+0x1c>)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	4608      	mov	r0, r1
 8003d3e:	602b      	str	r3, [r5, #0]
 8003d40:	f7fe f867 	bl	8001e12 <_close>
 8003d44:	1c43      	adds	r3, r0, #1
 8003d46:	d102      	bne.n	8003d4e <_close_r+0x1a>
 8003d48:	682b      	ldr	r3, [r5, #0]
 8003d4a:	b103      	cbz	r3, 8003d4e <_close_r+0x1a>
 8003d4c:	6023      	str	r3, [r4, #0]
 8003d4e:	bd38      	pop	{r3, r4, r5, pc}
 8003d50:	200005e0 	.word	0x200005e0

08003d54 <_fstat_r>:
 8003d54:	b538      	push	{r3, r4, r5, lr}
 8003d56:	4d07      	ldr	r5, [pc, #28]	; (8003d74 <_fstat_r+0x20>)
 8003d58:	2300      	movs	r3, #0
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	4611      	mov	r1, r2
 8003d60:	602b      	str	r3, [r5, #0]
 8003d62:	f7fe f862 	bl	8001e2a <_fstat>
 8003d66:	1c43      	adds	r3, r0, #1
 8003d68:	d102      	bne.n	8003d70 <_fstat_r+0x1c>
 8003d6a:	682b      	ldr	r3, [r5, #0]
 8003d6c:	b103      	cbz	r3, 8003d70 <_fstat_r+0x1c>
 8003d6e:	6023      	str	r3, [r4, #0]
 8003d70:	bd38      	pop	{r3, r4, r5, pc}
 8003d72:	bf00      	nop
 8003d74:	200005e0 	.word	0x200005e0

08003d78 <_isatty_r>:
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	4d06      	ldr	r5, [pc, #24]	; (8003d94 <_isatty_r+0x1c>)
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	4604      	mov	r4, r0
 8003d80:	4608      	mov	r0, r1
 8003d82:	602b      	str	r3, [r5, #0]
 8003d84:	f7fe f861 	bl	8001e4a <_isatty>
 8003d88:	1c43      	adds	r3, r0, #1
 8003d8a:	d102      	bne.n	8003d92 <_isatty_r+0x1a>
 8003d8c:	682b      	ldr	r3, [r5, #0]
 8003d8e:	b103      	cbz	r3, 8003d92 <_isatty_r+0x1a>
 8003d90:	6023      	str	r3, [r4, #0]
 8003d92:	bd38      	pop	{r3, r4, r5, pc}
 8003d94:	200005e0 	.word	0x200005e0

08003d98 <_lseek_r>:
 8003d98:	b538      	push	{r3, r4, r5, lr}
 8003d9a:	4d07      	ldr	r5, [pc, #28]	; (8003db8 <_lseek_r+0x20>)
 8003d9c:	4604      	mov	r4, r0
 8003d9e:	4608      	mov	r0, r1
 8003da0:	4611      	mov	r1, r2
 8003da2:	2200      	movs	r2, #0
 8003da4:	602a      	str	r2, [r5, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	f7fe f85a 	bl	8001e60 <_lseek>
 8003dac:	1c43      	adds	r3, r0, #1
 8003dae:	d102      	bne.n	8003db6 <_lseek_r+0x1e>
 8003db0:	682b      	ldr	r3, [r5, #0]
 8003db2:	b103      	cbz	r3, 8003db6 <_lseek_r+0x1e>
 8003db4:	6023      	str	r3, [r4, #0]
 8003db6:	bd38      	pop	{r3, r4, r5, pc}
 8003db8:	200005e0 	.word	0x200005e0

08003dbc <_malloc_usable_size_r>:
 8003dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dc0:	1f18      	subs	r0, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	bfbc      	itt	lt
 8003dc6:	580b      	ldrlt	r3, [r1, r0]
 8003dc8:	18c0      	addlt	r0, r0, r3
 8003dca:	4770      	bx	lr

08003dcc <_read_r>:
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	4d07      	ldr	r5, [pc, #28]	; (8003dec <_read_r+0x20>)
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	4608      	mov	r0, r1
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	602a      	str	r2, [r5, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f7fd ffe0 	bl	8001da0 <_read>
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	d102      	bne.n	8003dea <_read_r+0x1e>
 8003de4:	682b      	ldr	r3, [r5, #0]
 8003de6:	b103      	cbz	r3, 8003dea <_read_r+0x1e>
 8003de8:	6023      	str	r3, [r4, #0]
 8003dea:	bd38      	pop	{r3, r4, r5, pc}
 8003dec:	200005e0 	.word	0x200005e0

08003df0 <_init>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	bf00      	nop
 8003df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003df6:	bc08      	pop	{r3}
 8003df8:	469e      	mov	lr, r3
 8003dfa:	4770      	bx	lr

08003dfc <_fini>:
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	bf00      	nop
 8003e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e02:	bc08      	pop	{r3}
 8003e04:	469e      	mov	lr, r3
 8003e06:	4770      	bx	lr
