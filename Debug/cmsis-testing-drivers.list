
cmsis-testing-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  08003ff4  08003ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045b4  080045b4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080045b4  080045b4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045b4  080045b4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b4  080045b4  000145b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045b8  080045b8  000145b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080045bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000068  08004624  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  08004624  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a4e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014fc  00000000  00000000  00027ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000420  00000000  00000000  00028fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000378  00000000  00000000  00029408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000409d  00000000  00000000  00029780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00051551  00000000  00000000  0002d81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0007ed6e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001a2c  00000000  00000000  0007edc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000e2a1  00000000  00000000  000807f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003fdc 	.word	0x08003fdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003fdc 	.word	0x08003fdc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000298:	4a04      	ldr	r2, [pc, #16]	; (80002ac <GFX_SetFont+0x1c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	6013      	str	r3, [r2, #0]
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000490 	.word	0x20000490

080002b0 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b089      	sub	sp, #36	; 0x24
 80002b4:	af02      	add	r7, sp, #8
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	4611      	mov	r1, r2
 80002bc:	461a      	mov	r2, r3
 80002be:	460b      	mov	r3, r1
 80002c0:	71fb      	strb	r3, [r7, #7]
 80002c2:	4613      	mov	r3, r2
 80002c4:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	2b7e      	cmp	r3, #126	; 0x7e
 80002ca:	f200 80a3 	bhi.w	8000414 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80002ce:	2300      	movs	r3, #0
 80002d0:	75fb      	strb	r3, [r7, #23]
 80002d2:	e096      	b.n	8000402 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80002d4:	4b51      	ldr	r3, [pc, #324]	; (800041c <GFX_DrawChar+0x16c>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	3b20      	subs	r3, #32
 80002dc:	494f      	ldr	r1, [pc, #316]	; (800041c <GFX_DrawChar+0x16c>)
 80002de:	6809      	ldr	r1, [r1, #0]
 80002e0:	3101      	adds	r1, #1
 80002e2:	7809      	ldrb	r1, [r1, #0]
 80002e4:	fb01 f103 	mul.w	r1, r1, r3
 80002e8:	7dfb      	ldrb	r3, [r7, #23]
 80002ea:	440b      	add	r3, r1
 80002ec:	3302      	adds	r3, #2
 80002ee:	4413      	add	r3, r2
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80002f4:	2300      	movs	r3, #0
 80002f6:	757b      	strb	r3, [r7, #21]
 80002f8:	e078      	b.n	80003ec <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 80002fa:	7dbb      	ldrb	r3, [r7, #22]
 80002fc:	f003 0301 	and.w	r3, r3, #1
 8000300:	2b00      	cmp	r3, #0
 8000302:	d032      	beq.n	800036a <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8000304:	4b46      	ldr	r3, [pc, #280]	; (8000420 <GFX_DrawChar+0x170>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d113      	bne.n	8000334 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 800030c:	7dfb      	ldrb	r3, [r7, #23]
 800030e:	b29a      	uxth	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	b29b      	uxth	r3, r3
 8000314:	4413      	add	r3, r2
 8000316:	b29b      	uxth	r3, r3
 8000318:	b218      	sxth	r0, r3
 800031a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800031e:	b29a      	uxth	r2, r3
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	b29b      	uxth	r3, r3
 8000324:	4413      	add	r3, r2
 8000326:	b29b      	uxth	r3, r3
 8000328:	b21b      	sxth	r3, r3
 800032a:	79ba      	ldrb	r2, [r7, #6]
 800032c:	4619      	mov	r1, r3
 800032e:	f000 fb71 	bl	8000a14 <SSD1306_DrawPixel>
 8000332:	e052      	b.n	80003da <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8000334:	7dfb      	ldrb	r3, [r7, #23]
 8000336:	4a3a      	ldr	r2, [pc, #232]	; (8000420 <GFX_DrawChar+0x170>)
 8000338:	7812      	ldrb	r2, [r2, #0]
 800033a:	fb02 f203 	mul.w	r2, r2, r3
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	18d0      	adds	r0, r2, r3
 8000342:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000346:	4a36      	ldr	r2, [pc, #216]	; (8000420 <GFX_DrawChar+0x170>)
 8000348:	7812      	ldrb	r2, [r2, #0]
 800034a:	fb02 f203 	mul.w	r2, r2, r3
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	18d1      	adds	r1, r2, r3
 8000352:	4b33      	ldr	r3, [pc, #204]	; (8000420 <GFX_DrawChar+0x170>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	b29a      	uxth	r2, r3
 8000358:	4b31      	ldr	r3, [pc, #196]	; (8000420 <GFX_DrawChar+0x170>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	b29c      	uxth	r4, r3
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	4623      	mov	r3, r4
 8000364:	f000 f9a3 	bl	80006ae <GFX_DrawFillRectangle>
 8000368:	e037      	b.n	80003da <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800036a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800036e:	2b00      	cmp	r3, #0
 8000370:	d133      	bne.n	80003da <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8000372:	4b2b      	ldr	r3, [pc, #172]	; (8000420 <GFX_DrawChar+0x170>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d114      	bne.n	80003a4 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 800037a:	7dfb      	ldrb	r3, [r7, #23]
 800037c:	b29a      	uxth	r2, r3
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	b29b      	uxth	r3, r3
 8000382:	4413      	add	r3, r2
 8000384:	b29b      	uxth	r3, r3
 8000386:	b218      	sxth	r0, r3
 8000388:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800038c:	b29a      	uxth	r2, r3
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	b29b      	uxth	r3, r3
 8000392:	4413      	add	r3, r2
 8000394:	b29b      	uxth	r3, r3
 8000396:	b21b      	sxth	r3, r3
 8000398:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800039c:	4619      	mov	r1, r3
 800039e:	f000 fb39 	bl	8000a14 <SSD1306_DrawPixel>
 80003a2:	e01a      	b.n	80003da <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80003a4:	7dfb      	ldrb	r3, [r7, #23]
 80003a6:	4a1e      	ldr	r2, [pc, #120]	; (8000420 <GFX_DrawChar+0x170>)
 80003a8:	7812      	ldrb	r2, [r2, #0]
 80003aa:	fb02 f203 	mul.w	r2, r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	18d0      	adds	r0, r2, r3
 80003b2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80003b6:	4a1a      	ldr	r2, [pc, #104]	; (8000420 <GFX_DrawChar+0x170>)
 80003b8:	7812      	ldrb	r2, [r2, #0]
 80003ba:	fb02 f203 	mul.w	r2, r2, r3
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	18d1      	adds	r1, r2, r3
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <GFX_DrawChar+0x170>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <GFX_DrawChar+0x170>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	b29c      	uxth	r4, r3
 80003ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80003d2:	9300      	str	r3, [sp, #0]
 80003d4:	4623      	mov	r3, r4
 80003d6:	f000 f96a 	bl	80006ae <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80003da:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	3301      	adds	r3, #1
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	757b      	strb	r3, [r7, #21]
 80003e6:	7dbb      	ldrb	r3, [r7, #22]
 80003e8:	085b      	lsrs	r3, r3, #1
 80003ea:	75bb      	strb	r3, [r7, #22]
 80003ec:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80003f0:	4a0a      	ldr	r2, [pc, #40]	; (800041c <GFX_DrawChar+0x16c>)
 80003f2:	6812      	ldr	r2, [r2, #0]
 80003f4:	7812      	ldrb	r2, [r2, #0]
 80003f6:	4293      	cmp	r3, r2
 80003f8:	f6ff af7f 	blt.w	80002fa <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80003fc:	7dfb      	ldrb	r3, [r7, #23]
 80003fe:	3301      	adds	r3, #1
 8000400:	75fb      	strb	r3, [r7, #23]
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <GFX_DrawChar+0x16c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	3301      	adds	r3, #1
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	7dfa      	ldrb	r2, [r7, #23]
 800040c:	429a      	cmp	r2, r3
 800040e:	f4ff af61 	bcc.w	80002d4 <GFX_DrawChar+0x24>
 8000412:	e000      	b.n	8000416 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8000414:	bf00      	nop
            }
        }
    }
}
 8000416:	371c      	adds	r7, #28
 8000418:	46bd      	mov	sp, r7
 800041a:	bd90      	pop	{r4, r7, pc}
 800041c:	20000490 	.word	0x20000490
 8000420:	20000000 	.word	0x20000000

08000424 <GFX_DrawString>:


void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af02      	add	r7, sp, #8
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	607a      	str	r2, [r7, #4]
 8000430:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 800043c:	e03e      	b.n	80004bc <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 800043e:	78f9      	ldrb	r1, [r7, #3]
 8000440:	7cfa      	ldrb	r2, [r7, #19]
 8000442:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000446:	9300      	str	r3, [sp, #0]
 8000448:	460b      	mov	r3, r1
 800044a:	68b9      	ldr	r1, [r7, #8]
 800044c:	6978      	ldr	r0, [r7, #20]
 800044e:	f7ff ff2f 	bl	80002b0 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8000452:	4b20      	ldr	r3, [pc, #128]	; (80004d4 <GFX_DrawString+0xb0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	461a      	mov	r2, r3
 800045c:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <GFX_DrawString+0xb4>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	fb03 f302 	mul.w	r3, r3, r2
 8000464:	3301      	adds	r3, #1
 8000466:	697a      	ldr	r2, [r7, #20]
 8000468:	4413      	add	r3, r2
 800046a:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 800046c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d120      	bne.n	80004b6 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8000474:	2300      	movs	r3, #0
 8000476:	74bb      	strb	r3, [r7, #18]
 8000478:	e012      	b.n	80004a0 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	b29b      	uxth	r3, r3
 800047e:	3b01      	subs	r3, #1
 8000480:	b29b      	uxth	r3, r3
 8000482:	b218      	sxth	r0, r3
 8000484:	7cbb      	ldrb	r3, [r7, #18]
 8000486:	b29a      	uxth	r2, r3
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	b29b      	uxth	r3, r3
 800048c:	4413      	add	r3, r2
 800048e:	b29b      	uxth	r3, r3
 8000490:	b21b      	sxth	r3, r3
 8000492:	2200      	movs	r2, #0
 8000494:	4619      	mov	r1, r3
 8000496:	f000 fabd 	bl	8000a14 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 800049a:	7cbb      	ldrb	r3, [r7, #18]
 800049c:	3301      	adds	r3, #1
 800049e:	74bb      	strb	r3, [r7, #18]
 80004a0:	7cba      	ldrb	r2, [r7, #18]
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <GFX_DrawString+0xb0>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	4619      	mov	r1, r3
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <GFX_DrawString+0xb4>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	fb03 f301 	mul.w	r3, r3, r1
 80004b2:	429a      	cmp	r2, r3
 80004b4:	dbe1      	blt.n	800047a <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	607a      	str	r2, [r7, #4]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1ba      	bne.n	800043e <GFX_DrawString+0x1a>
	}
}
 80004c8:	bf00      	nop
 80004ca:	bf00      	nop
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000490 	.word	0x20000490
 80004d8:	20000000 	.word	0x20000000

080004dc <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08c      	sub	sp, #48	; 0x30
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
 80004e8:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80004ea:	683a      	ldr	r2, [r7, #0]
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80004f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80004f8:	6879      	ldr	r1, [r7, #4]
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	1acb      	subs	r3, r1, r3
 80004fe:	2b00      	cmp	r3, #0
 8000500:	bfb8      	it	lt
 8000502:	425b      	neglt	r3, r3
 8000504:	429a      	cmp	r2, r3
 8000506:	bfcc      	ite	gt
 8000508:	2301      	movgt	r3, #1
 800050a:	2300      	movle	r3, #0
 800050c:	b2db      	uxtb	r3, r3
 800050e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8000510:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000514:	2b00      	cmp	r3, #0
 8000516:	d00b      	beq.n	8000530 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000522:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	623b      	str	r3, [r7, #32]
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	6a3b      	ldr	r3, [r7, #32]
 800052e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dd0b      	ble.n	8000550 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	61fb      	str	r3, [r7, #28]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	61bb      	str	r3, [r7, #24]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	b29a      	uxth	r2, r3
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	b29b      	uxth	r3, r3
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	b29b      	uxth	r3, r3
 800055c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	bfb8      	it	lt
 8000568:	425b      	neglt	r3, r3
 800056a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 800056c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000570:	0fda      	lsrs	r2, r3, #31
 8000572:	4413      	add	r3, r2
 8000574:	105b      	asrs	r3, r3, #1
 8000576:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000578:	68ba      	ldr	r2, [r7, #8]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	da02      	bge.n	8000586 <GFX_WriteLine+0xaa>
	        ystep = 1;
 8000580:	2301      	movs	r3, #1
 8000582:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000584:	e030      	b.n	80005e8 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 8000586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800058a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 800058c:	e02c      	b.n	80005e8 <GFX_WriteLine+0x10c>
	        if (steep) {
 800058e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000592:	2b00      	cmp	r3, #0
 8000594:	d009      	beq.n	80005aa <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	b21b      	sxth	r3, r3
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	b211      	sxth	r1, r2
 800059e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fa36 	bl	8000a14 <SSD1306_DrawPixel>
 80005a8:	e008      	b.n	80005bc <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	b21b      	sxth	r3, r3
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	b211      	sxth	r1, r2
 80005b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fa2c 	bl	8000a14 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80005bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80005be:	8abb      	ldrh	r3, [r7, #20]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80005c6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	da09      	bge.n	80005e2 <GFX_WriteLine+0x106>
	            y_start += ystep;
 80005ce:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	4413      	add	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80005d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80005da:	8afb      	ldrh	r3, [r7, #22]
 80005dc:	4413      	add	r3, r2
 80005de:	b29b      	uxth	r3, r3
 80005e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	3301      	adds	r3, #1
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	ddce      	ble.n	800058e <GFX_WriteLine+0xb2>
	        }
	    }
}
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	3730      	adds	r7, #48	; 0x30
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b086      	sub	sp, #24
 80005fe:	af02      	add	r7, sp, #8
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
 8000606:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	1e5a      	subs	r2, r3, #1
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	4613      	mov	r3, r2
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	68b9      	ldr	r1, [r7, #8]
 800061a:	68f8      	ldr	r0, [r7, #12]
 800061c:	f7ff ff5e 	bl	80004dc <GFX_WriteLine>
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af02      	add	r7, sp, #8
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
 8000634:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4413      	add	r3, r2
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	78fb      	ldrb	r3, [r7, #3]
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	68b9      	ldr	r1, [r7, #8]
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f7ff ff48 	bl	80004dc <GFX_WriteLine>
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	4611      	mov	r1, r2
 8000660:	461a      	mov	r2, r3
 8000662:	460b      	mov	r3, r1
 8000664:	80fb      	strh	r3, [r7, #6]
 8000666:	4613      	mov	r3, r2
 8000668:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 800066a:	88fa      	ldrh	r2, [r7, #6]
 800066c:	7e3b      	ldrb	r3, [r7, #24]
 800066e:	68b9      	ldr	r1, [r7, #8]
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ffd9 	bl	8000628 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 8000676:	88ba      	ldrh	r2, [r7, #4]
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	4413      	add	r3, r2
 800067c:	1e59      	subs	r1, r3, #1
 800067e:	88fa      	ldrh	r2, [r7, #6]
 8000680:	7e3b      	ldrb	r3, [r7, #24]
 8000682:	68f8      	ldr	r0, [r7, #12]
 8000684:	f7ff ffd0 	bl	8000628 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 8000688:	88ba      	ldrh	r2, [r7, #4]
 800068a:	7e3b      	ldrb	r3, [r7, #24]
 800068c:	68b9      	ldr	r1, [r7, #8]
 800068e:	68f8      	ldr	r0, [r7, #12]
 8000690:	f7ff ffb3 	bl	80005fa <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 8000694:	88fa      	ldrh	r2, [r7, #6]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	4413      	add	r3, r2
 800069a:	1e58      	subs	r0, r3, #1
 800069c:	88ba      	ldrh	r2, [r7, #4]
 800069e:	7e3b      	ldrb	r3, [r7, #24]
 80006a0:	68b9      	ldr	r1, [r7, #8]
 80006a2:	f7ff ffaa 	bl	80005fa <GFX_DrawFastVLine>

}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b086      	sub	sp, #24
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	60f8      	str	r0, [r7, #12]
 80006b6:	60b9      	str	r1, [r7, #8]
 80006b8:	4611      	mov	r1, r2
 80006ba:	461a      	mov	r2, r3
 80006bc:	460b      	mov	r3, r1
 80006be:	80fb      	strh	r3, [r7, #6]
 80006c0:	4613      	mov	r3, r2
 80006c2:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	e009      	b.n	80006de <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 80006ca:	88ba      	ldrh	r2, [r7, #4]
 80006cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	6978      	ldr	r0, [r7, #20]
 80006d4:	f7ff ff91 	bl	80005fa <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	3301      	adds	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	88fa      	ldrh	r2, [r7, #6]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	4413      	add	r3, r2
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	dbef      	blt.n	80006ca <GFX_DrawFillRectangle+0x1c>
    }

}
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <GFX_DrawFillCircleHelper>:
    }
}
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, uint8_t color)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	4611      	mov	r1, r2
 8000700:	461a      	mov	r2, r3
 8000702:	460b      	mov	r3, r1
 8000704:	80fb      	strh	r3, [r7, #6]
 8000706:	4613      	mov	r3, r2
 8000708:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	f1c3 0301 	rsb	r3, r3, #1
 8000710:	b29b      	uxth	r3, r3
 8000712:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8000714:	2301      	movs	r3, #1
 8000716:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8000718:	88fb      	ldrh	r3, [r7, #6]
 800071a:	461a      	mov	r2, r3
 800071c:	03d2      	lsls	r2, r2, #15
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	b29b      	uxth	r3, r3
 8000724:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 800072e:	e077      	b.n	8000820 <GFX_DrawFillCircleHelper+0x12c>
        if (f >= 0) {
 8000730:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000734:	2b00      	cmp	r3, #0
 8000736:	db0e      	blt.n	8000756 <GFX_DrawFillCircleHelper+0x62>
            y--;
 8000738:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800073c:	b29b      	uxth	r3, r3
 800073e:	3b01      	subs	r3, #1
 8000740:	b29b      	uxth	r3, r3
 8000742:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8000744:	8b7b      	ldrh	r3, [r7, #26]
 8000746:	3302      	adds	r3, #2
 8000748:	b29b      	uxth	r3, r3
 800074a:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 800074c:	8bfa      	ldrh	r2, [r7, #30]
 800074e:	8b7b      	ldrh	r3, [r7, #26]
 8000750:	4413      	add	r3, r2
 8000752:	b29b      	uxth	r3, r3
 8000754:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8000756:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800075a:	b29b      	uxth	r3, r3
 800075c:	3301      	adds	r3, #1
 800075e:	b29b      	uxth	r3, r3
 8000760:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8000762:	8bbb      	ldrh	r3, [r7, #28]
 8000764:	3302      	adds	r3, #2
 8000766:	b29b      	uxth	r3, r3
 8000768:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800076a:	8bfa      	ldrh	r2, [r7, #30]
 800076c:	8bbb      	ldrh	r3, [r7, #28]
 800076e:	4413      	add	r3, r2
 8000770:	b29b      	uxth	r3, r3
 8000772:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8000774:	797b      	ldrb	r3, [r7, #5]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	2b00      	cmp	r3, #0
 800077c:	d025      	beq.n	80007ca <GFX_DrawFillCircleHelper+0xd6>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 800077e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	18d0      	adds	r0, r2, r3
 8000786:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	1ad1      	subs	r1, r2, r3
 800078e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800079a:	441a      	add	r2, r3
 800079c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007a0:	f7ff ff2b 	bl	80005fa <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80007a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	18d0      	adds	r0, r2, r3
 80007ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	1ad1      	subs	r1, r2, r3
 80007b4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80007c0:	441a      	add	r2, r3
 80007c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007c6:	f7ff ff18 	bl	80005fa <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80007ca:	797b      	ldrb	r3, [r7, #5]
 80007cc:	f003 0302 	and.w	r3, r3, #2
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d025      	beq.n	8000820 <GFX_DrawFillCircleHelper+0x12c>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80007d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	1ad0      	subs	r0, r2, r3
 80007dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	1ad1      	subs	r1, r2, r3
 80007e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80007f0:	441a      	add	r2, r3
 80007f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007f6:	f7ff ff00 	bl	80005fa <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 80007fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	1ad0      	subs	r0, r2, r3
 8000802:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	1ad1      	subs	r1, r2, r3
 800080a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000816:	441a      	add	r2, r3
 8000818:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800081c:	f7ff feed 	bl	80005fa <GFX_DrawFastVLine>
    while (x<y) {
 8000820:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000824:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000828:	429a      	cmp	r2, r3
 800082a:	db81      	blt.n	8000730 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800082c:	bf00      	nop
 800082e:	bf00      	nop
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <GFX_DrawFillRoundRectangle>:
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
}
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, uint8_t color)
{
 8000836:	b590      	push	{r4, r7, lr}
 8000838:	b087      	sub	sp, #28
 800083a:	af02      	add	r7, sp, #8
 800083c:	60f8      	str	r0, [r7, #12]
 800083e:	60b9      	str	r1, [r7, #8]
 8000840:	4611      	mov	r1, r2
 8000842:	461a      	mov	r2, r3
 8000844:	460b      	mov	r3, r1
 8000846:	80fb      	strh	r3, [r7, #6]
 8000848:	4613      	mov	r3, r2
 800084a:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 800084c:	8c3a      	ldrh	r2, [r7, #32]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	18d0      	adds	r0, r2, r3
 8000852:	8c3b      	ldrh	r3, [r7, #32]
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	b29b      	uxth	r3, r3
 8000858:	88fa      	ldrh	r2, [r7, #6]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	b29a      	uxth	r2, r3
 800085e:	88b9      	ldrh	r1, [r7, #4]
 8000860:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	460b      	mov	r3, r1
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	f7ff ff20 	bl	80006ae <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 800086e:	88fa      	ldrh	r2, [r7, #6]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	441a      	add	r2, r3
 8000874:	8c3b      	ldrh	r3, [r7, #32]
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	1e58      	subs	r0, r3, #1
 800087a:	8c3a      	ldrh	r2, [r7, #32]
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	18d1      	adds	r1, r2, r3
 8000880:	8c3b      	ldrh	r3, [r7, #32]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	b29b      	uxth	r3, r3
 8000886:	88ba      	ldrh	r2, [r7, #4]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	b29b      	uxth	r3, r3
 800088c:	3b01      	subs	r3, #1
 800088e:	b29b      	uxth	r3, r3
 8000890:	b21b      	sxth	r3, r3
 8000892:	8c3c      	ldrh	r4, [r7, #32]
 8000894:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000898:	9201      	str	r2, [sp, #4]
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2301      	movs	r3, #1
 800089e:	4622      	mov	r2, r4
 80008a0:	f7ff ff28 	bl	80006f4 <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80008a4:	8c3a      	ldrh	r2, [r7, #32]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	18d0      	adds	r0, r2, r3
 80008aa:	8c3a      	ldrh	r2, [r7, #32]
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	18d1      	adds	r1, r2, r3
 80008b0:	8c3b      	ldrh	r3, [r7, #32]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	88ba      	ldrh	r2, [r7, #4]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	3b01      	subs	r3, #1
 80008be:	b29b      	uxth	r3, r3
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	8c3c      	ldrh	r4, [r7, #32]
 80008c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80008c8:	9201      	str	r2, [sp, #4]
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2302      	movs	r3, #2
 80008ce:	4622      	mov	r2, r4
 80008d0:	f7ff ff10 	bl	80006f4 <GFX_DrawFillCircleHelper>
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd90      	pop	{r4, r7, pc}

080008dc <GFX_Image>:
	}
}
#endif
#if STM32_USING ==1
void GFX_Image(int x, int y, const uint8_t *img, uint8_t w, uint8_t h, uint8_t color)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
 80008e8:	70fb      	strb	r3, [r7, #3]
	uint8_t i, j, byteWidth = (w+7)/8;
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	3307      	adds	r3, #7
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	da00      	bge.n	80008f4 <GFX_Image+0x18>
 80008f2:	3307      	adds	r3, #7
 80008f4:	10db      	asrs	r3, r3, #3
 80008f6:	757b      	strb	r3, [r7, #21]

	for(j = 0; j < h; j++)
 80008f8:	2300      	movs	r3, #0
 80008fa:	75bb      	strb	r3, [r7, #22]
 80008fc:	e035      	b.n	800096a <GFX_Image+0x8e>
	{
		for(i = 0; i < w; i++)
 80008fe:	2300      	movs	r3, #0
 8000900:	75fb      	strb	r3, [r7, #23]
 8000902:	e02b      	b.n	800095c <GFX_Image+0x80>
		{
			if(img[j *byteWidth + i /8] & (128 >> (i&7)) )
 8000904:	7dbb      	ldrb	r3, [r7, #22]
 8000906:	7d7a      	ldrb	r2, [r7, #21]
 8000908:	fb02 f303 	mul.w	r3, r2, r3
 800090c:	7dfa      	ldrb	r2, [r7, #23]
 800090e:	08d2      	lsrs	r2, r2, #3
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	4413      	add	r3, r2
 8000914:	461a      	mov	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	7dfb      	ldrb	r3, [r7, #23]
 8000920:	f003 0307 	and.w	r3, r3, #7
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	fa42 f303 	asr.w	r3, r2, r3
 800092a:	400b      	ands	r3, r1
 800092c:	2b00      	cmp	r3, #0
 800092e:	d012      	beq.n	8000956 <GFX_Image+0x7a>
				GFX_DrawPixel(x+i, y+j, color);
 8000930:	7dfb      	ldrb	r3, [r7, #23]
 8000932:	b29a      	uxth	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	b29b      	uxth	r3, r3
 8000938:	4413      	add	r3, r2
 800093a:	b29b      	uxth	r3, r3
 800093c:	b218      	sxth	r0, r3
 800093e:	7dbb      	ldrb	r3, [r7, #22]
 8000940:	b29a      	uxth	r2, r3
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	b29b      	uxth	r3, r3
 8000946:	4413      	add	r3, r2
 8000948:	b29b      	uxth	r3, r3
 800094a:	b21b      	sxth	r3, r3
 800094c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	f000 f85f 	bl	8000a14 <SSD1306_DrawPixel>
		for(i = 0; i < w; i++)
 8000956:	7dfb      	ldrb	r3, [r7, #23]
 8000958:	3301      	adds	r3, #1
 800095a:	75fb      	strb	r3, [r7, #23]
 800095c:	7dfa      	ldrb	r2, [r7, #23]
 800095e:	78fb      	ldrb	r3, [r7, #3]
 8000960:	429a      	cmp	r2, r3
 8000962:	d3cf      	bcc.n	8000904 <GFX_Image+0x28>
	for(j = 0; j < h; j++)
 8000964:	7dbb      	ldrb	r3, [r7, #22]
 8000966:	3301      	adds	r3, #1
 8000968:	75bb      	strb	r3, [r7, #22]
 800096a:	7dba      	ldrb	r2, [r7, #22]
 800096c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000970:	429a      	cmp	r2, r3
 8000972:	d3c4      	bcc.n	80008fe <GFX_Image+0x22>
		}
	}
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <SSD1306_Command>:

static uint8_t buffer [SSD1306_BUFFERSIZE];


void SSD1306_Command(uint8_t Command)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af02      	add	r7, sp, #8
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
	i2c_transmit(p_oled_i2c, SSD1306_ADDRESS, SSD1306_REG_COMMAND, &Command, 1);
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SSD1306_Command+0x24>)
 800098c:	6818      	ldr	r0, [r3, #0]
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	2201      	movs	r2, #1
 8000992:	9200      	str	r2, [sp, #0]
 8000994:	2200      	movs	r2, #0
 8000996:	213c      	movs	r1, #60	; 0x3c
 8000998:	f001 ff97 	bl	80028ca <i2c_transmit>

}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000494 	.word	0x20000494

080009a8 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	807b      	strh	r3, [r7, #2]
	i2c_transmit(p_oled_i2c, SSD1306_ADDRESS , SSD1306_REG_DATA, Data, Size);
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <SSD1306_Data+0x28>)
 80009b6:	6818      	ldr	r0, [r3, #0]
 80009b8:	887b      	ldrh	r3, [r7, #2]
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2240      	movs	r2, #64	; 0x40
 80009c0:	213c      	movs	r1, #60	; 0x3c
 80009c2:	f001 ff82 	bl	80028ca <i2c_transmit>

}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000494 	.word	0x20000494

080009d4 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <SSD1306_Clear+0x16>
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d007      	beq.n	80009f8 <SSD1306_Clear+0x24>

	case YELLOWBLUE:
		memset(buffer,0xFF,SSD1306_BUFFERSIZE);
		break;
	}
}
 80009e8:	e00d      	b.n	8000a06 <SSD1306_Clear+0x32>
		memset(buffer,0x00,SSD1306_BUFFERSIZE);
 80009ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ee:	2100      	movs	r1, #0
 80009f0:	4807      	ldr	r0, [pc, #28]	; (8000a10 <SSD1306_Clear+0x3c>)
 80009f2:	f002 f917 	bl	8002c24 <memset>
		break;
 80009f6:	e006      	b.n	8000a06 <SSD1306_Clear+0x32>
		memset(buffer,0xFF,SSD1306_BUFFERSIZE);
 80009f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009fc:	21ff      	movs	r1, #255	; 0xff
 80009fe:	4804      	ldr	r0, [pc, #16]	; (8000a10 <SSD1306_Clear+0x3c>)
 8000a00:	f002 f910 	bl	8002c24 <memset>
		break;
 8000a04:	bf00      	nop
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000084 	.word	0x20000084

08000a14 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t color) {
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]
 8000a1e:	460b      	mov	r3, r1
 8000a20:	80bb      	strh	r3, [r7, #4]
 8000a22:	4613      	mov	r3, r2
 8000a24:	70fb      	strb	r3, [r7, #3]

	if ((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDWIDTH))
 8000a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f2c0 8087 	blt.w	8000b3e <SSD1306_DrawPixel+0x12a>
 8000a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a34:	2b7f      	cmp	r3, #127	; 0x7f
 8000a36:	f300 8082 	bgt.w	8000b3e <SSD1306_DrawPixel+0x12a>
 8000a3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	db7d      	blt.n	8000b3e <SSD1306_DrawPixel+0x12a>
 8000a42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a46:	2b7f      	cmp	r3, #127	; 0x7f
 8000a48:	dc79      	bgt.n	8000b3e <SSD1306_DrawPixel+0x12a>
		return;
    switch (color) {
 8000a4a:	78fb      	ldrb	r3, [r7, #3]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d051      	beq.n	8000af4 <SSD1306_DrawPixel+0xe0>
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	dc75      	bgt.n	8000b40 <SSD1306_DrawPixel+0x12c>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d026      	beq.n	8000aa6 <SSD1306_DrawPixel+0x92>
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d171      	bne.n	8000b40 <SSD1306_DrawPixel+0x12c>
    case SSD1306_COLOR_YELLOWBLUE:
    //buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7)); // byte 0 on the left side near GND
    buffer[(y/8) * SSD1306_LCDWIDTH + (SSD1306_LCDWIDTH - 1 - x)] |= (1 << (y & 7)); //  byte 0 on the right side near SDA
 8000a5c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	da00      	bge.n	8000a66 <SSD1306_DrawPixel+0x52>
 8000a64:	3307      	adds	r3, #7
 8000a66:	10db      	asrs	r3, r3, #3
 8000a68:	b218      	sxth	r0, r3
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	01da      	lsls	r2, r3, #7
 8000a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a72:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000a76:	4413      	add	r3, r2
 8000a78:	4a34      	ldr	r2, [pc, #208]	; (8000b4c <SSD1306_DrawPixel+0x138>)
 8000a7a:	5cd3      	ldrb	r3, [r2, r3]
 8000a7c:	b25a      	sxtb	r2, r3
 8000a7e:	88bb      	ldrh	r3, [r7, #4]
 8000a80:	f003 0307 	and.w	r3, r3, #7
 8000a84:	2101      	movs	r1, #1
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	b25b      	sxtb	r3, r3
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	b259      	sxtb	r1, r3
 8000a90:	4603      	mov	r3, r0
 8000a92:	01da      	lsls	r2, r3, #7
 8000a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a98:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000a9c:	4413      	add	r3, r2
 8000a9e:	b2c9      	uxtb	r1, r1
 8000aa0:	4a2a      	ldr	r2, [pc, #168]	; (8000b4c <SSD1306_DrawPixel+0x138>)
 8000aa2:	54d1      	strb	r1, [r2, r3]

      break;
 8000aa4:	e04c      	b.n	8000b40 <SSD1306_DrawPixel+0x12c>
    case SSD1306_COLOR_BLACK:
      //buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
    	buffer[(y/8) * SSD1306_LCDWIDTH + (SSD1306_LCDWIDTH - 1 - x)] &= ~(1 << (y & 7));
 8000aa6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	da00      	bge.n	8000ab0 <SSD1306_DrawPixel+0x9c>
 8000aae:	3307      	adds	r3, #7
 8000ab0:	10db      	asrs	r3, r3, #3
 8000ab2:	b218      	sxth	r0, r3
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	01da      	lsls	r2, r3, #7
 8000ab8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000abc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <SSD1306_DrawPixel+0x138>)
 8000ac4:	5cd3      	ldrb	r3, [r2, r3]
 8000ac6:	b25a      	sxtb	r2, r3
 8000ac8:	88bb      	ldrh	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	2101      	movs	r1, #1
 8000ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad4:	b25b      	sxtb	r3, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	b25b      	sxtb	r3, r3
 8000ada:	4013      	ands	r3, r2
 8000adc:	b259      	sxtb	r1, r3
 8000ade:	4603      	mov	r3, r0
 8000ae0:	01da      	lsls	r2, r3, #7
 8000ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ae6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000aea:	4413      	add	r3, r2
 8000aec:	b2c9      	uxtb	r1, r1
 8000aee:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <SSD1306_DrawPixel+0x138>)
 8000af0:	54d1      	strb	r1, [r2, r3]
      break;
 8000af2:	e025      	b.n	8000b40 <SSD1306_DrawPixel+0x12c>
    case SSD1306_INVERSE:
      //buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
    	buffer[(y/8) * SSD1306_LCDWIDTH + (SSD1306_LCDWIDTH - 1 - x)] ^= (1 << (y & 7));
 8000af4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	da00      	bge.n	8000afe <SSD1306_DrawPixel+0xea>
 8000afc:	3307      	adds	r3, #7
 8000afe:	10db      	asrs	r3, r3, #3
 8000b00:	b218      	sxth	r0, r3
 8000b02:	4603      	mov	r3, r0
 8000b04:	01da      	lsls	r2, r3, #7
 8000b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b0a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <SSD1306_DrawPixel+0x138>)
 8000b12:	5cd3      	ldrb	r3, [r2, r3]
 8000b14:	b25a      	sxtb	r2, r3
 8000b16:	88bb      	ldrh	r3, [r7, #4]
 8000b18:	f003 0307 	and.w	r3, r3, #7
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	4053      	eors	r3, r2
 8000b26:	b259      	sxtb	r1, r3
 8000b28:	4603      	mov	r3, r0
 8000b2a:	01da      	lsls	r2, r3, #7
 8000b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b30:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000b34:	4413      	add	r3, r2
 8000b36:	b2c9      	uxtb	r1, r1
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <SSD1306_DrawPixel+0x138>)
 8000b3a:	54d1      	strb	r1, [r2, r3]
      break;
 8000b3c:	e000      	b.n	8000b40 <SSD1306_DrawPixel+0x12c>
		return;
 8000b3e:	bf00      	nop
    }
  }
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000084 	.word	0x20000084

08000b50 <SSD1306_Display>:


void SSD1306_Display(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

	  SSD1306_Command(SSD1306_PAGEADDR);
 8000b54:	2022      	movs	r0, #34	; 0x22
 8000b56:	f7ff ff13 	bl	8000980 <SSD1306_Command>
	  SSD1306_Command(0);				// Page start address
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f7ff ff10 	bl	8000980 <SSD1306_Command>
	  SSD1306_Command(0xFF);				// Page end (not really, but works here)
 8000b60:	20ff      	movs	r0, #255	; 0xff
 8000b62:	f7ff ff0d 	bl	8000980 <SSD1306_Command>
	  SSD1306_Command(SSD1306_COLUMNADDR);
 8000b66:	2021      	movs	r0, #33	; 0x21
 8000b68:	f7ff ff0a 	bl	8000980 <SSD1306_Command>
	  SSD1306_Command(0);				// Column start address
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff ff07 	bl	8000980 <SSD1306_Command>
	  SSD1306_Command(SSD1306_LCDWIDTH - 1); 		// Column end address
 8000b72:	207f      	movs	r0, #127	; 0x7f
 8000b74:	f7ff ff04 	bl	8000980 <SSD1306_Command>

	  SSD1306_Data(buffer,SSD1306_BUFFERSIZE);
 8000b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <SSD1306_Display+0x38>)
 8000b7e:	f7ff ff13 	bl	80009a8 <SSD1306_Data>


}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000084 	.word	0x20000084

08000b8c <SSD1306_Init>:
void SSD1306_Init(i2c_handle_t *i2c)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	p_oled_i2c = i2c;
 8000b94:	4a2a      	ldr	r2, [pc, #168]	; (8000c40 <SSD1306_Init+0xb4>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8000b9a:	20ae      	movs	r0, #174	; 0xae
 8000b9c:	f7ff fef0 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8000ba0:	20d5      	movs	r0, #213	; 0xd5
 8000ba2:	f7ff feed 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0x80);
 8000ba6:	2080      	movs	r0, #128	; 0x80
 8000ba8:	f7ff feea 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETMULTIPLEX);
 8000bac:	20a8      	movs	r0, #168	; 0xa8
 8000bae:	f7ff fee7 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8000bb2:	203f      	movs	r0, #63	; 0x3f
 8000bb4:	f7ff fee4 	bl	8000980 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8000bb8:	20d3      	movs	r0, #211	; 0xd3
 8000bba:	f7ff fee1 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0x00);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fede 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0x80);
 8000bc4:	2080      	movs	r0, #128	; 0x80
 8000bc6:	f7ff fedb 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_CHARGEPUMP);
 8000bca:	208d      	movs	r0, #141	; 0x8d
 8000bcc:	f7ff fed8 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0x14);
 8000bd0:	2014      	movs	r0, #20
 8000bd2:	f7ff fed5 	bl	8000980 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE);
 8000bd6:	2020      	movs	r0, #32
 8000bd8:	f7ff fed2 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0x00);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fecf 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP);
 8000be2:	20a0      	movs	r0, #160	; 0xa0
 8000be4:	f7ff fecc 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 8000be8:	20c8      	movs	r0, #200	; 0xc8
 8000bea:	f7ff fec9 	bl	8000980 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8000bee:	20da      	movs	r0, #218	; 0xda
 8000bf0:	f7ff fec6 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0x12);
 8000bf4:	2012      	movs	r0, #18
 8000bf6:	f7ff fec3 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8000bfa:	2081      	movs	r0, #129	; 0x81
 8000bfc:	f7ff fec0 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0xFF);
 8000c00:	20ff      	movs	r0, #255	; 0xff
 8000c02:	f7ff febd 	bl	8000980 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8000c06:	20d9      	movs	r0, #217	; 0xd9
 8000c08:	f7ff feba 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0xF1);
 8000c0c:	20f1      	movs	r0, #241	; 0xf1
 8000c0e:	f7ff feb7 	bl	8000980 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT);
 8000c12:	20db      	movs	r0, #219	; 0xdb
 8000c14:	f7ff feb4 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(0x40);
 8000c18:	2040      	movs	r0, #64	; 0x40
 8000c1a:	f7ff feb1 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME);
 8000c1e:	20a4      	movs	r0, #164	; 0xa4
 8000c20:	f7ff feae 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);
 8000c24:	20a6      	movs	r0, #166	; 0xa6
 8000c26:	f7ff feab 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8000c2a:	202e      	movs	r0, #46	; 0x2e
 8000c2c:	f7ff fea8 	bl	8000980 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYON);
 8000c30:	20af      	movs	r0, #175	; 0xaf
 8000c32:	f7ff fea5 	bl	8000980 <SSD1306_Command>


}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000494 	.word	0x20000494

08000c44 <delay>:

snek_game_t g_snek_game;

// to be deleted when timer implemented
void delay(uint32_t value)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < value; i++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	e002      	b.n	8000c58 <delay+0x14>
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3301      	adds	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d3f8      	bcc.n	8000c52 <delay+0xe>
	{

	}
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <snek_ui_draw_mainmenu_button>:

//  snek_ui - functions used to draw user interface

static void snek_ui_draw_mainmenu_button(uint8_t *p_text, uint8_t pos, uint8_t select)
{
 8000c6e:	b590      	push	{r4, r7, lr}
 8000c70:	b087      	sub	sp, #28
 8000c72:	af02      	add	r7, sp, #8
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	460b      	mov	r3, r1
 8000c78:	70fb      	strb	r3, [r7, #3]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	70bb      	strb	r3, [r7, #2]
	// lcd width - char size - spaces between chars
	uint8_t string_start_pos = ((SSD1306_LCDWIDTH - (strlen((char*) p_text) * 5) - strlen((char*) p_text))) / 2;
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff faae 	bl	80001e0 <strlen>
 8000c84:	4602      	mov	r2, r0
 8000c86:	4613      	mov	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	189c      	adds	r4, r3, r2
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff faa7 	bl	80001e0 <strlen>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4423      	add	r3, r4
 8000c96:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000c9a:	085b      	lsrs	r3, r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]

	GFX_DrawFillRectangle(0, pos * SNEK_UI_BUTTON_OFFSET, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, BLACK);
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	011b      	lsls	r3, r3, #4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	230f      	movs	r3, #15
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff fcfe 	bl	80006ae <GFX_DrawFillRectangle>
	//draw selected button
	if (select)
 8000cb2:	78bb      	ldrb	r3, [r7, #2]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d015      	beq.n	8000ce4 <snek_ui_draw_mainmenu_button+0x76>
	{
		GFX_DrawFillRectangle(0, pos * SNEK_UI_BUTTON_OFFSET, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, YELLOWBLUE);
 8000cb8:	78fb      	ldrb	r3, [r7, #3]
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fcf1 	bl	80006ae <GFX_DrawFillRectangle>
		GFX_DrawString(string_start_pos, (pos * SNEK_UI_BUTTON_OFFSET) + SNEK_UI_CHAR_OFFSET, (char*) p_text, BLACK,
 8000ccc:	7bf8      	ldrb	r0, [r7, #15]
 8000cce:	78fb      	ldrb	r3, [r7, #3]
 8000cd0:	011b      	lsls	r3, r3, #4
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2300      	movs	r3, #0
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	f7ff fba1 	bl	8000424 <GFX_DrawString>
		GFX_DrawRectangle(0, pos * SNEK_UI_BUTTON_OFFSET, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, YELLOWBLUE);
		GFX_DrawString(string_start_pos, (pos * SNEK_UI_BUTTON_OFFSET) + SNEK_UI_CHAR_OFFSET, (char*) p_text, YELLOWBLUE,
		BLACK);
	}

	return;
 8000ce2:	e015      	b.n	8000d10 <snek_ui_draw_mainmenu_button+0xa2>
		GFX_DrawRectangle(0, pos * SNEK_UI_BUTTON_OFFSET, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, YELLOWBLUE);
 8000ce4:	78fb      	ldrb	r3, [r7, #3]
 8000ce6:	011b      	lsls	r3, r3, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2301      	movs	r3, #1
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	230f      	movs	r3, #15
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff fcae 	bl	8000654 <GFX_DrawRectangle>
		GFX_DrawString(string_start_pos, (pos * SNEK_UI_BUTTON_OFFSET) + SNEK_UI_CHAR_OFFSET, (char*) p_text, YELLOWBLUE,
 8000cf8:	7bf8      	ldrb	r0, [r7, #15]
 8000cfa:	78fb      	ldrb	r3, [r7, #3]
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	3304      	adds	r3, #4
 8000d00:	4619      	mov	r1, r3
 8000d02:	2300      	movs	r3, #0
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2301      	movs	r3, #1
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	f7ff fb8b 	bl	8000424 <GFX_DrawString>
	return;
 8000d0e:	bf00      	nop
}
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd90      	pop	{r4, r7, pc}
	...

08000d18 <snek_ui_draw_ok_button>:

static void snek_ui_draw_ok_button(uint8_t highlight)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
		if(!highlight)
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d118      	bne.n	8000d5a <snek_ui_draw_ok_button+0x42>
		{
			// button highlight off
			GFX_DrawFillRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, BLACK);
 8000d28:	2300      	movs	r3, #0
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	230b      	movs	r3, #11
 8000d2e:	2214      	movs	r2, #20
 8000d30:	2132      	movs	r1, #50	; 0x32
 8000d32:	206a      	movs	r0, #106	; 0x6a
 8000d34:	f7ff fcbb 	bl	80006ae <GFX_DrawFillRectangle>
			GFX_DrawRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, YELLOWBLUE);
 8000d38:	2301      	movs	r3, #1
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	230b      	movs	r3, #11
 8000d3e:	2214      	movs	r2, #20
 8000d40:	2132      	movs	r1, #50	; 0x32
 8000d42:	206a      	movs	r0, #106	; 0x6a
 8000d44:	f7ff fc86 	bl	8000654 <GFX_DrawRectangle>
			GFX_DrawString(SNEK_UI_OK_BUTTON_POS_X + 4, SNEK_UI_OK_BUTTON_POS_Y + 1, "OK", YELLOWBLUE, BLACK);
 8000d48:	2300      	movs	r3, #0
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	4a11      	ldr	r2, [pc, #68]	; (8000d94 <snek_ui_draw_ok_button+0x7c>)
 8000d50:	2133      	movs	r1, #51	; 0x33
 8000d52:	206e      	movs	r0, #110	; 0x6e
 8000d54:	f7ff fb66 	bl	8000424 <GFX_DrawString>
			// highlight ok button
			GFX_DrawFillRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, YELLOWBLUE);
			GFX_DrawRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, BLACK);
			GFX_DrawString(SNEK_UI_OK_BUTTON_POS_X + 4, SNEK_UI_OK_BUTTON_POS_Y + 1, "OK", BLACK, YELLOWBLUE);
		}
}
 8000d58:	e017      	b.n	8000d8a <snek_ui_draw_ok_button+0x72>
			GFX_DrawFillRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, YELLOWBLUE);
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	230b      	movs	r3, #11
 8000d60:	2214      	movs	r2, #20
 8000d62:	2132      	movs	r1, #50	; 0x32
 8000d64:	206a      	movs	r0, #106	; 0x6a
 8000d66:	f7ff fca2 	bl	80006ae <GFX_DrawFillRectangle>
			GFX_DrawRectangle(SNEK_UI_OK_BUTTON_POS_X, SNEK_UI_OK_BUTTON_POS_Y, SNEK_UI_OK_BUTTON_WIDTH, SNEK_UI_OK_BUTTON_HEIGHT, BLACK);
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	230b      	movs	r3, #11
 8000d70:	2214      	movs	r2, #20
 8000d72:	2132      	movs	r1, #50	; 0x32
 8000d74:	206a      	movs	r0, #106	; 0x6a
 8000d76:	f7ff fc6d 	bl	8000654 <GFX_DrawRectangle>
			GFX_DrawString(SNEK_UI_OK_BUTTON_POS_X + 4, SNEK_UI_OK_BUTTON_POS_Y + 1, "OK", BLACK, YELLOWBLUE);
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <snek_ui_draw_ok_button+0x7c>)
 8000d82:	2133      	movs	r1, #51	; 0x33
 8000d84:	206e      	movs	r0, #110	; 0x6e
 8000d86:	f7ff fb4d 	bl	8000424 <GFX_DrawString>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	08003ff4 	.word	0x08003ff4

08000d98 <snek_ui_updatescore>:

static void snek_ui_updatescore(snek_game_t *p_snek_game)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	6078      	str	r0, [r7, #4]
	uint8_t temp_msg[8];
	sprintf((char*) temp_msg, "%d", (p_snek_game->snek_lenght - 3));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8000da6:	1eda      	subs	r2, r3, #3
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <snek_ui_updatescore+0x38>)
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 ff80 	bl	8002cb4 <siprintf>
	GFX_DrawString(102, 0 + SNEK_UI_CHAR_OFFSET, (char*) temp_msg, YELLOWBLUE, BLACK);
 8000db4:	f107 0208 	add.w	r2, r7, #8
 8000db8:	2300      	movs	r3, #0
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	2066      	movs	r0, #102	; 0x66
 8000dc2:	f7ff fb2f 	bl	8000424 <GFX_DrawString>
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	08003ff8 	.word	0x08003ff8

08000dd4 <snek_ui_gameover_animation>:

static void snek_ui_gameover_animation(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af02      	add	r7, sp, #8
	for (uint8_t count = 0; count < SSD1306_LCDWIDTH; count++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	71fb      	strb	r3, [r7, #7]
 8000dde:	e012      	b.n	8000e06 <snek_ui_gameover_animation+0x32>
	{
		GFX_DrawFillRectangle((count % 16) * 8, (count / 16) * 8, SNEK_UI_NODE_WIDTH, SNEK_UI_NODE_HEIGHT, YELLOWBLUE);
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	00d8      	lsls	r0, r3, #3
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	00d9      	lsls	r1, r3, #3
 8000df0:	2301      	movs	r3, #1
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	2308      	movs	r3, #8
 8000df6:	2208      	movs	r2, #8
 8000df8:	f7ff fc59 	bl	80006ae <GFX_DrawFillRectangle>

		SSD1306_Display();
 8000dfc:	f7ff fea8 	bl	8000b50 <SSD1306_Display>
	for (uint8_t count = 0; count < SSD1306_LCDWIDTH; count++)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	3301      	adds	r3, #1
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	dae8      	bge.n	8000de0 <snek_ui_gameover_animation+0xc>
	}
}
 8000e0e:	bf00      	nop
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <snek_ui_mainmenu_check_update>:

static void snek_ui_mainmenu_check_update(snek_game_t *p_snek_game)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	// check if button down is clicked
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN))
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	885b      	ldrh	r3, [r3, #2]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d01c      	beq.n	8000e68 <snek_ui_mainmenu_check_update+0x50>
	{
		// move button cursor down
		p_snek_game->menu_buttons = (p_snek_game->menu_buttons + 1) % 4;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	785b      	ldrb	r3, [r3, #1]
 8000e32:	3301      	adds	r3, #1
 8000e34:	425a      	negs	r2, r3
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	f002 0203 	and.w	r2, r2, #3
 8000e3e:	bf58      	it	pl
 8000e40:	4253      	negpl	r3, r2
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	705a      	strb	r2, [r3, #1]
		SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	885b      	ldrh	r3, [r3, #2]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	885b      	ldrh	r3, [r3, #2]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	f023 0301 	bic.w	r3, r3, #1
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	805a      	strh	r2, [r3, #2]
	}

	// check if button up is clicked
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	885b      	ldrh	r3, [r3, #2]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	085b      	lsrs	r3, r3, #1
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d01c      	beq.n	8000eb4 <snek_ui_mainmenu_check_update+0x9c>
	{
		// move button up
		p_snek_game->menu_buttons = (p_snek_game->menu_buttons + 3) % 4;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	785b      	ldrb	r3, [r3, #1]
 8000e7e:	3303      	adds	r3, #3
 8000e80:	425a      	negs	r2, r3
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	f002 0203 	and.w	r2, r2, #3
 8000e8a:	bf58      	it	pl
 8000e8c:	4253      	negpl	r3, r2
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	705a      	strb	r2, [r3, #1]
		SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	885b      	ldrh	r3, [r3, #2]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	885b      	ldrh	r3, [r3, #2]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	f023 0302 	bic.w	r3, r3, #2
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	805a      	strh	r2, [r3, #2]
	}

	// check if enter is clicked
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	885b      	ldrh	r3, [r3, #2]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	091b      	lsrs	r3, r3, #4
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d038      	beq.n	8000f38 <snek_ui_mainmenu_check_update+0x120>
	{
		// change menu screen
		if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_START))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	889b      	ldrh	r3, [r3, #4]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <snek_ui_mainmenu_check_update+0xc4>
		{
			p_snek_game->game_state = GAMESTATE_INIT_GAME;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2205      	movs	r2, #5
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	e025      	b.n	8000f28 <snek_ui_mainmenu_check_update+0x110>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_SCORES))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	889b      	ldrh	r3, [r3, #4]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	085b      	lsrs	r3, r3, #1
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <snek_ui_mainmenu_check_update+0xde>
		{
			p_snek_game->game_state = GAMESTATE_SCORES;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	e018      	b.n	8000f28 <snek_ui_mainmenu_check_update+0x110>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_ABOUT))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	889b      	ldrh	r3, [r3, #4]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	08db      	lsrs	r3, r3, #3
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <snek_ui_mainmenu_check_update+0xf8>
		{
			p_snek_game->game_state = GAMESTATE_ABOUT;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	e00b      	b.n	8000f28 <snek_ui_mainmenu_check_update+0x110>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_SETTINGS))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	889b      	ldrh	r3, [r3, #4]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <snek_ui_mainmenu_check_update+0x110>
		{
			p_snek_game->game_state = GAMESTATE_SETTINGS;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2204      	movs	r2, #4
 8000f26:	701a      	strb	r2, [r3, #0]
		}

		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	885b      	ldrh	r3, [r3, #2]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	f023 0310 	bic.w	r3, r3, #16
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	805a      	strh	r2, [r3, #2]

	}
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <snek_map_clearmap>:

// snek_map - functions used during game to draw move snek, update fruity positions etc.

static void snek_map_clearmap(snek_game_t *p_snek_game)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	memset(p_snek_game->game_map, 0, sizeof(node_t) * SNEK_UI_NO_NODES);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3307      	adds	r3, #7
 8000f50:	f44f 7290 	mov.w	r2, #288	; 0x120
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 fe64 	bl	8002c24 <memset>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <snek_map_createnode>:

static void snek_map_createnode(snek_game_t *p_snek_game, uint8_t new_node_number)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	70fb      	strb	r3, [r7, #3]

	if (!(SNEK_CHECK_NODE_LIMITS(new_node_number)))
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	2b5f      	cmp	r3, #95	; 0x5f
 8000f74:	d908      	bls.n	8000f88 <snek_map_createnode+0x24>
	{
		SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ERROR_NODE);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	889b      	ldrh	r3, [r3, #4]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	809a      	strh	r2, [r3, #4]
		return;
 8000f86:	e048      	b.n	800101a <snek_map_createnode+0xb6>
	}

	p_snek_game->game_map[new_node_number].node_taken = 1;
 8000f88:	78fa      	ldrb	r2, [r7, #3]
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	3307      	adds	r3, #7
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]

	// if this first node made
	if (p_snek_game->snek_lenght == 0)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d10d      	bne.n	8000fc0 <snek_map_createnode+0x5c>
	{
		// to first node assign null to last position
		p_snek_game->game_map[new_node_number].last_node_pos = SNEK_NULL_NODE;
 8000fa4:	78fa      	ldrb	r2, [r7, #3]
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	3308      	adds	r3, #8
 8000fb2:	2264      	movs	r2, #100	; 0x64
 8000fb4:	701a      	strb	r2, [r3, #0]

		p_snek_game->tail_address = new_node_number;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	78fa      	ldrb	r2, [r7, #3]
 8000fba:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8000fbe:	e017      	b.n	8000ff0 <snek_map_createnode+0x8c>
	}
	else
	{
		// to the next node assign position of last head
		p_snek_game->game_map[new_node_number].last_node_pos = p_snek_game->head_address;
 8000fc0:	78fa      	ldrb	r2, [r7, #3]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 0127 	ldrb.w	r0, [r3, #295]	; 0x127
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3308      	adds	r3, #8
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	701a      	strb	r2, [r3, #0]
		// to the last head assign node that we are creating
		p_snek_game->game_map[p_snek_game->head_address].next_node_pos = new_node_number;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8000fde:	4619      	mov	r1, r3
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	440b      	add	r3, r1
 8000fe8:	4413      	add	r3, r2
 8000fea:	3309      	adds	r3, #9
 8000fec:	78fa      	ldrb	r2, [r7, #3]
 8000fee:	701a      	strb	r2, [r3, #0]

	}

	// we are creating head to next node is NULL
	p_snek_game->game_map[new_node_number].next_node_pos = SNEK_NULL_NODE;
 8000ff0:	78fa      	ldrb	r2, [r7, #3]
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	3309      	adds	r3, #9
 8000ffe:	2264      	movs	r2, #100	; 0x64
 8001000:	701a      	strb	r2, [r3, #0]
	// node that we are creating is new head
	p_snek_game->head_address = new_node_number;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	78fa      	ldrb	r2, [r7, #3]
 8001006:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
	p_snek_game->snek_lenght++;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 8001010:	3301      	adds	r3, #1
 8001012:	b29a      	uxth	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a

}
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <snek_map_deletenode>:

static void snek_map_deletenode(snek_game_t *p_snek_game, uint8_t last_node_number)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	70fb      	strb	r3, [r7, #3]
	uint8_t temp_node_pos;

	if (!(SNEK_CHECK_NODE_LIMITS(last_node_number)))
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	2b5f      	cmp	r3, #95	; 0x5f
 8001034:	d908      	bls.n	8001048 <snek_map_deletenode+0x24>
	{
		SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ERROR_NODE);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	889b      	ldrh	r3, [r3, #4]
 800103a:	b29b      	uxth	r3, r3
 800103c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001040:	b29a      	uxth	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	809a      	strh	r2, [r3, #4]
		return;
 8001046:	e044      	b.n	80010d2 <snek_map_deletenode+0xae>
	}

	// save new tail to temporary buffer
	temp_node_pos = p_snek_game->game_map[p_snek_game->tail_address].next_node_pos;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800104e:	4619      	mov	r1, r3
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	440b      	add	r3, r1
 8001058:	4413      	add	r3, r2
 800105a:	3309      	adds	r3, #9
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	73fb      	strb	r3, [r7, #15]

	// clear node
	p_snek_game->game_map[p_snek_game->tail_address].last_node_pos = 0;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8001066:	4619      	mov	r1, r3
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	460b      	mov	r3, r1
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	440b      	add	r3, r1
 8001070:	4413      	add	r3, r2
 8001072:	3308      	adds	r3, #8
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
	p_snek_game->game_map[p_snek_game->tail_address].next_node_pos = 0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800107e:	4619      	mov	r1, r3
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	440b      	add	r3, r1
 8001088:	4413      	add	r3, r2
 800108a:	3309      	adds	r3, #9
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
	p_snek_game->game_map[p_snek_game->tail_address].node_taken = 0;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8001096:	4619      	mov	r1, r3
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	440b      	add	r3, r1
 80010a0:	4413      	add	r3, r2
 80010a2:	3307      	adds	r3, #7
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]

	// assign new tail
	p_snek_game->tail_address = temp_node_pos;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
	p_snek_game->game_map[temp_node_pos].last_node_pos = SNEK_NULL_NODE;
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	3308      	adds	r3, #8
 80010be:	2264      	movs	r2, #100	; 0x64
 80010c0:	701a      	strb	r2, [r3, #0]
	p_snek_game->snek_lenght--;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 80010c8:	3b01      	subs	r3, #1
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a

}
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <snek_map_drawnode>:

static void snek_map_drawnode(snek_game_t *p_snek_game, uint8_t new_node_number)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
	snek_map_createnode(p_snek_game, new_node_number);
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	4619      	mov	r1, r3
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff39 	bl	8000f64 <snek_map_createnode>
	// draw node square
	uint8_t temp_x_pos = ((new_node_number % 16) * 8);
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	f003 030f 	and.w	r3, r3, #15
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	73fb      	strb	r3, [r7, #15]
	uint8_t temp_y_pos = 16 + ((new_node_number / 16) * 8);
 80010fe:	78fb      	ldrb	r3, [r7, #3]
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	b2db      	uxtb	r3, r3
 8001104:	3302      	adds	r3, #2
 8001106:	b2db      	uxtb	r3, r3
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	73bb      	strb	r3, [r7, #14]
	GFX_DrawFillRectangle(temp_x_pos, temp_y_pos, SNEK_UI_NODE_HEIGHT, SNEK_UI_NODE_WIDTH, YELLOWBLUE);
 800110c:	7bf8      	ldrb	r0, [r7, #15]
 800110e:	7bb9      	ldrb	r1, [r7, #14]
 8001110:	2301      	movs	r3, #1
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2308      	movs	r3, #8
 8001116:	2208      	movs	r2, #8
 8001118:	f7ff fac9 	bl	80006ae <GFX_DrawFillRectangle>
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <snek_map_erasenode>:

static void snek_map_erasenode(snek_game_t *p_snek_game, uint8_t last_node_number)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af02      	add	r7, sp, #8
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
	snek_map_deletenode(p_snek_game, last_node_number);
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	4619      	mov	r1, r3
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff75 	bl	8001024 <snek_map_deletenode>
	// draw node square
	uint8_t temp_x_pos = ((last_node_number % 16) * 8);
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	b2db      	uxtb	r3, r3
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	73fb      	strb	r3, [r7, #15]
	uint8_t temp_y_pos = 16 + ((last_node_number / 16) * 8);
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	b2db      	uxtb	r3, r3
 800114c:	3302      	adds	r3, #2
 800114e:	b2db      	uxtb	r3, r3
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	73bb      	strb	r3, [r7, #14]
	GFX_DrawFillRectangle(temp_x_pos, temp_y_pos, SNEK_UI_NODE_HEIGHT, SNEK_UI_NODE_WIDTH, BLACK);
 8001154:	7bf8      	ldrb	r0, [r7, #15]
 8001156:	7bb9      	ldrb	r1, [r7, #14]
 8001158:	2300      	movs	r3, #0
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2308      	movs	r3, #8
 800115e:	2208      	movs	r2, #8
 8001160:	f7ff faa5 	bl	80006ae <GFX_DrawFillRectangle>
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <snek_map_drawfruity>:

static void snek_map_drawfruity(snek_game_t *p_snek_game, uint8_t fruity_node)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af02      	add	r7, sp, #8
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	70fb      	strb	r3, [r7, #3]
	// draw node square
	uint8_t temp_x_pos = ((fruity_node % 16) * 8);
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	b2db      	uxtb	r3, r3
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	73fb      	strb	r3, [r7, #15]
	uint8_t temp_y_pos = 16 + ((fruity_node / 16) * 8);
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	b2db      	uxtb	r3, r3
 800118a:	3302      	adds	r3, #2
 800118c:	b2db      	uxtb	r3, r3
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	73bb      	strb	r3, [r7, #14]

	GFX_DrawFillRoundRectangle(temp_x_pos, temp_y_pos, SNEK_UI_NODE_HEIGHT, SNEK_UI_NODE_WIDTH, 1, YELLOWBLUE);
 8001192:	7bf8      	ldrb	r0, [r7, #15]
 8001194:	7bb9      	ldrb	r1, [r7, #14]
 8001196:	2301      	movs	r3, #1
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	2301      	movs	r3, #1
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2308      	movs	r3, #8
 80011a0:	2208      	movs	r2, #8
 80011a2:	f7ff fb48 	bl	8000836 <GFX_DrawFillRoundRectangle>
	//GFX_DrawFillRectangle(temp_x_pos, temp_y_pos, SNEK_UI_NODE_HEIGHT, SNEK_UI_NODE_WIDTH, YELLOWBLUE);
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <snek_map_check_direction>:

static void snek_map_check_direction(snek_game_t *p_snek_game)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
	// if we are moving vertically
	if ((SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN)) || (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP)))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	889b      	ldrh	r3, [r3, #4]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	b29b      	uxth	r3, r3
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d108      	bne.n	80011da <snek_map_check_direction+0x2c>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	889b      	ldrh	r3, [r3, #4]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d064      	beq.n	80012a4 <snek_map_check_direction+0xf6>
	{
		// ignore up/down buttons and change snek new movement direction
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	885b      	ldrh	r3, [r3, #2]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	f023 0301 	bic.w	r3, r3, #1
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	885b      	ldrh	r3, [r3, #2]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f023 0302 	bic.w	r3, r3, #2
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	805a      	strh	r2, [r3, #2]

		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	885b      	ldrh	r3, [r3, #2]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	b29b      	uxth	r3, r3
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d020      	beq.n	800124e <snek_map_check_direction+0xa0>
		{
			// set new direction, reset old direction and button flag
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	889b      	ldrh	r3, [r3, #4]
 8001210:	b29b      	uxth	r3, r3
 8001212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001216:	b29a      	uxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_LEFT);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	889b      	ldrh	r3, [r3, #4]
 8001220:	b29b      	uxth	r3, r3
 8001222:	f023 0304 	bic.w	r3, r3, #4
 8001226:	b29a      	uxth	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	889b      	ldrh	r3, [r3, #4]
 8001230:	b29b      	uxth	r3, r3
 8001232:	f023 0310 	bic.w	r3, r3, #16
 8001236:	b29a      	uxth	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	889b      	ldrh	r3, [r3, #4]
 8001240:	b29b      	uxth	r3, r3
 8001242:	f023 0320 	bic.w	r3, r3, #32
 8001246:	b29a      	uxth	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	809a      	strh	r2, [r3, #4]
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 800124c:	e09e      	b.n	800138c <snek_map_check_direction+0x1de>
		}
		else if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	885b      	ldrh	r3, [r3, #2]
 8001252:	b29b      	uxth	r3, r3
 8001254:	08db      	lsrs	r3, r3, #3
 8001256:	b29b      	uxth	r3, r3
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 8095 	beq.w	800138c <snek_map_check_direction+0x1de>
		{
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	889b      	ldrh	r3, [r3, #4]
 8001266:	b29b      	uxth	r3, r3
 8001268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126c:	b29a      	uxth	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_RIGHT);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	889b      	ldrh	r3, [r3, #4]
 8001276:	b29b      	uxth	r3, r3
 8001278:	f023 0308 	bic.w	r3, r3, #8
 800127c:	b29a      	uxth	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	889b      	ldrh	r3, [r3, #4]
 8001286:	b29b      	uxth	r3, r3
 8001288:	f023 0310 	bic.w	r3, r3, #16
 800128c:	b29a      	uxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	889b      	ldrh	r3, [r3, #4]
 8001296:	b29b      	uxth	r3, r3
 8001298:	f023 0320 	bic.w	r3, r3, #32
 800129c:	b29a      	uxth	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	809a      	strh	r2, [r3, #4]
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 80012a2:	e073      	b.n	800138c <snek_map_check_direction+0x1de>
		}
	}
	else if ((SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT)) || (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT)))
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	889b      	ldrh	r3, [r3, #4]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	099b      	lsrs	r3, r3, #6
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d108      	bne.n	80012c8 <snek_map_check_direction+0x11a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	889b      	ldrh	r3, [r3, #4]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	09db      	lsrs	r3, r3, #7
 80012be:	b29b      	uxth	r3, r3
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d062      	beq.n	800138e <snek_map_check_direction+0x1e0>
	{
		// same if we are in horizontal movement
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	885b      	ldrh	r3, [r3, #2]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	f023 0304 	bic.w	r3, r3, #4
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	885b      	ldrh	r3, [r3, #2]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	f023 0308 	bic.w	r3, r3, #8
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	805a      	strh	r2, [r3, #2]

		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	885b      	ldrh	r3, [r3, #2]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	085b      	lsrs	r3, r3, #1
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d020      	beq.n	800133c <snek_map_check_direction+0x18e>
		{
			// set new direction, reset old direction and button flag
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	889b      	ldrh	r3, [r3, #4]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	f043 0320 	orr.w	r3, r3, #32
 8001304:	b29a      	uxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_UP);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	889b      	ldrh	r3, [r3, #4]
 800130e:	b29b      	uxth	r3, r3
 8001310:	f023 0302 	bic.w	r3, r3, #2
 8001314:	b29a      	uxth	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	889b      	ldrh	r3, [r3, #4]
 800131e:	b29b      	uxth	r3, r3
 8001320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001324:	b29a      	uxth	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	889b      	ldrh	r3, [r3, #4]
 800132e:	b29b      	uxth	r3, r3
 8001330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001334:	b29a      	uxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_DOWN);
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT);
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
		}
	}
}
 800133a:	e028      	b.n	800138e <snek_map_check_direction+0x1e0>
		else if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	885b      	ldrh	r3, [r3, #2]
 8001340:	b29b      	uxth	r3, r3
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d021      	beq.n	800138e <snek_map_check_direction+0x1e0>
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	889b      	ldrh	r3, [r3, #4]
 800134e:	b29b      	uxth	r3, r3
 8001350:	f043 0310 	orr.w	r3, r3, #16
 8001354:	b29a      	uxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_CR1_BUTTON_DOWN);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	889b      	ldrh	r3, [r3, #4]
 800135e:	b29b      	uxth	r3, r3
 8001360:	f023 0301 	bic.w	r3, r3, #1
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	889b      	ldrh	r3, [r3, #4]
 800136e:	b29b      	uxth	r3, r3
 8001370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001374:	b29a      	uxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	809a      	strh	r2, [r3, #4]
			SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	889b      	ldrh	r3, [r3, #4]
 800137e:	b29b      	uxth	r3, r3
 8001380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001384:	b29a      	uxth	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	809a      	strh	r2, [r3, #4]
}
 800138a:	e000      	b.n	800138e <snek_map_check_direction+0x1e0>
		if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 800138c:	bf00      	nop
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <snek_map_check_fruity>:

static void snek_map_check_fruity(snek_game_t *p_snek_game)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_NO_FRUITY))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	889b      	ldrh	r3, [r3, #4]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	0a5b      	lsrs	r3, r3, #9
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d02a      	beq.n	800140c <snek_map_check_fruity+0x70>
	{
		// look for a place for a fruity node
		do
		{
			p_snek_game->fruity_node = rand() % 96;
 80013b6:	f001 fc3d 	bl	8002c34 <rand>
 80013ba:	4602      	mov	r2, r0
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <snek_map_check_fruity+0x78>)
 80013be:	fb83 1302 	smull	r1, r3, r3, r2
 80013c2:	1119      	asrs	r1, r3, #4
 80013c4:	17d3      	asrs	r3, r2, #31
 80013c6:	1ac9      	subs	r1, r1, r3
 80013c8:	460b      	mov	r3, r1
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	440b      	add	r3, r1
 80013ce:	015b      	lsls	r3, r3, #5
 80013d0:	1ad1      	subs	r1, r2, r3
 80013d2:	b2ca      	uxtb	r2, r1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	719a      	strb	r2, [r3, #6]
		} while (p_snek_game->game_map[p_snek_game->fruity_node].node_taken);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	799b      	ldrb	r3, [r3, #6]
 80013dc:	4619      	mov	r1, r3
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	440b      	add	r3, r1
 80013e6:	4413      	add	r3, r2
 80013e8:	3307      	adds	r3, #7
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1e2      	bne.n	80013b6 <snek_map_check_fruity+0x1a>

		snek_map_drawfruity(p_snek_game, p_snek_game->fruity_node);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	799b      	ldrb	r3, [r3, #6]
 80013f4:	4619      	mov	r1, r3
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff feb8 	bl	800116c <snek_map_drawfruity>
		SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_NO_FRUITY);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	889b      	ldrh	r3, [r3, #4]
 8001400:	b29b      	uxth	r3, r3
 8001402:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001406:	b29a      	uxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	809a      	strh	r2, [r3, #4]
	}
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	2aaaaaab 	.word	0x2aaaaaab

08001418 <snek_map_compute_newposition>:

static uint8_t snek_map_compute_newposition(snek_game_t *p_snek_game)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	uint8_t temp_new_head;

	if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_DOWN))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	889b      	ldrh	r3, [r3, #4]
 8001424:	b29b      	uxth	r3, r3
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	b29b      	uxth	r3, r3
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d01b      	beq.n	800146a <snek_map_compute_newposition+0x52>
	{
		// head = same column + new row
		temp_new_head = (p_snek_game->head_address) % 16 + ((((p_snek_game->head_address / 16) + 1) % 6 * 16));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8001438:	f003 030f 	and.w	r3, r3, #15
 800143c:	b2d8      	uxtb	r0, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	b2db      	uxtb	r3, r3
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	4b3c      	ldr	r3, [pc, #240]	; (800153c <snek_map_compute_newposition+0x124>)
 800144c:	fb83 3102 	smull	r3, r1, r3, r2
 8001450:	17d3      	asrs	r3, r2, #31
 8001452:	1ac9      	subs	r1, r1, r3
 8001454:	460b      	mov	r3, r1
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	440b      	add	r3, r1
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	1ad1      	subs	r1, r2, r3
 800145e:	b2cb      	uxtb	r3, r1
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	b2db      	uxtb	r3, r3
 8001464:	4403      	add	r3, r0
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e061      	b.n	800152e <snek_map_compute_newposition+0x116>
	}
	else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_UP))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	889b      	ldrh	r3, [r3, #4]
 800146e:	b29b      	uxth	r3, r3
 8001470:	095b      	lsrs	r3, r3, #5
 8001472:	b29b      	uxth	r3, r3
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d01b      	beq.n	80014b4 <snek_map_compute_newposition+0x9c>
	{
		// head = same column + new row
		temp_new_head = (p_snek_game->head_address) % 16 + ((((p_snek_game->head_address / 16) + 5) % 6 * 16));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	b2d8      	uxtb	r0, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	b2db      	uxtb	r3, r3
 8001492:	1d5a      	adds	r2, r3, #5
 8001494:	4b29      	ldr	r3, [pc, #164]	; (800153c <snek_map_compute_newposition+0x124>)
 8001496:	fb83 3102 	smull	r3, r1, r3, r2
 800149a:	17d3      	asrs	r3, r2, #31
 800149c:	1ac9      	subs	r1, r1, r3
 800149e:	460b      	mov	r3, r1
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	440b      	add	r3, r1
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	1ad1      	subs	r1, r2, r3
 80014a8:	b2cb      	uxtb	r3, r1
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	4403      	add	r3, r0
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	e03c      	b.n	800152e <snek_map_compute_newposition+0x116>
	}
	else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_LEFT))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	889b      	ldrh	r3, [r3, #4]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	099b      	lsrs	r3, r3, #6
 80014bc:	b29b      	uxth	r3, r3
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d015      	beq.n	80014f2 <snek_map_compute_newposition+0xda>
	{
		//head = new column + same row
		temp_new_head = (p_snek_game->head_address + 15) % 16 + ((p_snek_game->head_address / 16) * 16);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 80014cc:	330f      	adds	r3, #15
 80014ce:	425a      	negs	r2, r3
 80014d0:	f003 030f 	and.w	r3, r3, #15
 80014d4:	f002 020f 	and.w	r2, r2, #15
 80014d8:	bf58      	it	pl
 80014da:	4253      	negpl	r3, r2
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e01d      	b.n	800152e <snek_map_compute_newposition+0x116>
	}
	else if (SNEK_CHECK_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	889b      	ldrh	r3, [r3, #4]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	09db      	lsrs	r3, r3, #7
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d014      	beq.n	800152e <snek_map_compute_newposition+0x116>
	{
		//head = new column + same row
		temp_new_head = (p_snek_game->head_address + 1) % 16 + ((p_snek_game->head_address / 16) * 16);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 800150a:	3301      	adds	r3, #1
 800150c:	425a      	negs	r2, r3
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	f002 020f 	and.w	r2, r2, #15
 8001516:	bf58      	it	pl
 8001518:	4253      	negpl	r3, r2
 800151a:	b2da      	uxtb	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3127 	ldrb.w	r3, [r3, #295]	; 0x127
 8001522:	091b      	lsrs	r3, r3, #4
 8001524:	b2db      	uxtb	r3, r3
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	b2db      	uxtb	r3, r3
 800152a:	4413      	add	r3, r2
 800152c:	73fb      	strb	r3, [r7, #15]
	}

	return temp_new_head;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	2aaaaaab 	.word	0x2aaaaaab

08001540 <snek_gamestate_init>:
// snek_gamestate - main state machine functions

static void snek_gamestate_init(snek_game_t *p_snek_game)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

	// init cursor
	p_snek_game->menu_buttons = BUTTON_START;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	705a      	strb	r2, [r3, #1]
	SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_START);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	889b      	ldrh	r3, [r3, #4]
 8001552:	b29b      	uxth	r3, r3
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	b29a      	uxth	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	809a      	strh	r2, [r3, #4]
	// set bit to draw menu for the first time
	SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	885b      	ldrh	r3, [r3, #2]
 8001562:	b29b      	uxth	r3, r3
 8001564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001568:	b29a      	uxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	805a      	strh	r2, [r3, #2]
	SNEK_RESET_BIT(p_snek_game->SR1, SNEK_SR1_ERROR_NODE);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	889b      	ldrh	r3, [r3, #4]
 8001572:	b29b      	uxth	r3, r3
 8001574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001578:	b29a      	uxth	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	809a      	strh	r2, [r3, #4]

	// switch to menu screen
	p_snek_game->game_state = GAMESTATE_MENU;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]

}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <snek_gamesate_mainmenu>:

static void snek_gamesate_mainmenu(snek_game_t *p_snek_game)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	// update
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	885b      	ldrh	r3, [r3, #2]
 800159c:	b29b      	uxth	r3, r3
 800159e:	0a1b      	lsrs	r3, r3, #8
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d06c      	beq.n	8001684 <snek_gamesate_mainmenu+0xf4>
	{
		//draw SNEK->Buttons
		snek_ui_draw_mainmenu_button((uint8_t*) "Start", 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	4839      	ldr	r0, [pc, #228]	; (8001694 <snek_gamesate_mainmenu+0x104>)
 80015b0:	f7ff fb5d 	bl	8000c6e <snek_ui_draw_mainmenu_button>
		snek_ui_draw_mainmenu_button((uint8_t*) "High scores", 1, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2101      	movs	r1, #1
 80015b8:	4837      	ldr	r0, [pc, #220]	; (8001698 <snek_gamesate_mainmenu+0x108>)
 80015ba:	f7ff fb58 	bl	8000c6e <snek_ui_draw_mainmenu_button>
		snek_ui_draw_mainmenu_button((uint8_t*) "Settings", 2, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2102      	movs	r1, #2
 80015c2:	4836      	ldr	r0, [pc, #216]	; (800169c <snek_gamesate_mainmenu+0x10c>)
 80015c4:	f7ff fb53 	bl	8000c6e <snek_ui_draw_mainmenu_button>
		snek_ui_draw_mainmenu_button((uint8_t*) "About", 3, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2103      	movs	r1, #3
 80015cc:	4834      	ldr	r0, [pc, #208]	; (80016a0 <snek_gamesate_mainmenu+0x110>)
 80015ce:	f7ff fb4e 	bl	8000c6e <snek_ui_draw_mainmenu_button>

		// clear active buttons bits
		p_snek_game->SR1 &= ~(15U << SNEK_SR1_ACTIVE_BUTTON_START);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	889b      	ldrh	r3, [r3, #4]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	f023 030f 	bic.w	r3, r3, #15
 80015dc:	b29a      	uxth	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	809a      	strh	r2, [r3, #4]

		//draw selected button
		//set active window bit
		switch (p_snek_game->menu_buttons)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	785b      	ldrb	r3, [r3, #1]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d842      	bhi.n	8001670 <snek_gamesate_mainmenu+0xe0>
 80015ea:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <snek_gamesate_mainmenu+0x60>)
 80015ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f0:	08001601 	.word	0x08001601
 80015f4:	0800161d 	.word	0x0800161d
 80015f8:	08001639 	.word	0x08001639
 80015fc:	08001655 	.word	0x08001655
		{
		case (BUTTON_START):
			snek_ui_draw_mainmenu_button((uint8_t*) "Start", 0, 1);
 8001600:	2201      	movs	r2, #1
 8001602:	2100      	movs	r1, #0
 8001604:	4823      	ldr	r0, [pc, #140]	; (8001694 <snek_gamesate_mainmenu+0x104>)
 8001606:	f7ff fb32 	bl	8000c6e <snek_ui_draw_mainmenu_button>
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_START);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	889b      	ldrh	r3, [r3, #4]
 800160e:	b29b      	uxth	r3, r3
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	b29a      	uxth	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	809a      	strh	r2, [r3, #4]
			break;
 800161a:	e029      	b.n	8001670 <snek_gamesate_mainmenu+0xe0>

		case (BUTTON_SCORES):
			snek_ui_draw_mainmenu_button((uint8_t*) "High scores", 1, 1);
 800161c:	2201      	movs	r2, #1
 800161e:	2101      	movs	r1, #1
 8001620:	481d      	ldr	r0, [pc, #116]	; (8001698 <snek_gamesate_mainmenu+0x108>)
 8001622:	f7ff fb24 	bl	8000c6e <snek_ui_draw_mainmenu_button>
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_SCORES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	889b      	ldrh	r3, [r3, #4]
 800162a:	b29b      	uxth	r3, r3
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	b29a      	uxth	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	809a      	strh	r2, [r3, #4]
			break;
 8001636:	e01b      	b.n	8001670 <snek_gamesate_mainmenu+0xe0>

		case (BUTTON_SETTINGS):
			snek_ui_draw_mainmenu_button((uint8_t*) "Settings", 2, 1);
 8001638:	2201      	movs	r2, #1
 800163a:	2102      	movs	r1, #2
 800163c:	4817      	ldr	r0, [pc, #92]	; (800169c <snek_gamesate_mainmenu+0x10c>)
 800163e:	f7ff fb16 	bl	8000c6e <snek_ui_draw_mainmenu_button>
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_SETTINGS);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	889b      	ldrh	r3, [r3, #4]
 8001646:	b29b      	uxth	r3, r3
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	b29a      	uxth	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	809a      	strh	r2, [r3, #4]
			break;
 8001652:	e00d      	b.n	8001670 <snek_gamesate_mainmenu+0xe0>

		case (BUTTON_ABOUT):
			snek_ui_draw_mainmenu_button((uint8_t*) "About", 3, 1);
 8001654:	2201      	movs	r2, #1
 8001656:	2103      	movs	r1, #3
 8001658:	4811      	ldr	r0, [pc, #68]	; (80016a0 <snek_gamesate_mainmenu+0x110>)
 800165a:	f7ff fb08 	bl	8000c6e <snek_ui_draw_mainmenu_button>
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_ACTIVE_BUTTON_ABOUT);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	889b      	ldrh	r3, [r3, #4]
 8001662:	b29b      	uxth	r3, r3
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	b29a      	uxth	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	809a      	strh	r2, [r3, #4]
			break;
 800166e:	bf00      	nop
		}

		// sent data to OLED
		SSD1306_Display();
 8001670:	f7ff fa6e 	bl	8000b50 <SSD1306_Display>
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	885b      	ldrh	r3, [r3, #2]
 8001678:	b29b      	uxth	r3, r3
 800167a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800167e:	b29a      	uxth	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	805a      	strh	r2, [r3, #2]
	}

	// check for new update
	snek_ui_mainmenu_check_update(p_snek_game);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fbc7 	bl	8000e18 <snek_ui_mainmenu_check_update>

}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	08003ffc 	.word	0x08003ffc
 8001698:	08004004 	.word	0x08004004
 800169c:	08004010 	.word	0x08004010
 80016a0:	0800401c 	.word	0x0800401c

080016a4 <snek_gamesate_about>:

static void snek_gamesate_about(snek_game_t *p_snek_game)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	6078      	str	r0, [r7, #4]
	// draw about screen
	SSD1306_Clear(BLACK);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f7ff f991 	bl	80009d4 <SSD1306_Clear>
	snek_ui_draw_mainmenu_button((uint8_t*)"Snek loves fruity", 0, 1);
 80016b2:	2201      	movs	r2, #1
 80016b4:	2100      	movs	r1, #0
 80016b6:	4816      	ldr	r0, [pc, #88]	; (8001710 <snek_gamesate_about+0x6c>)
 80016b8:	f7ff fad9 	bl	8000c6e <snek_ui_draw_mainmenu_button>
	GFX_Image(0, 16, bitmap_snek, 85, 48, YELLOWBLUE);
 80016bc:	2301      	movs	r3, #1
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	2330      	movs	r3, #48	; 0x30
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2355      	movs	r3, #85	; 0x55
 80016c6:	4a13      	ldr	r2, [pc, #76]	; (8001714 <snek_gamesate_about+0x70>)
 80016c8:	2110      	movs	r1, #16
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff f906 	bl	80008dc <GFX_Image>
	snek_ui_draw_ok_button(ON);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff fb21 	bl	8000d18 <snek_ui_draw_ok_button>

	SSD1306_Display();
 80016d6:	f7ff fa3b 	bl	8000b50 <SSD1306_Display>

	if (SNEK_CHECK_BIT(p_snek_game->CR1,SNEK_CR1_BUTTON_ENTER))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	885b      	ldrh	r3, [r3, #2]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00d      	beq.n	8001708 <snek_gamesate_about+0x64>
	{
		delay(840000);
 80016ec:	480a      	ldr	r0, [pc, #40]	; (8001718 <snek_gamesate_about+0x74>)
 80016ee:	f7ff faa9 	bl	8000c44 <delay>
		// save data on eeprom
		p_snek_game->game_state = GAMESTATE_INIT_MENU;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	885b      	ldrh	r3, [r3, #2]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	f023 0310 	bic.w	r3, r3, #16
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	805a      	strh	r2, [r3, #2]
	}
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	08004024 	.word	0x08004024
 8001714:	08004070 	.word	0x08004070
 8001718:	000cd140 	.word	0x000cd140

0800171c <snek_gamestate_init_game>:

static void snek_gamestate_init_game(snek_game_t *p_snek_game)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af02      	add	r7, sp, #8
 8001722:	6078      	str	r0, [r7, #4]

	// init parameters
	p_snek_game->snek_lenght = 0;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
	snek_map_clearmap(p_snek_game);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff fc09 	bl	8000f44 <snek_map_clearmap>
	SSD1306_Clear(BLACK);
 8001732:	2000      	movs	r0, #0
 8001734:	f7ff f94e 	bl	80009d4 <SSD1306_Clear>
	// draw scorebox as a top button
	GFX_DrawRectangle(0, 0, SNEK_UI_BUTTON_WIDTH, SNEK_UI_BUTTON_HEIGHT, YELLOWBLUE);
 8001738:	2301      	movs	r3, #1
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	230f      	movs	r3, #15
 800173e:	2280      	movs	r2, #128	; 0x80
 8001740:	2100      	movs	r1, #0
 8001742:	2000      	movs	r0, #0
 8001744:	f7fe ff86 	bl	8000654 <GFX_DrawRectangle>
	GFX_DrawString(5, 0 + SNEK_UI_CHAR_OFFSET, "SNEK", YELLOWBLUE, BLACK);
 8001748:	2300      	movs	r3, #0
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2301      	movs	r3, #1
 800174e:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <snek_gamestate_init_game+0xa8>)
 8001750:	2104      	movs	r1, #4
 8001752:	2005      	movs	r0, #5
 8001754:	f7fe fe66 	bl	8000424 <GFX_DrawString>
	GFX_DrawString(60, 0 + SNEK_UI_CHAR_OFFSET, "SCORE: 0", YELLOWBLUE, BLACK);
 8001758:	2300      	movs	r3, #0
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2301      	movs	r3, #1
 800175e:	4a1a      	ldr	r2, [pc, #104]	; (80017c8 <snek_gamestate_init_game+0xac>)
 8001760:	2104      	movs	r1, #4
 8001762:	203c      	movs	r0, #60	; 0x3c
 8001764:	f7fe fe5e 	bl	8000424 <GFX_DrawString>

	// create snake in game map

	snek_map_drawnode(p_snek_game, 40);
 8001768:	2128      	movs	r1, #40	; 0x28
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fcb6 	bl	80010dc <snek_map_drawnode>
	snek_map_drawnode(p_snek_game, 41);
 8001770:	2129      	movs	r1, #41	; 0x29
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fcb2 	bl	80010dc <snek_map_drawnode>
	snek_map_drawnode(p_snek_game, 42);
 8001778:	212a      	movs	r1, #42	; 0x2a
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff fcae 	bl	80010dc <snek_map_drawnode>

	// set first movement as right
	SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_SNEKMOVE_RIGHT);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	889b      	ldrh	r3, [r3, #4]
 8001784:	b29b      	uxth	r3, r3
 8001786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800178a:	b29a      	uxth	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	809a      	strh	r2, [r3, #4]
	SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_NO_FRUITY);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	889b      	ldrh	r3, [r3, #4]
 8001794:	b29b      	uxth	r3, r3
 8001796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179a:	b29a      	uxth	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	809a      	strh	r2, [r3, #4]
	SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_INIT_NEWSCREEN);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	885b      	ldrh	r3, [r3, #2]
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	805a      	strh	r2, [r3, #2]

	SSD1306_Display();
 80017b0:	f7ff f9ce 	bl	8000b50 <SSD1306_Display>
	p_snek_game->game_state = GAMESTATE_GAME;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2206      	movs	r2, #6
 80017b8:	701a      	strb	r2, [r3, #0]

}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	08004038 	.word	0x08004038
 80017c8:	08004040 	.word	0x08004040

080017cc <snek_gamestate_game>:

static void snek_gamestate_game(snek_game_t *p_snek_game)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

	SNEK_SET_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	885b      	ldrh	r3, [r3, #2]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017de:	b29a      	uxth	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	805a      	strh	r2, [r3, #2]

	// game tick
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_DRAW_OLED))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	885b      	ldrh	r3, [r3, #2]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d03a      	beq.n	800186c <snek_gamestate_game+0xa0>
	{
		// check if direction change is required
		snek_map_check_direction(p_snek_game);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fcd9 	bl	80011ae <snek_map_check_direction>

		// check if new fruity is required
		snek_map_check_fruity(p_snek_game);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fdcd 	bl	800139c <snek_map_check_fruity>

		delay(840000);
 8001802:	481c      	ldr	r0, [pc, #112]	; (8001874 <snek_gamestate_game+0xa8>)
 8001804:	f7ff fa1e 	bl	8000c44 <delay>

		// calculate next node position in array
		uint8_t temp_new_head = snek_map_compute_newposition(p_snek_game);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fe05 	bl	8001418 <snek_map_compute_newposition>
 800180e:	4603      	mov	r3, r0
 8001810:	73fb      	strb	r3, [r7, #15]

		// check if new node is taken -> if yes then collision
		if (p_snek_game->game_map[temp_new_head].node_taken)
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	440b      	add	r3, r1
 800181e:	3307      	adds	r3, #7
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <snek_gamestate_game+0x62>
		{
			p_snek_game->game_state = GAMESTATE_INIT_OVER;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2207      	movs	r2, #7
 800182a:	701a      	strb	r2, [r3, #0]
			return;
 800182c:	e01e      	b.n	800186c <snek_gamestate_game+0xa0>
		}

		// check if next node is fruity node
		if (p_snek_game->fruity_node == temp_new_head)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	799b      	ldrb	r3, [r3, #6]
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	429a      	cmp	r2, r3
 8001836:	d108      	bne.n	800184a <snek_gamestate_game+0x7e>
		{
			SNEK_SET_BIT(p_snek_game->SR1, SNEK_SR1_NO_FRUITY);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	889b      	ldrh	r3, [r3, #4]
 800183c:	b29b      	uxth	r3, r3
 800183e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001842:	b29a      	uxth	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	809a      	strh	r2, [r3, #4]
 8001848:	e006      	b.n	8001858 <snek_gamestate_game+0x8c>

		}
		else
		{
			// erase tail
			snek_map_erasenode(p_snek_game, p_snek_game->tail_address);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8001850:	4619      	mov	r1, r3
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fc66 	bl	8001124 <snek_map_erasenode>
		}

		// draw new head
		snek_map_drawnode(p_snek_game, temp_new_head);
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	4619      	mov	r1, r3
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff fc3d 	bl	80010dc <snek_map_drawnode>

		snek_ui_updatescore(p_snek_game);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fa98 	bl	8000d98 <snek_ui_updatescore>

		SSD1306_Display();
 8001868:	f7ff f972 	bl	8000b50 <SSD1306_Display>
	}
}
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	000cd140 	.word	0x000cd140

08001878 <snek_gamestate_init_over>:

static void snek_gamestate_init_over(snek_game_t *p_snek_game)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

	snek_ui_gameover_animation();
 8001880:	f7ff faa8 	bl	8000dd4 <snek_ui_gameover_animation>

	uint8_t msg[16];
	sprintf((char*) msg, "Score: %d", (p_snek_game->snek_lenght - 3));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f8b3 312a 	ldrh.w	r3, [r3, #298]	; 0x12a
 800188a:	1eda      	subs	r2, r3, #3
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	491a      	ldr	r1, [pc, #104]	; (80018fc <snek_gamestate_init_over+0x84>)
 8001892:	4618      	mov	r0, r3
 8001894:	f001 fa0e 	bl	8002cb4 <siprintf>

	// draw buttons
	snek_ui_draw_mainmenu_button((uint8_t*) "Game over", 0, 1);
 8001898:	2201      	movs	r2, #1
 800189a:	2100      	movs	r1, #0
 800189c:	4818      	ldr	r0, [pc, #96]	; (8001900 <snek_gamestate_init_over+0x88>)
 800189e:	f7ff f9e6 	bl	8000c6e <snek_ui_draw_mainmenu_button>
	snek_ui_draw_mainmenu_button((uint8_t*) msg, 1, 1);
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	2201      	movs	r2, #1
 80018a8:	2101      	movs	r1, #1
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f9df 	bl	8000c6e <snek_ui_draw_mainmenu_button>
	snek_ui_draw_mainmenu_button((uint8_t*) "Name:", 2, 1);
 80018b0:	2201      	movs	r2, #1
 80018b2:	2102      	movs	r1, #2
 80018b4:	4813      	ldr	r0, [pc, #76]	; (8001904 <snek_gamestate_init_over+0x8c>)
 80018b6:	f7ff f9da 	bl	8000c6e <snek_ui_draw_mainmenu_button>
	snek_ui_draw_mainmenu_button((uint8_t*) "", 3, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2103      	movs	r1, #3
 80018be:	4812      	ldr	r0, [pc, #72]	; (8001908 <snek_gamestate_init_over+0x90>)
 80018c0:	f7ff f9d5 	bl	8000c6e <snek_ui_draw_mainmenu_button>

	// draw ok button
	snek_ui_draw_ok_button(OFF);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f7ff fa27 	bl	8000d18 <snek_ui_draw_ok_button>

	// init text editor values
	p_snek_game->txt_edit.pos = 0;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
	p_snek_game->txt_edit.val = 'A';
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2241      	movs	r2, #65	; 0x41
 80018d6:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	memset(p_snek_game->txt_edit.name, ' ', 16);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80018e0:	2210      	movs	r2, #16
 80018e2:	2120      	movs	r1, #32
 80018e4:	4618      	mov	r0, r3
 80018e6:	f001 f99d 	bl	8002c24 <memset>

	SSD1306_Display();
 80018ea:	f7ff f931 	bl	8000b50 <SSD1306_Display>
	p_snek_game->game_state = GAMESTATE_OVER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2208      	movs	r2, #8
 80018f2:	701a      	strb	r2, [r3, #0]

}
 80018f4:	bf00      	nop
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	0800404c 	.word	0x0800404c
 8001900:	08004058 	.word	0x08004058
 8001904:	08004064 	.word	0x08004064
 8001908:	0800406c 	.word	0x0800406c

0800190c <snek_gamestate_over>:

static void snek_gamestate_over(snek_game_t *p_snek_game)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af02      	add	r7, sp, #8
 8001912:	6078      	str	r0, [r7, #4]

	delay(840000);
 8001914:	4878      	ldr	r0, [pc, #480]	; (8001af8 <snek_gamestate_over+0x1ec>)
 8001916:	f7ff f995 	bl	8000c44 <delay>

	// check if there is a letter to change
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	885b      	ldrh	r3, [r3, #2]
 800191e:	b29b      	uxth	r3, r3
 8001920:	085b      	lsrs	r3, r3, #1
 8001922:	b29b      	uxth	r3, r3
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01a      	beq.n	8001962 <snek_gamestate_over+0x56>
	{
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_UP);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	885b      	ldrh	r3, [r3, #2]
 8001930:	b29b      	uxth	r3, r3
 8001932:	f023 0302 	bic.w	r3, r3, #2
 8001936:	b29a      	uxth	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	805a      	strh	r2, [r3, #2]
		(p_snek_game->txt_edit.val > 'Z') ? p_snek_game->txt_edit.val = 'A' : p_snek_game->txt_edit.val++;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8001942:	2b5a      	cmp	r3, #90	; 0x5a
 8001944:	d904      	bls.n	8001950 <snek_gamestate_over+0x44>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2241      	movs	r2, #65	; 0x41
 800194a:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 800194e:	e029      	b.n	80019a4 <snek_gamestate_over+0x98>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8001956:	3301      	adds	r3, #1
 8001958:	b2da      	uxtb	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 8001960:	e020      	b.n	80019a4 <snek_gamestate_over+0x98>
	}
	else if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	885b      	ldrh	r3, [r3, #2]
 8001966:	b29b      	uxth	r3, r3
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d019      	beq.n	80019a4 <snek_gamestate_over+0x98>
	{
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_DOWN);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	885b      	ldrh	r3, [r3, #2]
 8001974:	b29b      	uxth	r3, r3
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	b29a      	uxth	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	805a      	strh	r2, [r3, #2]
		(p_snek_game->txt_edit.val < 'A') ? p_snek_game->txt_edit.val = 'Z' : p_snek_game->txt_edit.val--;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 8001986:	2b40      	cmp	r3, #64	; 0x40
 8001988:	d804      	bhi.n	8001994 <snek_gamestate_over+0x88>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	225a      	movs	r2, #90	; 0x5a
 800198e:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 8001992:	e007      	b.n	80019a4 <snek_gamestate_over+0x98>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
 800199a:	3b01      	subs	r3, #1
 800199c:	b2da      	uxtb	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	}

	// check if there is position to change
	if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	885b      	ldrh	r3, [r3, #2]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	08db      	lsrs	r3, r3, #3
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d025      	beq.n	8001a02 <snek_gamestate_over+0xf6>
	{
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_RIGHT);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	885b      	ldrh	r3, [r3, #2]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	f023 0308 	bic.w	r3, r3, #8
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	805a      	strh	r2, [r3, #2]
		(p_snek_game->txt_edit.pos == SNEK_UI_MAX_NAME_LENGHT) ? p_snek_game->txt_edit.pos = 0 : p_snek_game->txt_edit.pos++;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d104      	bne.n	80019da <snek_gamestate_over+0xce>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 80019d8:	e007      	b.n	80019ea <snek_gamestate_over+0xde>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80019e0:	3301      	adds	r3, #1
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
		p_snek_game->txt_edit.val = p_snek_game->txt_edit.name[p_snek_game->txt_edit.pos];
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80019f0:	461a      	mov	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	f893 212e 	ldrb.w	r2, [r3, #302]	; 0x12e
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
 8001a00:	e02d      	b.n	8001a5e <snek_gamestate_over+0x152>
	}
	else if (SNEK_CHECK_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	885b      	ldrh	r3, [r3, #2]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d024      	beq.n	8001a5e <snek_gamestate_over+0x152>
	{
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_LEFT);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	885b      	ldrh	r3, [r3, #2]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	f023 0304 	bic.w	r3, r3, #4
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	805a      	strh	r2, [r3, #2]
		(p_snek_game->txt_edit.pos == 0) ? p_snek_game->txt_edit.pos = SNEK_UI_MAX_NAME_LENGHT : p_snek_game->txt_edit.pos--;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d104      	bne.n	8001a38 <snek_gamestate_over+0x12c>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2208      	movs	r2, #8
 8001a32:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 8001a36:	e007      	b.n	8001a48 <snek_gamestate_over+0x13c>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
		p_snek_game->txt_edit.val = p_snek_game->txt_edit.name[p_snek_game->txt_edit.pos];
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001a4e:	461a      	mov	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	f893 212e 	ldrb.w	r2, [r3, #302]	; 0x12e
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	}

	// jump between letters
	if (p_snek_game->txt_edit.pos != SNEK_UI_MAX_NAME_LENGHT)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d016      	beq.n	8001a96 <snek_gamestate_over+0x18a>
	{

		GFX_DrawChar((p_snek_game->txt_edit.pos * 6) + SNEK_UI_TXT_EDITOR_OFFSET_LEFT, SSD1306_LCDHEIGHT - SNEK_UI_TXT_EDITOR_OFFSET_BOTTOM,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	3328      	adds	r3, #40	; 0x28
 8001a7a:	4618      	mov	r0, r3
				p_snek_game->txt_edit.val, YELLOWBLUE,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
		GFX_DrawChar((p_snek_game->txt_edit.pos * 6) + SNEK_UI_TXT_EDITOR_OFFSET_LEFT, SSD1306_LCDHEIGHT - SNEK_UI_TXT_EDITOR_OFFSET_BOTTOM,
 8001a82:	2300      	movs	r3, #0
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2301      	movs	r3, #1
 8001a88:	2134      	movs	r1, #52	; 0x34
 8001a8a:	f7fe fc11 	bl	80002b0 <GFX_DrawChar>
				BLACK);

		snek_ui_draw_ok_button(OFF);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff f942 	bl	8000d18 <snek_ui_draw_ok_button>
 8001a94:	e002      	b.n	8001a9c <snek_gamestate_over+0x190>
	}
	else
	{
		snek_ui_draw_ok_button(ON);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f7ff f93e 	bl	8000d18 <snek_ui_draw_ok_button>
	}

	p_snek_game->txt_edit.name[p_snek_game->txt_edit.pos] = p_snek_game->txt_edit.val;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	440b      	add	r3, r1
 8001aae:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e

	SSD1306_Display();
 8001ab2:	f7ff f84d 	bl	8000b50 <SSD1306_Display>

	// check if button enter is clicked and go back to main menu
	if (SNEK_CHECK_BIT(p_snek_game->CR1,SNEK_CR1_BUTTON_ENTER) && (p_snek_game->txt_edit.pos == SNEK_UI_MAX_NAME_LENGHT))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	885b      	ldrh	r3, [r3, #2]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d012      	beq.n	8001aee <snek_gamestate_over+0x1e2>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d10d      	bne.n	8001aee <snek_gamestate_over+0x1e2>
	{

		delay(840000);
 8001ad2:	4809      	ldr	r0, [pc, #36]	; (8001af8 <snek_gamestate_over+0x1ec>)
 8001ad4:	f7ff f8b6 	bl	8000c44 <delay>

		// save data on eeprom
		p_snek_game->game_state = GAMESTATE_SAVE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2209      	movs	r2, #9
 8001adc:	701a      	strb	r2, [r3, #0]
		SNEK_RESET_BIT(p_snek_game->CR1, SNEK_CR1_BUTTON_ENTER);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	885b      	ldrh	r3, [r3, #2]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	f023 0310 	bic.w	r3, r3, #16
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	805a      	strh	r2, [r3, #2]
	}
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	000cd140 	.word	0x000cd140

08001afc <snek_gamesate_save>:

static void snek_gamesate_save(snek_game_t *p_snek_game)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	// read scores from eeprom
	// check if score is qualifying to top
	// send new scores to eeprom

	p_snek_game->game_state = GAMESTATE_INIT_MENU;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <snek>:

// main function

void snek(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	switch (g_snek_game.game_state)
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <snek+0x84>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b09      	cmp	r3, #9
 8001b22:	d837      	bhi.n	8001b94 <snek+0x7c>
 8001b24:	a201      	add	r2, pc, #4	; (adr r2, 8001b2c <snek+0x14>)
 8001b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2a:	bf00      	nop
 8001b2c:	08001b55 	.word	0x08001b55
 8001b30:	08001b5d 	.word	0x08001b5d
 8001b34:	08001b95 	.word	0x08001b95
 8001b38:	08001b65 	.word	0x08001b65
 8001b3c:	08001b95 	.word	0x08001b95
 8001b40:	08001b6d 	.word	0x08001b6d
 8001b44:	08001b75 	.word	0x08001b75
 8001b48:	08001b7d 	.word	0x08001b7d
 8001b4c:	08001b85 	.word	0x08001b85
 8001b50:	08001b8d 	.word	0x08001b8d
	{
	case GAMESTATE_INIT_MENU:
		snek_gamestate_init(&g_snek_game);
 8001b54:	4811      	ldr	r0, [pc, #68]	; (8001b9c <snek+0x84>)
 8001b56:	f7ff fcf3 	bl	8001540 <snek_gamestate_init>
		break;
 8001b5a:	e01c      	b.n	8001b96 <snek+0x7e>

	case GAMESTATE_MENU:
		snek_gamesate_mainmenu(&g_snek_game);
 8001b5c:	480f      	ldr	r0, [pc, #60]	; (8001b9c <snek+0x84>)
 8001b5e:	f7ff fd17 	bl	8001590 <snek_gamesate_mainmenu>
		break;
 8001b62:	e018      	b.n	8001b96 <snek+0x7e>

	case GAMESTATE_SCORES:
		break;

	case GAMESTATE_ABOUT:
		snek_gamesate_about(&g_snek_game);
 8001b64:	480d      	ldr	r0, [pc, #52]	; (8001b9c <snek+0x84>)
 8001b66:	f7ff fd9d 	bl	80016a4 <snek_gamesate_about>
		break;
 8001b6a:	e014      	b.n	8001b96 <snek+0x7e>

	case GAMESTATE_SETTINGS:
		break;

	case GAMESTATE_INIT_GAME:
		snek_gamestate_init_game(&g_snek_game);
 8001b6c:	480b      	ldr	r0, [pc, #44]	; (8001b9c <snek+0x84>)
 8001b6e:	f7ff fdd5 	bl	800171c <snek_gamestate_init_game>
		break;
 8001b72:	e010      	b.n	8001b96 <snek+0x7e>

	case GAMESTATE_GAME:
		snek_gamestate_game(&g_snek_game);
 8001b74:	4809      	ldr	r0, [pc, #36]	; (8001b9c <snek+0x84>)
 8001b76:	f7ff fe29 	bl	80017cc <snek_gamestate_game>
		break;
 8001b7a:	e00c      	b.n	8001b96 <snek+0x7e>

	case GAMESTATE_INIT_OVER:
		snek_gamestate_init_over(&g_snek_game);
 8001b7c:	4807      	ldr	r0, [pc, #28]	; (8001b9c <snek+0x84>)
 8001b7e:	f7ff fe7b 	bl	8001878 <snek_gamestate_init_over>
		break;
 8001b82:	e008      	b.n	8001b96 <snek+0x7e>

	case GAMESTATE_OVER:
		snek_gamestate_over(&g_snek_game);
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <snek+0x84>)
 8001b86:	f7ff fec1 	bl	800190c <snek_gamestate_over>
		break;
 8001b8a:	e004      	b.n	8001b96 <snek+0x7e>

	case GAMESTATE_SAVE:
		snek_gamesate_save(&g_snek_game);
 8001b8c:	4803      	ldr	r0, [pc, #12]	; (8001b9c <snek+0x84>)
 8001b8e:	f7ff ffb5 	bl	8001afc <snek_gamesate_save>
		break;
 8001b92:	e000      	b.n	8001b96 <snek+0x7e>

	default:
		break;
 8001b94:	bf00      	nop
	}
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000498 	.word	0x20000498

08001ba0 <snek_button_callback>:

// callback to connect hardware buttons with snek game

void snek_button_callback(uint8_t GPIO_Pin)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]

// set button clicked bit in CR1
	switch (GPIO_Pin)
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	2b0e      	cmp	r3, #14
 8001bb0:	d84d      	bhi.n	8001c4e <snek_button_callback+0xae>
 8001bb2:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <snek_button_callback+0x18>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001c2b 	.word	0x08001c2b
 8001bbc:	08001bf5 	.word	0x08001bf5
 8001bc0:	08001c4f 	.word	0x08001c4f
 8001bc4:	08001c4f 	.word	0x08001c4f
 8001bc8:	08001c4f 	.word	0x08001c4f
 8001bcc:	08001c4f 	.word	0x08001c4f
 8001bd0:	08001c4f 	.word	0x08001c4f
 8001bd4:	08001c4f 	.word	0x08001c4f
 8001bd8:	08001c4f 	.word	0x08001c4f
 8001bdc:	08001c4f 	.word	0x08001c4f
 8001be0:	08001c4f 	.word	0x08001c4f
 8001be4:	08001c4f 	.word	0x08001c4f
 8001be8:	08001c3d 	.word	0x08001c3d
 8001bec:	08001c07 	.word	0x08001c07
 8001bf0:	08001c19 	.word	0x08001c19
	{
	case SNEK_BUTTON_DOWN:
		SNEK_SET_BIT(g_snek_game.CR1, SNEK_CR1_BUTTON_DOWN);
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <snek_button_callback+0xbc>)
 8001bf6:	885b      	ldrh	r3, [r3, #2]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <snek_button_callback+0xbc>)
 8001c02:	805a      	strh	r2, [r3, #2]
		break;
 8001c04:	e023      	b.n	8001c4e <snek_button_callback+0xae>

	case SNEK_BUTTON_UP:
		SNEK_SET_BIT(g_snek_game.CR1, SNEK_CR1_BUTTON_UP);
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <snek_button_callback+0xbc>)
 8001c08:	885b      	ldrh	r3, [r3, #2]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <snek_button_callback+0xbc>)
 8001c14:	805a      	strh	r2, [r3, #2]
		break;
 8001c16:	e01a      	b.n	8001c4e <snek_button_callback+0xae>

	case SNEK_BUTTON_LEFT:
		SNEK_SET_BIT(g_snek_game.CR1, SNEK_CR1_BUTTON_LEFT);
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <snek_button_callback+0xbc>)
 8001c1a:	885b      	ldrh	r3, [r3, #2]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <snek_button_callback+0xbc>)
 8001c26:	805a      	strh	r2, [r3, #2]
		break;
 8001c28:	e011      	b.n	8001c4e <snek_button_callback+0xae>

	case SNEK_BUTTON_RIGHT:
		SNEK_SET_BIT(g_snek_game.CR1, SNEK_CR1_BUTTON_RIGHT);
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <snek_button_callback+0xbc>)
 8001c2c:	885b      	ldrh	r3, [r3, #2]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <snek_button_callback+0xbc>)
 8001c38:	805a      	strh	r2, [r3, #2]
		break;
 8001c3a:	e008      	b.n	8001c4e <snek_button_callback+0xae>

	case SNEK_BUTTON_ENTER:
		SNEK_SET_BIT(g_snek_game.CR1, SNEK_CR1_BUTTON_ENTER);
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <snek_button_callback+0xbc>)
 8001c3e:	885b      	ldrh	r3, [r3, #2]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <snek_button_callback+0xbc>)
 8001c4a:	805a      	strh	r2, [r3, #2]
		break;
 8001c4c:	bf00      	nop
	}

}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000498 	.word	0x20000498

08001c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	db0a      	blt.n	8001c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	490c      	ldr	r1, [pc, #48]	; (8001cac <__NVIC_SetPriority+0x4c>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	0112      	lsls	r2, r2, #4
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	440b      	add	r3, r1
 8001c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c88:	e00a      	b.n	8001ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4908      	ldr	r1, [pc, #32]	; (8001cb0 <__NVIC_SetPriority+0x50>)
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	3b04      	subs	r3, #4
 8001c98:	0112      	lsls	r2, r2, #4
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	761a      	strb	r2, [r3, #24]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000e100 	.word	0xe000e100
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc4:	d301      	bcc.n	8001cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00f      	b.n	8001cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <SysTick_Config+0x40>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f7ff ffc2 	bl	8001c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <SysTick_Config+0x40>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SysTick_Config+0x40>)
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	e000e010 	.word	0xe000e010

08001cf8 <main>:
void i2c1_config(i2c_handle_t *p_handle_i2c1);

volatile uint32_t TickS;

int main()
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
	i2c_handle_t h_i2c1;

	SysTick_Config(84000000);
 8001cfe:	480d      	ldr	r0, [pc, #52]	; (8001d34 <main+0x3c>)
 8001d00:	f7ff ffd8 	bl	8001cb4 <SysTick_Config>

	// Configure RCC
	SysClockInit();
 8001d04:	f000 f888 	bl	8001e18 <SysClockInit>

	// Configure GPIO pins
	GPIOConfig();
 8001d08:	f000 f8aa 	bl	8001e60 <GPIOConfig>

	// Configure I2C peripherals
	i2c1_config(&h_i2c1);
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f8e2 	bl	8001ed8 <i2c1_config>
	SSD1306_Init(&h_i2c1);
 8001d14:	463b      	mov	r3, r7
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe ff38 	bl	8000b8c <SSD1306_Init>

	SSD1306_Clear(SSD1306_COLOR_BLACK);
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f7fe fe59 	bl	80009d4 <SSD1306_Clear>
	GFX_SetFont(font_8x5);
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <main+0x40>)
 8001d24:	f7fe fab4 	bl	8000290 <GFX_SetFont>

	SSD1306_Display();
 8001d28:	f7fe ff12 	bl	8000b50 <SSD1306_Display>



	while(1)
	{
		snek();
 8001d2c:	f7ff fef4 	bl	8001b18 <snek>
 8001d30:	e7fc      	b.n	8001d2c <main+0x34>
 8001d32:	bf00      	nop
 8001d34:	0501bd00 	.word	0x0501bd00
 8001d38:	08004288 	.word	0x08004288

08001d3c <EXTI1_IRQHandler>:
	}
}

// handler for button RIGHT
void EXTI1_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
	uint8_t _tempGPIOPin;

	if (EXTI->PR & (0b1 << SNEK_BUTTON_RIGHT))
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <EXTI1_IRQHandler+0x2c>)
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d004      	beq.n	8001d58 <EXTI1_IRQHandler+0x1c>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_RIGHT);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f000 fbc2 	bl	80024d8 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_RIGHT;
 8001d54:	2301      	movs	r3, #1
 8001d56:	71fb      	strb	r3, [r7, #7]
	}

	snek_button_callback(_tempGPIOPin);
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff20 	bl	8001ba0 <snek_button_callback>
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40013c00 	.word	0x40013c00

08001d6c <EXTI2_IRQHandler>:

// handler for button DOWN
void EXTI2_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
	uint8_t _tempGPIOPin;

	if (EXTI->PR & (0b1 << SNEK_BUTTON_DOWN))
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <EXTI2_IRQHandler+0x2c>)
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d004      	beq.n	8001d88 <EXTI2_IRQHandler+0x1c>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_DOWN);
 8001d7e:	2002      	movs	r0, #2
 8001d80:	f000 fbaa 	bl	80024d8 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_DOWN;
 8001d84:	2302      	movs	r3, #2
 8001d86:	71fb      	strb	r3, [r7, #7]
	}

	snek_button_callback(_tempGPIOPin);
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff08 	bl	8001ba0 <snek_button_callback>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40013c00 	.word	0x40013c00

08001d9c <EXTI15_10_IRQHandler>:

// handler for buttons up/left/enter
void EXTI15_10_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
	uint8_t _tempGPIOPin;
	// if button is clicked
	if (EXTI->PR & (0b1 << SNEK_BUTTON_UP))
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <EXTI15_10_IRQHandler+0x5c>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <EXTI15_10_IRQHandler+0x1e>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_UP);
 8001dae:	200e      	movs	r0, #14
 8001db0:	f000 fb92 	bl	80024d8 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_UP;
 8001db4:	230e      	movs	r3, #14
 8001db6:	71fb      	strb	r3, [r7, #7]
 8001db8:	e016      	b.n	8001de8 <EXTI15_10_IRQHandler+0x4c>
	}
	else if (EXTI->PR & (0b1 << SNEK_BUTTON_LEFT))
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <EXTI15_10_IRQHandler+0x5c>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <EXTI15_10_IRQHandler+0x36>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_LEFT);
 8001dc6:	200f      	movs	r0, #15
 8001dc8:	f000 fb86 	bl	80024d8 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_LEFT;
 8001dcc:	230f      	movs	r3, #15
 8001dce:	71fb      	strb	r3, [r7, #7]
 8001dd0:	e00a      	b.n	8001de8 <EXTI15_10_IRQHandler+0x4c>
	}

	else if (EXTI->PR & (0b1 << SNEK_BUTTON_ENTER))
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <EXTI15_10_IRQHandler+0x5c>)
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d004      	beq.n	8001de8 <EXTI15_10_IRQHandler+0x4c>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_ENTER);
 8001dde:	200d      	movs	r0, #13
 8001de0:	f000 fb7a 	bl	80024d8 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_ENTER;
 8001de4:	230d      	movs	r3, #13
 8001de6:	71fb      	strb	r3, [r7, #7]
	}

	snek_button_callback(_tempGPIOPin);
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fed8 	bl	8001ba0 <snek_button_callback>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40013c00 	.word	0x40013c00

08001dfc <SysTick_Handler>:

void SysTick_Handler()
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
	TickS++;
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <SysTick_Handler+0x18>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	4a03      	ldr	r2, [pc, #12]	; (8001e14 <SysTick_Handler+0x18>)
 8001e08:	6013      	str	r3, [r2, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	200005d0 	.word	0x200005d0

08001e18 <SysClockInit>:

// system clock init function
void SysClockInit(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
	RCC_ClockInitTypeDef pClockInit;

	pClockInit.APB1Prescaler = RCC_ABP1_PRESCALER_DIV2;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	713b      	strb	r3, [r7, #4]
	pClockInit.APB2Prescaler = RCC_ABP2_PRESCALER_NODIV;
 8001e22:	2300      	movs	r3, #0
 8001e24:	717b      	strb	r3, [r7, #5]
	pClockInit.FLASHLatency = RCC_FLASHLATENCY_2WS;
 8001e26:	2302      	movs	r3, #2
 8001e28:	70bb      	strb	r3, [r7, #2]
	pClockInit.HPREPrescaler = RCC_HPRE_PRESCALER_NODIV;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	70fb      	strb	r3, [r7, #3]
	pClockInit.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	703b      	strb	r3, [r7, #0]
	pClockInit.VOSScale = RCC_VOS_SCALE2;
 8001e32:	2302      	movs	r3, #2
 8001e34:	707b      	strb	r3, [r7, #1]
	pClockInit.PLL.PLLSource = RCC_PLL_SOURCE_HSI;
 8001e36:	2300      	movs	r3, #0
 8001e38:	71fb      	strb	r3, [r7, #7]
	pClockInit.PLL.PLLState = RCC_PLL_STATE_ENABLE;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	71bb      	strb	r3, [r7, #6]
	pClockInit.PLL.PLLM = 16;
 8001e3e:	2310      	movs	r3, #16
 8001e40:	723b      	strb	r3, [r7, #8]
	pClockInit.PLL.PLLN = 336;
 8001e42:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e46:	817b      	strh	r3, [r7, #10]
	pClockInit.PLL.PLLP = RCC_PLLP_DIV4;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	733b      	strb	r3, [r7, #12]
	pClockInit.PLL.PLLQ = 7;
 8001e4c:	2307      	movs	r3, #7
 8001e4e:	737b      	strb	r3, [r7, #13]

	RCC_InitClock(&pClockInit);
 8001e50:	463b      	mov	r3, r7
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fd8a 	bl	800296c <RCC_InitClock>
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <GPIOConfig>:

//configure GPIO used in the project
void GPIOConfig(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOx;
	GPIOx.PinConfig.PinNumber = GPIO_PIN_5;
 8001e66:	2305      	movs	r3, #5
 8001e68:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_OUTPUT;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	727b      	strb	r3, [r7, #9]
	GPIOx.PinConfig.OutputType = GPIO_PIN_OT_PP;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	72bb      	strb	r3, [r7, #10]
	GPIOx.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	733b      	strb	r3, [r7, #12]
	GPIOx.pGPIOx = GPIOA;
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <GPIOConfig+0x70>)
 8001e78:	607b      	str	r3, [r7, #4]
	GPIO_InitPin(&GPIOx);
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 f99d 	bl	80021bc <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_13;
 8001e82:	230d      	movs	r3, #13
 8001e84:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_EXTI_FT;
 8001e86:	2304      	movs	r3, #4
 8001e88:	727b      	strb	r3, [r7, #9]
	GPIOx.pGPIOx = GPIOB;
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <GPIOConfig+0x74>)
 8001e8c:	607b      	str	r3, [r7, #4]
	GPIO_InitPin(&GPIOx);
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 f993 	bl	80021bc <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_14;
 8001e96:	230e      	movs	r3, #14
 8001e98:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 f98d 	bl	80021bc <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_15;
 8001ea2:	230f      	movs	r3, #15
 8001ea4:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 f987 	bl	80021bc <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_1;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 f981 	bl	80021bc <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_2;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 f97b 	bl	80021bc <GPIO_InitPin>
	
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40020400 	.word	0x40020400

08001ed8 <i2c1_config>:

void i2c1_config(i2c_handle_t *p_handle_i2c1)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	

	p_handle_i2c1->p_i2cx = I2C1;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <i2c1_config+0x28>)
 8001ee4:	601a      	str	r2, [r3, #0]
	p_handle_i2c1->i2c_config.abp1_freq_mhz = 42;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	222a      	movs	r2, #42	; 0x2a
 8001eea:	711a      	strb	r2, [r3, #4]
	p_handle_i2c1->i2c_config.speed = I2C_SPEED_FAST_DUTY0;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	715a      	strb	r2, [r3, #5]

	i2c_init(p_handle_i2c1);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fbba 	bl	800266c <i2c_init>
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40005400 	.word	0x40005400

08001f04 <_getpid>:
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	2301      	movs	r3, #1
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_kill>:
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	f000 fe57 	bl	8002bd0 <__errno>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2216      	movs	r2, #22
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <_exit>:
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ffe7 	bl	8001f14 <_kill>
 8001f46:	e7fe      	b.n	8001f46 <_exit+0x12>

08001f48 <_read>:
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e00a      	b.n	8001f70 <_read+0x28>
 8001f5a:	f3af 8000 	nop.w
 8001f5e:	4601      	mov	r1, r0
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	60ba      	str	r2, [r7, #8]
 8001f66:	b2ca      	uxtb	r2, r1
 8001f68:	701a      	strb	r2, [r3, #0]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dbf0      	blt.n	8001f5a <_read+0x12>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_write>:
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	e009      	b.n	8001fa8 <_write+0x26>
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	60ba      	str	r2, [r7, #8]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f3af 8000 	nop.w
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	dbf1      	blt.n	8001f94 <_write+0x12>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <_close>:
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <_fstat>:
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <_isatty>:
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_lseek>:
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	2300      	movs	r3, #0
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <_sbrk>:
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	4a14      	ldr	r2, [pc, #80]	; (8002080 <_sbrk+0x5c>)
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <_sbrk+0x60>)
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <_sbrk+0x22>
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <_sbrk+0x64>)
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <_sbrk+0x68>)
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <_sbrk+0x64>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	429a      	cmp	r2, r3
 8002052:	d207      	bcs.n	8002064 <_sbrk+0x40>
 8002054:	f000 fdbc 	bl	8002bd0 <__errno>
 8002058:	4603      	mov	r3, r0
 800205a:	220c      	movs	r2, #12
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	f04f 33ff 	mov.w	r3, #4294967295
 8002062:	e009      	b.n	8002078 <_sbrk+0x54>
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <_sbrk+0x64>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <_sbrk+0x64>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	4a05      	ldr	r2, [pc, #20]	; (8002088 <_sbrk+0x64>)
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20018000 	.word	0x20018000
 8002084:	00000400 	.word	0x00000400
 8002088:	20000484 	.word	0x20000484
 800208c:	200005e8 	.word	0x200005e8

08002090 <SystemInit>:
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
 8002094:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <SystemInit+0x20>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <SystemInit+0x20>)
 800209c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <Reset_Handler>:
 80020b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020ec <LoopFillZerobss+0x12>
 80020b8:	480d      	ldr	r0, [pc, #52]	; (80020f0 <LoopFillZerobss+0x16>)
 80020ba:	490e      	ldr	r1, [pc, #56]	; (80020f4 <LoopFillZerobss+0x1a>)
 80020bc:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <LoopFillZerobss+0x1e>)
 80020be:	2300      	movs	r3, #0
 80020c0:	e002      	b.n	80020c8 <LoopCopyDataInit>

080020c2 <CopyDataInit>:
 80020c2:	58d4      	ldr	r4, [r2, r3]
 80020c4:	50c4      	str	r4, [r0, r3]
 80020c6:	3304      	adds	r3, #4

080020c8 <LoopCopyDataInit>:
 80020c8:	18c4      	adds	r4, r0, r3
 80020ca:	428c      	cmp	r4, r1
 80020cc:	d3f9      	bcc.n	80020c2 <CopyDataInit>
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <LoopFillZerobss+0x22>)
 80020d0:	4c0b      	ldr	r4, [pc, #44]	; (8002100 <LoopFillZerobss+0x26>)
 80020d2:	2300      	movs	r3, #0
 80020d4:	e001      	b.n	80020da <LoopFillZerobss>

080020d6 <FillZerobss>:
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	3204      	adds	r2, #4

080020da <LoopFillZerobss>:
 80020da:	42a2      	cmp	r2, r4
 80020dc:	d3fb      	bcc.n	80020d6 <FillZerobss>
 80020de:	f7ff ffd7 	bl	8002090 <SystemInit>
 80020e2:	f000 fd7b 	bl	8002bdc <__libc_init_array>
 80020e6:	f7ff fe07 	bl	8001cf8 <main>
 80020ea:	4770      	bx	lr
 80020ec:	20018000 	.word	0x20018000
 80020f0:	20000000 	.word	0x20000000
 80020f4:	20000068 	.word	0x20000068
 80020f8:	080045bc 	.word	0x080045bc
 80020fc:	20000068 	.word	0x20000068
 8002100:	200005e4 	.word	0x200005e4

08002104 <ADC_IRQHandler>:
 8002104:	e7fe      	b.n	8002104 <ADC_IRQHandler>
	...

08002108 <GPIO_ClockEnable>:
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a23      	ldr	r2, [pc, #140]	; (80021a0 <GPIO_ClockEnable+0x98>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d106      	bne.n	8002126 <GPIO_ClockEnable+0x1e>
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <GPIO_ClockEnable+0x9c>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <GPIO_ClockEnable+0x9c>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6313      	str	r3, [r2, #48]	; 0x30
 8002124:	e035      	b.n	8002192 <GPIO_ClockEnable+0x8a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a1f      	ldr	r2, [pc, #124]	; (80021a8 <GPIO_ClockEnable+0xa0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d106      	bne.n	800213c <GPIO_ClockEnable+0x34>
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <GPIO_ClockEnable+0x9c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a1c      	ldr	r2, [pc, #112]	; (80021a4 <GPIO_ClockEnable+0x9c>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	e02a      	b.n	8002192 <GPIO_ClockEnable+0x8a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <GPIO_ClockEnable+0xa4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d106      	bne.n	8002152 <GPIO_ClockEnable+0x4a>
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <GPIO_ClockEnable+0x9c>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	4a16      	ldr	r2, [pc, #88]	; (80021a4 <GPIO_ClockEnable+0x9c>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	6313      	str	r3, [r2, #48]	; 0x30
 8002150:	e01f      	b.n	8002192 <GPIO_ClockEnable+0x8a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <GPIO_ClockEnable+0xa8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d106      	bne.n	8002168 <GPIO_ClockEnable+0x60>
 800215a:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <GPIO_ClockEnable+0x9c>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a11      	ldr	r2, [pc, #68]	; (80021a4 <GPIO_ClockEnable+0x9c>)
 8002160:	f043 0308 	orr.w	r3, r3, #8
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	e014      	b.n	8002192 <GPIO_ClockEnable+0x8a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <GPIO_ClockEnable+0xac>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d106      	bne.n	800217e <GPIO_ClockEnable+0x76>
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <GPIO_ClockEnable+0x9c>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	4a0b      	ldr	r2, [pc, #44]	; (80021a4 <GPIO_ClockEnable+0x9c>)
 8002176:	f043 0310 	orr.w	r3, r3, #16
 800217a:	6313      	str	r3, [r2, #48]	; 0x30
 800217c:	e009      	b.n	8002192 <GPIO_ClockEnable+0x8a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <GPIO_ClockEnable+0xb0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d105      	bne.n	8002192 <GPIO_ClockEnable+0x8a>
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <GPIO_ClockEnable+0x9c>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a06      	ldr	r2, [pc, #24]	; (80021a4 <GPIO_ClockEnable+0x9c>)
 800218c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40020000 	.word	0x40020000
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40020400 	.word	0x40020400
 80021ac:	40020800 	.word	0x40020800
 80021b0:	40020c00 	.word	0x40020c00
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40021c00 	.word	0x40021c00

080021bc <GPIO_InitPin>:
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff9d 	bl	8002108 <GPIO_ClockEnable>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	795b      	ldrb	r3, [r3, #5]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d81f      	bhi.n	8002216 <GPIO_InitPin+0x5a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	791b      	ldrb	r3, [r3, #4]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2103      	movs	r1, #3
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	4619      	mov	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	400a      	ands	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	795b      	ldrb	r3, [r3, #5]
 80021fe:	4619      	mov	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	791b      	ldrb	r3, [r3, #4]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	4619      	mov	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e0a9      	b.n	800236a <GPIO_InitPin+0x1ae>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	791b      	ldrb	r3, [r3, #4]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2103      	movs	r1, #3
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	4619      	mov	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	400a      	ands	r2, r1
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	4b9e      	ldr	r3, [pc, #632]	; (80024b0 <GPIO_InitPin+0x2f4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	7912      	ldrb	r2, [r2, #4]
 800223c:	4611      	mov	r1, r2
 800223e:	2201      	movs	r2, #1
 8002240:	408a      	lsls	r2, r1
 8002242:	4611      	mov	r1, r2
 8002244:	4a9a      	ldr	r2, [pc, #616]	; (80024b0 <GPIO_InitPin+0x2f4>)
 8002246:	430b      	orrs	r3, r1
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	795b      	ldrb	r3, [r3, #5]
 800224e:	2b04      	cmp	r3, #4
 8002250:	d003      	beq.n	800225a <GPIO_InitPin+0x9e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	795b      	ldrb	r3, [r3, #5]
 8002256:	2b06      	cmp	r3, #6
 8002258:	d10a      	bne.n	8002270 <GPIO_InitPin+0xb4>
 800225a:	4b95      	ldr	r3, [pc, #596]	; (80024b0 <GPIO_InitPin+0x2f4>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	7912      	ldrb	r2, [r2, #4]
 8002262:	4611      	mov	r1, r2
 8002264:	2201      	movs	r2, #1
 8002266:	408a      	lsls	r2, r1
 8002268:	4611      	mov	r1, r2
 800226a:	4a91      	ldr	r2, [pc, #580]	; (80024b0 <GPIO_InitPin+0x2f4>)
 800226c:	430b      	orrs	r3, r1
 800226e:	60d3      	str	r3, [r2, #12]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	795b      	ldrb	r3, [r3, #5]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d003      	beq.n	8002280 <GPIO_InitPin+0xc4>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	795b      	ldrb	r3, [r3, #5]
 800227c:	2b06      	cmp	r3, #6
 800227e:	d10a      	bne.n	8002296 <GPIO_InitPin+0xda>
 8002280:	4b8b      	ldr	r3, [pc, #556]	; (80024b0 <GPIO_InitPin+0x2f4>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	7912      	ldrb	r2, [r2, #4]
 8002288:	4611      	mov	r1, r2
 800228a:	2201      	movs	r2, #1
 800228c:	408a      	lsls	r2, r1
 800228e:	4611      	mov	r1, r2
 8002290:	4a87      	ldr	r2, [pc, #540]	; (80024b0 <GPIO_InitPin+0x2f4>)
 8002292:	430b      	orrs	r3, r1
 8002294:	6093      	str	r3, [r2, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	791b      	ldrb	r3, [r3, #4]
 800229a:	2b04      	cmp	r3, #4
 800229c:	d80c      	bhi.n	80022b8 <GPIO_InitPin+0xfc>
 800229e:	4b85      	ldr	r3, [pc, #532]	; (80024b4 <GPIO_InitPin+0x2f8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	7912      	ldrb	r2, [r2, #4]
 80022a6:	3206      	adds	r2, #6
 80022a8:	2101      	movs	r1, #1
 80022aa:	fa01 f202 	lsl.w	r2, r1, r2
 80022ae:	4611      	mov	r1, r2
 80022b0:	4a80      	ldr	r2, [pc, #512]	; (80024b4 <GPIO_InitPin+0x2f8>)
 80022b2:	430b      	orrs	r3, r1
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e010      	b.n	80022da <GPIO_InitPin+0x11e>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	791b      	ldrb	r3, [r3, #4]
 80022bc:	2b09      	cmp	r3, #9
 80022be:	d806      	bhi.n	80022ce <GPIO_InitPin+0x112>
 80022c0:	4b7c      	ldr	r3, [pc, #496]	; (80024b4 <GPIO_InitPin+0x2f8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a7b      	ldr	r2, [pc, #492]	; (80024b4 <GPIO_InitPin+0x2f8>)
 80022c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	e005      	b.n	80022da <GPIO_InitPin+0x11e>
 80022ce:	4b79      	ldr	r3, [pc, #484]	; (80024b4 <GPIO_InitPin+0x2f8>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4a78      	ldr	r2, [pc, #480]	; (80024b4 <GPIO_InitPin+0x2f8>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d8:	6053      	str	r3, [r2, #4]
 80022da:	4b77      	ldr	r3, [pc, #476]	; (80024b8 <GPIO_InitPin+0x2fc>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	4a76      	ldr	r2, [pc, #472]	; (80024b8 <GPIO_InitPin+0x2fc>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e4:	6453      	str	r3, [r2, #68]	; 0x44
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a74      	ldr	r2, [pc, #464]	; (80024bc <GPIO_InitPin+0x300>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d024      	beq.n	800233a <GPIO_InitPin+0x17e>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a72      	ldr	r2, [pc, #456]	; (80024c0 <GPIO_InitPin+0x304>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d01d      	beq.n	8002336 <GPIO_InitPin+0x17a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a71      	ldr	r2, [pc, #452]	; (80024c4 <GPIO_InitPin+0x308>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d016      	beq.n	8002332 <GPIO_InitPin+0x176>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a6f      	ldr	r2, [pc, #444]	; (80024c8 <GPIO_InitPin+0x30c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00f      	beq.n	800232e <GPIO_InitPin+0x172>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a6e      	ldr	r2, [pc, #440]	; (80024cc <GPIO_InitPin+0x310>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d008      	beq.n	800232a <GPIO_InitPin+0x16e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a6c      	ldr	r2, [pc, #432]	; (80024d0 <GPIO_InitPin+0x314>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d101      	bne.n	8002326 <GPIO_InitPin+0x16a>
 8002322:	2307      	movs	r3, #7
 8002324:	e00a      	b.n	800233c <GPIO_InitPin+0x180>
 8002326:	2300      	movs	r3, #0
 8002328:	e008      	b.n	800233c <GPIO_InitPin+0x180>
 800232a:	2304      	movs	r3, #4
 800232c:	e006      	b.n	800233c <GPIO_InitPin+0x180>
 800232e:	2303      	movs	r3, #3
 8002330:	e004      	b.n	800233c <GPIO_InitPin+0x180>
 8002332:	2302      	movs	r3, #2
 8002334:	e002      	b.n	800233c <GPIO_InitPin+0x180>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <GPIO_InitPin+0x180>
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]
 800233e:	4a65      	ldr	r2, [pc, #404]	; (80024d4 <GPIO_InitPin+0x318>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	791b      	ldrb	r3, [r3, #4]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	b2d8      	uxtb	r0, r3
 8002348:	4603      	mov	r3, r0
 800234a:	3302      	adds	r3, #2
 800234c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002350:	7bf9      	ldrb	r1, [r7, #15]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	7912      	ldrb	r2, [r2, #4]
 8002356:	f002 0203 	and.w	r2, r2, #3
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	fa01 f202 	lsl.w	r2, r1, r2
 8002360:	495c      	ldr	r1, [pc, #368]	; (80024d4 <GPIO_InitPin+0x318>)
 8002362:	431a      	orrs	r2, r3
 8002364:	1c83      	adds	r3, r0, #2
 8002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	795b      	ldrb	r3, [r3, #5]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d003      	beq.n	800237a <GPIO_InitPin+0x1be>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	795b      	ldrb	r3, [r3, #5]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d13b      	bne.n	80023f2 <GPIO_InitPin+0x236>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	791b      	ldrb	r3, [r3, #4]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2103      	movs	r1, #3
 8002388:	fa01 f303 	lsl.w	r3, r1, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	4619      	mov	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	400a      	ands	r2, r1
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	79db      	ldrb	r3, [r3, #7]
 80023a2:	4619      	mov	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	791b      	ldrb	r3, [r3, #4]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	4619      	mov	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	791b      	ldrb	r3, [r3, #4]
 80023c2:	4619      	mov	r1, r3
 80023c4:	2301      	movs	r3, #1
 80023c6:	408b      	lsls	r3, r1
 80023c8:	43db      	mvns	r3, r3
 80023ca:	4619      	mov	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	400a      	ands	r2, r1
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	799b      	ldrb	r3, [r3, #6]
 80023de:	4619      	mov	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	791b      	ldrb	r3, [r3, #4]
 80023e4:	fa01 f303 	lsl.w	r3, r1, r3
 80023e8:	4619      	mov	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	795b      	ldrb	r3, [r3, #5]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d137      	bne.n	800246a <GPIO_InitPin+0x2ae>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	7912      	ldrb	r2, [r2, #4]
 8002402:	08d2      	lsrs	r2, r2, #3
 8002404:	b2d0      	uxtb	r0, r2
 8002406:	4602      	mov	r2, r0
 8002408:	3208      	adds	r2, #8
 800240a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	791b      	ldrb	r3, [r3, #4]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	220f      	movs	r2, #15
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4011      	ands	r1, r2
 8002426:	f100 0208 	add.w	r2, r0, #8
 800242a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	7912      	ldrb	r2, [r2, #4]
 8002436:	08d2      	lsrs	r2, r2, #3
 8002438:	b2d1      	uxtb	r1, r2
 800243a:	460a      	mov	r2, r1
 800243c:	3208      	adds	r2, #8
 800243e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7a5b      	ldrb	r3, [r3, #9]
 8002446:	4618      	mov	r0, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	791b      	ldrb	r3, [r3, #4]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	fa00 f303 	lsl.w	r3, r0, r3
 8002456:	461c      	mov	r4, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4608      	mov	r0, r1
 800245e:	ea42 0104 	orr.w	r1, r2, r4
 8002462:	f100 0208 	add.w	r2, r0, #8
 8002466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	791b      	ldrb	r3, [r3, #4]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2103      	movs	r1, #3
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	4619      	mov	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	400a      	ands	r2, r1
 8002486:	60da      	str	r2, [r3, #12]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7a1b      	ldrb	r3, [r3, #8]
 8002492:	4619      	mov	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	791b      	ldrb	r3, [r3, #4]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	4619      	mov	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	60da      	str	r2, [r3, #12]
 80024a8:	bf00      	nop
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd90      	pop	{r4, r7, pc}
 80024b0:	40013c00 	.word	0x40013c00
 80024b4:	e000e100 	.word	0xe000e100
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020400 	.word	0x40020400
 80024c4:	40020800 	.word	0x40020800
 80024c8:	40020c00 	.word	0x40020c00
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40021c00 	.word	0x40021c00
 80024d4:	40013800 	.word	0x40013800

080024d8 <GPIO_ClearPendingEXTIFlag>:
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <GPIO_ClearPendingEXTIFlag+0x2c>)
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	79fa      	ldrb	r2, [r7, #7]
 80024e8:	2101      	movs	r1, #1
 80024ea:	fa01 f202 	lsl.w	r2, r1, r2
 80024ee:	4611      	mov	r1, r2
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <GPIO_ClearPendingEXTIFlag+0x2c>)
 80024f2:	430b      	orrs	r3, r1
 80024f4:	6153      	str	r3, [r2, #20]
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40013c00 	.word	0x40013c00

08002508 <i2c_clock_enable>:
 *
 * @param[*p_i2cx] - base address of i2c peripheral
 * @return - void
 */
static void i2c_clock_enable(I2C_TypeDef *p_i2cx)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	if (p_i2cx == I2C1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a12      	ldr	r2, [pc, #72]	; (800255c <i2c_clock_enable+0x54>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d106      	bne.n	8002526 <i2c_clock_enable+0x1e>
	{
		RCC_CLOCK_I2C1_ENABLE();
 8002518:	4b11      	ldr	r3, [pc, #68]	; (8002560 <i2c_clock_enable+0x58>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	4a10      	ldr	r2, [pc, #64]	; (8002560 <i2c_clock_enable+0x58>)
 800251e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002522:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else if (p_i2cx == I2C3)
	{
		RCC_CLOCK_I2C3_ENABLE();
	}
}
 8002524:	e014      	b.n	8002550 <i2c_clock_enable+0x48>
	else if (p_i2cx == I2C2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a0e      	ldr	r2, [pc, #56]	; (8002564 <i2c_clock_enable+0x5c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d106      	bne.n	800253c <i2c_clock_enable+0x34>
		RCC_CLOCK_I2C2_ENABLE();
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <i2c_clock_enable+0x58>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <i2c_clock_enable+0x58>)
 8002534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
}
 800253a:	e009      	b.n	8002550 <i2c_clock_enable+0x48>
	else if (p_i2cx == I2C3)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <i2c_clock_enable+0x60>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d105      	bne.n	8002550 <i2c_clock_enable+0x48>
		RCC_CLOCK_I2C3_ENABLE();
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <i2c_clock_enable+0x58>)
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	4a05      	ldr	r2, [pc, #20]	; (8002560 <i2c_clock_enable+0x58>)
 800254a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800254e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	40005400 	.word	0x40005400
 8002560:	40023800 	.word	0x40023800
 8002564:	40005800 	.word	0x40005800
 8002568:	40005c00 	.word	0x40005c00

0800256c <i2c_init_gpio_pins>:
 * @param[*p_i2cx] - i2c address
 * @param[alternate_pos] - pins alternative positions select
 * @return - void
 */
static void i2c_init_gpio_pins(I2C_TypeDef *p_i2cx, uint8_t alternate_pos)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t gpio_sda, gpio_scl;

	if (p_i2cx == I2C1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a35      	ldr	r2, [pc, #212]	; (8002650 <i2c_init_gpio_pins+0xe4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d112      	bne.n	80025a6 <i2c_init_gpio_pins+0x3a>
	{
		// PB6 SCL
		gpio_scl.pGPIOx = GPIOB;
 8002580:	4b34      	ldr	r3, [pc, #208]	; (8002654 <i2c_init_gpio_pins+0xe8>)
 8002582:	60bb      	str	r3, [r7, #8]
		gpio_scl.PinConfig.PinNumber = GPIO_PIN_6;
 8002584:	2306      	movs	r3, #6
 8002586:	733b      	strb	r3, [r7, #12]

		// PB7 SDA
		gpio_sda.pGPIOx = GPIOB;
 8002588:	4b32      	ldr	r3, [pc, #200]	; (8002654 <i2c_init_gpio_pins+0xe8>)
 800258a:	617b      	str	r3, [r7, #20]
		gpio_sda.PinConfig.PinNumber = GPIO_PIN_7;
 800258c:	2307      	movs	r3, #7
 800258e:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		gpio_scl.PinConfig.AF = GPIO_PIN_AF_AF4;
 8002590:	2304      	movs	r3, #4
 8002592:	747b      	strb	r3, [r7, #17]
		gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF4;
 8002594:	2304      	movs	r3, #4
 8002596:	777b      	strb	r3, [r7, #29]

		if (alternate_pos == 1)
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d103      	bne.n	80025a6 <i2c_init_gpio_pins+0x3a>
		{
			// PB8 SCL
			gpio_scl.PinConfig.PinNumber = GPIO_PIN_8;
 800259e:	2308      	movs	r3, #8
 80025a0:	733b      	strb	r3, [r7, #12]
			// PB9 SDA
			gpio_sda.PinConfig.PinNumber = GPIO_PIN_9;
 80025a2:	2309      	movs	r3, #9
 80025a4:	763b      	strb	r3, [r7, #24]
		}

	}

	if (p_i2cx == I2C2)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a2b      	ldr	r2, [pc, #172]	; (8002658 <i2c_init_gpio_pins+0xec>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d112      	bne.n	80025d4 <i2c_init_gpio_pins+0x68>
	{

		// PB10 SCL
		gpio_scl.pGPIOx = GPIOB;
 80025ae:	4b29      	ldr	r3, [pc, #164]	; (8002654 <i2c_init_gpio_pins+0xe8>)
 80025b0:	60bb      	str	r3, [r7, #8]
		gpio_scl.PinConfig.PinNumber = GPIO_PIN_10;
 80025b2:	230a      	movs	r3, #10
 80025b4:	733b      	strb	r3, [r7, #12]

		// PB11 SDA
		gpio_sda.pGPIOx = GPIOB;
 80025b6:	4b27      	ldr	r3, [pc, #156]	; (8002654 <i2c_init_gpio_pins+0xe8>)
 80025b8:	617b      	str	r3, [r7, #20]
		gpio_sda.PinConfig.PinNumber = GPIO_PIN_11;
 80025ba:	230b      	movs	r3, #11
 80025bc:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		gpio_scl.PinConfig.AF = GPIO_PIN_AF_AF4;
 80025be:	2304      	movs	r3, #4
 80025c0:	747b      	strb	r3, [r7, #17]
		gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF4;
 80025c2:	2304      	movs	r3, #4
 80025c4:	777b      	strb	r3, [r7, #29]

		if (alternate_pos == 1)
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d103      	bne.n	80025d4 <i2c_init_gpio_pins+0x68>
		{
			// PB3 SDA
			gpio_sda.PinConfig.PinNumber = GPIO_PIN_3;
 80025cc:	2303      	movs	r3, #3
 80025ce:	763b      	strb	r3, [r7, #24]
			gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF9;
 80025d0:	2309      	movs	r3, #9
 80025d2:	777b      	strb	r3, [r7, #29]
		}

	}

	if (p_i2cx == I2C3)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a21      	ldr	r2, [pc, #132]	; (800265c <i2c_init_gpio_pins+0xf0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d11a      	bne.n	8002612 <i2c_init_gpio_pins+0xa6>
	{

		// PA8 SCL
		gpio_scl.pGPIOx = GPIOA;
 80025dc:	4b20      	ldr	r3, [pc, #128]	; (8002660 <i2c_init_gpio_pins+0xf4>)
 80025de:	60bb      	str	r3, [r7, #8]
		gpio_scl.PinConfig.PinNumber = GPIO_PIN_8;
 80025e0:	2308      	movs	r3, #8
 80025e2:	733b      	strb	r3, [r7, #12]

		// PB9 SDA
		gpio_sda.pGPIOx = GPIOB;
 80025e4:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <i2c_init_gpio_pins+0xe8>)
 80025e6:	617b      	str	r3, [r7, #20]
		gpio_sda.PinConfig.PinNumber = GPIO_PIN_4;
 80025e8:	2304      	movs	r3, #4
 80025ea:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		gpio_scl.PinConfig.AF = GPIO_PIN_AF_AF4;
 80025ec:	2304      	movs	r3, #4
 80025ee:	747b      	strb	r3, [r7, #17]
		gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF4;
 80025f0:	2304      	movs	r3, #4
 80025f2:	777b      	strb	r3, [r7, #29]

		if (alternate_pos == 1)
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d10b      	bne.n	8002612 <i2c_init_gpio_pins+0xa6>
		{
			RCC_CLOCK_GPIOC_ENABLE();
 80025fa:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <i2c_init_gpio_pins+0xf8>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a19      	ldr	r2, [pc, #100]	; (8002664 <i2c_init_gpio_pins+0xf8>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
			// PC9 SDA
			gpio_sda.pGPIOx = GPIOC;
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <i2c_init_gpio_pins+0xfc>)
 8002608:	617b      	str	r3, [r7, #20]
			gpio_sda.PinConfig.PinNumber = GPIO_PIN_9;
 800260a:	2309      	movs	r3, #9
 800260c:	763b      	strb	r3, [r7, #24]

			// Alternate Function
			gpio_sda.PinConfig.AF = GPIO_PIN_AF_AF9;
 800260e:	2309      	movs	r3, #9
 8002610:	777b      	strb	r3, [r7, #29]
		}

	}

	// Mode AF
	gpio_scl.PinConfig.Mode = GPIO_PIN_MODE_AF;
 8002612:	2302      	movs	r3, #2
 8002614:	737b      	strb	r3, [r7, #13]
	gpio_sda.PinConfig.Mode = GPIO_PIN_MODE_AF;
 8002616:	2302      	movs	r3, #2
 8002618:	767b      	strb	r3, [r7, #25]

	// Output type open drain
	gpio_scl.PinConfig.OutputType = GPIO_PIN_OT_OD;
 800261a:	2301      	movs	r3, #1
 800261c:	73bb      	strb	r3, [r7, #14]
	gpio_sda.PinConfig.OutputType = GPIO_PIN_OT_OD;
 800261e:	2301      	movs	r3, #1
 8002620:	76bb      	strb	r3, [r7, #26]

	// Output speed very high
	gpio_scl.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 8002622:	2303      	movs	r3, #3
 8002624:	73fb      	strb	r3, [r7, #15]
	gpio_sda.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 8002626:	2303      	movs	r3, #3
 8002628:	76fb      	strb	r3, [r7, #27]

	// Pull ups
	gpio_scl.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	743b      	strb	r3, [r7, #16]
	gpio_sda.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	773b      	strb	r3, [r7, #28]

	GPIO_InitPin(&gpio_sda);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fdc0 	bl	80021bc <GPIO_InitPin>
	GPIO_InitPin(&gpio_scl);
 800263c:	f107 0308 	add.w	r3, r7, #8
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fdbb 	bl	80021bc <GPIO_InitPin>

}
 8002646:	bf00      	nop
 8002648:	3720      	adds	r7, #32
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40005400 	.word	0x40005400
 8002654:	40020400 	.word	0x40020400
 8002658:	40005800 	.word	0x40005800
 800265c:	40005c00 	.word	0x40005c00
 8002660:	40020000 	.word	0x40020000
 8002664:	40023800 	.word	0x40023800
 8002668:	40020800 	.word	0x40020800

0800266c <i2c_init>:
 *
 * @param[*p_handle_i2c] - handler to i2c structure
 * @return - void
 */
uint8_t i2c_init(i2c_handle_t *p_handle_i2c)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	// enable peripheral clock
	i2c_clock_enable(p_handle_i2c->p_i2cx);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff45 	bl	8002508 <i2c_clock_enable>

	// init GPIO pins
	i2c_init_gpio_pins(p_handle_i2c->p_i2cx, 0);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2100      	movs	r1, #0
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff71 	bl	800256c <i2c_init_gpio_pins>

	//reset I2C
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_SWRST;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002698:	601a      	str	r2, [r3, #0]
	p_handle_i2c->p_i2cx->CR1 &= ~(I2C_CR1_SWRST);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026a8:	601a      	str	r2, [r3, #0]

	// check frequency limits
	if (p_handle_i2c->i2c_config.abp1_freq_mhz < I2C_FREQUENCY_MINIMUM || p_handle_i2c->i2c_config.abp1_freq_mhz > I2C_FREQUENCY_MAXIMUM)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	791b      	ldrb	r3, [r3, #4]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d903      	bls.n	80026ba <i2c_init+0x4e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	791b      	ldrb	r3, [r3, #4]
 80026b6:	2b32      	cmp	r3, #50	; 0x32
 80026b8:	d901      	bls.n	80026be <i2c_init+0x52>
	{
		return I2C_ERROR_WRONG_FREQUENCY;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0af      	b.n	800281e <i2c_init+0x1b2>
	}

	// set frequency (same as ABP1 frequency)
	p_handle_i2c->p_i2cx->CR2 &= ~(I2C_CR2_FREQ);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80026cc:	605a      	str	r2, [r3, #4]
	p_handle_i2c->p_i2cx->CR2 |= (p_handle_i2c->i2c_config.abp1_freq_mhz << I2C_CR2_FREQ_Pos);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	791b      	ldrb	r3, [r3, #4]
 80026d8:	4619      	mov	r1, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]

	// set speed
	uint16_t temp_ccr, temp_trise;
	// set slow mode, reset DUTY
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_FS);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026f0:	61da      	str	r2, [r3, #28]
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_DUTY);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002700:	61da      	str	r2, [r3, #28]

	// CCR calculation for slow mode -> values are coming from RM CCR register and result is in [ns]
	// (Thigh + Tlow) / (CEOFF * PCLK)
	temp_ccr = (I2C_CCR_SM_THIGH + I2C_CCR_SM_TLOW) / (I2C_CCR_SM_COEFF * (1000 / p_handle_i2c->i2c_config.abp1_freq_mhz));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	791b      	ldrb	r3, [r3, #4]
 8002706:	461a      	mov	r2, r3
 8002708:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800270c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	f242 7210 	movw	r2, #10000	; 0x2710
 8002716:	fbb2 f3f3 	udiv	r3, r2, r3
 800271a:	81fb      	strh	r3, [r7, #14]

	// TRISE calculation for slow mode -> equation is from RM
	temp_trise = ((I2C_CCR_SM_TR_SCL * p_handle_i2c->i2c_config.abp1_freq_mhz) / 1000) + 1;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	791b      	ldrb	r3, [r3, #4]
 8002720:	461a      	mov	r2, r3
 8002722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002726:	fb03 f302 	mul.w	r3, r3, r2
 800272a:	4a3f      	ldr	r2, [pc, #252]	; (8002828 <i2c_init+0x1bc>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	099b      	lsrs	r3, r3, #6
 8002732:	b29b      	uxth	r3, r3
 8002734:	3301      	adds	r3, #1
 8002736:	81bb      	strh	r3, [r7, #12]

	// fast mode
	if (p_handle_i2c->i2c_config.speed != I2C_SPEED_SLOW)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	795b      	ldrb	r3, [r3, #5]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d043      	beq.n	80027c8 <i2c_init+0x15c>
	{
		// set fast mode
		p_handle_i2c->p_i2cx->CCR |= I2C_CCR_FS;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800274e:	61da      	str	r2, [r3, #28]
		// calculate CCR for fast mode with DUTY 0
		temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW) / (I2C_CCR_FM_COEFF_DUTY0 * (1000 / p_handle_i2c->i2c_config.abp1_freq_mhz));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	791b      	ldrb	r3, [r3, #4]
 8002754:	461a      	mov	r2, r3
 8002756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275a:	fb93 f3f2 	sdiv	r3, r3, r2
 800275e:	461a      	mov	r2, r3
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800276a:	fbb2 f3f3 	udiv	r3, r2, r3
 800276e:	81fb      	strh	r3, [r7, #14]
		// calculate TRISE for fast mode
		temp_trise = ((I2C_CCR_FM_TR_SCL * p_handle_i2c->i2c_config.abp1_freq_mhz) / 1000) + 1;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	791b      	ldrb	r3, [r3, #4]
 8002774:	461a      	mov	r2, r3
 8002776:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800277a:	fb03 f302 	mul.w	r3, r3, r2
 800277e:	4a2a      	ldr	r2, [pc, #168]	; (8002828 <i2c_init+0x1bc>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	b29b      	uxth	r3, r3
 8002788:	3301      	adds	r3, #1
 800278a:	81bb      	strh	r3, [r7, #12]
		if (p_handle_i2c->i2c_config.speed == I2C_SPEED_FAST_DUTY1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	795b      	ldrb	r3, [r3, #5]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d119      	bne.n	80027c8 <i2c_init+0x15c>
		{
			// set DUTY flag
			p_handle_i2c->p_i2cx->CCR |= I2C_CCR_DUTY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027a2:	61da      	str	r2, [r3, #28]
			// calculate CCR with fast mode DUTY1
			temp_ccr = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW) / (I2C_CCR_FM_COEFF_DUTY1 * (1000 / p_handle_i2c->i2c_config.abp1_freq_mhz));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	791b      	ldrb	r3, [r3, #4]
 80027a8:	461a      	mov	r2, r3
 80027aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80027b2:	461a      	mov	r2, r3
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	009a      	lsls	r2, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80027c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c6:	81fb      	strh	r3, [r7, #14]
		}
	}
	p_handle_i2c->p_i2cx->CCR &= ~(I2C_CCR_CCR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80027d6:	f023 030f 	bic.w	r3, r3, #15
 80027da:	61d3      	str	r3, [r2, #28]
	p_handle_i2c->p_i2cx->CCR |= (temp_ccr << I2C_CCR_CCR_Pos);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69d9      	ldr	r1, [r3, #28]
 80027e2:	89fa      	ldrh	r2, [r7, #14]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	61da      	str	r2, [r3, #28]

	// write correct TRISE to the register
	p_handle_i2c->p_i2cx->TRISE &= ~(I2C_TRISE_TRISE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6a1a      	ldr	r2, [r3, #32]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80027fa:	621a      	str	r2, [r3, #32]
	p_handle_i2c->p_i2cx->TRISE |= (temp_trise << I2C_TRISE_TRISE_Pos);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6a19      	ldr	r1, [r3, #32]
 8002802:	89ba      	ldrh	r2, [r7, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	621a      	str	r2, [r3, #32]

	// enable I2c
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_PE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

	return 0;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	10624dd3 	.word	0x10624dd3

0800282c <i2c_send_address>:
 * @param[slave_address] - address to slave in 7 bit addressing mode
 * @param[mode] - send information if master is in reciever or transmitter mode @Mode
 * @return - void
 */
static void i2c_send_address(i2c_handle_t *p_handle_i2c, uint8_t slave_address, uint8_t mode)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	70fb      	strb	r3, [r7, #3]
 8002838:	4613      	mov	r3, r2
 800283a:	70bb      	strb	r3, [r7, #2]
	uint8_t temp_byte;
	//1.0 Set START BIT
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_ACK;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800284a:	601a      	str	r2, [r3, #0]
	p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_START;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800285a:	601a      	str	r2, [r3, #0]

	//1.1 Wait until SB flag is set
	while (!(I2C_SR1_SB & p_handle_i2c->p_i2cx->SR1))
 800285c:	bf00      	nop
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f8      	beq.n	800285e <i2c_send_address+0x32>
		;
	//1.2 Clear SB by reading SR1
	temp_byte = p_handle_i2c->p_i2cx->SR1;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	73fb      	strb	r3, [r7, #15]
	//2. Put slave address in DR register -
	p_handle_i2c->p_i2cx->DR = (slave_address << 1);
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	005a      	lsls	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	611a      	str	r2, [r3, #16]
	// If transmitting set slave addres LSB to 0, reciever 1
	p_handle_i2c->p_i2cx->DR &= ~(1U);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	611a      	str	r2, [r3, #16]
	p_handle_i2c->p_i2cx->DR |= mode;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6919      	ldr	r1, [r3, #16]
 8002894:	78ba      	ldrb	r2, [r7, #2]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	611a      	str	r2, [r3, #16]
	//3. ADDR bit set by hardware

	// wait until ADDR is set
	while (!(I2C_SR1_ADDR & p_handle_i2c->p_i2cx->SR1))
 800289e:	bf00      	nop
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0f8      	beq.n	80028a0 <i2c_send_address+0x74>
		;
	//4. ADDR is cleared by reading SR1 , Read SR2
	temp_byte = p_handle_i2c->p_i2cx->SR1;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	73fb      	strb	r3, [r7, #15]
	temp_byte = p_handle_i2c->p_i2cx->SR2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	73fb      	strb	r3, [r7, #15]
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <i2c_transmit>:
 * @param[p_data_buffer] - pointer to data buffer that has to be send
 * @param[data_size] - amount of data to be send [in bytes]
 * @return - uint8_t - to return error
 */
uint8_t i2c_transmit(i2c_handle_t *p_handle_i2c, uint8_t slave_address, uint8_t mem_address, uint8_t *p_tx_data_buffer, uint32_t data_size)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	72fb      	strb	r3, [r7, #11]
 80028d8:	4613      	mov	r3, r2
 80028da:	72bb      	strb	r3, [r7, #10]

	uint32_t tx_data_to_send = data_size;
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	617b      	str	r3, [r7, #20]
	uint32_t tx_data_index = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]

	i2c_send_address(p_handle_i2c, slave_address, I2C_MODE_TRANSMITTER);
 80028e4:	7afb      	ldrb	r3, [r7, #11]
 80028e6:	2200      	movs	r2, #0
 80028e8:	4619      	mov	r1, r3
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f7ff ff9e 	bl	800282c <i2c_send_address>

//5. TxE bit is set when acknowledge bit is sent
	while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_TXE))
 80028f0:	bf00      	nop
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f8      	beq.n	80028f2 <i2c_transmit+0x28>
		;
//6. Write memory address to DR to clear TxE
	p_handle_i2c->p_i2cx->DR = mem_address;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	7aba      	ldrb	r2, [r7, #10]
 8002906:	611a      	str	r2, [r3, #16]

//7. Data transfer
	while (tx_data_to_send > 0)
 8002908:	e027      	b.n	800295a <i2c_transmit+0x90>
	{
		// wait until data register is empty
		while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_TXE))
 800290a:	bf00      	nop
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f8      	beq.n	800290c <i2c_transmit+0x42>
			;

		// put data in data register
		p_handle_i2c->p_i2cx->DR = p_tx_data_buffer[tx_data_index];
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	781a      	ldrb	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	611a      	str	r2, [r3, #16]

		//change counters
		tx_data_to_send--;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	3b01      	subs	r3, #1
 800292c:	617b      	str	r3, [r7, #20]
		tx_data_index++;
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	3301      	adds	r3, #1
 8002932:	613b      	str	r3, [r7, #16]

//8. After last bit is written to DR register , Set STOP bit  and interface is going back to slave mode
		if (tx_data_to_send == 0)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10f      	bne.n	800295a <i2c_transmit+0x90>
		{
			// check if data transfer is finsihed
			while (!(p_handle_i2c->p_i2cx->SR1 & I2C_SR1_BTF))
 800293a:	bf00      	nop
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f8      	beq.n	800293c <i2c_transmit+0x72>
				;
			// stop transfer
			p_handle_i2c->p_i2cx->CR1 |= I2C_CR1_STOP;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002958:	601a      	str	r2, [r3, #0]
	while (tx_data_to_send > 0)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1d4      	bne.n	800290a <i2c_transmit+0x40>

		}

	}

	return 0;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <RCC_InitClock>:
 * 7. Select system clock
 * @param[*GPIO] - base address of gpiox peripheral
 * @return - void
 */
uint8_t RCC_InitClock(RCC_ClockInitTypeDef *pClockInit)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

/* 1. Enable HSI/HSE as main source RCC->CR */

	//enable HSI/HSE
	if (pClockInit->OscillatorType == RCC_OSCILLATORTYPE_HSI)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10d      	bne.n	8002998 <RCC_InitClock+0x2c>
	{
		// set HSI flag
		RCC->CR |= RCC_CR_HSION;
 800297c:	4b91      	ldr	r3, [pc, #580]	; (8002bc4 <RCC_InitClock+0x258>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a90      	ldr	r2, [pc, #576]	; (8002bc4 <RCC_InitClock+0x258>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6013      	str	r3, [r2, #0]
		// wait until HSI is on
		while (!(RCC->CR & RCC_CR_HSIRDY))
 8002988:	bf00      	nop
 800298a:	4b8e      	ldr	r3, [pc, #568]	; (8002bc4 <RCC_InitClock+0x258>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f9      	beq.n	800298a <RCC_InitClock+0x1e>
 8002996:	e010      	b.n	80029ba <RCC_InitClock+0x4e>
			;
	}
	else if (pClockInit->OscillatorType == RCC_OSCILLATORTYPE_HSE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d10c      	bne.n	80029ba <RCC_InitClock+0x4e>
	{
		// set HSE flag
		RCC->CR |= RCC_CR_HSEON;
 80029a0:	4b88      	ldr	r3, [pc, #544]	; (8002bc4 <RCC_InitClock+0x258>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a87      	ldr	r2, [pc, #540]	; (8002bc4 <RCC_InitClock+0x258>)
 80029a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
		// wait until HSE is on
		while (!(RCC->CR & RCC_CR_HSERDY))
 80029ac:	bf00      	nop
 80029ae:	4b85      	ldr	r3, [pc, #532]	; (8002bc4 <RCC_InitClock+0x258>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f9      	beq.n	80029ae <RCC_InitClock+0x42>
			;
	}

/* 2. Set regulator scaling PWR->VOS if necessary before PLL is ON */
	PWR->CR &= ~(PWR_CR_VOS);
 80029ba:	4b83      	ldr	r3, [pc, #524]	; (8002bc8 <RCC_InitClock+0x25c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a82      	ldr	r2, [pc, #520]	; (8002bc8 <RCC_InitClock+0x25c>)
 80029c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029c4:	6013      	str	r3, [r2, #0]
	PWR->CR |= (pClockInit->VOSScale << PWR_CR_VOS_Pos);
 80029c6:	4b80      	ldr	r3, [pc, #512]	; (8002bc8 <RCC_InitClock+0x25c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	7852      	ldrb	r2, [r2, #1]
 80029ce:	0392      	lsls	r2, r2, #14
 80029d0:	4611      	mov	r1, r2
 80029d2:	4a7d      	ldr	r2, [pc, #500]	; (8002bc8 <RCC_InitClock+0x25c>)
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6013      	str	r3, [r2, #0]

/* 3. Configure Flash and Latency settings */
	// enable data, instruction and prefetch cache
	FLASH->ACR |= (FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN);
 80029d8:	4b7c      	ldr	r3, [pc, #496]	; (8002bcc <RCC_InitClock+0x260>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a7b      	ldr	r2, [pc, #492]	; (8002bcc <RCC_InitClock+0x260>)
 80029de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029e2:	6013      	str	r3, [r2, #0]
	// to read correct from flash at certain voltage and frequency latency between read has to be set correctly
	// this table can be found in reference manual
	FLASH->ACR &= ~(FLASH_ACR_LATENCY);
 80029e4:	4b79      	ldr	r3, [pc, #484]	; (8002bcc <RCC_InitClock+0x260>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a78      	ldr	r2, [pc, #480]	; (8002bcc <RCC_InitClock+0x260>)
 80029ea:	f023 0307 	bic.w	r3, r3, #7
 80029ee:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (pClockInit->FLASHLatency << FLASH_ACR_LATENCY_Pos);
 80029f0:	4b76      	ldr	r3, [pc, #472]	; (8002bcc <RCC_InitClock+0x260>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	7892      	ldrb	r2, [r2, #2]
 80029f8:	4611      	mov	r1, r2
 80029fa:	4a74      	ldr	r2, [pc, #464]	; (8002bcc <RCC_InitClock+0x260>)
 80029fc:	430b      	orrs	r3, r1
 80029fe:	6013      	str	r3, [r2, #0]

/* 4. Configure HCLK, PCLK1, PCLK2 */
	// configure AHB prescaler
	RCC->CFGR &= ~(RCC_CFGR_HPRE);
 8002a00:	4b70      	ldr	r3, [pc, #448]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a6f      	ldr	r2, [pc, #444]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a0a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (pClockInit->HPREPrescaler << RCC_CFGR_HPRE_Pos);
 8002a0c:	4b6d      	ldr	r3, [pc, #436]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	78d2      	ldrb	r2, [r2, #3]
 8002a14:	0112      	lsls	r2, r2, #4
 8002a16:	4611      	mov	r1, r2
 8002a18:	4a6a      	ldr	r2, [pc, #424]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	6093      	str	r3, [r2, #8]

	// configure APB1 prescaler
	RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 8002a1e:	4b69      	ldr	r3, [pc, #420]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	4a68      	ldr	r2, [pc, #416]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a24:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002a28:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (pClockInit->APB1Prescaler << RCC_CFGR_PPRE1_Pos);
 8002a2a:	4b66      	ldr	r3, [pc, #408]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	7912      	ldrb	r2, [r2, #4]
 8002a32:	0292      	lsls	r2, r2, #10
 8002a34:	4611      	mov	r1, r2
 8002a36:	4a63      	ldr	r2, [pc, #396]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6093      	str	r3, [r2, #8]

	// configure APB2 prescaler
	RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 8002a3c:	4b61      	ldr	r3, [pc, #388]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a60      	ldr	r2, [pc, #384]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a42:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002a46:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (pClockInit->APB2Prescaler << RCC_CFGR_PPRE2_Pos);
 8002a48:	4b5e      	ldr	r3, [pc, #376]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	7952      	ldrb	r2, [r2, #5]
 8002a50:	0352      	lsls	r2, r2, #13
 8002a52:	4611      	mov	r1, r2
 8002a54:	4a5b      	ldr	r2, [pc, #364]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a56:	430b      	orrs	r3, r1
 8002a58:	6093      	str	r3, [r2, #8]
/* 5. Configure PLL */

			// PLL - phase-locked loop - clock generation engine in the MCU

			// if PLL is enable
			if (pClockInit->PLL.PLLState == RCC_PLL_STATE_ENABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	f040 8088 	bne.w	8002b76 <RCC_InitClock+0x20a>
			{
				// init PLL source
				RCC->PLLCFGR |= (pClockInit->PLL.PLLSource << RCC_PLLCFGR_PLLSRC_Pos);
 8002a66:	4b57      	ldr	r3, [pc, #348]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	79d2      	ldrb	r2, [r2, #7]
 8002a6e:	0592      	lsls	r2, r2, #22
 8002a70:	4611      	mov	r1, r2
 8002a72:	4a54      	ldr	r2, [pc, #336]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a74:	430b      	orrs	r3, r1
 8002a76:	6053      	str	r3, [r2, #4]

				// PLLM - division factor for the main PLL
				// It is recommended to put source frequency in range of 1 - 2Mhz (2Mhz recommended)
				// Frequency after this division operation is input of VCO (voltage controlled oscillator)

				if (pClockInit->PLL.PLLM < 3 || pClockInit->PLL.PLLM > 63)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7a1b      	ldrb	r3, [r3, #8]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d903      	bls.n	8002a88 <RCC_InitClock+0x11c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7a1b      	ldrb	r3, [r3, #8]
 8002a84:	2b3f      	cmp	r3, #63	; 0x3f
 8002a86:	d901      	bls.n	8002a8c <RCC_InitClock+0x120>
				{
					return PLL_CONFIG_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e095      	b.n	8002bb8 <RCC_InitClock+0x24c>
				}
				RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM);
 8002a8c:	4b4d      	ldr	r3, [pc, #308]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a4c      	ldr	r2, [pc, #304]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a96:	6053      	str	r3, [r2, #4]
				RCC->PLLCFGR |= (pClockInit->PLL.PLLM << RCC_PLLCFGR_PLLM_Pos);
 8002a98:	4b4a      	ldr	r3, [pc, #296]	; (8002bc4 <RCC_InitClock+0x258>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	7a12      	ldrb	r2, [r2, #8]
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4a48      	ldr	r2, [pc, #288]	; (8002bc4 <RCC_InitClock+0x258>)
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6053      	str	r3, [r2, #4]

				// PLLN - multiplication factor for VCO
				// After this operation value should be between 192 and 432 MHz
				// Frequency after this operation is output of VCO

				if (pClockInit->PLL.PLLN < 2 || pClockInit->PLL.PLLM > 432)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	895b      	ldrh	r3, [r3, #10]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d801      	bhi.n	8002ab4 <RCC_InitClock+0x148>
				{
					return PLL_CONFIG_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e081      	b.n	8002bb8 <RCC_InitClock+0x24c>
				}
				RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN);
 8002ab4:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <RCC_InitClock+0x258>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4a42      	ldr	r2, [pc, #264]	; (8002bc4 <RCC_InitClock+0x258>)
 8002aba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ac2:	6053      	str	r3, [r2, #4]
				RCC->PLLCFGR |= (pClockInit->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos);
 8002ac4:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <RCC_InitClock+0x258>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	8952      	ldrh	r2, [r2, #10]
 8002acc:	0192      	lsls	r2, r2, #6
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4a3c      	ldr	r2, [pc, #240]	; (8002bc4 <RCC_InitClock+0x258>)
 8002ad2:	430b      	orrs	r3, r1
 8002ad4:	6053      	str	r3, [r2, #4]
				// PLLP - division factor for main system clock
				// After this operation values should not exceed 84MHz
				// Frequency after this operation is frequency of main system clock

				// 2 bits register so value can not be more than 3
				if (pClockInit->PLL.PLLP > 3)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7b1b      	ldrb	r3, [r3, #12]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d901      	bls.n	8002ae2 <RCC_InitClock+0x176>
				{
					return PLL_CONFIG_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e06a      	b.n	8002bb8 <RCC_InitClock+0x24c>
				}
				RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP);
 8002ae2:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <RCC_InitClock+0x258>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a37      	ldr	r2, [pc, #220]	; (8002bc4 <RCC_InitClock+0x258>)
 8002ae8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002aec:	6053      	str	r3, [r2, #4]
				RCC->PLLCFGR |= (pClockInit->PLL.PLLP << RCC_PLLCFGR_PLLP_Pos);
 8002aee:	4b35      	ldr	r3, [pc, #212]	; (8002bc4 <RCC_InitClock+0x258>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	7b12      	ldrb	r2, [r2, #12]
 8002af6:	0412      	lsls	r2, r2, #16
 8002af8:	4611      	mov	r1, r2
 8002afa:	4a32      	ldr	r2, [pc, #200]	; (8002bc4 <RCC_InitClock+0x258>)
 8002afc:	430b      	orrs	r3, r1
 8002afe:	6053      	str	r3, [r2, #4]
				// PLLQ - ) division factor for USB OTG FS, SDIO and random number generator clocks
				// The USB OTG FS requires a 48 MHz clock to work correctly. The SDIO and the
				// random number generator need a frequency lower than or equal to 48 MHz to work
				// correctly

				if (pClockInit->PLL.PLLQ < 2 || pClockInit->PLL.PLLQ > 15)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7b5b      	ldrb	r3, [r3, #13]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d903      	bls.n	8002b10 <RCC_InitClock+0x1a4>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7b5b      	ldrb	r3, [r3, #13]
 8002b0c:	2b0f      	cmp	r3, #15
 8002b0e:	d901      	bls.n	8002b14 <RCC_InitClock+0x1a8>
				{
					return PLL_CONFIG_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e051      	b.n	8002bb8 <RCC_InitClock+0x24c>
				}
				RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLQ);
 8002b14:	4b2b      	ldr	r3, [pc, #172]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	4a2a      	ldr	r2, [pc, #168]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b1a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002b1e:	6053      	str	r3, [r2, #4]
				RCC->PLLCFGR |= (pClockInit->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos);
 8002b20:	4b28      	ldr	r3, [pc, #160]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	7b52      	ldrb	r2, [r2, #13]
 8002b28:	0612      	lsls	r2, r2, #24
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4a25      	ldr	r2, [pc, #148]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	6053      	str	r3, [r2, #4]

/* 6. Enable the PLL */
				RCC->CR |= (RCC_PLL_STATE_ENABLE << RCC_CR_PLLON_Pos);
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a23      	ldr	r2, [pc, #140]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b3c:	6013      	str	r3, [r2, #0]

				// wait until PLL is ready
				while (!(RCC->CR & RCC_CR_PLLRDY))
 8002b3e:	bf00      	nop
 8002b40:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f9      	beq.n	8002b40 <RCC_InitClock+0x1d4>
					;
/* 7. Select system clock switch */
				// set PLL as system clock
				RCC->CFGR &= ~(RCC_CFGR_SW);
 8002b4c:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a1c      	ldr	r2, [pc, #112]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	6093      	str	r3, [r2, #8]
				RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002b58:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a19      	ldr	r2, [pc, #100]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b5e:	f043 0302 	orr.w	r3, r3, #2
 8002b62:	6093      	str	r3, [r2, #8]
				while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8002b64:	bf00      	nop
 8002b66:	4b17      	ldr	r3, [pc, #92]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d1f9      	bne.n	8002b66 <RCC_InitClock+0x1fa>

				return 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e020      	b.n	8002bb8 <RCC_InitClock+0x24c>
			}
			else
			{
/* 6. Disable the PLL */
				RCC->CR = (RCC_PLL_STATE_DISABLE << RCC_CR_PLLON_Pos);
 8002b76:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

				// wait until PLL is disables
				while (!(RCC->CR & RCC_CR_PLLRDY));
 8002b7c:	bf00      	nop
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f9      	beq.n	8002b7e <RCC_InitClock+0x212>
/* 7. Select system clock switch */
				// set HSI or HE as main system clock
				RCC->CFGR &= ~(RCC_CFGR_SW);
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b90:	f023 0303 	bic.w	r3, r3, #3
 8002b94:	6093      	str	r3, [r2, #8]
				RCC->CFGR |= (pClockInit->OscillatorType << RCC_CFGR_SW_Pos);
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <RCC_InitClock+0x258>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	7812      	ldrb	r2, [r2, #0]
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4a08      	ldr	r2, [pc, #32]	; (8002bc4 <RCC_InitClock+0x258>)
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	6093      	str	r3, [r2, #8]

				// wait until HSI/HSE is set as a clock source
				while((RCC->CFGR & (pClockInit->OscillatorType << RCC_CFGR_SW_Pos)) != RCC_CFGR_SWS_PLL);
 8002ba6:	bf00      	nop
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <RCC_InitClock+0x258>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	7812      	ldrb	r2, [r2, #0]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d1f8      	bne.n	8002ba8 <RCC_InitClock+0x23c>

			}

	return 0;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40007000 	.word	0x40007000
 8002bcc:	40023c00 	.word	0x40023c00

08002bd0 <__errno>:
 8002bd0:	4b01      	ldr	r3, [pc, #4]	; (8002bd8 <__errno+0x8>)
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000004 	.word	0x20000004

08002bdc <__libc_init_array>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	4d0d      	ldr	r5, [pc, #52]	; (8002c14 <__libc_init_array+0x38>)
 8002be0:	4c0d      	ldr	r4, [pc, #52]	; (8002c18 <__libc_init_array+0x3c>)
 8002be2:	1b64      	subs	r4, r4, r5
 8002be4:	10a4      	asrs	r4, r4, #2
 8002be6:	2600      	movs	r6, #0
 8002be8:	42a6      	cmp	r6, r4
 8002bea:	d109      	bne.n	8002c00 <__libc_init_array+0x24>
 8002bec:	4d0b      	ldr	r5, [pc, #44]	; (8002c1c <__libc_init_array+0x40>)
 8002bee:	4c0c      	ldr	r4, [pc, #48]	; (8002c20 <__libc_init_array+0x44>)
 8002bf0:	f001 f9f4 	bl	8003fdc <_init>
 8002bf4:	1b64      	subs	r4, r4, r5
 8002bf6:	10a4      	asrs	r4, r4, #2
 8002bf8:	2600      	movs	r6, #0
 8002bfa:	42a6      	cmp	r6, r4
 8002bfc:	d105      	bne.n	8002c0a <__libc_init_array+0x2e>
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}
 8002c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c04:	4798      	blx	r3
 8002c06:	3601      	adds	r6, #1
 8002c08:	e7ee      	b.n	8002be8 <__libc_init_array+0xc>
 8002c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c0e:	4798      	blx	r3
 8002c10:	3601      	adds	r6, #1
 8002c12:	e7f2      	b.n	8002bfa <__libc_init_array+0x1e>
 8002c14:	080045b4 	.word	0x080045b4
 8002c18:	080045b4 	.word	0x080045b4
 8002c1c:	080045b4 	.word	0x080045b4
 8002c20:	080045b8 	.word	0x080045b8

08002c24 <memset>:
 8002c24:	4402      	add	r2, r0
 8002c26:	4603      	mov	r3, r0
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d100      	bne.n	8002c2e <memset+0xa>
 8002c2c:	4770      	bx	lr
 8002c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c32:	e7f9      	b.n	8002c28 <memset+0x4>

08002c34 <rand>:
 8002c34:	4b17      	ldr	r3, [pc, #92]	; (8002c94 <rand+0x60>)
 8002c36:	b510      	push	{r4, lr}
 8002c38:	681c      	ldr	r4, [r3, #0]
 8002c3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c3c:	b9b3      	cbnz	r3, 8002c6c <rand+0x38>
 8002c3e:	2018      	movs	r0, #24
 8002c40:	f000 f888 	bl	8002d54 <malloc>
 8002c44:	63a0      	str	r0, [r4, #56]	; 0x38
 8002c46:	b928      	cbnz	r0, 8002c54 <rand+0x20>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <rand+0x64>)
 8002c4c:	4813      	ldr	r0, [pc, #76]	; (8002c9c <rand+0x68>)
 8002c4e:	214e      	movs	r1, #78	; 0x4e
 8002c50:	f000 f850 	bl	8002cf4 <__assert_func>
 8002c54:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <rand+0x6c>)
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <rand+0x70>)
 8002c58:	e9c0 2300 	strd	r2, r3, [r0]
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <rand+0x74>)
 8002c5e:	6083      	str	r3, [r0, #8]
 8002c60:	230b      	movs	r3, #11
 8002c62:	8183      	strh	r3, [r0, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	2300      	movs	r3, #0
 8002c68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002c6c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002c6e:	480f      	ldr	r0, [pc, #60]	; (8002cac <rand+0x78>)
 8002c70:	690a      	ldr	r2, [r1, #16]
 8002c72:	694b      	ldr	r3, [r1, #20]
 8002c74:	4c0e      	ldr	r4, [pc, #56]	; (8002cb0 <rand+0x7c>)
 8002c76:	4350      	muls	r0, r2
 8002c78:	fb04 0003 	mla	r0, r4, r3, r0
 8002c7c:	fba2 3404 	umull	r3, r4, r2, r4
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	4404      	add	r4, r0
 8002c84:	f144 0000 	adc.w	r0, r4, #0
 8002c88:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8002c8c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002c90:	bd10      	pop	{r4, pc}
 8002c92:	bf00      	nop
 8002c94:	20000004 	.word	0x20000004
 8002c98:	0800446c 	.word	0x0800446c
 8002c9c:	08004483 	.word	0x08004483
 8002ca0:	abcd330e 	.word	0xabcd330e
 8002ca4:	e66d1234 	.word	0xe66d1234
 8002ca8:	0005deec 	.word	0x0005deec
 8002cac:	5851f42d 	.word	0x5851f42d
 8002cb0:	4c957f2d 	.word	0x4c957f2d

08002cb4 <siprintf>:
 8002cb4:	b40e      	push	{r1, r2, r3}
 8002cb6:	b500      	push	{lr}
 8002cb8:	b09c      	sub	sp, #112	; 0x70
 8002cba:	ab1d      	add	r3, sp, #116	; 0x74
 8002cbc:	9002      	str	r0, [sp, #8]
 8002cbe:	9006      	str	r0, [sp, #24]
 8002cc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002cc4:	4809      	ldr	r0, [pc, #36]	; (8002cec <siprintf+0x38>)
 8002cc6:	9107      	str	r1, [sp, #28]
 8002cc8:	9104      	str	r1, [sp, #16]
 8002cca:	4909      	ldr	r1, [pc, #36]	; (8002cf0 <siprintf+0x3c>)
 8002ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cd0:	9105      	str	r1, [sp, #20]
 8002cd2:	6800      	ldr	r0, [r0, #0]
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	a902      	add	r1, sp, #8
 8002cd8:	f000 f94a 	bl	8002f70 <_svfiprintf_r>
 8002cdc:	9b02      	ldr	r3, [sp, #8]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	b01c      	add	sp, #112	; 0x70
 8002ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ce8:	b003      	add	sp, #12
 8002cea:	4770      	bx	lr
 8002cec:	20000004 	.word	0x20000004
 8002cf0:	ffff0208 	.word	0xffff0208

08002cf4 <__assert_func>:
 8002cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002cf6:	4614      	mov	r4, r2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <__assert_func+0x2c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4605      	mov	r5, r0
 8002d00:	68d8      	ldr	r0, [r3, #12]
 8002d02:	b14c      	cbz	r4, 8002d18 <__assert_func+0x24>
 8002d04:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <__assert_func+0x30>)
 8002d06:	9100      	str	r1, [sp, #0]
 8002d08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002d0c:	4906      	ldr	r1, [pc, #24]	; (8002d28 <__assert_func+0x34>)
 8002d0e:	462b      	mov	r3, r5
 8002d10:	f000 f80e 	bl	8002d30 <fiprintf>
 8002d14:	f000 fdea 	bl	80038ec <abort>
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <__assert_func+0x38>)
 8002d1a:	461c      	mov	r4, r3
 8002d1c:	e7f3      	b.n	8002d06 <__assert_func+0x12>
 8002d1e:	bf00      	nop
 8002d20:	20000004 	.word	0x20000004
 8002d24:	080044e2 	.word	0x080044e2
 8002d28:	080044ef 	.word	0x080044ef
 8002d2c:	0800451d 	.word	0x0800451d

08002d30 <fiprintf>:
 8002d30:	b40e      	push	{r1, r2, r3}
 8002d32:	b503      	push	{r0, r1, lr}
 8002d34:	4601      	mov	r1, r0
 8002d36:	ab03      	add	r3, sp, #12
 8002d38:	4805      	ldr	r0, [pc, #20]	; (8002d50 <fiprintf+0x20>)
 8002d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d3e:	6800      	ldr	r0, [r0, #0]
 8002d40:	9301      	str	r3, [sp, #4]
 8002d42:	f000 fa3f 	bl	80031c4 <_vfiprintf_r>
 8002d46:	b002      	add	sp, #8
 8002d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d4c:	b003      	add	sp, #12
 8002d4e:	4770      	bx	lr
 8002d50:	20000004 	.word	0x20000004

08002d54 <malloc>:
 8002d54:	4b02      	ldr	r3, [pc, #8]	; (8002d60 <malloc+0xc>)
 8002d56:	4601      	mov	r1, r0
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	f000 b853 	b.w	8002e04 <_malloc_r>
 8002d5e:	bf00      	nop
 8002d60:	20000004 	.word	0x20000004

08002d64 <_free_r>:
 8002d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d66:	2900      	cmp	r1, #0
 8002d68:	d048      	beq.n	8002dfc <_free_r+0x98>
 8002d6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d6e:	9001      	str	r0, [sp, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f1a1 0404 	sub.w	r4, r1, #4
 8002d76:	bfb8      	it	lt
 8002d78:	18e4      	addlt	r4, r4, r3
 8002d7a:	f001 f805 	bl	8003d88 <__malloc_lock>
 8002d7e:	4a20      	ldr	r2, [pc, #128]	; (8002e00 <_free_r+0x9c>)
 8002d80:	9801      	ldr	r0, [sp, #4]
 8002d82:	6813      	ldr	r3, [r2, #0]
 8002d84:	4615      	mov	r5, r2
 8002d86:	b933      	cbnz	r3, 8002d96 <_free_r+0x32>
 8002d88:	6063      	str	r3, [r4, #4]
 8002d8a:	6014      	str	r4, [r2, #0]
 8002d8c:	b003      	add	sp, #12
 8002d8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d92:	f000 bfff 	b.w	8003d94 <__malloc_unlock>
 8002d96:	42a3      	cmp	r3, r4
 8002d98:	d90b      	bls.n	8002db2 <_free_r+0x4e>
 8002d9a:	6821      	ldr	r1, [r4, #0]
 8002d9c:	1862      	adds	r2, r4, r1
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	bf04      	itt	eq
 8002da2:	681a      	ldreq	r2, [r3, #0]
 8002da4:	685b      	ldreq	r3, [r3, #4]
 8002da6:	6063      	str	r3, [r4, #4]
 8002da8:	bf04      	itt	eq
 8002daa:	1852      	addeq	r2, r2, r1
 8002dac:	6022      	streq	r2, [r4, #0]
 8002dae:	602c      	str	r4, [r5, #0]
 8002db0:	e7ec      	b.n	8002d8c <_free_r+0x28>
 8002db2:	461a      	mov	r2, r3
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	b10b      	cbz	r3, 8002dbc <_free_r+0x58>
 8002db8:	42a3      	cmp	r3, r4
 8002dba:	d9fa      	bls.n	8002db2 <_free_r+0x4e>
 8002dbc:	6811      	ldr	r1, [r2, #0]
 8002dbe:	1855      	adds	r5, r2, r1
 8002dc0:	42a5      	cmp	r5, r4
 8002dc2:	d10b      	bne.n	8002ddc <_free_r+0x78>
 8002dc4:	6824      	ldr	r4, [r4, #0]
 8002dc6:	4421      	add	r1, r4
 8002dc8:	1854      	adds	r4, r2, r1
 8002dca:	42a3      	cmp	r3, r4
 8002dcc:	6011      	str	r1, [r2, #0]
 8002dce:	d1dd      	bne.n	8002d8c <_free_r+0x28>
 8002dd0:	681c      	ldr	r4, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	6053      	str	r3, [r2, #4]
 8002dd6:	4421      	add	r1, r4
 8002dd8:	6011      	str	r1, [r2, #0]
 8002dda:	e7d7      	b.n	8002d8c <_free_r+0x28>
 8002ddc:	d902      	bls.n	8002de4 <_free_r+0x80>
 8002dde:	230c      	movs	r3, #12
 8002de0:	6003      	str	r3, [r0, #0]
 8002de2:	e7d3      	b.n	8002d8c <_free_r+0x28>
 8002de4:	6825      	ldr	r5, [r4, #0]
 8002de6:	1961      	adds	r1, r4, r5
 8002de8:	428b      	cmp	r3, r1
 8002dea:	bf04      	itt	eq
 8002dec:	6819      	ldreq	r1, [r3, #0]
 8002dee:	685b      	ldreq	r3, [r3, #4]
 8002df0:	6063      	str	r3, [r4, #4]
 8002df2:	bf04      	itt	eq
 8002df4:	1949      	addeq	r1, r1, r5
 8002df6:	6021      	streq	r1, [r4, #0]
 8002df8:	6054      	str	r4, [r2, #4]
 8002dfa:	e7c7      	b.n	8002d8c <_free_r+0x28>
 8002dfc:	b003      	add	sp, #12
 8002dfe:	bd30      	pop	{r4, r5, pc}
 8002e00:	20000488 	.word	0x20000488

08002e04 <_malloc_r>:
 8002e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e06:	1ccd      	adds	r5, r1, #3
 8002e08:	f025 0503 	bic.w	r5, r5, #3
 8002e0c:	3508      	adds	r5, #8
 8002e0e:	2d0c      	cmp	r5, #12
 8002e10:	bf38      	it	cc
 8002e12:	250c      	movcc	r5, #12
 8002e14:	2d00      	cmp	r5, #0
 8002e16:	4606      	mov	r6, r0
 8002e18:	db01      	blt.n	8002e1e <_malloc_r+0x1a>
 8002e1a:	42a9      	cmp	r1, r5
 8002e1c:	d903      	bls.n	8002e26 <_malloc_r+0x22>
 8002e1e:	230c      	movs	r3, #12
 8002e20:	6033      	str	r3, [r6, #0]
 8002e22:	2000      	movs	r0, #0
 8002e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e26:	f000 ffaf 	bl	8003d88 <__malloc_lock>
 8002e2a:	4921      	ldr	r1, [pc, #132]	; (8002eb0 <_malloc_r+0xac>)
 8002e2c:	680a      	ldr	r2, [r1, #0]
 8002e2e:	4614      	mov	r4, r2
 8002e30:	b99c      	cbnz	r4, 8002e5a <_malloc_r+0x56>
 8002e32:	4f20      	ldr	r7, [pc, #128]	; (8002eb4 <_malloc_r+0xb0>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b923      	cbnz	r3, 8002e42 <_malloc_r+0x3e>
 8002e38:	4621      	mov	r1, r4
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	f000 fc86 	bl	800374c <_sbrk_r>
 8002e40:	6038      	str	r0, [r7, #0]
 8002e42:	4629      	mov	r1, r5
 8002e44:	4630      	mov	r0, r6
 8002e46:	f000 fc81 	bl	800374c <_sbrk_r>
 8002e4a:	1c43      	adds	r3, r0, #1
 8002e4c:	d123      	bne.n	8002e96 <_malloc_r+0x92>
 8002e4e:	230c      	movs	r3, #12
 8002e50:	6033      	str	r3, [r6, #0]
 8002e52:	4630      	mov	r0, r6
 8002e54:	f000 ff9e 	bl	8003d94 <__malloc_unlock>
 8002e58:	e7e3      	b.n	8002e22 <_malloc_r+0x1e>
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	1b5b      	subs	r3, r3, r5
 8002e5e:	d417      	bmi.n	8002e90 <_malloc_r+0x8c>
 8002e60:	2b0b      	cmp	r3, #11
 8002e62:	d903      	bls.n	8002e6c <_malloc_r+0x68>
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	441c      	add	r4, r3
 8002e68:	6025      	str	r5, [r4, #0]
 8002e6a:	e004      	b.n	8002e76 <_malloc_r+0x72>
 8002e6c:	6863      	ldr	r3, [r4, #4]
 8002e6e:	42a2      	cmp	r2, r4
 8002e70:	bf0c      	ite	eq
 8002e72:	600b      	streq	r3, [r1, #0]
 8002e74:	6053      	strne	r3, [r2, #4]
 8002e76:	4630      	mov	r0, r6
 8002e78:	f000 ff8c 	bl	8003d94 <__malloc_unlock>
 8002e7c:	f104 000b 	add.w	r0, r4, #11
 8002e80:	1d23      	adds	r3, r4, #4
 8002e82:	f020 0007 	bic.w	r0, r0, #7
 8002e86:	1ac2      	subs	r2, r0, r3
 8002e88:	d0cc      	beq.n	8002e24 <_malloc_r+0x20>
 8002e8a:	1a1b      	subs	r3, r3, r0
 8002e8c:	50a3      	str	r3, [r4, r2]
 8002e8e:	e7c9      	b.n	8002e24 <_malloc_r+0x20>
 8002e90:	4622      	mov	r2, r4
 8002e92:	6864      	ldr	r4, [r4, #4]
 8002e94:	e7cc      	b.n	8002e30 <_malloc_r+0x2c>
 8002e96:	1cc4      	adds	r4, r0, #3
 8002e98:	f024 0403 	bic.w	r4, r4, #3
 8002e9c:	42a0      	cmp	r0, r4
 8002e9e:	d0e3      	beq.n	8002e68 <_malloc_r+0x64>
 8002ea0:	1a21      	subs	r1, r4, r0
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	f000 fc52 	bl	800374c <_sbrk_r>
 8002ea8:	3001      	adds	r0, #1
 8002eaa:	d1dd      	bne.n	8002e68 <_malloc_r+0x64>
 8002eac:	e7cf      	b.n	8002e4e <_malloc_r+0x4a>
 8002eae:	bf00      	nop
 8002eb0:	20000488 	.word	0x20000488
 8002eb4:	2000048c 	.word	0x2000048c

08002eb8 <__ssputs_r>:
 8002eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ebc:	688e      	ldr	r6, [r1, #8]
 8002ebe:	429e      	cmp	r6, r3
 8002ec0:	4682      	mov	sl, r0
 8002ec2:	460c      	mov	r4, r1
 8002ec4:	4690      	mov	r8, r2
 8002ec6:	461f      	mov	r7, r3
 8002ec8:	d838      	bhi.n	8002f3c <__ssputs_r+0x84>
 8002eca:	898a      	ldrh	r2, [r1, #12]
 8002ecc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ed0:	d032      	beq.n	8002f38 <__ssputs_r+0x80>
 8002ed2:	6825      	ldr	r5, [r4, #0]
 8002ed4:	6909      	ldr	r1, [r1, #16]
 8002ed6:	eba5 0901 	sub.w	r9, r5, r1
 8002eda:	6965      	ldr	r5, [r4, #20]
 8002edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ee0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	444b      	add	r3, r9
 8002ee8:	106d      	asrs	r5, r5, #1
 8002eea:	429d      	cmp	r5, r3
 8002eec:	bf38      	it	cc
 8002eee:	461d      	movcc	r5, r3
 8002ef0:	0553      	lsls	r3, r2, #21
 8002ef2:	d531      	bpl.n	8002f58 <__ssputs_r+0xa0>
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	f7ff ff85 	bl	8002e04 <_malloc_r>
 8002efa:	4606      	mov	r6, r0
 8002efc:	b950      	cbnz	r0, 8002f14 <__ssputs_r+0x5c>
 8002efe:	230c      	movs	r3, #12
 8002f00:	f8ca 3000 	str.w	r3, [sl]
 8002f04:	89a3      	ldrh	r3, [r4, #12]
 8002f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f0a:	81a3      	strh	r3, [r4, #12]
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f14:	6921      	ldr	r1, [r4, #16]
 8002f16:	464a      	mov	r2, r9
 8002f18:	f000 ff0e 	bl	8003d38 <memcpy>
 8002f1c:	89a3      	ldrh	r3, [r4, #12]
 8002f1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f26:	81a3      	strh	r3, [r4, #12]
 8002f28:	6126      	str	r6, [r4, #16]
 8002f2a:	6165      	str	r5, [r4, #20]
 8002f2c:	444e      	add	r6, r9
 8002f2e:	eba5 0509 	sub.w	r5, r5, r9
 8002f32:	6026      	str	r6, [r4, #0]
 8002f34:	60a5      	str	r5, [r4, #8]
 8002f36:	463e      	mov	r6, r7
 8002f38:	42be      	cmp	r6, r7
 8002f3a:	d900      	bls.n	8002f3e <__ssputs_r+0x86>
 8002f3c:	463e      	mov	r6, r7
 8002f3e:	4632      	mov	r2, r6
 8002f40:	6820      	ldr	r0, [r4, #0]
 8002f42:	4641      	mov	r1, r8
 8002f44:	f000 ff06 	bl	8003d54 <memmove>
 8002f48:	68a3      	ldr	r3, [r4, #8]
 8002f4a:	6822      	ldr	r2, [r4, #0]
 8002f4c:	1b9b      	subs	r3, r3, r6
 8002f4e:	4432      	add	r2, r6
 8002f50:	60a3      	str	r3, [r4, #8]
 8002f52:	6022      	str	r2, [r4, #0]
 8002f54:	2000      	movs	r0, #0
 8002f56:	e7db      	b.n	8002f10 <__ssputs_r+0x58>
 8002f58:	462a      	mov	r2, r5
 8002f5a:	f000 ff21 	bl	8003da0 <_realloc_r>
 8002f5e:	4606      	mov	r6, r0
 8002f60:	2800      	cmp	r0, #0
 8002f62:	d1e1      	bne.n	8002f28 <__ssputs_r+0x70>
 8002f64:	6921      	ldr	r1, [r4, #16]
 8002f66:	4650      	mov	r0, sl
 8002f68:	f7ff fefc 	bl	8002d64 <_free_r>
 8002f6c:	e7c7      	b.n	8002efe <__ssputs_r+0x46>
	...

08002f70 <_svfiprintf_r>:
 8002f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f74:	4698      	mov	r8, r3
 8002f76:	898b      	ldrh	r3, [r1, #12]
 8002f78:	061b      	lsls	r3, r3, #24
 8002f7a:	b09d      	sub	sp, #116	; 0x74
 8002f7c:	4607      	mov	r7, r0
 8002f7e:	460d      	mov	r5, r1
 8002f80:	4614      	mov	r4, r2
 8002f82:	d50e      	bpl.n	8002fa2 <_svfiprintf_r+0x32>
 8002f84:	690b      	ldr	r3, [r1, #16]
 8002f86:	b963      	cbnz	r3, 8002fa2 <_svfiprintf_r+0x32>
 8002f88:	2140      	movs	r1, #64	; 0x40
 8002f8a:	f7ff ff3b 	bl	8002e04 <_malloc_r>
 8002f8e:	6028      	str	r0, [r5, #0]
 8002f90:	6128      	str	r0, [r5, #16]
 8002f92:	b920      	cbnz	r0, 8002f9e <_svfiprintf_r+0x2e>
 8002f94:	230c      	movs	r3, #12
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9c:	e0d1      	b.n	8003142 <_svfiprintf_r+0x1d2>
 8002f9e:	2340      	movs	r3, #64	; 0x40
 8002fa0:	616b      	str	r3, [r5, #20]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8002fa6:	2320      	movs	r3, #32
 8002fa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fac:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fb0:	2330      	movs	r3, #48	; 0x30
 8002fb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800315c <_svfiprintf_r+0x1ec>
 8002fb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fba:	f04f 0901 	mov.w	r9, #1
 8002fbe:	4623      	mov	r3, r4
 8002fc0:	469a      	mov	sl, r3
 8002fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fc6:	b10a      	cbz	r2, 8002fcc <_svfiprintf_r+0x5c>
 8002fc8:	2a25      	cmp	r2, #37	; 0x25
 8002fca:	d1f9      	bne.n	8002fc0 <_svfiprintf_r+0x50>
 8002fcc:	ebba 0b04 	subs.w	fp, sl, r4
 8002fd0:	d00b      	beq.n	8002fea <_svfiprintf_r+0x7a>
 8002fd2:	465b      	mov	r3, fp
 8002fd4:	4622      	mov	r2, r4
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	4638      	mov	r0, r7
 8002fda:	f7ff ff6d 	bl	8002eb8 <__ssputs_r>
 8002fde:	3001      	adds	r0, #1
 8002fe0:	f000 80aa 	beq.w	8003138 <_svfiprintf_r+0x1c8>
 8002fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fe6:	445a      	add	r2, fp
 8002fe8:	9209      	str	r2, [sp, #36]	; 0x24
 8002fea:	f89a 3000 	ldrb.w	r3, [sl]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80a2 	beq.w	8003138 <_svfiprintf_r+0x1c8>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8002ffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ffe:	f10a 0a01 	add.w	sl, sl, #1
 8003002:	9304      	str	r3, [sp, #16]
 8003004:	9307      	str	r3, [sp, #28]
 8003006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800300a:	931a      	str	r3, [sp, #104]	; 0x68
 800300c:	4654      	mov	r4, sl
 800300e:	2205      	movs	r2, #5
 8003010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003014:	4851      	ldr	r0, [pc, #324]	; (800315c <_svfiprintf_r+0x1ec>)
 8003016:	f7fd f8eb 	bl	80001f0 <memchr>
 800301a:	9a04      	ldr	r2, [sp, #16]
 800301c:	b9d8      	cbnz	r0, 8003056 <_svfiprintf_r+0xe6>
 800301e:	06d0      	lsls	r0, r2, #27
 8003020:	bf44      	itt	mi
 8003022:	2320      	movmi	r3, #32
 8003024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003028:	0711      	lsls	r1, r2, #28
 800302a:	bf44      	itt	mi
 800302c:	232b      	movmi	r3, #43	; 0x2b
 800302e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003032:	f89a 3000 	ldrb.w	r3, [sl]
 8003036:	2b2a      	cmp	r3, #42	; 0x2a
 8003038:	d015      	beq.n	8003066 <_svfiprintf_r+0xf6>
 800303a:	9a07      	ldr	r2, [sp, #28]
 800303c:	4654      	mov	r4, sl
 800303e:	2000      	movs	r0, #0
 8003040:	f04f 0c0a 	mov.w	ip, #10
 8003044:	4621      	mov	r1, r4
 8003046:	f811 3b01 	ldrb.w	r3, [r1], #1
 800304a:	3b30      	subs	r3, #48	; 0x30
 800304c:	2b09      	cmp	r3, #9
 800304e:	d94e      	bls.n	80030ee <_svfiprintf_r+0x17e>
 8003050:	b1b0      	cbz	r0, 8003080 <_svfiprintf_r+0x110>
 8003052:	9207      	str	r2, [sp, #28]
 8003054:	e014      	b.n	8003080 <_svfiprintf_r+0x110>
 8003056:	eba0 0308 	sub.w	r3, r0, r8
 800305a:	fa09 f303 	lsl.w	r3, r9, r3
 800305e:	4313      	orrs	r3, r2
 8003060:	9304      	str	r3, [sp, #16]
 8003062:	46a2      	mov	sl, r4
 8003064:	e7d2      	b.n	800300c <_svfiprintf_r+0x9c>
 8003066:	9b03      	ldr	r3, [sp, #12]
 8003068:	1d19      	adds	r1, r3, #4
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	9103      	str	r1, [sp, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	bfbb      	ittet	lt
 8003072:	425b      	neglt	r3, r3
 8003074:	f042 0202 	orrlt.w	r2, r2, #2
 8003078:	9307      	strge	r3, [sp, #28]
 800307a:	9307      	strlt	r3, [sp, #28]
 800307c:	bfb8      	it	lt
 800307e:	9204      	strlt	r2, [sp, #16]
 8003080:	7823      	ldrb	r3, [r4, #0]
 8003082:	2b2e      	cmp	r3, #46	; 0x2e
 8003084:	d10c      	bne.n	80030a0 <_svfiprintf_r+0x130>
 8003086:	7863      	ldrb	r3, [r4, #1]
 8003088:	2b2a      	cmp	r3, #42	; 0x2a
 800308a:	d135      	bne.n	80030f8 <_svfiprintf_r+0x188>
 800308c:	9b03      	ldr	r3, [sp, #12]
 800308e:	1d1a      	adds	r2, r3, #4
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	9203      	str	r2, [sp, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	bfb8      	it	lt
 8003098:	f04f 33ff 	movlt.w	r3, #4294967295
 800309c:	3402      	adds	r4, #2
 800309e:	9305      	str	r3, [sp, #20]
 80030a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800316c <_svfiprintf_r+0x1fc>
 80030a4:	7821      	ldrb	r1, [r4, #0]
 80030a6:	2203      	movs	r2, #3
 80030a8:	4650      	mov	r0, sl
 80030aa:	f7fd f8a1 	bl	80001f0 <memchr>
 80030ae:	b140      	cbz	r0, 80030c2 <_svfiprintf_r+0x152>
 80030b0:	2340      	movs	r3, #64	; 0x40
 80030b2:	eba0 000a 	sub.w	r0, r0, sl
 80030b6:	fa03 f000 	lsl.w	r0, r3, r0
 80030ba:	9b04      	ldr	r3, [sp, #16]
 80030bc:	4303      	orrs	r3, r0
 80030be:	3401      	adds	r4, #1
 80030c0:	9304      	str	r3, [sp, #16]
 80030c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030c6:	4826      	ldr	r0, [pc, #152]	; (8003160 <_svfiprintf_r+0x1f0>)
 80030c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030cc:	2206      	movs	r2, #6
 80030ce:	f7fd f88f 	bl	80001f0 <memchr>
 80030d2:	2800      	cmp	r0, #0
 80030d4:	d038      	beq.n	8003148 <_svfiprintf_r+0x1d8>
 80030d6:	4b23      	ldr	r3, [pc, #140]	; (8003164 <_svfiprintf_r+0x1f4>)
 80030d8:	bb1b      	cbnz	r3, 8003122 <_svfiprintf_r+0x1b2>
 80030da:	9b03      	ldr	r3, [sp, #12]
 80030dc:	3307      	adds	r3, #7
 80030de:	f023 0307 	bic.w	r3, r3, #7
 80030e2:	3308      	adds	r3, #8
 80030e4:	9303      	str	r3, [sp, #12]
 80030e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030e8:	4433      	add	r3, r6
 80030ea:	9309      	str	r3, [sp, #36]	; 0x24
 80030ec:	e767      	b.n	8002fbe <_svfiprintf_r+0x4e>
 80030ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80030f2:	460c      	mov	r4, r1
 80030f4:	2001      	movs	r0, #1
 80030f6:	e7a5      	b.n	8003044 <_svfiprintf_r+0xd4>
 80030f8:	2300      	movs	r3, #0
 80030fa:	3401      	adds	r4, #1
 80030fc:	9305      	str	r3, [sp, #20]
 80030fe:	4619      	mov	r1, r3
 8003100:	f04f 0c0a 	mov.w	ip, #10
 8003104:	4620      	mov	r0, r4
 8003106:	f810 2b01 	ldrb.w	r2, [r0], #1
 800310a:	3a30      	subs	r2, #48	; 0x30
 800310c:	2a09      	cmp	r2, #9
 800310e:	d903      	bls.n	8003118 <_svfiprintf_r+0x1a8>
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0c5      	beq.n	80030a0 <_svfiprintf_r+0x130>
 8003114:	9105      	str	r1, [sp, #20]
 8003116:	e7c3      	b.n	80030a0 <_svfiprintf_r+0x130>
 8003118:	fb0c 2101 	mla	r1, ip, r1, r2
 800311c:	4604      	mov	r4, r0
 800311e:	2301      	movs	r3, #1
 8003120:	e7f0      	b.n	8003104 <_svfiprintf_r+0x194>
 8003122:	ab03      	add	r3, sp, #12
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	462a      	mov	r2, r5
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <_svfiprintf_r+0x1f8>)
 800312a:	a904      	add	r1, sp, #16
 800312c:	4638      	mov	r0, r7
 800312e:	f3af 8000 	nop.w
 8003132:	1c42      	adds	r2, r0, #1
 8003134:	4606      	mov	r6, r0
 8003136:	d1d6      	bne.n	80030e6 <_svfiprintf_r+0x176>
 8003138:	89ab      	ldrh	r3, [r5, #12]
 800313a:	065b      	lsls	r3, r3, #25
 800313c:	f53f af2c 	bmi.w	8002f98 <_svfiprintf_r+0x28>
 8003140:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003142:	b01d      	add	sp, #116	; 0x74
 8003144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003148:	ab03      	add	r3, sp, #12
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	462a      	mov	r2, r5
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <_svfiprintf_r+0x1f8>)
 8003150:	a904      	add	r1, sp, #16
 8003152:	4638      	mov	r0, r7
 8003154:	f000 f9d4 	bl	8003500 <_printf_i>
 8003158:	e7eb      	b.n	8003132 <_svfiprintf_r+0x1c2>
 800315a:	bf00      	nop
 800315c:	0800451e 	.word	0x0800451e
 8003160:	08004528 	.word	0x08004528
 8003164:	00000000 	.word	0x00000000
 8003168:	08002eb9 	.word	0x08002eb9
 800316c:	08004524 	.word	0x08004524

08003170 <__sfputc_r>:
 8003170:	6893      	ldr	r3, [r2, #8]
 8003172:	3b01      	subs	r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	b410      	push	{r4}
 8003178:	6093      	str	r3, [r2, #8]
 800317a:	da08      	bge.n	800318e <__sfputc_r+0x1e>
 800317c:	6994      	ldr	r4, [r2, #24]
 800317e:	42a3      	cmp	r3, r4
 8003180:	db01      	blt.n	8003186 <__sfputc_r+0x16>
 8003182:	290a      	cmp	r1, #10
 8003184:	d103      	bne.n	800318e <__sfputc_r+0x1e>
 8003186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800318a:	f000 baef 	b.w	800376c <__swbuf_r>
 800318e:	6813      	ldr	r3, [r2, #0]
 8003190:	1c58      	adds	r0, r3, #1
 8003192:	6010      	str	r0, [r2, #0]
 8003194:	7019      	strb	r1, [r3, #0]
 8003196:	4608      	mov	r0, r1
 8003198:	f85d 4b04 	ldr.w	r4, [sp], #4
 800319c:	4770      	bx	lr

0800319e <__sfputs_r>:
 800319e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a0:	4606      	mov	r6, r0
 80031a2:	460f      	mov	r7, r1
 80031a4:	4614      	mov	r4, r2
 80031a6:	18d5      	adds	r5, r2, r3
 80031a8:	42ac      	cmp	r4, r5
 80031aa:	d101      	bne.n	80031b0 <__sfputs_r+0x12>
 80031ac:	2000      	movs	r0, #0
 80031ae:	e007      	b.n	80031c0 <__sfputs_r+0x22>
 80031b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031b4:	463a      	mov	r2, r7
 80031b6:	4630      	mov	r0, r6
 80031b8:	f7ff ffda 	bl	8003170 <__sfputc_r>
 80031bc:	1c43      	adds	r3, r0, #1
 80031be:	d1f3      	bne.n	80031a8 <__sfputs_r+0xa>
 80031c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080031c4 <_vfiprintf_r>:
 80031c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c8:	460d      	mov	r5, r1
 80031ca:	b09d      	sub	sp, #116	; 0x74
 80031cc:	4614      	mov	r4, r2
 80031ce:	4698      	mov	r8, r3
 80031d0:	4606      	mov	r6, r0
 80031d2:	b118      	cbz	r0, 80031dc <_vfiprintf_r+0x18>
 80031d4:	6983      	ldr	r3, [r0, #24]
 80031d6:	b90b      	cbnz	r3, 80031dc <_vfiprintf_r+0x18>
 80031d8:	f000 fcaa 	bl	8003b30 <__sinit>
 80031dc:	4b89      	ldr	r3, [pc, #548]	; (8003404 <_vfiprintf_r+0x240>)
 80031de:	429d      	cmp	r5, r3
 80031e0:	d11b      	bne.n	800321a <_vfiprintf_r+0x56>
 80031e2:	6875      	ldr	r5, [r6, #4]
 80031e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031e6:	07d9      	lsls	r1, r3, #31
 80031e8:	d405      	bmi.n	80031f6 <_vfiprintf_r+0x32>
 80031ea:	89ab      	ldrh	r3, [r5, #12]
 80031ec:	059a      	lsls	r2, r3, #22
 80031ee:	d402      	bmi.n	80031f6 <_vfiprintf_r+0x32>
 80031f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031f2:	f000 fd3b 	bl	8003c6c <__retarget_lock_acquire_recursive>
 80031f6:	89ab      	ldrh	r3, [r5, #12]
 80031f8:	071b      	lsls	r3, r3, #28
 80031fa:	d501      	bpl.n	8003200 <_vfiprintf_r+0x3c>
 80031fc:	692b      	ldr	r3, [r5, #16]
 80031fe:	b9eb      	cbnz	r3, 800323c <_vfiprintf_r+0x78>
 8003200:	4629      	mov	r1, r5
 8003202:	4630      	mov	r0, r6
 8003204:	f000 fb04 	bl	8003810 <__swsetup_r>
 8003208:	b1c0      	cbz	r0, 800323c <_vfiprintf_r+0x78>
 800320a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800320c:	07dc      	lsls	r4, r3, #31
 800320e:	d50e      	bpl.n	800322e <_vfiprintf_r+0x6a>
 8003210:	f04f 30ff 	mov.w	r0, #4294967295
 8003214:	b01d      	add	sp, #116	; 0x74
 8003216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800321a:	4b7b      	ldr	r3, [pc, #492]	; (8003408 <_vfiprintf_r+0x244>)
 800321c:	429d      	cmp	r5, r3
 800321e:	d101      	bne.n	8003224 <_vfiprintf_r+0x60>
 8003220:	68b5      	ldr	r5, [r6, #8]
 8003222:	e7df      	b.n	80031e4 <_vfiprintf_r+0x20>
 8003224:	4b79      	ldr	r3, [pc, #484]	; (800340c <_vfiprintf_r+0x248>)
 8003226:	429d      	cmp	r5, r3
 8003228:	bf08      	it	eq
 800322a:	68f5      	ldreq	r5, [r6, #12]
 800322c:	e7da      	b.n	80031e4 <_vfiprintf_r+0x20>
 800322e:	89ab      	ldrh	r3, [r5, #12]
 8003230:	0598      	lsls	r0, r3, #22
 8003232:	d4ed      	bmi.n	8003210 <_vfiprintf_r+0x4c>
 8003234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003236:	f000 fd1a 	bl	8003c6e <__retarget_lock_release_recursive>
 800323a:	e7e9      	b.n	8003210 <_vfiprintf_r+0x4c>
 800323c:	2300      	movs	r3, #0
 800323e:	9309      	str	r3, [sp, #36]	; 0x24
 8003240:	2320      	movs	r3, #32
 8003242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003246:	f8cd 800c 	str.w	r8, [sp, #12]
 800324a:	2330      	movs	r3, #48	; 0x30
 800324c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003410 <_vfiprintf_r+0x24c>
 8003250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003254:	f04f 0901 	mov.w	r9, #1
 8003258:	4623      	mov	r3, r4
 800325a:	469a      	mov	sl, r3
 800325c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003260:	b10a      	cbz	r2, 8003266 <_vfiprintf_r+0xa2>
 8003262:	2a25      	cmp	r2, #37	; 0x25
 8003264:	d1f9      	bne.n	800325a <_vfiprintf_r+0x96>
 8003266:	ebba 0b04 	subs.w	fp, sl, r4
 800326a:	d00b      	beq.n	8003284 <_vfiprintf_r+0xc0>
 800326c:	465b      	mov	r3, fp
 800326e:	4622      	mov	r2, r4
 8003270:	4629      	mov	r1, r5
 8003272:	4630      	mov	r0, r6
 8003274:	f7ff ff93 	bl	800319e <__sfputs_r>
 8003278:	3001      	adds	r0, #1
 800327a:	f000 80aa 	beq.w	80033d2 <_vfiprintf_r+0x20e>
 800327e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003280:	445a      	add	r2, fp
 8003282:	9209      	str	r2, [sp, #36]	; 0x24
 8003284:	f89a 3000 	ldrb.w	r3, [sl]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80a2 	beq.w	80033d2 <_vfiprintf_r+0x20e>
 800328e:	2300      	movs	r3, #0
 8003290:	f04f 32ff 	mov.w	r2, #4294967295
 8003294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003298:	f10a 0a01 	add.w	sl, sl, #1
 800329c:	9304      	str	r3, [sp, #16]
 800329e:	9307      	str	r3, [sp, #28]
 80032a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032a4:	931a      	str	r3, [sp, #104]	; 0x68
 80032a6:	4654      	mov	r4, sl
 80032a8:	2205      	movs	r2, #5
 80032aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032ae:	4858      	ldr	r0, [pc, #352]	; (8003410 <_vfiprintf_r+0x24c>)
 80032b0:	f7fc ff9e 	bl	80001f0 <memchr>
 80032b4:	9a04      	ldr	r2, [sp, #16]
 80032b6:	b9d8      	cbnz	r0, 80032f0 <_vfiprintf_r+0x12c>
 80032b8:	06d1      	lsls	r1, r2, #27
 80032ba:	bf44      	itt	mi
 80032bc:	2320      	movmi	r3, #32
 80032be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032c2:	0713      	lsls	r3, r2, #28
 80032c4:	bf44      	itt	mi
 80032c6:	232b      	movmi	r3, #43	; 0x2b
 80032c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032cc:	f89a 3000 	ldrb.w	r3, [sl]
 80032d0:	2b2a      	cmp	r3, #42	; 0x2a
 80032d2:	d015      	beq.n	8003300 <_vfiprintf_r+0x13c>
 80032d4:	9a07      	ldr	r2, [sp, #28]
 80032d6:	4654      	mov	r4, sl
 80032d8:	2000      	movs	r0, #0
 80032da:	f04f 0c0a 	mov.w	ip, #10
 80032de:	4621      	mov	r1, r4
 80032e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032e4:	3b30      	subs	r3, #48	; 0x30
 80032e6:	2b09      	cmp	r3, #9
 80032e8:	d94e      	bls.n	8003388 <_vfiprintf_r+0x1c4>
 80032ea:	b1b0      	cbz	r0, 800331a <_vfiprintf_r+0x156>
 80032ec:	9207      	str	r2, [sp, #28]
 80032ee:	e014      	b.n	800331a <_vfiprintf_r+0x156>
 80032f0:	eba0 0308 	sub.w	r3, r0, r8
 80032f4:	fa09 f303 	lsl.w	r3, r9, r3
 80032f8:	4313      	orrs	r3, r2
 80032fa:	9304      	str	r3, [sp, #16]
 80032fc:	46a2      	mov	sl, r4
 80032fe:	e7d2      	b.n	80032a6 <_vfiprintf_r+0xe2>
 8003300:	9b03      	ldr	r3, [sp, #12]
 8003302:	1d19      	adds	r1, r3, #4
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	9103      	str	r1, [sp, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	bfbb      	ittet	lt
 800330c:	425b      	neglt	r3, r3
 800330e:	f042 0202 	orrlt.w	r2, r2, #2
 8003312:	9307      	strge	r3, [sp, #28]
 8003314:	9307      	strlt	r3, [sp, #28]
 8003316:	bfb8      	it	lt
 8003318:	9204      	strlt	r2, [sp, #16]
 800331a:	7823      	ldrb	r3, [r4, #0]
 800331c:	2b2e      	cmp	r3, #46	; 0x2e
 800331e:	d10c      	bne.n	800333a <_vfiprintf_r+0x176>
 8003320:	7863      	ldrb	r3, [r4, #1]
 8003322:	2b2a      	cmp	r3, #42	; 0x2a
 8003324:	d135      	bne.n	8003392 <_vfiprintf_r+0x1ce>
 8003326:	9b03      	ldr	r3, [sp, #12]
 8003328:	1d1a      	adds	r2, r3, #4
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	9203      	str	r2, [sp, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	bfb8      	it	lt
 8003332:	f04f 33ff 	movlt.w	r3, #4294967295
 8003336:	3402      	adds	r4, #2
 8003338:	9305      	str	r3, [sp, #20]
 800333a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003420 <_vfiprintf_r+0x25c>
 800333e:	7821      	ldrb	r1, [r4, #0]
 8003340:	2203      	movs	r2, #3
 8003342:	4650      	mov	r0, sl
 8003344:	f7fc ff54 	bl	80001f0 <memchr>
 8003348:	b140      	cbz	r0, 800335c <_vfiprintf_r+0x198>
 800334a:	2340      	movs	r3, #64	; 0x40
 800334c:	eba0 000a 	sub.w	r0, r0, sl
 8003350:	fa03 f000 	lsl.w	r0, r3, r0
 8003354:	9b04      	ldr	r3, [sp, #16]
 8003356:	4303      	orrs	r3, r0
 8003358:	3401      	adds	r4, #1
 800335a:	9304      	str	r3, [sp, #16]
 800335c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003360:	482c      	ldr	r0, [pc, #176]	; (8003414 <_vfiprintf_r+0x250>)
 8003362:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003366:	2206      	movs	r2, #6
 8003368:	f7fc ff42 	bl	80001f0 <memchr>
 800336c:	2800      	cmp	r0, #0
 800336e:	d03f      	beq.n	80033f0 <_vfiprintf_r+0x22c>
 8003370:	4b29      	ldr	r3, [pc, #164]	; (8003418 <_vfiprintf_r+0x254>)
 8003372:	bb1b      	cbnz	r3, 80033bc <_vfiprintf_r+0x1f8>
 8003374:	9b03      	ldr	r3, [sp, #12]
 8003376:	3307      	adds	r3, #7
 8003378:	f023 0307 	bic.w	r3, r3, #7
 800337c:	3308      	adds	r3, #8
 800337e:	9303      	str	r3, [sp, #12]
 8003380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003382:	443b      	add	r3, r7
 8003384:	9309      	str	r3, [sp, #36]	; 0x24
 8003386:	e767      	b.n	8003258 <_vfiprintf_r+0x94>
 8003388:	fb0c 3202 	mla	r2, ip, r2, r3
 800338c:	460c      	mov	r4, r1
 800338e:	2001      	movs	r0, #1
 8003390:	e7a5      	b.n	80032de <_vfiprintf_r+0x11a>
 8003392:	2300      	movs	r3, #0
 8003394:	3401      	adds	r4, #1
 8003396:	9305      	str	r3, [sp, #20]
 8003398:	4619      	mov	r1, r3
 800339a:	f04f 0c0a 	mov.w	ip, #10
 800339e:	4620      	mov	r0, r4
 80033a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033a4:	3a30      	subs	r2, #48	; 0x30
 80033a6:	2a09      	cmp	r2, #9
 80033a8:	d903      	bls.n	80033b2 <_vfiprintf_r+0x1ee>
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0c5      	beq.n	800333a <_vfiprintf_r+0x176>
 80033ae:	9105      	str	r1, [sp, #20]
 80033b0:	e7c3      	b.n	800333a <_vfiprintf_r+0x176>
 80033b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80033b6:	4604      	mov	r4, r0
 80033b8:	2301      	movs	r3, #1
 80033ba:	e7f0      	b.n	800339e <_vfiprintf_r+0x1da>
 80033bc:	ab03      	add	r3, sp, #12
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	462a      	mov	r2, r5
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <_vfiprintf_r+0x258>)
 80033c4:	a904      	add	r1, sp, #16
 80033c6:	4630      	mov	r0, r6
 80033c8:	f3af 8000 	nop.w
 80033cc:	4607      	mov	r7, r0
 80033ce:	1c78      	adds	r0, r7, #1
 80033d0:	d1d6      	bne.n	8003380 <_vfiprintf_r+0x1bc>
 80033d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033d4:	07d9      	lsls	r1, r3, #31
 80033d6:	d405      	bmi.n	80033e4 <_vfiprintf_r+0x220>
 80033d8:	89ab      	ldrh	r3, [r5, #12]
 80033da:	059a      	lsls	r2, r3, #22
 80033dc:	d402      	bmi.n	80033e4 <_vfiprintf_r+0x220>
 80033de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033e0:	f000 fc45 	bl	8003c6e <__retarget_lock_release_recursive>
 80033e4:	89ab      	ldrh	r3, [r5, #12]
 80033e6:	065b      	lsls	r3, r3, #25
 80033e8:	f53f af12 	bmi.w	8003210 <_vfiprintf_r+0x4c>
 80033ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033ee:	e711      	b.n	8003214 <_vfiprintf_r+0x50>
 80033f0:	ab03      	add	r3, sp, #12
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	462a      	mov	r2, r5
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <_vfiprintf_r+0x258>)
 80033f8:	a904      	add	r1, sp, #16
 80033fa:	4630      	mov	r0, r6
 80033fc:	f000 f880 	bl	8003500 <_printf_i>
 8003400:	e7e4      	b.n	80033cc <_vfiprintf_r+0x208>
 8003402:	bf00      	nop
 8003404:	08004574 	.word	0x08004574
 8003408:	08004594 	.word	0x08004594
 800340c:	08004554 	.word	0x08004554
 8003410:	0800451e 	.word	0x0800451e
 8003414:	08004528 	.word	0x08004528
 8003418:	00000000 	.word	0x00000000
 800341c:	0800319f 	.word	0x0800319f
 8003420:	08004524 	.word	0x08004524

08003424 <_printf_common>:
 8003424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003428:	4616      	mov	r6, r2
 800342a:	4699      	mov	r9, r3
 800342c:	688a      	ldr	r2, [r1, #8]
 800342e:	690b      	ldr	r3, [r1, #16]
 8003430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003434:	4293      	cmp	r3, r2
 8003436:	bfb8      	it	lt
 8003438:	4613      	movlt	r3, r2
 800343a:	6033      	str	r3, [r6, #0]
 800343c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003440:	4607      	mov	r7, r0
 8003442:	460c      	mov	r4, r1
 8003444:	b10a      	cbz	r2, 800344a <_printf_common+0x26>
 8003446:	3301      	adds	r3, #1
 8003448:	6033      	str	r3, [r6, #0]
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	0699      	lsls	r1, r3, #26
 800344e:	bf42      	ittt	mi
 8003450:	6833      	ldrmi	r3, [r6, #0]
 8003452:	3302      	addmi	r3, #2
 8003454:	6033      	strmi	r3, [r6, #0]
 8003456:	6825      	ldr	r5, [r4, #0]
 8003458:	f015 0506 	ands.w	r5, r5, #6
 800345c:	d106      	bne.n	800346c <_printf_common+0x48>
 800345e:	f104 0a19 	add.w	sl, r4, #25
 8003462:	68e3      	ldr	r3, [r4, #12]
 8003464:	6832      	ldr	r2, [r6, #0]
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	42ab      	cmp	r3, r5
 800346a:	dc26      	bgt.n	80034ba <_printf_common+0x96>
 800346c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003470:	1e13      	subs	r3, r2, #0
 8003472:	6822      	ldr	r2, [r4, #0]
 8003474:	bf18      	it	ne
 8003476:	2301      	movne	r3, #1
 8003478:	0692      	lsls	r2, r2, #26
 800347a:	d42b      	bmi.n	80034d4 <_printf_common+0xb0>
 800347c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003480:	4649      	mov	r1, r9
 8003482:	4638      	mov	r0, r7
 8003484:	47c0      	blx	r8
 8003486:	3001      	adds	r0, #1
 8003488:	d01e      	beq.n	80034c8 <_printf_common+0xa4>
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	68e5      	ldr	r5, [r4, #12]
 800348e:	6832      	ldr	r2, [r6, #0]
 8003490:	f003 0306 	and.w	r3, r3, #6
 8003494:	2b04      	cmp	r3, #4
 8003496:	bf08      	it	eq
 8003498:	1aad      	subeq	r5, r5, r2
 800349a:	68a3      	ldr	r3, [r4, #8]
 800349c:	6922      	ldr	r2, [r4, #16]
 800349e:	bf0c      	ite	eq
 80034a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034a4:	2500      	movne	r5, #0
 80034a6:	4293      	cmp	r3, r2
 80034a8:	bfc4      	itt	gt
 80034aa:	1a9b      	subgt	r3, r3, r2
 80034ac:	18ed      	addgt	r5, r5, r3
 80034ae:	2600      	movs	r6, #0
 80034b0:	341a      	adds	r4, #26
 80034b2:	42b5      	cmp	r5, r6
 80034b4:	d11a      	bne.n	80034ec <_printf_common+0xc8>
 80034b6:	2000      	movs	r0, #0
 80034b8:	e008      	b.n	80034cc <_printf_common+0xa8>
 80034ba:	2301      	movs	r3, #1
 80034bc:	4652      	mov	r2, sl
 80034be:	4649      	mov	r1, r9
 80034c0:	4638      	mov	r0, r7
 80034c2:	47c0      	blx	r8
 80034c4:	3001      	adds	r0, #1
 80034c6:	d103      	bne.n	80034d0 <_printf_common+0xac>
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295
 80034cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d0:	3501      	adds	r5, #1
 80034d2:	e7c6      	b.n	8003462 <_printf_common+0x3e>
 80034d4:	18e1      	adds	r1, r4, r3
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	2030      	movs	r0, #48	; 0x30
 80034da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034de:	4422      	add	r2, r4
 80034e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034e8:	3302      	adds	r3, #2
 80034ea:	e7c7      	b.n	800347c <_printf_common+0x58>
 80034ec:	2301      	movs	r3, #1
 80034ee:	4622      	mov	r2, r4
 80034f0:	4649      	mov	r1, r9
 80034f2:	4638      	mov	r0, r7
 80034f4:	47c0      	blx	r8
 80034f6:	3001      	adds	r0, #1
 80034f8:	d0e6      	beq.n	80034c8 <_printf_common+0xa4>
 80034fa:	3601      	adds	r6, #1
 80034fc:	e7d9      	b.n	80034b2 <_printf_common+0x8e>
	...

08003500 <_printf_i>:
 8003500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003504:	460c      	mov	r4, r1
 8003506:	4691      	mov	r9, r2
 8003508:	7e27      	ldrb	r7, [r4, #24]
 800350a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800350c:	2f78      	cmp	r7, #120	; 0x78
 800350e:	4680      	mov	r8, r0
 8003510:	469a      	mov	sl, r3
 8003512:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003516:	d807      	bhi.n	8003528 <_printf_i+0x28>
 8003518:	2f62      	cmp	r7, #98	; 0x62
 800351a:	d80a      	bhi.n	8003532 <_printf_i+0x32>
 800351c:	2f00      	cmp	r7, #0
 800351e:	f000 80d8 	beq.w	80036d2 <_printf_i+0x1d2>
 8003522:	2f58      	cmp	r7, #88	; 0x58
 8003524:	f000 80a3 	beq.w	800366e <_printf_i+0x16e>
 8003528:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800352c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003530:	e03a      	b.n	80035a8 <_printf_i+0xa8>
 8003532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003536:	2b15      	cmp	r3, #21
 8003538:	d8f6      	bhi.n	8003528 <_printf_i+0x28>
 800353a:	a001      	add	r0, pc, #4	; (adr r0, 8003540 <_printf_i+0x40>)
 800353c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003540:	08003599 	.word	0x08003599
 8003544:	080035ad 	.word	0x080035ad
 8003548:	08003529 	.word	0x08003529
 800354c:	08003529 	.word	0x08003529
 8003550:	08003529 	.word	0x08003529
 8003554:	08003529 	.word	0x08003529
 8003558:	080035ad 	.word	0x080035ad
 800355c:	08003529 	.word	0x08003529
 8003560:	08003529 	.word	0x08003529
 8003564:	08003529 	.word	0x08003529
 8003568:	08003529 	.word	0x08003529
 800356c:	080036b9 	.word	0x080036b9
 8003570:	080035dd 	.word	0x080035dd
 8003574:	0800369b 	.word	0x0800369b
 8003578:	08003529 	.word	0x08003529
 800357c:	08003529 	.word	0x08003529
 8003580:	080036db 	.word	0x080036db
 8003584:	08003529 	.word	0x08003529
 8003588:	080035dd 	.word	0x080035dd
 800358c:	08003529 	.word	0x08003529
 8003590:	08003529 	.word	0x08003529
 8003594:	080036a3 	.word	0x080036a3
 8003598:	680b      	ldr	r3, [r1, #0]
 800359a:	1d1a      	adds	r2, r3, #4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	600a      	str	r2, [r1, #0]
 80035a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0a3      	b.n	80036f4 <_printf_i+0x1f4>
 80035ac:	6825      	ldr	r5, [r4, #0]
 80035ae:	6808      	ldr	r0, [r1, #0]
 80035b0:	062e      	lsls	r6, r5, #24
 80035b2:	f100 0304 	add.w	r3, r0, #4
 80035b6:	d50a      	bpl.n	80035ce <_printf_i+0xce>
 80035b8:	6805      	ldr	r5, [r0, #0]
 80035ba:	600b      	str	r3, [r1, #0]
 80035bc:	2d00      	cmp	r5, #0
 80035be:	da03      	bge.n	80035c8 <_printf_i+0xc8>
 80035c0:	232d      	movs	r3, #45	; 0x2d
 80035c2:	426d      	negs	r5, r5
 80035c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035c8:	485e      	ldr	r0, [pc, #376]	; (8003744 <_printf_i+0x244>)
 80035ca:	230a      	movs	r3, #10
 80035cc:	e019      	b.n	8003602 <_printf_i+0x102>
 80035ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80035d2:	6805      	ldr	r5, [r0, #0]
 80035d4:	600b      	str	r3, [r1, #0]
 80035d6:	bf18      	it	ne
 80035d8:	b22d      	sxthne	r5, r5
 80035da:	e7ef      	b.n	80035bc <_printf_i+0xbc>
 80035dc:	680b      	ldr	r3, [r1, #0]
 80035de:	6825      	ldr	r5, [r4, #0]
 80035e0:	1d18      	adds	r0, r3, #4
 80035e2:	6008      	str	r0, [r1, #0]
 80035e4:	0628      	lsls	r0, r5, #24
 80035e6:	d501      	bpl.n	80035ec <_printf_i+0xec>
 80035e8:	681d      	ldr	r5, [r3, #0]
 80035ea:	e002      	b.n	80035f2 <_printf_i+0xf2>
 80035ec:	0669      	lsls	r1, r5, #25
 80035ee:	d5fb      	bpl.n	80035e8 <_printf_i+0xe8>
 80035f0:	881d      	ldrh	r5, [r3, #0]
 80035f2:	4854      	ldr	r0, [pc, #336]	; (8003744 <_printf_i+0x244>)
 80035f4:	2f6f      	cmp	r7, #111	; 0x6f
 80035f6:	bf0c      	ite	eq
 80035f8:	2308      	moveq	r3, #8
 80035fa:	230a      	movne	r3, #10
 80035fc:	2100      	movs	r1, #0
 80035fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003602:	6866      	ldr	r6, [r4, #4]
 8003604:	60a6      	str	r6, [r4, #8]
 8003606:	2e00      	cmp	r6, #0
 8003608:	bfa2      	ittt	ge
 800360a:	6821      	ldrge	r1, [r4, #0]
 800360c:	f021 0104 	bicge.w	r1, r1, #4
 8003610:	6021      	strge	r1, [r4, #0]
 8003612:	b90d      	cbnz	r5, 8003618 <_printf_i+0x118>
 8003614:	2e00      	cmp	r6, #0
 8003616:	d04d      	beq.n	80036b4 <_printf_i+0x1b4>
 8003618:	4616      	mov	r6, r2
 800361a:	fbb5 f1f3 	udiv	r1, r5, r3
 800361e:	fb03 5711 	mls	r7, r3, r1, r5
 8003622:	5dc7      	ldrb	r7, [r0, r7]
 8003624:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003628:	462f      	mov	r7, r5
 800362a:	42bb      	cmp	r3, r7
 800362c:	460d      	mov	r5, r1
 800362e:	d9f4      	bls.n	800361a <_printf_i+0x11a>
 8003630:	2b08      	cmp	r3, #8
 8003632:	d10b      	bne.n	800364c <_printf_i+0x14c>
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	07df      	lsls	r7, r3, #31
 8003638:	d508      	bpl.n	800364c <_printf_i+0x14c>
 800363a:	6923      	ldr	r3, [r4, #16]
 800363c:	6861      	ldr	r1, [r4, #4]
 800363e:	4299      	cmp	r1, r3
 8003640:	bfde      	ittt	le
 8003642:	2330      	movle	r3, #48	; 0x30
 8003644:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003648:	f106 36ff 	addle.w	r6, r6, #4294967295
 800364c:	1b92      	subs	r2, r2, r6
 800364e:	6122      	str	r2, [r4, #16]
 8003650:	f8cd a000 	str.w	sl, [sp]
 8003654:	464b      	mov	r3, r9
 8003656:	aa03      	add	r2, sp, #12
 8003658:	4621      	mov	r1, r4
 800365a:	4640      	mov	r0, r8
 800365c:	f7ff fee2 	bl	8003424 <_printf_common>
 8003660:	3001      	adds	r0, #1
 8003662:	d14c      	bne.n	80036fe <_printf_i+0x1fe>
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	b004      	add	sp, #16
 800366a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800366e:	4835      	ldr	r0, [pc, #212]	; (8003744 <_printf_i+0x244>)
 8003670:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	680e      	ldr	r6, [r1, #0]
 8003678:	061f      	lsls	r7, r3, #24
 800367a:	f856 5b04 	ldr.w	r5, [r6], #4
 800367e:	600e      	str	r6, [r1, #0]
 8003680:	d514      	bpl.n	80036ac <_printf_i+0x1ac>
 8003682:	07d9      	lsls	r1, r3, #31
 8003684:	bf44      	itt	mi
 8003686:	f043 0320 	orrmi.w	r3, r3, #32
 800368a:	6023      	strmi	r3, [r4, #0]
 800368c:	b91d      	cbnz	r5, 8003696 <_printf_i+0x196>
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	f023 0320 	bic.w	r3, r3, #32
 8003694:	6023      	str	r3, [r4, #0]
 8003696:	2310      	movs	r3, #16
 8003698:	e7b0      	b.n	80035fc <_printf_i+0xfc>
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	f043 0320 	orr.w	r3, r3, #32
 80036a0:	6023      	str	r3, [r4, #0]
 80036a2:	2378      	movs	r3, #120	; 0x78
 80036a4:	4828      	ldr	r0, [pc, #160]	; (8003748 <_printf_i+0x248>)
 80036a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036aa:	e7e3      	b.n	8003674 <_printf_i+0x174>
 80036ac:	065e      	lsls	r6, r3, #25
 80036ae:	bf48      	it	mi
 80036b0:	b2ad      	uxthmi	r5, r5
 80036b2:	e7e6      	b.n	8003682 <_printf_i+0x182>
 80036b4:	4616      	mov	r6, r2
 80036b6:	e7bb      	b.n	8003630 <_printf_i+0x130>
 80036b8:	680b      	ldr	r3, [r1, #0]
 80036ba:	6826      	ldr	r6, [r4, #0]
 80036bc:	6960      	ldr	r0, [r4, #20]
 80036be:	1d1d      	adds	r5, r3, #4
 80036c0:	600d      	str	r5, [r1, #0]
 80036c2:	0635      	lsls	r5, r6, #24
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	d501      	bpl.n	80036cc <_printf_i+0x1cc>
 80036c8:	6018      	str	r0, [r3, #0]
 80036ca:	e002      	b.n	80036d2 <_printf_i+0x1d2>
 80036cc:	0671      	lsls	r1, r6, #25
 80036ce:	d5fb      	bpl.n	80036c8 <_printf_i+0x1c8>
 80036d0:	8018      	strh	r0, [r3, #0]
 80036d2:	2300      	movs	r3, #0
 80036d4:	6123      	str	r3, [r4, #16]
 80036d6:	4616      	mov	r6, r2
 80036d8:	e7ba      	b.n	8003650 <_printf_i+0x150>
 80036da:	680b      	ldr	r3, [r1, #0]
 80036dc:	1d1a      	adds	r2, r3, #4
 80036de:	600a      	str	r2, [r1, #0]
 80036e0:	681e      	ldr	r6, [r3, #0]
 80036e2:	6862      	ldr	r2, [r4, #4]
 80036e4:	2100      	movs	r1, #0
 80036e6:	4630      	mov	r0, r6
 80036e8:	f7fc fd82 	bl	80001f0 <memchr>
 80036ec:	b108      	cbz	r0, 80036f2 <_printf_i+0x1f2>
 80036ee:	1b80      	subs	r0, r0, r6
 80036f0:	6060      	str	r0, [r4, #4]
 80036f2:	6863      	ldr	r3, [r4, #4]
 80036f4:	6123      	str	r3, [r4, #16]
 80036f6:	2300      	movs	r3, #0
 80036f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036fc:	e7a8      	b.n	8003650 <_printf_i+0x150>
 80036fe:	6923      	ldr	r3, [r4, #16]
 8003700:	4632      	mov	r2, r6
 8003702:	4649      	mov	r1, r9
 8003704:	4640      	mov	r0, r8
 8003706:	47d0      	blx	sl
 8003708:	3001      	adds	r0, #1
 800370a:	d0ab      	beq.n	8003664 <_printf_i+0x164>
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	079b      	lsls	r3, r3, #30
 8003710:	d413      	bmi.n	800373a <_printf_i+0x23a>
 8003712:	68e0      	ldr	r0, [r4, #12]
 8003714:	9b03      	ldr	r3, [sp, #12]
 8003716:	4298      	cmp	r0, r3
 8003718:	bfb8      	it	lt
 800371a:	4618      	movlt	r0, r3
 800371c:	e7a4      	b.n	8003668 <_printf_i+0x168>
 800371e:	2301      	movs	r3, #1
 8003720:	4632      	mov	r2, r6
 8003722:	4649      	mov	r1, r9
 8003724:	4640      	mov	r0, r8
 8003726:	47d0      	blx	sl
 8003728:	3001      	adds	r0, #1
 800372a:	d09b      	beq.n	8003664 <_printf_i+0x164>
 800372c:	3501      	adds	r5, #1
 800372e:	68e3      	ldr	r3, [r4, #12]
 8003730:	9903      	ldr	r1, [sp, #12]
 8003732:	1a5b      	subs	r3, r3, r1
 8003734:	42ab      	cmp	r3, r5
 8003736:	dcf2      	bgt.n	800371e <_printf_i+0x21e>
 8003738:	e7eb      	b.n	8003712 <_printf_i+0x212>
 800373a:	2500      	movs	r5, #0
 800373c:	f104 0619 	add.w	r6, r4, #25
 8003740:	e7f5      	b.n	800372e <_printf_i+0x22e>
 8003742:	bf00      	nop
 8003744:	0800452f 	.word	0x0800452f
 8003748:	08004540 	.word	0x08004540

0800374c <_sbrk_r>:
 800374c:	b538      	push	{r3, r4, r5, lr}
 800374e:	4d06      	ldr	r5, [pc, #24]	; (8003768 <_sbrk_r+0x1c>)
 8003750:	2300      	movs	r3, #0
 8003752:	4604      	mov	r4, r0
 8003754:	4608      	mov	r0, r1
 8003756:	602b      	str	r3, [r5, #0]
 8003758:	f7fe fc64 	bl	8002024 <_sbrk>
 800375c:	1c43      	adds	r3, r0, #1
 800375e:	d102      	bne.n	8003766 <_sbrk_r+0x1a>
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	b103      	cbz	r3, 8003766 <_sbrk_r+0x1a>
 8003764:	6023      	str	r3, [r4, #0]
 8003766:	bd38      	pop	{r3, r4, r5, pc}
 8003768:	200005e0 	.word	0x200005e0

0800376c <__swbuf_r>:
 800376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376e:	460e      	mov	r6, r1
 8003770:	4614      	mov	r4, r2
 8003772:	4605      	mov	r5, r0
 8003774:	b118      	cbz	r0, 800377e <__swbuf_r+0x12>
 8003776:	6983      	ldr	r3, [r0, #24]
 8003778:	b90b      	cbnz	r3, 800377e <__swbuf_r+0x12>
 800377a:	f000 f9d9 	bl	8003b30 <__sinit>
 800377e:	4b21      	ldr	r3, [pc, #132]	; (8003804 <__swbuf_r+0x98>)
 8003780:	429c      	cmp	r4, r3
 8003782:	d12b      	bne.n	80037dc <__swbuf_r+0x70>
 8003784:	686c      	ldr	r4, [r5, #4]
 8003786:	69a3      	ldr	r3, [r4, #24]
 8003788:	60a3      	str	r3, [r4, #8]
 800378a:	89a3      	ldrh	r3, [r4, #12]
 800378c:	071a      	lsls	r2, r3, #28
 800378e:	d52f      	bpl.n	80037f0 <__swbuf_r+0x84>
 8003790:	6923      	ldr	r3, [r4, #16]
 8003792:	b36b      	cbz	r3, 80037f0 <__swbuf_r+0x84>
 8003794:	6923      	ldr	r3, [r4, #16]
 8003796:	6820      	ldr	r0, [r4, #0]
 8003798:	1ac0      	subs	r0, r0, r3
 800379a:	6963      	ldr	r3, [r4, #20]
 800379c:	b2f6      	uxtb	r6, r6
 800379e:	4283      	cmp	r3, r0
 80037a0:	4637      	mov	r7, r6
 80037a2:	dc04      	bgt.n	80037ae <__swbuf_r+0x42>
 80037a4:	4621      	mov	r1, r4
 80037a6:	4628      	mov	r0, r5
 80037a8:	f000 f92e 	bl	8003a08 <_fflush_r>
 80037ac:	bb30      	cbnz	r0, 80037fc <__swbuf_r+0x90>
 80037ae:	68a3      	ldr	r3, [r4, #8]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	60a3      	str	r3, [r4, #8]
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	6022      	str	r2, [r4, #0]
 80037ba:	701e      	strb	r6, [r3, #0]
 80037bc:	6963      	ldr	r3, [r4, #20]
 80037be:	3001      	adds	r0, #1
 80037c0:	4283      	cmp	r3, r0
 80037c2:	d004      	beq.n	80037ce <__swbuf_r+0x62>
 80037c4:	89a3      	ldrh	r3, [r4, #12]
 80037c6:	07db      	lsls	r3, r3, #31
 80037c8:	d506      	bpl.n	80037d8 <__swbuf_r+0x6c>
 80037ca:	2e0a      	cmp	r6, #10
 80037cc:	d104      	bne.n	80037d8 <__swbuf_r+0x6c>
 80037ce:	4621      	mov	r1, r4
 80037d0:	4628      	mov	r0, r5
 80037d2:	f000 f919 	bl	8003a08 <_fflush_r>
 80037d6:	b988      	cbnz	r0, 80037fc <__swbuf_r+0x90>
 80037d8:	4638      	mov	r0, r7
 80037da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <__swbuf_r+0x9c>)
 80037de:	429c      	cmp	r4, r3
 80037e0:	d101      	bne.n	80037e6 <__swbuf_r+0x7a>
 80037e2:	68ac      	ldr	r4, [r5, #8]
 80037e4:	e7cf      	b.n	8003786 <__swbuf_r+0x1a>
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <__swbuf_r+0xa0>)
 80037e8:	429c      	cmp	r4, r3
 80037ea:	bf08      	it	eq
 80037ec:	68ec      	ldreq	r4, [r5, #12]
 80037ee:	e7ca      	b.n	8003786 <__swbuf_r+0x1a>
 80037f0:	4621      	mov	r1, r4
 80037f2:	4628      	mov	r0, r5
 80037f4:	f000 f80c 	bl	8003810 <__swsetup_r>
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d0cb      	beq.n	8003794 <__swbuf_r+0x28>
 80037fc:	f04f 37ff 	mov.w	r7, #4294967295
 8003800:	e7ea      	b.n	80037d8 <__swbuf_r+0x6c>
 8003802:	bf00      	nop
 8003804:	08004574 	.word	0x08004574
 8003808:	08004594 	.word	0x08004594
 800380c:	08004554 	.word	0x08004554

08003810 <__swsetup_r>:
 8003810:	4b32      	ldr	r3, [pc, #200]	; (80038dc <__swsetup_r+0xcc>)
 8003812:	b570      	push	{r4, r5, r6, lr}
 8003814:	681d      	ldr	r5, [r3, #0]
 8003816:	4606      	mov	r6, r0
 8003818:	460c      	mov	r4, r1
 800381a:	b125      	cbz	r5, 8003826 <__swsetup_r+0x16>
 800381c:	69ab      	ldr	r3, [r5, #24]
 800381e:	b913      	cbnz	r3, 8003826 <__swsetup_r+0x16>
 8003820:	4628      	mov	r0, r5
 8003822:	f000 f985 	bl	8003b30 <__sinit>
 8003826:	4b2e      	ldr	r3, [pc, #184]	; (80038e0 <__swsetup_r+0xd0>)
 8003828:	429c      	cmp	r4, r3
 800382a:	d10f      	bne.n	800384c <__swsetup_r+0x3c>
 800382c:	686c      	ldr	r4, [r5, #4]
 800382e:	89a3      	ldrh	r3, [r4, #12]
 8003830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003834:	0719      	lsls	r1, r3, #28
 8003836:	d42c      	bmi.n	8003892 <__swsetup_r+0x82>
 8003838:	06dd      	lsls	r5, r3, #27
 800383a:	d411      	bmi.n	8003860 <__swsetup_r+0x50>
 800383c:	2309      	movs	r3, #9
 800383e:	6033      	str	r3, [r6, #0]
 8003840:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003844:	81a3      	strh	r3, [r4, #12]
 8003846:	f04f 30ff 	mov.w	r0, #4294967295
 800384a:	e03e      	b.n	80038ca <__swsetup_r+0xba>
 800384c:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <__swsetup_r+0xd4>)
 800384e:	429c      	cmp	r4, r3
 8003850:	d101      	bne.n	8003856 <__swsetup_r+0x46>
 8003852:	68ac      	ldr	r4, [r5, #8]
 8003854:	e7eb      	b.n	800382e <__swsetup_r+0x1e>
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <__swsetup_r+0xd8>)
 8003858:	429c      	cmp	r4, r3
 800385a:	bf08      	it	eq
 800385c:	68ec      	ldreq	r4, [r5, #12]
 800385e:	e7e6      	b.n	800382e <__swsetup_r+0x1e>
 8003860:	0758      	lsls	r0, r3, #29
 8003862:	d512      	bpl.n	800388a <__swsetup_r+0x7a>
 8003864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003866:	b141      	cbz	r1, 800387a <__swsetup_r+0x6a>
 8003868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800386c:	4299      	cmp	r1, r3
 800386e:	d002      	beq.n	8003876 <__swsetup_r+0x66>
 8003870:	4630      	mov	r0, r6
 8003872:	f7ff fa77 	bl	8002d64 <_free_r>
 8003876:	2300      	movs	r3, #0
 8003878:	6363      	str	r3, [r4, #52]	; 0x34
 800387a:	89a3      	ldrh	r3, [r4, #12]
 800387c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003880:	81a3      	strh	r3, [r4, #12]
 8003882:	2300      	movs	r3, #0
 8003884:	6063      	str	r3, [r4, #4]
 8003886:	6923      	ldr	r3, [r4, #16]
 8003888:	6023      	str	r3, [r4, #0]
 800388a:	89a3      	ldrh	r3, [r4, #12]
 800388c:	f043 0308 	orr.w	r3, r3, #8
 8003890:	81a3      	strh	r3, [r4, #12]
 8003892:	6923      	ldr	r3, [r4, #16]
 8003894:	b94b      	cbnz	r3, 80038aa <__swsetup_r+0x9a>
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800389c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a0:	d003      	beq.n	80038aa <__swsetup_r+0x9a>
 80038a2:	4621      	mov	r1, r4
 80038a4:	4630      	mov	r0, r6
 80038a6:	f000 fa07 	bl	8003cb8 <__smakebuf_r>
 80038aa:	89a0      	ldrh	r0, [r4, #12]
 80038ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038b0:	f010 0301 	ands.w	r3, r0, #1
 80038b4:	d00a      	beq.n	80038cc <__swsetup_r+0xbc>
 80038b6:	2300      	movs	r3, #0
 80038b8:	60a3      	str	r3, [r4, #8]
 80038ba:	6963      	ldr	r3, [r4, #20]
 80038bc:	425b      	negs	r3, r3
 80038be:	61a3      	str	r3, [r4, #24]
 80038c0:	6923      	ldr	r3, [r4, #16]
 80038c2:	b943      	cbnz	r3, 80038d6 <__swsetup_r+0xc6>
 80038c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80038c8:	d1ba      	bne.n	8003840 <__swsetup_r+0x30>
 80038ca:	bd70      	pop	{r4, r5, r6, pc}
 80038cc:	0781      	lsls	r1, r0, #30
 80038ce:	bf58      	it	pl
 80038d0:	6963      	ldrpl	r3, [r4, #20]
 80038d2:	60a3      	str	r3, [r4, #8]
 80038d4:	e7f4      	b.n	80038c0 <__swsetup_r+0xb0>
 80038d6:	2000      	movs	r0, #0
 80038d8:	e7f7      	b.n	80038ca <__swsetup_r+0xba>
 80038da:	bf00      	nop
 80038dc:	20000004 	.word	0x20000004
 80038e0:	08004574 	.word	0x08004574
 80038e4:	08004594 	.word	0x08004594
 80038e8:	08004554 	.word	0x08004554

080038ec <abort>:
 80038ec:	b508      	push	{r3, lr}
 80038ee:	2006      	movs	r0, #6
 80038f0:	f000 faa4 	bl	8003e3c <raise>
 80038f4:	2001      	movs	r0, #1
 80038f6:	f7fe fb1d 	bl	8001f34 <_exit>
	...

080038fc <__sflush_r>:
 80038fc:	898a      	ldrh	r2, [r1, #12]
 80038fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003902:	4605      	mov	r5, r0
 8003904:	0710      	lsls	r0, r2, #28
 8003906:	460c      	mov	r4, r1
 8003908:	d458      	bmi.n	80039bc <__sflush_r+0xc0>
 800390a:	684b      	ldr	r3, [r1, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	dc05      	bgt.n	800391c <__sflush_r+0x20>
 8003910:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	dc02      	bgt.n	800391c <__sflush_r+0x20>
 8003916:	2000      	movs	r0, #0
 8003918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800391c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800391e:	2e00      	cmp	r6, #0
 8003920:	d0f9      	beq.n	8003916 <__sflush_r+0x1a>
 8003922:	2300      	movs	r3, #0
 8003924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003928:	682f      	ldr	r7, [r5, #0]
 800392a:	602b      	str	r3, [r5, #0]
 800392c:	d032      	beq.n	8003994 <__sflush_r+0x98>
 800392e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003930:	89a3      	ldrh	r3, [r4, #12]
 8003932:	075a      	lsls	r2, r3, #29
 8003934:	d505      	bpl.n	8003942 <__sflush_r+0x46>
 8003936:	6863      	ldr	r3, [r4, #4]
 8003938:	1ac0      	subs	r0, r0, r3
 800393a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800393c:	b10b      	cbz	r3, 8003942 <__sflush_r+0x46>
 800393e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003940:	1ac0      	subs	r0, r0, r3
 8003942:	2300      	movs	r3, #0
 8003944:	4602      	mov	r2, r0
 8003946:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003948:	6a21      	ldr	r1, [r4, #32]
 800394a:	4628      	mov	r0, r5
 800394c:	47b0      	blx	r6
 800394e:	1c43      	adds	r3, r0, #1
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	d106      	bne.n	8003962 <__sflush_r+0x66>
 8003954:	6829      	ldr	r1, [r5, #0]
 8003956:	291d      	cmp	r1, #29
 8003958:	d82c      	bhi.n	80039b4 <__sflush_r+0xb8>
 800395a:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <__sflush_r+0x108>)
 800395c:	40ca      	lsrs	r2, r1
 800395e:	07d6      	lsls	r6, r2, #31
 8003960:	d528      	bpl.n	80039b4 <__sflush_r+0xb8>
 8003962:	2200      	movs	r2, #0
 8003964:	6062      	str	r2, [r4, #4]
 8003966:	04d9      	lsls	r1, r3, #19
 8003968:	6922      	ldr	r2, [r4, #16]
 800396a:	6022      	str	r2, [r4, #0]
 800396c:	d504      	bpl.n	8003978 <__sflush_r+0x7c>
 800396e:	1c42      	adds	r2, r0, #1
 8003970:	d101      	bne.n	8003976 <__sflush_r+0x7a>
 8003972:	682b      	ldr	r3, [r5, #0]
 8003974:	b903      	cbnz	r3, 8003978 <__sflush_r+0x7c>
 8003976:	6560      	str	r0, [r4, #84]	; 0x54
 8003978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800397a:	602f      	str	r7, [r5, #0]
 800397c:	2900      	cmp	r1, #0
 800397e:	d0ca      	beq.n	8003916 <__sflush_r+0x1a>
 8003980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003984:	4299      	cmp	r1, r3
 8003986:	d002      	beq.n	800398e <__sflush_r+0x92>
 8003988:	4628      	mov	r0, r5
 800398a:	f7ff f9eb 	bl	8002d64 <_free_r>
 800398e:	2000      	movs	r0, #0
 8003990:	6360      	str	r0, [r4, #52]	; 0x34
 8003992:	e7c1      	b.n	8003918 <__sflush_r+0x1c>
 8003994:	6a21      	ldr	r1, [r4, #32]
 8003996:	2301      	movs	r3, #1
 8003998:	4628      	mov	r0, r5
 800399a:	47b0      	blx	r6
 800399c:	1c41      	adds	r1, r0, #1
 800399e:	d1c7      	bne.n	8003930 <__sflush_r+0x34>
 80039a0:	682b      	ldr	r3, [r5, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0c4      	beq.n	8003930 <__sflush_r+0x34>
 80039a6:	2b1d      	cmp	r3, #29
 80039a8:	d001      	beq.n	80039ae <__sflush_r+0xb2>
 80039aa:	2b16      	cmp	r3, #22
 80039ac:	d101      	bne.n	80039b2 <__sflush_r+0xb6>
 80039ae:	602f      	str	r7, [r5, #0]
 80039b0:	e7b1      	b.n	8003916 <__sflush_r+0x1a>
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b8:	81a3      	strh	r3, [r4, #12]
 80039ba:	e7ad      	b.n	8003918 <__sflush_r+0x1c>
 80039bc:	690f      	ldr	r7, [r1, #16]
 80039be:	2f00      	cmp	r7, #0
 80039c0:	d0a9      	beq.n	8003916 <__sflush_r+0x1a>
 80039c2:	0793      	lsls	r3, r2, #30
 80039c4:	680e      	ldr	r6, [r1, #0]
 80039c6:	bf08      	it	eq
 80039c8:	694b      	ldreq	r3, [r1, #20]
 80039ca:	600f      	str	r7, [r1, #0]
 80039cc:	bf18      	it	ne
 80039ce:	2300      	movne	r3, #0
 80039d0:	eba6 0807 	sub.w	r8, r6, r7
 80039d4:	608b      	str	r3, [r1, #8]
 80039d6:	f1b8 0f00 	cmp.w	r8, #0
 80039da:	dd9c      	ble.n	8003916 <__sflush_r+0x1a>
 80039dc:	6a21      	ldr	r1, [r4, #32]
 80039de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039e0:	4643      	mov	r3, r8
 80039e2:	463a      	mov	r2, r7
 80039e4:	4628      	mov	r0, r5
 80039e6:	47b0      	blx	r6
 80039e8:	2800      	cmp	r0, #0
 80039ea:	dc06      	bgt.n	80039fa <__sflush_r+0xfe>
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f2:	81a3      	strh	r3, [r4, #12]
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295
 80039f8:	e78e      	b.n	8003918 <__sflush_r+0x1c>
 80039fa:	4407      	add	r7, r0
 80039fc:	eba8 0800 	sub.w	r8, r8, r0
 8003a00:	e7e9      	b.n	80039d6 <__sflush_r+0xda>
 8003a02:	bf00      	nop
 8003a04:	20400001 	.word	0x20400001

08003a08 <_fflush_r>:
 8003a08:	b538      	push	{r3, r4, r5, lr}
 8003a0a:	690b      	ldr	r3, [r1, #16]
 8003a0c:	4605      	mov	r5, r0
 8003a0e:	460c      	mov	r4, r1
 8003a10:	b913      	cbnz	r3, 8003a18 <_fflush_r+0x10>
 8003a12:	2500      	movs	r5, #0
 8003a14:	4628      	mov	r0, r5
 8003a16:	bd38      	pop	{r3, r4, r5, pc}
 8003a18:	b118      	cbz	r0, 8003a22 <_fflush_r+0x1a>
 8003a1a:	6983      	ldr	r3, [r0, #24]
 8003a1c:	b90b      	cbnz	r3, 8003a22 <_fflush_r+0x1a>
 8003a1e:	f000 f887 	bl	8003b30 <__sinit>
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <_fflush_r+0x6c>)
 8003a24:	429c      	cmp	r4, r3
 8003a26:	d11b      	bne.n	8003a60 <_fflush_r+0x58>
 8003a28:	686c      	ldr	r4, [r5, #4]
 8003a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0ef      	beq.n	8003a12 <_fflush_r+0xa>
 8003a32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a34:	07d0      	lsls	r0, r2, #31
 8003a36:	d404      	bmi.n	8003a42 <_fflush_r+0x3a>
 8003a38:	0599      	lsls	r1, r3, #22
 8003a3a:	d402      	bmi.n	8003a42 <_fflush_r+0x3a>
 8003a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a3e:	f000 f915 	bl	8003c6c <__retarget_lock_acquire_recursive>
 8003a42:	4628      	mov	r0, r5
 8003a44:	4621      	mov	r1, r4
 8003a46:	f7ff ff59 	bl	80038fc <__sflush_r>
 8003a4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a4c:	07da      	lsls	r2, r3, #31
 8003a4e:	4605      	mov	r5, r0
 8003a50:	d4e0      	bmi.n	8003a14 <_fflush_r+0xc>
 8003a52:	89a3      	ldrh	r3, [r4, #12]
 8003a54:	059b      	lsls	r3, r3, #22
 8003a56:	d4dd      	bmi.n	8003a14 <_fflush_r+0xc>
 8003a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a5a:	f000 f908 	bl	8003c6e <__retarget_lock_release_recursive>
 8003a5e:	e7d9      	b.n	8003a14 <_fflush_r+0xc>
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <_fflush_r+0x70>)
 8003a62:	429c      	cmp	r4, r3
 8003a64:	d101      	bne.n	8003a6a <_fflush_r+0x62>
 8003a66:	68ac      	ldr	r4, [r5, #8]
 8003a68:	e7df      	b.n	8003a2a <_fflush_r+0x22>
 8003a6a:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <_fflush_r+0x74>)
 8003a6c:	429c      	cmp	r4, r3
 8003a6e:	bf08      	it	eq
 8003a70:	68ec      	ldreq	r4, [r5, #12]
 8003a72:	e7da      	b.n	8003a2a <_fflush_r+0x22>
 8003a74:	08004574 	.word	0x08004574
 8003a78:	08004594 	.word	0x08004594
 8003a7c:	08004554 	.word	0x08004554

08003a80 <std>:
 8003a80:	2300      	movs	r3, #0
 8003a82:	b510      	push	{r4, lr}
 8003a84:	4604      	mov	r4, r0
 8003a86:	e9c0 3300 	strd	r3, r3, [r0]
 8003a8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a8e:	6083      	str	r3, [r0, #8]
 8003a90:	8181      	strh	r1, [r0, #12]
 8003a92:	6643      	str	r3, [r0, #100]	; 0x64
 8003a94:	81c2      	strh	r2, [r0, #14]
 8003a96:	6183      	str	r3, [r0, #24]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	2208      	movs	r2, #8
 8003a9c:	305c      	adds	r0, #92	; 0x5c
 8003a9e:	f7ff f8c1 	bl	8002c24 <memset>
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <std+0x38>)
 8003aa4:	6263      	str	r3, [r4, #36]	; 0x24
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <std+0x3c>)
 8003aa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <std+0x40>)
 8003aac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <std+0x44>)
 8003ab0:	6224      	str	r4, [r4, #32]
 8003ab2:	6323      	str	r3, [r4, #48]	; 0x30
 8003ab4:	bd10      	pop	{r4, pc}
 8003ab6:	bf00      	nop
 8003ab8:	08003e75 	.word	0x08003e75
 8003abc:	08003e97 	.word	0x08003e97
 8003ac0:	08003ecf 	.word	0x08003ecf
 8003ac4:	08003ef3 	.word	0x08003ef3

08003ac8 <_cleanup_r>:
 8003ac8:	4901      	ldr	r1, [pc, #4]	; (8003ad0 <_cleanup_r+0x8>)
 8003aca:	f000 b8af 	b.w	8003c2c <_fwalk_reent>
 8003ace:	bf00      	nop
 8003ad0:	08003a09 	.word	0x08003a09

08003ad4 <__sfmoreglue>:
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	1e4a      	subs	r2, r1, #1
 8003ad8:	2568      	movs	r5, #104	; 0x68
 8003ada:	4355      	muls	r5, r2
 8003adc:	460e      	mov	r6, r1
 8003ade:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ae2:	f7ff f98f 	bl	8002e04 <_malloc_r>
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	b140      	cbz	r0, 8003afc <__sfmoreglue+0x28>
 8003aea:	2100      	movs	r1, #0
 8003aec:	e9c0 1600 	strd	r1, r6, [r0]
 8003af0:	300c      	adds	r0, #12
 8003af2:	60a0      	str	r0, [r4, #8]
 8003af4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003af8:	f7ff f894 	bl	8002c24 <memset>
 8003afc:	4620      	mov	r0, r4
 8003afe:	bd70      	pop	{r4, r5, r6, pc}

08003b00 <__sfp_lock_acquire>:
 8003b00:	4801      	ldr	r0, [pc, #4]	; (8003b08 <__sfp_lock_acquire+0x8>)
 8003b02:	f000 b8b3 	b.w	8003c6c <__retarget_lock_acquire_recursive>
 8003b06:	bf00      	nop
 8003b08:	200005dc 	.word	0x200005dc

08003b0c <__sfp_lock_release>:
 8003b0c:	4801      	ldr	r0, [pc, #4]	; (8003b14 <__sfp_lock_release+0x8>)
 8003b0e:	f000 b8ae 	b.w	8003c6e <__retarget_lock_release_recursive>
 8003b12:	bf00      	nop
 8003b14:	200005dc 	.word	0x200005dc

08003b18 <__sinit_lock_acquire>:
 8003b18:	4801      	ldr	r0, [pc, #4]	; (8003b20 <__sinit_lock_acquire+0x8>)
 8003b1a:	f000 b8a7 	b.w	8003c6c <__retarget_lock_acquire_recursive>
 8003b1e:	bf00      	nop
 8003b20:	200005d7 	.word	0x200005d7

08003b24 <__sinit_lock_release>:
 8003b24:	4801      	ldr	r0, [pc, #4]	; (8003b2c <__sinit_lock_release+0x8>)
 8003b26:	f000 b8a2 	b.w	8003c6e <__retarget_lock_release_recursive>
 8003b2a:	bf00      	nop
 8003b2c:	200005d7 	.word	0x200005d7

08003b30 <__sinit>:
 8003b30:	b510      	push	{r4, lr}
 8003b32:	4604      	mov	r4, r0
 8003b34:	f7ff fff0 	bl	8003b18 <__sinit_lock_acquire>
 8003b38:	69a3      	ldr	r3, [r4, #24]
 8003b3a:	b11b      	cbz	r3, 8003b44 <__sinit+0x14>
 8003b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b40:	f7ff bff0 	b.w	8003b24 <__sinit_lock_release>
 8003b44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003b48:	6523      	str	r3, [r4, #80]	; 0x50
 8003b4a:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <__sinit+0x68>)
 8003b4c:	4a13      	ldr	r2, [pc, #76]	; (8003b9c <__sinit+0x6c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	62a2      	str	r2, [r4, #40]	; 0x28
 8003b52:	42a3      	cmp	r3, r4
 8003b54:	bf04      	itt	eq
 8003b56:	2301      	moveq	r3, #1
 8003b58:	61a3      	streq	r3, [r4, #24]
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f000 f820 	bl	8003ba0 <__sfp>
 8003b60:	6060      	str	r0, [r4, #4]
 8003b62:	4620      	mov	r0, r4
 8003b64:	f000 f81c 	bl	8003ba0 <__sfp>
 8003b68:	60a0      	str	r0, [r4, #8]
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f000 f818 	bl	8003ba0 <__sfp>
 8003b70:	2200      	movs	r2, #0
 8003b72:	60e0      	str	r0, [r4, #12]
 8003b74:	2104      	movs	r1, #4
 8003b76:	6860      	ldr	r0, [r4, #4]
 8003b78:	f7ff ff82 	bl	8003a80 <std>
 8003b7c:	68a0      	ldr	r0, [r4, #8]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	2109      	movs	r1, #9
 8003b82:	f7ff ff7d 	bl	8003a80 <std>
 8003b86:	68e0      	ldr	r0, [r4, #12]
 8003b88:	2202      	movs	r2, #2
 8003b8a:	2112      	movs	r1, #18
 8003b8c:	f7ff ff78 	bl	8003a80 <std>
 8003b90:	2301      	movs	r3, #1
 8003b92:	61a3      	str	r3, [r4, #24]
 8003b94:	e7d2      	b.n	8003b3c <__sinit+0xc>
 8003b96:	bf00      	nop
 8003b98:	08004468 	.word	0x08004468
 8003b9c:	08003ac9 	.word	0x08003ac9

08003ba0 <__sfp>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	4607      	mov	r7, r0
 8003ba4:	f7ff ffac 	bl	8003b00 <__sfp_lock_acquire>
 8003ba8:	4b1e      	ldr	r3, [pc, #120]	; (8003c24 <__sfp+0x84>)
 8003baa:	681e      	ldr	r6, [r3, #0]
 8003bac:	69b3      	ldr	r3, [r6, #24]
 8003bae:	b913      	cbnz	r3, 8003bb6 <__sfp+0x16>
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f7ff ffbd 	bl	8003b30 <__sinit>
 8003bb6:	3648      	adds	r6, #72	; 0x48
 8003bb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	d503      	bpl.n	8003bc8 <__sfp+0x28>
 8003bc0:	6833      	ldr	r3, [r6, #0]
 8003bc2:	b30b      	cbz	r3, 8003c08 <__sfp+0x68>
 8003bc4:	6836      	ldr	r6, [r6, #0]
 8003bc6:	e7f7      	b.n	8003bb8 <__sfp+0x18>
 8003bc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003bcc:	b9d5      	cbnz	r5, 8003c04 <__sfp+0x64>
 8003bce:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <__sfp+0x88>)
 8003bd0:	60e3      	str	r3, [r4, #12]
 8003bd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003bd6:	6665      	str	r5, [r4, #100]	; 0x64
 8003bd8:	f000 f847 	bl	8003c6a <__retarget_lock_init_recursive>
 8003bdc:	f7ff ff96 	bl	8003b0c <__sfp_lock_release>
 8003be0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003be4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003be8:	6025      	str	r5, [r4, #0]
 8003bea:	61a5      	str	r5, [r4, #24]
 8003bec:	2208      	movs	r2, #8
 8003bee:	4629      	mov	r1, r5
 8003bf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003bf4:	f7ff f816 	bl	8002c24 <memset>
 8003bf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003bfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c00:	4620      	mov	r0, r4
 8003c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c04:	3468      	adds	r4, #104	; 0x68
 8003c06:	e7d9      	b.n	8003bbc <__sfp+0x1c>
 8003c08:	2104      	movs	r1, #4
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	f7ff ff62 	bl	8003ad4 <__sfmoreglue>
 8003c10:	4604      	mov	r4, r0
 8003c12:	6030      	str	r0, [r6, #0]
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d1d5      	bne.n	8003bc4 <__sfp+0x24>
 8003c18:	f7ff ff78 	bl	8003b0c <__sfp_lock_release>
 8003c1c:	230c      	movs	r3, #12
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	e7ee      	b.n	8003c00 <__sfp+0x60>
 8003c22:	bf00      	nop
 8003c24:	08004468 	.word	0x08004468
 8003c28:	ffff0001 	.word	0xffff0001

08003c2c <_fwalk_reent>:
 8003c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c30:	4606      	mov	r6, r0
 8003c32:	4688      	mov	r8, r1
 8003c34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c38:	2700      	movs	r7, #0
 8003c3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c3e:	f1b9 0901 	subs.w	r9, r9, #1
 8003c42:	d505      	bpl.n	8003c50 <_fwalk_reent+0x24>
 8003c44:	6824      	ldr	r4, [r4, #0]
 8003c46:	2c00      	cmp	r4, #0
 8003c48:	d1f7      	bne.n	8003c3a <_fwalk_reent+0xe>
 8003c4a:	4638      	mov	r0, r7
 8003c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c50:	89ab      	ldrh	r3, [r5, #12]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d907      	bls.n	8003c66 <_fwalk_reent+0x3a>
 8003c56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	d003      	beq.n	8003c66 <_fwalk_reent+0x3a>
 8003c5e:	4629      	mov	r1, r5
 8003c60:	4630      	mov	r0, r6
 8003c62:	47c0      	blx	r8
 8003c64:	4307      	orrs	r7, r0
 8003c66:	3568      	adds	r5, #104	; 0x68
 8003c68:	e7e9      	b.n	8003c3e <_fwalk_reent+0x12>

08003c6a <__retarget_lock_init_recursive>:
 8003c6a:	4770      	bx	lr

08003c6c <__retarget_lock_acquire_recursive>:
 8003c6c:	4770      	bx	lr

08003c6e <__retarget_lock_release_recursive>:
 8003c6e:	4770      	bx	lr

08003c70 <__swhatbuf_r>:
 8003c70:	b570      	push	{r4, r5, r6, lr}
 8003c72:	460e      	mov	r6, r1
 8003c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c78:	2900      	cmp	r1, #0
 8003c7a:	b096      	sub	sp, #88	; 0x58
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	461d      	mov	r5, r3
 8003c80:	da07      	bge.n	8003c92 <__swhatbuf_r+0x22>
 8003c82:	2300      	movs	r3, #0
 8003c84:	602b      	str	r3, [r5, #0]
 8003c86:	89b3      	ldrh	r3, [r6, #12]
 8003c88:	061a      	lsls	r2, r3, #24
 8003c8a:	d410      	bmi.n	8003cae <__swhatbuf_r+0x3e>
 8003c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c90:	e00e      	b.n	8003cb0 <__swhatbuf_r+0x40>
 8003c92:	466a      	mov	r2, sp
 8003c94:	f000 f954 	bl	8003f40 <_fstat_r>
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	dbf2      	blt.n	8003c82 <__swhatbuf_r+0x12>
 8003c9c:	9a01      	ldr	r2, [sp, #4]
 8003c9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003ca2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ca6:	425a      	negs	r2, r3
 8003ca8:	415a      	adcs	r2, r3
 8003caa:	602a      	str	r2, [r5, #0]
 8003cac:	e7ee      	b.n	8003c8c <__swhatbuf_r+0x1c>
 8003cae:	2340      	movs	r3, #64	; 0x40
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	6023      	str	r3, [r4, #0]
 8003cb4:	b016      	add	sp, #88	; 0x58
 8003cb6:	bd70      	pop	{r4, r5, r6, pc}

08003cb8 <__smakebuf_r>:
 8003cb8:	898b      	ldrh	r3, [r1, #12]
 8003cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cbc:	079d      	lsls	r5, r3, #30
 8003cbe:	4606      	mov	r6, r0
 8003cc0:	460c      	mov	r4, r1
 8003cc2:	d507      	bpl.n	8003cd4 <__smakebuf_r+0x1c>
 8003cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003cc8:	6023      	str	r3, [r4, #0]
 8003cca:	6123      	str	r3, [r4, #16]
 8003ccc:	2301      	movs	r3, #1
 8003cce:	6163      	str	r3, [r4, #20]
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	ab01      	add	r3, sp, #4
 8003cd6:	466a      	mov	r2, sp
 8003cd8:	f7ff ffca 	bl	8003c70 <__swhatbuf_r>
 8003cdc:	9900      	ldr	r1, [sp, #0]
 8003cde:	4605      	mov	r5, r0
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	f7ff f88f 	bl	8002e04 <_malloc_r>
 8003ce6:	b948      	cbnz	r0, 8003cfc <__smakebuf_r+0x44>
 8003ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cec:	059a      	lsls	r2, r3, #22
 8003cee:	d4ef      	bmi.n	8003cd0 <__smakebuf_r+0x18>
 8003cf0:	f023 0303 	bic.w	r3, r3, #3
 8003cf4:	f043 0302 	orr.w	r3, r3, #2
 8003cf8:	81a3      	strh	r3, [r4, #12]
 8003cfa:	e7e3      	b.n	8003cc4 <__smakebuf_r+0xc>
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <__smakebuf_r+0x7c>)
 8003cfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d00:	89a3      	ldrh	r3, [r4, #12]
 8003d02:	6020      	str	r0, [r4, #0]
 8003d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d08:	81a3      	strh	r3, [r4, #12]
 8003d0a:	9b00      	ldr	r3, [sp, #0]
 8003d0c:	6163      	str	r3, [r4, #20]
 8003d0e:	9b01      	ldr	r3, [sp, #4]
 8003d10:	6120      	str	r0, [r4, #16]
 8003d12:	b15b      	cbz	r3, 8003d2c <__smakebuf_r+0x74>
 8003d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d18:	4630      	mov	r0, r6
 8003d1a:	f000 f923 	bl	8003f64 <_isatty_r>
 8003d1e:	b128      	cbz	r0, 8003d2c <__smakebuf_r+0x74>
 8003d20:	89a3      	ldrh	r3, [r4, #12]
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	81a3      	strh	r3, [r4, #12]
 8003d2c:	89a0      	ldrh	r0, [r4, #12]
 8003d2e:	4305      	orrs	r5, r0
 8003d30:	81a5      	strh	r5, [r4, #12]
 8003d32:	e7cd      	b.n	8003cd0 <__smakebuf_r+0x18>
 8003d34:	08003ac9 	.word	0x08003ac9

08003d38 <memcpy>:
 8003d38:	440a      	add	r2, r1
 8003d3a:	4291      	cmp	r1, r2
 8003d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d40:	d100      	bne.n	8003d44 <memcpy+0xc>
 8003d42:	4770      	bx	lr
 8003d44:	b510      	push	{r4, lr}
 8003d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d4e:	4291      	cmp	r1, r2
 8003d50:	d1f9      	bne.n	8003d46 <memcpy+0xe>
 8003d52:	bd10      	pop	{r4, pc}

08003d54 <memmove>:
 8003d54:	4288      	cmp	r0, r1
 8003d56:	b510      	push	{r4, lr}
 8003d58:	eb01 0402 	add.w	r4, r1, r2
 8003d5c:	d902      	bls.n	8003d64 <memmove+0x10>
 8003d5e:	4284      	cmp	r4, r0
 8003d60:	4623      	mov	r3, r4
 8003d62:	d807      	bhi.n	8003d74 <memmove+0x20>
 8003d64:	1e43      	subs	r3, r0, #1
 8003d66:	42a1      	cmp	r1, r4
 8003d68:	d008      	beq.n	8003d7c <memmove+0x28>
 8003d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d72:	e7f8      	b.n	8003d66 <memmove+0x12>
 8003d74:	4402      	add	r2, r0
 8003d76:	4601      	mov	r1, r0
 8003d78:	428a      	cmp	r2, r1
 8003d7a:	d100      	bne.n	8003d7e <memmove+0x2a>
 8003d7c:	bd10      	pop	{r4, pc}
 8003d7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d86:	e7f7      	b.n	8003d78 <memmove+0x24>

08003d88 <__malloc_lock>:
 8003d88:	4801      	ldr	r0, [pc, #4]	; (8003d90 <__malloc_lock+0x8>)
 8003d8a:	f7ff bf6f 	b.w	8003c6c <__retarget_lock_acquire_recursive>
 8003d8e:	bf00      	nop
 8003d90:	200005d8 	.word	0x200005d8

08003d94 <__malloc_unlock>:
 8003d94:	4801      	ldr	r0, [pc, #4]	; (8003d9c <__malloc_unlock+0x8>)
 8003d96:	f7ff bf6a 	b.w	8003c6e <__retarget_lock_release_recursive>
 8003d9a:	bf00      	nop
 8003d9c:	200005d8 	.word	0x200005d8

08003da0 <_realloc_r>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	4607      	mov	r7, r0
 8003da4:	4614      	mov	r4, r2
 8003da6:	460e      	mov	r6, r1
 8003da8:	b921      	cbnz	r1, 8003db4 <_realloc_r+0x14>
 8003daa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003dae:	4611      	mov	r1, r2
 8003db0:	f7ff b828 	b.w	8002e04 <_malloc_r>
 8003db4:	b922      	cbnz	r2, 8003dc0 <_realloc_r+0x20>
 8003db6:	f7fe ffd5 	bl	8002d64 <_free_r>
 8003dba:	4625      	mov	r5, r4
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dc0:	f000 f8f2 	bl	8003fa8 <_malloc_usable_size_r>
 8003dc4:	42a0      	cmp	r0, r4
 8003dc6:	d20f      	bcs.n	8003de8 <_realloc_r+0x48>
 8003dc8:	4621      	mov	r1, r4
 8003dca:	4638      	mov	r0, r7
 8003dcc:	f7ff f81a 	bl	8002e04 <_malloc_r>
 8003dd0:	4605      	mov	r5, r0
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	d0f2      	beq.n	8003dbc <_realloc_r+0x1c>
 8003dd6:	4631      	mov	r1, r6
 8003dd8:	4622      	mov	r2, r4
 8003dda:	f7ff ffad 	bl	8003d38 <memcpy>
 8003dde:	4631      	mov	r1, r6
 8003de0:	4638      	mov	r0, r7
 8003de2:	f7fe ffbf 	bl	8002d64 <_free_r>
 8003de6:	e7e9      	b.n	8003dbc <_realloc_r+0x1c>
 8003de8:	4635      	mov	r5, r6
 8003dea:	e7e7      	b.n	8003dbc <_realloc_r+0x1c>

08003dec <_raise_r>:
 8003dec:	291f      	cmp	r1, #31
 8003dee:	b538      	push	{r3, r4, r5, lr}
 8003df0:	4604      	mov	r4, r0
 8003df2:	460d      	mov	r5, r1
 8003df4:	d904      	bls.n	8003e00 <_raise_r+0x14>
 8003df6:	2316      	movs	r3, #22
 8003df8:	6003      	str	r3, [r0, #0]
 8003dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfe:	bd38      	pop	{r3, r4, r5, pc}
 8003e00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003e02:	b112      	cbz	r2, 8003e0a <_raise_r+0x1e>
 8003e04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003e08:	b94b      	cbnz	r3, 8003e1e <_raise_r+0x32>
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	f000 f830 	bl	8003e70 <_getpid_r>
 8003e10:	462a      	mov	r2, r5
 8003e12:	4601      	mov	r1, r0
 8003e14:	4620      	mov	r0, r4
 8003e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e1a:	f000 b817 	b.w	8003e4c <_kill_r>
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d00a      	beq.n	8003e38 <_raise_r+0x4c>
 8003e22:	1c59      	adds	r1, r3, #1
 8003e24:	d103      	bne.n	8003e2e <_raise_r+0x42>
 8003e26:	2316      	movs	r3, #22
 8003e28:	6003      	str	r3, [r0, #0]
 8003e2a:	2001      	movs	r0, #1
 8003e2c:	e7e7      	b.n	8003dfe <_raise_r+0x12>
 8003e2e:	2400      	movs	r4, #0
 8003e30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003e34:	4628      	mov	r0, r5
 8003e36:	4798      	blx	r3
 8003e38:	2000      	movs	r0, #0
 8003e3a:	e7e0      	b.n	8003dfe <_raise_r+0x12>

08003e3c <raise>:
 8003e3c:	4b02      	ldr	r3, [pc, #8]	; (8003e48 <raise+0xc>)
 8003e3e:	4601      	mov	r1, r0
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	f7ff bfd3 	b.w	8003dec <_raise_r>
 8003e46:	bf00      	nop
 8003e48:	20000004 	.word	0x20000004

08003e4c <_kill_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	4d07      	ldr	r5, [pc, #28]	; (8003e6c <_kill_r+0x20>)
 8003e50:	2300      	movs	r3, #0
 8003e52:	4604      	mov	r4, r0
 8003e54:	4608      	mov	r0, r1
 8003e56:	4611      	mov	r1, r2
 8003e58:	602b      	str	r3, [r5, #0]
 8003e5a:	f7fe f85b 	bl	8001f14 <_kill>
 8003e5e:	1c43      	adds	r3, r0, #1
 8003e60:	d102      	bne.n	8003e68 <_kill_r+0x1c>
 8003e62:	682b      	ldr	r3, [r5, #0]
 8003e64:	b103      	cbz	r3, 8003e68 <_kill_r+0x1c>
 8003e66:	6023      	str	r3, [r4, #0]
 8003e68:	bd38      	pop	{r3, r4, r5, pc}
 8003e6a:	bf00      	nop
 8003e6c:	200005e0 	.word	0x200005e0

08003e70 <_getpid_r>:
 8003e70:	f7fe b848 	b.w	8001f04 <_getpid>

08003e74 <__sread>:
 8003e74:	b510      	push	{r4, lr}
 8003e76:	460c      	mov	r4, r1
 8003e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e7c:	f000 f89c 	bl	8003fb8 <_read_r>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	bfab      	itete	ge
 8003e84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e86:	89a3      	ldrhlt	r3, [r4, #12]
 8003e88:	181b      	addge	r3, r3, r0
 8003e8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e8e:	bfac      	ite	ge
 8003e90:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e92:	81a3      	strhlt	r3, [r4, #12]
 8003e94:	bd10      	pop	{r4, pc}

08003e96 <__swrite>:
 8003e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e9a:	461f      	mov	r7, r3
 8003e9c:	898b      	ldrh	r3, [r1, #12]
 8003e9e:	05db      	lsls	r3, r3, #23
 8003ea0:	4605      	mov	r5, r0
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	4616      	mov	r6, r2
 8003ea6:	d505      	bpl.n	8003eb4 <__swrite+0x1e>
 8003ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eac:	2302      	movs	r3, #2
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f000 f868 	bl	8003f84 <_lseek_r>
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ebe:	81a3      	strh	r3, [r4, #12]
 8003ec0:	4632      	mov	r2, r6
 8003ec2:	463b      	mov	r3, r7
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eca:	f000 b817 	b.w	8003efc <_write_r>

08003ece <__sseek>:
 8003ece:	b510      	push	{r4, lr}
 8003ed0:	460c      	mov	r4, r1
 8003ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed6:	f000 f855 	bl	8003f84 <_lseek_r>
 8003eda:	1c43      	adds	r3, r0, #1
 8003edc:	89a3      	ldrh	r3, [r4, #12]
 8003ede:	bf15      	itete	ne
 8003ee0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ee2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ee6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003eea:	81a3      	strheq	r3, [r4, #12]
 8003eec:	bf18      	it	ne
 8003eee:	81a3      	strhne	r3, [r4, #12]
 8003ef0:	bd10      	pop	{r4, pc}

08003ef2 <__sclose>:
 8003ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef6:	f000 b813 	b.w	8003f20 <_close_r>
	...

08003efc <_write_r>:
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4d07      	ldr	r5, [pc, #28]	; (8003f1c <_write_r+0x20>)
 8003f00:	4604      	mov	r4, r0
 8003f02:	4608      	mov	r0, r1
 8003f04:	4611      	mov	r1, r2
 8003f06:	2200      	movs	r2, #0
 8003f08:	602a      	str	r2, [r5, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f7fe f839 	bl	8001f82 <_write>
 8003f10:	1c43      	adds	r3, r0, #1
 8003f12:	d102      	bne.n	8003f1a <_write_r+0x1e>
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	b103      	cbz	r3, 8003f1a <_write_r+0x1e>
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	bd38      	pop	{r3, r4, r5, pc}
 8003f1c:	200005e0 	.word	0x200005e0

08003f20 <_close_r>:
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	4d06      	ldr	r5, [pc, #24]	; (8003f3c <_close_r+0x1c>)
 8003f24:	2300      	movs	r3, #0
 8003f26:	4604      	mov	r4, r0
 8003f28:	4608      	mov	r0, r1
 8003f2a:	602b      	str	r3, [r5, #0]
 8003f2c:	f7fe f845 	bl	8001fba <_close>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	d102      	bne.n	8003f3a <_close_r+0x1a>
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	b103      	cbz	r3, 8003f3a <_close_r+0x1a>
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}
 8003f3c:	200005e0 	.word	0x200005e0

08003f40 <_fstat_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4d07      	ldr	r5, [pc, #28]	; (8003f60 <_fstat_r+0x20>)
 8003f44:	2300      	movs	r3, #0
 8003f46:	4604      	mov	r4, r0
 8003f48:	4608      	mov	r0, r1
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	602b      	str	r3, [r5, #0]
 8003f4e:	f7fe f840 	bl	8001fd2 <_fstat>
 8003f52:	1c43      	adds	r3, r0, #1
 8003f54:	d102      	bne.n	8003f5c <_fstat_r+0x1c>
 8003f56:	682b      	ldr	r3, [r5, #0]
 8003f58:	b103      	cbz	r3, 8003f5c <_fstat_r+0x1c>
 8003f5a:	6023      	str	r3, [r4, #0]
 8003f5c:	bd38      	pop	{r3, r4, r5, pc}
 8003f5e:	bf00      	nop
 8003f60:	200005e0 	.word	0x200005e0

08003f64 <_isatty_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4d06      	ldr	r5, [pc, #24]	; (8003f80 <_isatty_r+0x1c>)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	602b      	str	r3, [r5, #0]
 8003f70:	f7fe f83f 	bl	8001ff2 <_isatty>
 8003f74:	1c43      	adds	r3, r0, #1
 8003f76:	d102      	bne.n	8003f7e <_isatty_r+0x1a>
 8003f78:	682b      	ldr	r3, [r5, #0]
 8003f7a:	b103      	cbz	r3, 8003f7e <_isatty_r+0x1a>
 8003f7c:	6023      	str	r3, [r4, #0]
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
 8003f80:	200005e0 	.word	0x200005e0

08003f84 <_lseek_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4d07      	ldr	r5, [pc, #28]	; (8003fa4 <_lseek_r+0x20>)
 8003f88:	4604      	mov	r4, r0
 8003f8a:	4608      	mov	r0, r1
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	2200      	movs	r2, #0
 8003f90:	602a      	str	r2, [r5, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	f7fe f838 	bl	8002008 <_lseek>
 8003f98:	1c43      	adds	r3, r0, #1
 8003f9a:	d102      	bne.n	8003fa2 <_lseek_r+0x1e>
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	b103      	cbz	r3, 8003fa2 <_lseek_r+0x1e>
 8003fa0:	6023      	str	r3, [r4, #0]
 8003fa2:	bd38      	pop	{r3, r4, r5, pc}
 8003fa4:	200005e0 	.word	0x200005e0

08003fa8 <_malloc_usable_size_r>:
 8003fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fac:	1f18      	subs	r0, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bfbc      	itt	lt
 8003fb2:	580b      	ldrlt	r3, [r1, r0]
 8003fb4:	18c0      	addlt	r0, r0, r3
 8003fb6:	4770      	bx	lr

08003fb8 <_read_r>:
 8003fb8:	b538      	push	{r3, r4, r5, lr}
 8003fba:	4d07      	ldr	r5, [pc, #28]	; (8003fd8 <_read_r+0x20>)
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	4608      	mov	r0, r1
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	602a      	str	r2, [r5, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f7fd ffbe 	bl	8001f48 <_read>
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	d102      	bne.n	8003fd6 <_read_r+0x1e>
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	b103      	cbz	r3, 8003fd6 <_read_r+0x1e>
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	bd38      	pop	{r3, r4, r5, pc}
 8003fd8:	200005e0 	.word	0x200005e0

08003fdc <_init>:
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fde:	bf00      	nop
 8003fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe2:	bc08      	pop	{r3}
 8003fe4:	469e      	mov	lr, r3
 8003fe6:	4770      	bx	lr

08003fe8 <_fini>:
 8003fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fea:	bf00      	nop
 8003fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fee:	bc08      	pop	{r3}
 8003ff0:	469e      	mov	lr, r3
 8003ff2:	4770      	bx	lr
