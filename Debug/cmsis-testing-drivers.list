
cmsis-testing-drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001824  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080019b8  080019b8  000119b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bc0  08001bc0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001bc0  08001bc0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bc0  08001bc0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bc0  08001bc0  00011bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bc4  08001bc4  00011bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001bc8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000004  08001bcc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08001bcc  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059ba  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fd1  00000000  00000000  000259ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000298  00000000  00000000  000269c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000210  00000000  00000000  00026c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000311a  00000000  00000000  00026e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00050ed3  00000000  00000000  00029f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0007ae55  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000087c  00000000  00000000  0007aea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000e295  00000000  00000000  0007b724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080019a0 	.word	0x080019a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080019a0 	.word	0x080019a0

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	font = font_t;
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <GFX_SetFont+0x1c>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	6013      	str	r3, [r2, #0]
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	20000420 	.word	0x20000420

08000204 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000204:	b590      	push	{r4, r7, lr}
 8000206:	b089      	sub	sp, #36	; 0x24
 8000208:	af02      	add	r7, sp, #8
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	4611      	mov	r1, r2
 8000210:	461a      	mov	r2, r3
 8000212:	460b      	mov	r3, r1
 8000214:	71fb      	strb	r3, [r7, #7]
 8000216:	4613      	mov	r3, r2
 8000218:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	2b7e      	cmp	r3, #126	; 0x7e
 800021e:	f200 80a3 	bhi.w	8000368 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000222:	2300      	movs	r3, #0
 8000224:	75fb      	strb	r3, [r7, #23]
 8000226:	e096      	b.n	8000356 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8000228:	4b51      	ldr	r3, [pc, #324]	; (8000370 <GFX_DrawChar+0x16c>)
 800022a:	681a      	ldr	r2, [r3, #0]
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	3b20      	subs	r3, #32
 8000230:	494f      	ldr	r1, [pc, #316]	; (8000370 <GFX_DrawChar+0x16c>)
 8000232:	6809      	ldr	r1, [r1, #0]
 8000234:	3101      	adds	r1, #1
 8000236:	7809      	ldrb	r1, [r1, #0]
 8000238:	fb01 f103 	mul.w	r1, r1, r3
 800023c:	7dfb      	ldrb	r3, [r7, #23]
 800023e:	440b      	add	r3, r1
 8000240:	3302      	adds	r3, #2
 8000242:	4413      	add	r3, r2
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000248:	2300      	movs	r3, #0
 800024a:	757b      	strb	r3, [r7, #21]
 800024c:	e078      	b.n	8000340 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 800024e:	7dbb      	ldrb	r3, [r7, #22]
 8000250:	f003 0301 	and.w	r3, r3, #1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d032      	beq.n	80002be <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8000258:	4b46      	ldr	r3, [pc, #280]	; (8000374 <GFX_DrawChar+0x170>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d113      	bne.n	8000288 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8000260:	7dfb      	ldrb	r3, [r7, #23]
 8000262:	b29a      	uxth	r2, r3
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	b29b      	uxth	r3, r3
 8000268:	4413      	add	r3, r2
 800026a:	b29b      	uxth	r3, r3
 800026c:	b218      	sxth	r0, r3
 800026e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000272:	b29a      	uxth	r2, r3
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	b29b      	uxth	r3, r3
 8000278:	4413      	add	r3, r2
 800027a:	b29b      	uxth	r3, r3
 800027c:	b21b      	sxth	r3, r3
 800027e:	79ba      	ldrb	r2, [r7, #6]
 8000280:	4619      	mov	r1, r3
 8000282:	f000 fa2b 	bl	80006dc <SSD1306_DrawPixel>
 8000286:	e052      	b.n	800032e <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8000288:	7dfb      	ldrb	r3, [r7, #23]
 800028a:	4a3a      	ldr	r2, [pc, #232]	; (8000374 <GFX_DrawChar+0x170>)
 800028c:	7812      	ldrb	r2, [r2, #0]
 800028e:	fb02 f203 	mul.w	r2, r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	18d0      	adds	r0, r2, r3
 8000296:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800029a:	4a36      	ldr	r2, [pc, #216]	; (8000374 <GFX_DrawChar+0x170>)
 800029c:	7812      	ldrb	r2, [r2, #0]
 800029e:	fb02 f203 	mul.w	r2, r2, r3
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	18d1      	adds	r1, r2, r3
 80002a6:	4b33      	ldr	r3, [pc, #204]	; (8000374 <GFX_DrawChar+0x170>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b29a      	uxth	r2, r3
 80002ac:	4b31      	ldr	r3, [pc, #196]	; (8000374 <GFX_DrawChar+0x170>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	b29c      	uxth	r4, r3
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	9300      	str	r3, [sp, #0]
 80002b6:	4623      	mov	r3, r4
 80002b8:	f000 f9a3 	bl	8000602 <GFX_DrawFillRectangle>
 80002bc:	e037      	b.n	800032e <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 80002be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d133      	bne.n	800032e <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 80002c6:	4b2b      	ldr	r3, [pc, #172]	; (8000374 <GFX_DrawChar+0x170>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d114      	bne.n	80002f8 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 80002ce:	7dfb      	ldrb	r3, [r7, #23]
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	4413      	add	r3, r2
 80002d8:	b29b      	uxth	r3, r3
 80002da:	b218      	sxth	r0, r3
 80002dc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80002e0:	b29a      	uxth	r2, r3
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	4413      	add	r3, r2
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	b21b      	sxth	r3, r3
 80002ec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80002f0:	4619      	mov	r1, r3
 80002f2:	f000 f9f3 	bl	80006dc <SSD1306_DrawPixel>
 80002f6:	e01a      	b.n	800032e <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80002f8:	7dfb      	ldrb	r3, [r7, #23]
 80002fa:	4a1e      	ldr	r2, [pc, #120]	; (8000374 <GFX_DrawChar+0x170>)
 80002fc:	7812      	ldrb	r2, [r2, #0]
 80002fe:	fb02 f203 	mul.w	r2, r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	18d0      	adds	r0, r2, r3
 8000306:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800030a:	4a1a      	ldr	r2, [pc, #104]	; (8000374 <GFX_DrawChar+0x170>)
 800030c:	7812      	ldrb	r2, [r2, #0]
 800030e:	fb02 f203 	mul.w	r2, r2, r3
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	18d1      	adds	r1, r2, r3
 8000316:	4b17      	ldr	r3, [pc, #92]	; (8000374 <GFX_DrawChar+0x170>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	b29a      	uxth	r2, r3
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <GFX_DrawChar+0x170>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	b29c      	uxth	r4, r3
 8000322:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	4623      	mov	r3, r4
 800032a:	f000 f96a 	bl	8000602 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800032e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000332:	b2db      	uxtb	r3, r3
 8000334:	3301      	adds	r3, #1
 8000336:	b2db      	uxtb	r3, r3
 8000338:	757b      	strb	r3, [r7, #21]
 800033a:	7dbb      	ldrb	r3, [r7, #22]
 800033c:	085b      	lsrs	r3, r3, #1
 800033e:	75bb      	strb	r3, [r7, #22]
 8000340:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000344:	4a0a      	ldr	r2, [pc, #40]	; (8000370 <GFX_DrawChar+0x16c>)
 8000346:	6812      	ldr	r2, [r2, #0]
 8000348:	7812      	ldrb	r2, [r2, #0]
 800034a:	4293      	cmp	r3, r2
 800034c:	f6ff af7f 	blt.w	800024e <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000350:	7dfb      	ldrb	r3, [r7, #23]
 8000352:	3301      	adds	r3, #1
 8000354:	75fb      	strb	r3, [r7, #23]
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <GFX_DrawChar+0x16c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	3301      	adds	r3, #1
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	7dfa      	ldrb	r2, [r7, #23]
 8000360:	429a      	cmp	r2, r3
 8000362:	f4ff af61 	bcc.w	8000228 <GFX_DrawChar+0x24>
 8000366:	e000      	b.n	800036a <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8000368:	bf00      	nop
            }
        }
    }
}
 800036a:	371c      	adds	r7, #28
 800036c:	46bd      	mov	sp, r7
 800036e:	bd90      	pop	{r4, r7, pc}
 8000370:	20000420 	.word	0x20000420
 8000374:	20000000 	.word	0x20000000

08000378 <GFX_DrawString>:


void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af02      	add	r7, sp, #8
 800037e:	60f8      	str	r0, [r7, #12]
 8000380:	60b9      	str	r1, [r7, #8]
 8000382:	607a      	str	r2, [r7, #4]
 8000384:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8000390:	e03e      	b.n	8000410 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8000392:	78f9      	ldrb	r1, [r7, #3]
 8000394:	7cfa      	ldrb	r2, [r7, #19]
 8000396:	f897 3020 	ldrb.w	r3, [r7, #32]
 800039a:	9300      	str	r3, [sp, #0]
 800039c:	460b      	mov	r3, r1
 800039e:	68b9      	ldr	r1, [r7, #8]
 80003a0:	6978      	ldr	r0, [r7, #20]
 80003a2:	f7ff ff2f 	bl	8000204 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 80003a6:	4b20      	ldr	r3, [pc, #128]	; (8000428 <GFX_DrawString+0xb0>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	3301      	adds	r3, #1
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	461a      	mov	r2, r3
 80003b0:	4b1e      	ldr	r3, [pc, #120]	; (800042c <GFX_DrawString+0xb4>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	fb03 f302 	mul.w	r3, r3, r2
 80003b8:	3301      	adds	r3, #1
 80003ba:	697a      	ldr	r2, [r7, #20]
 80003bc:	4413      	add	r3, r2
 80003be:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 80003c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d120      	bne.n	800040a <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 80003c8:	2300      	movs	r3, #0
 80003ca:	74bb      	strb	r3, [r7, #18]
 80003cc:	e012      	b.n	80003f4 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	3b01      	subs	r3, #1
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	b218      	sxth	r0, r3
 80003d8:	7cbb      	ldrb	r3, [r7, #18]
 80003da:	b29a      	uxth	r2, r3
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	b29b      	uxth	r3, r3
 80003e0:	4413      	add	r3, r2
 80003e2:	b29b      	uxth	r3, r3
 80003e4:	b21b      	sxth	r3, r3
 80003e6:	2200      	movs	r2, #0
 80003e8:	4619      	mov	r1, r3
 80003ea:	f000 f977 	bl	80006dc <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 80003ee:	7cbb      	ldrb	r3, [r7, #18]
 80003f0:	3301      	adds	r3, #1
 80003f2:	74bb      	strb	r3, [r7, #18]
 80003f4:	7cba      	ldrb	r2, [r7, #18]
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <GFX_DrawString+0xb0>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	4619      	mov	r1, r3
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <GFX_DrawString+0xb4>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	fb03 f301 	mul.w	r3, r3, r1
 8000406:	429a      	cmp	r2, r3
 8000408:	dbe1      	blt.n	80003ce <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	1c5a      	adds	r2, r3, #1
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d1ba      	bne.n	8000392 <GFX_DrawString+0x1a>
	}
}
 800041c:	bf00      	nop
 800041e:	bf00      	nop
 8000420:	3718      	adds	r7, #24
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000420 	.word	0x20000420
 800042c:	20000000 	.word	0x20000000

08000430 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08c      	sub	sp, #48	; 0x30
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
 800043c:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800043e:	683a      	ldr	r2, [r7, #0]
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	1ad3      	subs	r3, r2, r3
 8000444:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000448:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800044c:	6879      	ldr	r1, [r7, #4]
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	1acb      	subs	r3, r1, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	bfb8      	it	lt
 8000456:	425b      	neglt	r3, r3
 8000458:	429a      	cmp	r2, r3
 800045a:	bfcc      	ite	gt
 800045c:	2301      	movgt	r3, #1
 800045e:	2300      	movle	r3, #0
 8000460:	b2db      	uxtb	r3, r3
 8000462:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8000464:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000468:	2b00      	cmp	r3, #0
 800046a:	d00b      	beq.n	8000484 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	627b      	str	r3, [r7, #36]	; 0x24
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000476:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	623b      	str	r3, [r7, #32]
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	6a3b      	ldr	r3, [r7, #32]
 8000482:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	429a      	cmp	r2, r3
 800048a:	dd0b      	ble.n	80004a4 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	61fb      	str	r3, [r7, #28]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	69fb      	ldr	r3, [r7, #28]
 8000496:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	61bb      	str	r3, [r7, #24]
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	69bb      	ldr	r3, [r7, #24]
 80004a2:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	b29b      	uxth	r3, r3
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 80004b2:	683a      	ldr	r2, [r7, #0]
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	1ad3      	subs	r3, r2, r3
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	bfb8      	it	lt
 80004bc:	425b      	neglt	r3, r3
 80004be:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80004c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80004c4:	0fda      	lsrs	r2, r3, #31
 80004c6:	4413      	add	r3, r2
 80004c8:	105b      	asrs	r3, r3, #1
 80004ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80004cc:	68ba      	ldr	r2, [r7, #8]
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	da02      	bge.n	80004da <GFX_WriteLine+0xaa>
	        ystep = 1;
 80004d4:	2301      	movs	r3, #1
 80004d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80004d8:	e030      	b.n	800053c <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 80004da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004de:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80004e0:	e02c      	b.n	800053c <GFX_WriteLine+0x10c>
	        if (steep) {
 80004e2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d009      	beq.n	80004fe <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	b21b      	sxth	r3, r3
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	b211      	sxth	r1, r2
 80004f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 f8f0 	bl	80006dc <SSD1306_DrawPixel>
 80004fc:	e008      	b.n	8000510 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	b21b      	sxth	r3, r3
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	b211      	sxth	r1, r2
 8000506:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f8e6 	bl	80006dc <SSD1306_DrawPixel>
	        }
	        err -= dy;
 8000510:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000512:	8abb      	ldrh	r3, [r7, #20]
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	b29b      	uxth	r3, r3
 8000518:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800051a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800051e:	2b00      	cmp	r3, #0
 8000520:	da09      	bge.n	8000536 <GFX_WriteLine+0x106>
	            y_start += ystep;
 8000522:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	4413      	add	r3, r2
 800052a:	60bb      	str	r3, [r7, #8]
	            err += dx;
 800052c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800052e:	8afb      	ldrh	r3, [r7, #22]
 8000530:	4413      	add	r3, r2
 8000532:	b29b      	uxth	r3, r3
 8000534:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	3301      	adds	r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	429a      	cmp	r2, r3
 8000542:	ddce      	ble.n	80004e2 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8000544:	bf00      	nop
 8000546:	bf00      	nop
 8000548:	3730      	adds	r7, #48	; 0x30
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b086      	sub	sp, #24
 8000552:	af02      	add	r7, sp, #8
 8000554:	60f8      	str	r0, [r7, #12]
 8000556:	60b9      	str	r1, [r7, #8]
 8000558:	607a      	str	r2, [r7, #4]
 800055a:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800055c:	68ba      	ldr	r2, [r7, #8]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	78fb      	ldrb	r3, [r7, #3]
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	4613      	mov	r3, r2
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	68b9      	ldr	r1, [r7, #8]
 800056e:	68f8      	ldr	r0, [r7, #12]
 8000570:	f7ff ff5e 	bl	8000430 <GFX_WriteLine>
}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4413      	add	r3, r2
 8000590:	1e5a      	subs	r2, r3, #1
 8000592:	78fb      	ldrb	r3, [r7, #3]
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	68b9      	ldr	r1, [r7, #8]
 800059a:	68f8      	ldr	r0, [r7, #12]
 800059c:	f7ff ff48 	bl	8000430 <GFX_WriteLine>
}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	4611      	mov	r1, r2
 80005b4:	461a      	mov	r2, r3
 80005b6:	460b      	mov	r3, r1
 80005b8:	80fb      	strh	r3, [r7, #6]
 80005ba:	4613      	mov	r3, r2
 80005bc:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 80005be:	88fa      	ldrh	r2, [r7, #6]
 80005c0:	7e3b      	ldrb	r3, [r7, #24]
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	f7ff ffd9 	bl	800057c <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 80005ca:	88ba      	ldrh	r2, [r7, #4]
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	4413      	add	r3, r2
 80005d0:	1e59      	subs	r1, r3, #1
 80005d2:	88fa      	ldrh	r2, [r7, #6]
 80005d4:	7e3b      	ldrb	r3, [r7, #24]
 80005d6:	68f8      	ldr	r0, [r7, #12]
 80005d8:	f7ff ffd0 	bl	800057c <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 80005dc:	88ba      	ldrh	r2, [r7, #4]
 80005de:	7e3b      	ldrb	r3, [r7, #24]
 80005e0:	68b9      	ldr	r1, [r7, #8]
 80005e2:	68f8      	ldr	r0, [r7, #12]
 80005e4:	f7ff ffb3 	bl	800054e <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 80005e8:	88fa      	ldrh	r2, [r7, #6]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	4413      	add	r3, r2
 80005ee:	1e58      	subs	r0, r3, #1
 80005f0:	88ba      	ldrh	r2, [r7, #4]
 80005f2:	7e3b      	ldrb	r3, [r7, #24]
 80005f4:	68b9      	ldr	r1, [r7, #8]
 80005f6:	f7ff ffaa 	bl	800054e <GFX_DrawFastVLine>

}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b086      	sub	sp, #24
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	4611      	mov	r1, r2
 800060e:	461a      	mov	r2, r3
 8000610:	460b      	mov	r3, r1
 8000612:	80fb      	strh	r3, [r7, #6]
 8000614:	4613      	mov	r3, r2
 8000616:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	e009      	b.n	8000632 <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 800061e:	88ba      	ldrh	r2, [r7, #4]
 8000620:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000624:	68b9      	ldr	r1, [r7, #8]
 8000626:	6978      	ldr	r0, [r7, #20]
 8000628:	f7ff ff91 	bl	800054e <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	3301      	adds	r3, #1
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	88fa      	ldrh	r2, [r7, #6]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	4413      	add	r3, r2
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	429a      	cmp	r2, r3
 800063c:	dbef      	blt.n	800061e <GFX_DrawFillRectangle+0x1c>
    }

}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	3718      	adds	r7, #24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <SSD1306_Command>:

static uint8_t buffer [SSD1306_BUFFERSIZE];


void SSD1306_Command(uint8_t Command)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af02      	add	r7, sp, #8
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	I2C_Transmit(oled_i2c, SSD1306_ADDRESS, SSD1306_REG_COMMAND, &Command, 1);
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <SSD1306_Command+0x24>)
 8000654:	6818      	ldr	r0, [r3, #0]
 8000656:	1dfb      	adds	r3, r7, #7
 8000658:	2201      	movs	r2, #1
 800065a:	9200      	str	r2, [sp, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	213c      	movs	r1, #60	; 0x3c
 8000660:	f000 ffc2 	bl	80015e8 <I2C_Transmit>

}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000424 	.word	0x20000424

08000670 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af02      	add	r7, sp, #8
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	807b      	strh	r3, [r7, #2]
	I2C_Transmit(oled_i2c, SSD1306_ADDRESS , SSD1306_REG_DATA, Data, Size);
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <SSD1306_Data+0x28>)
 800067e:	6818      	ldr	r0, [r3, #0]
 8000680:	887b      	ldrh	r3, [r7, #2]
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2240      	movs	r2, #64	; 0x40
 8000688:	213c      	movs	r1, #60	; 0x3c
 800068a:	f000 ffad 	bl	80015e8 <I2C_Transmit>

}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000424 	.word	0x20000424

0800069c <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <SSD1306_Clear+0x16>
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d007      	beq.n	80006c0 <SSD1306_Clear+0x24>

	case YELLOWBLUE:
		memset(buffer,0xFF,SSD1306_BUFFERSIZE);
		break;
	}
}
 80006b0:	e00d      	b.n	80006ce <SSD1306_Clear+0x32>
		memset(buffer,0x00,SSD1306_BUFFERSIZE);
 80006b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006b6:	2100      	movs	r1, #0
 80006b8:	4807      	ldr	r0, [pc, #28]	; (80006d8 <SSD1306_Clear+0x3c>)
 80006ba:	f001 f969 	bl	8001990 <memset>
		break;
 80006be:	e006      	b.n	80006ce <SSD1306_Clear+0x32>
		memset(buffer,0xFF,SSD1306_BUFFERSIZE);
 80006c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006c4:	21ff      	movs	r1, #255	; 0xff
 80006c6:	4804      	ldr	r0, [pc, #16]	; (80006d8 <SSD1306_Clear+0x3c>)
 80006c8:	f001 f962 	bl	8001990 <memset>
		break;
 80006cc:	bf00      	nop
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000020 	.word	0x20000020

080006dc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t color) {
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	80fb      	strh	r3, [r7, #6]
 80006e6:	460b      	mov	r3, r1
 80006e8:	80bb      	strh	r3, [r7, #4]
 80006ea:	4613      	mov	r3, r2
 80006ec:	70fb      	strb	r3, [r7, #3]

	if ((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDWIDTH))
 80006ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	f2c0 8087 	blt.w	8000806 <SSD1306_DrawPixel+0x12a>
 80006f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fc:	2b7f      	cmp	r3, #127	; 0x7f
 80006fe:	f300 8082 	bgt.w	8000806 <SSD1306_DrawPixel+0x12a>
 8000702:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	db7d      	blt.n	8000806 <SSD1306_DrawPixel+0x12a>
 800070a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800070e:	2b7f      	cmp	r3, #127	; 0x7f
 8000710:	dc79      	bgt.n	8000806 <SSD1306_DrawPixel+0x12a>
		return;
    switch (color) {
 8000712:	78fb      	ldrb	r3, [r7, #3]
 8000714:	2b02      	cmp	r3, #2
 8000716:	d051      	beq.n	80007bc <SSD1306_DrawPixel+0xe0>
 8000718:	2b02      	cmp	r3, #2
 800071a:	dc75      	bgt.n	8000808 <SSD1306_DrawPixel+0x12c>
 800071c:	2b00      	cmp	r3, #0
 800071e:	d026      	beq.n	800076e <SSD1306_DrawPixel+0x92>
 8000720:	2b01      	cmp	r3, #1
 8000722:	d171      	bne.n	8000808 <SSD1306_DrawPixel+0x12c>
    case SSD1306_COLOR_YELLOWBLUE:
    //buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7)); // byte 0 on the left side near GND
    buffer[(y/8) * SSD1306_LCDWIDTH + (SSD1306_LCDWIDTH - 1 - x)] |= (1 << (y & 7)); //  byte 0 on the right side near SDA
 8000724:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	da00      	bge.n	800072e <SSD1306_DrawPixel+0x52>
 800072c:	3307      	adds	r3, #7
 800072e:	10db      	asrs	r3, r3, #3
 8000730:	b218      	sxth	r0, r3
 8000732:	4603      	mov	r3, r0
 8000734:	01da      	lsls	r2, r3, #7
 8000736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800073a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800073e:	4413      	add	r3, r2
 8000740:	4a34      	ldr	r2, [pc, #208]	; (8000814 <SSD1306_DrawPixel+0x138>)
 8000742:	5cd3      	ldrb	r3, [r2, r3]
 8000744:	b25a      	sxtb	r2, r3
 8000746:	88bb      	ldrh	r3, [r7, #4]
 8000748:	f003 0307 	and.w	r3, r3, #7
 800074c:	2101      	movs	r1, #1
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	b25b      	sxtb	r3, r3
 8000754:	4313      	orrs	r3, r2
 8000756:	b259      	sxtb	r1, r3
 8000758:	4603      	mov	r3, r0
 800075a:	01da      	lsls	r2, r3, #7
 800075c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000760:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000764:	4413      	add	r3, r2
 8000766:	b2c9      	uxtb	r1, r1
 8000768:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <SSD1306_DrawPixel+0x138>)
 800076a:	54d1      	strb	r1, [r2, r3]

      break;
 800076c:	e04c      	b.n	8000808 <SSD1306_DrawPixel+0x12c>
    case SSD1306_COLOR_BLACK:
      //buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
    	buffer[(y/8) * SSD1306_LCDWIDTH + (SSD1306_LCDWIDTH - 1 - x)] &= ~(1 << (y & 7));
 800076e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	da00      	bge.n	8000778 <SSD1306_DrawPixel+0x9c>
 8000776:	3307      	adds	r3, #7
 8000778:	10db      	asrs	r3, r3, #3
 800077a:	b218      	sxth	r0, r3
 800077c:	4603      	mov	r3, r0
 800077e:	01da      	lsls	r2, r3, #7
 8000780:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000784:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8000788:	4413      	add	r3, r2
 800078a:	4a22      	ldr	r2, [pc, #136]	; (8000814 <SSD1306_DrawPixel+0x138>)
 800078c:	5cd3      	ldrb	r3, [r2, r3]
 800078e:	b25a      	sxtb	r2, r3
 8000790:	88bb      	ldrh	r3, [r7, #4]
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	2101      	movs	r1, #1
 8000798:	fa01 f303 	lsl.w	r3, r1, r3
 800079c:	b25b      	sxtb	r3, r3
 800079e:	43db      	mvns	r3, r3
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	4013      	ands	r3, r2
 80007a4:	b259      	sxtb	r1, r3
 80007a6:	4603      	mov	r3, r0
 80007a8:	01da      	lsls	r2, r3, #7
 80007aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ae:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80007b2:	4413      	add	r3, r2
 80007b4:	b2c9      	uxtb	r1, r1
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <SSD1306_DrawPixel+0x138>)
 80007b8:	54d1      	strb	r1, [r2, r3]
      break;
 80007ba:	e025      	b.n	8000808 <SSD1306_DrawPixel+0x12c>
    case SSD1306_INVERSE:
      //buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
    	buffer[(y/8) * SSD1306_LCDWIDTH + (SSD1306_LCDWIDTH - 1 - x)] ^= (1 << (y & 7));
 80007bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	da00      	bge.n	80007c6 <SSD1306_DrawPixel+0xea>
 80007c4:	3307      	adds	r3, #7
 80007c6:	10db      	asrs	r3, r3, #3
 80007c8:	b218      	sxth	r0, r3
 80007ca:	4603      	mov	r3, r0
 80007cc:	01da      	lsls	r2, r3, #7
 80007ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007d2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80007d6:	4413      	add	r3, r2
 80007d8:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <SSD1306_DrawPixel+0x138>)
 80007da:	5cd3      	ldrb	r3, [r2, r3]
 80007dc:	b25a      	sxtb	r2, r3
 80007de:	88bb      	ldrh	r3, [r7, #4]
 80007e0:	f003 0307 	and.w	r3, r3, #7
 80007e4:	2101      	movs	r1, #1
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	4053      	eors	r3, r2
 80007ee:	b259      	sxtb	r1, r3
 80007f0:	4603      	mov	r3, r0
 80007f2:	01da      	lsls	r2, r3, #7
 80007f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007f8:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80007fc:	4413      	add	r3, r2
 80007fe:	b2c9      	uxtb	r1, r1
 8000800:	4a04      	ldr	r2, [pc, #16]	; (8000814 <SSD1306_DrawPixel+0x138>)
 8000802:	54d1      	strb	r1, [r2, r3]
      break;
 8000804:	e000      	b.n	8000808 <SSD1306_DrawPixel+0x12c>
		return;
 8000806:	bf00      	nop
    }
  }
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000020 	.word	0x20000020

08000818 <SSD1306_Display>:


void SSD1306_Display(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

	  SSD1306_Command(SSD1306_PAGEADDR);
 800081c:	2022      	movs	r0, #34	; 0x22
 800081e:	f7ff ff13 	bl	8000648 <SSD1306_Command>
	  SSD1306_Command(0);				// Page start address
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff ff10 	bl	8000648 <SSD1306_Command>
	  SSD1306_Command(0xFF);				// Page end (not really, but works here)
 8000828:	20ff      	movs	r0, #255	; 0xff
 800082a:	f7ff ff0d 	bl	8000648 <SSD1306_Command>
	  SSD1306_Command(SSD1306_COLUMNADDR);
 800082e:	2021      	movs	r0, #33	; 0x21
 8000830:	f7ff ff0a 	bl	8000648 <SSD1306_Command>
	  SSD1306_Command(0);				// Column start address
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff ff07 	bl	8000648 <SSD1306_Command>
	  SSD1306_Command(SSD1306_LCDWIDTH - 1); 		// Column end address
 800083a:	207f      	movs	r0, #127	; 0x7f
 800083c:	f7ff ff04 	bl	8000648 <SSD1306_Command>

	  SSD1306_Data(buffer,SSD1306_BUFFERSIZE);
 8000840:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <SSD1306_Display+0x38>)
 8000846:	f7ff ff13 	bl	8000670 <SSD1306_Data>


}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000020 	.word	0x20000020

08000854 <SSD1306_Init>:
void SSD1306_Init(I2C_Handle_t *i2c)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 800085c:	4a2a      	ldr	r2, [pc, #168]	; (8000908 <SSD1306_Init+0xb4>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8000862:	20ae      	movs	r0, #174	; 0xae
 8000864:	f7ff fef0 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8000868:	20d5      	movs	r0, #213	; 0xd5
 800086a:	f7ff feed 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(0x80);
 800086e:	2080      	movs	r0, #128	; 0x80
 8000870:	f7ff feea 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETMULTIPLEX);
 8000874:	20a8      	movs	r0, #168	; 0xa8
 8000876:	f7ff fee7 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 800087a:	203f      	movs	r0, #63	; 0x3f
 800087c:	f7ff fee4 	bl	8000648 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8000880:	20d3      	movs	r0, #211	; 0xd3
 8000882:	f7ff fee1 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(0x00);
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff fede 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(0x80);
 800088c:	2080      	movs	r0, #128	; 0x80
 800088e:	f7ff fedb 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(SSD1306_CHARGEPUMP);
 8000892:	208d      	movs	r0, #141	; 0x8d
 8000894:	f7ff fed8 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(0x14);
 8000898:	2014      	movs	r0, #20
 800089a:	f7ff fed5 	bl	8000648 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE);
 800089e:	2020      	movs	r0, #32
 80008a0:	f7ff fed2 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(0x00);
 80008a4:	2000      	movs	r0, #0
 80008a6:	f7ff fecf 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP);
 80008aa:	20a0      	movs	r0, #160	; 0xa0
 80008ac:	f7ff fecc 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 80008b0:	20c8      	movs	r0, #200	; 0xc8
 80008b2:	f7ff fec9 	bl	8000648 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 80008b6:	20da      	movs	r0, #218	; 0xda
 80008b8:	f7ff fec6 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(0x12);
 80008bc:	2012      	movs	r0, #18
 80008be:	f7ff fec3 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 80008c2:	2081      	movs	r0, #129	; 0x81
 80008c4:	f7ff fec0 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(0xFF);
 80008c8:	20ff      	movs	r0, #255	; 0xff
 80008ca:	f7ff febd 	bl	8000648 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 80008ce:	20d9      	movs	r0, #217	; 0xd9
 80008d0:	f7ff feba 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(0xF1);
 80008d4:	20f1      	movs	r0, #241	; 0xf1
 80008d6:	f7ff feb7 	bl	8000648 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT);
 80008da:	20db      	movs	r0, #219	; 0xdb
 80008dc:	f7ff feb4 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(0x40);
 80008e0:	2040      	movs	r0, #64	; 0x40
 80008e2:	f7ff feb1 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME);
 80008e6:	20a4      	movs	r0, #164	; 0xa4
 80008e8:	f7ff feae 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);
 80008ec:	20a6      	movs	r0, #166	; 0xa6
 80008ee:	f7ff feab 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 80008f2:	202e      	movs	r0, #46	; 0x2e
 80008f4:	f7ff fea8 	bl	8000648 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYON);
 80008f8:	20af      	movs	r0, #175	; 0xaf
 80008fa:	f7ff fea5 	bl	8000648 <SSD1306_Command>


}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000424 	.word	0x20000424

0800090c <Snek_DrawButton>:
#include "Snek.h"

Snek_t SNEK;

static uint16_t Snek_DrawButton(uint8_t *Text, uint8_t Count, uint8_t Select)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b087      	sub	sp, #28
 8000910:	af02      	add	r7, sp, #8
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	460b      	mov	r3, r1
 8000916:	70fb      	strb	r3, [r7, #3]
 8000918:	4613      	mov	r3, r2
 800091a:	70bb      	strb	r3, [r7, #2]
	uint8_t _tempX = ((SSD1306_LCDWIDTH - (strlen((char*) Text) * 5) - strlen((char*) Text))) / 2;
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff fc59 	bl	80001d4 <strlen>
 8000922:	4602      	mov	r2, r0
 8000924:	4613      	mov	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	189c      	adds	r4, r3, r2
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff fc52 	bl	80001d4 <strlen>
 8000930:	4603      	mov	r3, r0
 8000932:	4423      	add	r3, r4
 8000934:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	73fb      	strb	r3, [r7, #15]

	GFX_DrawFillRectangle(0, Count * 16, 128, 15, SSD1306_COLOR_BLACK);
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	0119      	lsls	r1, r3, #4
 8000940:	2300      	movs	r3, #0
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	230f      	movs	r3, #15
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fe5a 	bl	8000602 <GFX_DrawFillRectangle>
	//draw selected button
	if (Select)
 800094e:	78bb      	ldrb	r3, [r7, #2]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d013      	beq.n	800097c <Snek_DrawButton+0x70>
	{
		GFX_DrawFillRectangle(0, Count * 16, 128, 15, SSD1306_COLOR_YELLOWBLUE);
 8000954:	78fb      	ldrb	r3, [r7, #3]
 8000956:	0119      	lsls	r1, r3, #4
 8000958:	2301      	movs	r3, #1
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	230f      	movs	r3, #15
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff fe4e 	bl	8000602 <GFX_DrawFillRectangle>
		GFX_DrawString(_tempX, (Count * 16) + 4, (char*) Text, SSD1306_COLOR_BLACK, SSD1306_COLOR_YELLOWBLUE);
 8000966:	7bf8      	ldrb	r0, [r7, #15]
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	011b      	lsls	r3, r3, #4
 800096c:	1d19      	adds	r1, r3, #4
 800096e:	2301      	movs	r3, #1
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2300      	movs	r3, #0
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	f7ff fcff 	bl	8000378 <GFX_DrawString>
 800097a:	e012      	b.n	80009a2 <Snek_DrawButton+0x96>
	}
	else // draw unselected button
	{
		GFX_DrawRectangle(0, Count * 16, 128, 15, SSD1306_COLOR_YELLOWBLUE);
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	0119      	lsls	r1, r3, #4
 8000980:	2301      	movs	r3, #1
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	230f      	movs	r3, #15
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fe0d 	bl	80005a8 <GFX_DrawRectangle>
		GFX_DrawString(_tempX, (Count * 16) + 4, (char*) Text, SSD1306_COLOR_YELLOWBLUE, SSD1306_COLOR_BLACK);
 800098e:	7bf8      	ldrb	r0, [r7, #15]
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	011b      	lsls	r3, r3, #4
 8000994:	1d19      	adds	r1, r3, #4
 8000996:	2300      	movs	r3, #0
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2301      	movs	r3, #1
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	f7ff fceb 	bl	8000378 <GFX_DrawString>
	}

	return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd90      	pop	{r4, r7, pc}

080009ac <Snek_Init>:

static void Snek_Init(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

	// switch to menu screen
	SNEK.State = GAMESTATE_MENUMAIN;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <Snek_Init+0x38>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
	// set button on first button
	SNEK.Buttons = BUTTON_START;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <Snek_Init+0x38>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	705a      	strb	r2, [r3, #1]
	SNEK_SET_BIT(SNEK.CR1, SNEK_CR1_ACTIVE_BUTTON_START);
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <Snek_Init+0x38>)
 80009be:	885b      	ldrh	r3, [r3, #2]
 80009c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <Snek_Init+0x38>)
 80009c8:	805a      	strh	r2, [r3, #2]
	// set bit to draw menu for the first time
	SNEK_SET_BIT(SNEK.CR1, SNEK_CR1_DRAW_OLED);
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <Snek_Init+0x38>)
 80009cc:	885b      	ldrh	r3, [r3, #2]
 80009ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <Snek_Init+0x38>)
 80009d6:	805a      	strh	r2, [r3, #2]

}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000428 	.word	0x20000428

080009e8 <Snek_MenuMain>:

static void Snek_MenuMain(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	// check if there is a menu update
	if (SNEK_CHECK_BIT(SNEK.CR1, SNEK_CR1_DRAW_OLED))
 80009ec:	4b5a      	ldr	r3, [pc, #360]	; (8000b58 <Snek_MenuMain+0x170>)
 80009ee:	885b      	ldrh	r3, [r3, #2]
 80009f0:	0a5b      	lsrs	r3, r3, #9
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d066      	beq.n	8000aca <Snek_MenuMain+0xe2>
	{
		//draw SNEK->Buttons
		Snek_DrawButton((uint8_t*) "Start", 0, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	4856      	ldr	r0, [pc, #344]	; (8000b5c <Snek_MenuMain+0x174>)
 8000a02:	f7ff ff83 	bl	800090c <Snek_DrawButton>
		Snek_DrawButton((uint8_t*) "High scores", 1, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2101      	movs	r1, #1
 8000a0a:	4855      	ldr	r0, [pc, #340]	; (8000b60 <Snek_MenuMain+0x178>)
 8000a0c:	f7ff ff7e 	bl	800090c <Snek_DrawButton>
		Snek_DrawButton((uint8_t*) "Settings", 2, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2102      	movs	r1, #2
 8000a14:	4853      	ldr	r0, [pc, #332]	; (8000b64 <Snek_MenuMain+0x17c>)
 8000a16:	f7ff ff79 	bl	800090c <Snek_DrawButton>
		Snek_DrawButton((uint8_t*) "About", 3, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2103      	movs	r1, #3
 8000a1e:	4852      	ldr	r0, [pc, #328]	; (8000b68 <Snek_MenuMain+0x180>)
 8000a20:	f7ff ff74 	bl	800090c <Snek_DrawButton>

		// clear active buttons bits
		SNEK.CR1 &= ~(15U << SNEK_CR1_ACTIVE_BUTTON_START);
 8000a24:	4b4c      	ldr	r3, [pc, #304]	; (8000b58 <Snek_MenuMain+0x170>)
 8000a26:	885b      	ldrh	r3, [r3, #2]
 8000a28:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	4b4a      	ldr	r3, [pc, #296]	; (8000b58 <Snek_MenuMain+0x170>)
 8000a30:	805a      	strh	r2, [r3, #2]

		//draw selected button
		//set active window bit
		switch (SNEK.Buttons)
 8000a32:	4b49      	ldr	r3, [pc, #292]	; (8000b58 <Snek_MenuMain+0x170>)
 8000a34:	785b      	ldrb	r3, [r3, #1]
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d83e      	bhi.n	8000ab8 <Snek_MenuMain+0xd0>
 8000a3a:	a201      	add	r2, pc, #4	; (adr r2, 8000a40 <Snek_MenuMain+0x58>)
 8000a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a40:	08000a51 	.word	0x08000a51
 8000a44:	08000a6b 	.word	0x08000a6b
 8000a48:	08000a85 	.word	0x08000a85
 8000a4c:	08000a9f 	.word	0x08000a9f
		{
		case (BUTTON_START):
			Snek_DrawButton((uint8_t*) "Start", 0, 1);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2100      	movs	r1, #0
 8000a54:	4841      	ldr	r0, [pc, #260]	; (8000b5c <Snek_MenuMain+0x174>)
 8000a56:	f7ff ff59 	bl	800090c <Snek_DrawButton>
			SNEK_SET_BIT(SNEK.CR1, SNEK_CR1_ACTIVE_BUTTON_START);
 8000a5a:	4b3f      	ldr	r3, [pc, #252]	; (8000b58 <Snek_MenuMain+0x170>)
 8000a5c:	885b      	ldrh	r3, [r3, #2]
 8000a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	4b3c      	ldr	r3, [pc, #240]	; (8000b58 <Snek_MenuMain+0x170>)
 8000a66:	805a      	strh	r2, [r3, #2]
			break;
 8000a68:	e026      	b.n	8000ab8 <Snek_MenuMain+0xd0>

		case (BUTTON_SCORES):
			Snek_DrawButton((uint8_t*) "High scores", 1, 1);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	483c      	ldr	r0, [pc, #240]	; (8000b60 <Snek_MenuMain+0x178>)
 8000a70:	f7ff ff4c 	bl	800090c <Snek_DrawButton>
			SNEK_SET_BIT(SNEK.CR1, SNEK_CR1_ACTIVE_BUTTON_SCORES);
 8000a74:	4b38      	ldr	r3, [pc, #224]	; (8000b58 <Snek_MenuMain+0x170>)
 8000a76:	885b      	ldrh	r3, [r3, #2]
 8000a78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	4b36      	ldr	r3, [pc, #216]	; (8000b58 <Snek_MenuMain+0x170>)
 8000a80:	805a      	strh	r2, [r3, #2]
			break;
 8000a82:	e019      	b.n	8000ab8 <Snek_MenuMain+0xd0>

		case (BUTTON_SETTINGS):
			Snek_DrawButton((uint8_t*) "Settings", 2, 1);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2102      	movs	r1, #2
 8000a88:	4836      	ldr	r0, [pc, #216]	; (8000b64 <Snek_MenuMain+0x17c>)
 8000a8a:	f7ff ff3f 	bl	800090c <Snek_DrawButton>
			SNEK_SET_BIT(SNEK.CR1, SNEK_CR1_ACTIVE_BUTTON_SETTIGNS);
 8000a8e:	4b32      	ldr	r3, [pc, #200]	; (8000b58 <Snek_MenuMain+0x170>)
 8000a90:	885b      	ldrh	r3, [r3, #2]
 8000a92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <Snek_MenuMain+0x170>)
 8000a9a:	805a      	strh	r2, [r3, #2]
			break;
 8000a9c:	e00c      	b.n	8000ab8 <Snek_MenuMain+0xd0>

		case (BUTTON_ABOUT):
			Snek_DrawButton((uint8_t*) "About", 3, 1);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2103      	movs	r1, #3
 8000aa2:	4831      	ldr	r0, [pc, #196]	; (8000b68 <Snek_MenuMain+0x180>)
 8000aa4:	f7ff ff32 	bl	800090c <Snek_DrawButton>
			SNEK_SET_BIT(SNEK.CR1, SNEK_CR1_ACTIVE_BUTTON_ABOUT);
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <Snek_MenuMain+0x170>)
 8000aaa:	885b      	ldrh	r3, [r3, #2]
 8000aac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <Snek_MenuMain+0x170>)
 8000ab4:	805a      	strh	r2, [r3, #2]
			break;
 8000ab6:	bf00      	nop
		}

		// sent data to OLED
		SSD1306_Display();
 8000ab8:	f7ff feae 	bl	8000818 <SSD1306_Display>

		// clear bit to draw on OLED
		SNEK_RESET_BIT(SNEK.CR1, SNEK_CR1_DRAW_OLED);
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <Snek_MenuMain+0x170>)
 8000abe:	885b      	ldrh	r3, [r3, #2]
 8000ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <Snek_MenuMain+0x170>)
 8000ac8:	805a      	strh	r2, [r3, #2]
	}

	// check if button down is clicked
	if (SNEK_CHECK_BIT(SNEK.CR1, SNEK_CR1_BUTTON_DOWN))
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <Snek_MenuMain+0x170>)
 8000acc:	885b      	ldrh	r3, [r3, #2]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d01a      	beq.n	8000b0c <Snek_MenuMain+0x124>
	{
		// move button cursor down
		SNEK.Buttons = (SNEK.Buttons + 1) % 4;
 8000ad6:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <Snek_MenuMain+0x170>)
 8000ad8:	785b      	ldrb	r3, [r3, #1]
 8000ada:	3301      	adds	r3, #1
 8000adc:	425a      	negs	r2, r3
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	f002 0203 	and.w	r2, r2, #3
 8000ae6:	bf58      	it	pl
 8000ae8:	4253      	negpl	r3, r2
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <Snek_MenuMain+0x170>)
 8000aee:	705a      	strb	r2, [r3, #1]
		// set draw
		SNEK_SET_BIT(SNEK.CR1, SNEK_CR1_DRAW_OLED);
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <Snek_MenuMain+0x170>)
 8000af2:	885b      	ldrh	r3, [r3, #2]
 8000af4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <Snek_MenuMain+0x170>)
 8000afc:	805a      	strh	r2, [r3, #2]
		// reset button clicked
		SNEK_RESET_BIT(SNEK.CR1, SNEK_CR1_BUTTON_DOWN);
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <Snek_MenuMain+0x170>)
 8000b00:	885b      	ldrh	r3, [r3, #2]
 8000b02:	f023 0301 	bic.w	r3, r3, #1
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <Snek_MenuMain+0x170>)
 8000b0a:	805a      	strh	r2, [r3, #2]
	}

	if (SNEK_CHECK_BIT(SNEK.CR1, SNEK_CR1_BUTTON_UP))
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <Snek_MenuMain+0x170>)
 8000b0e:	885b      	ldrh	r3, [r3, #2]
 8000b10:	085b      	lsrs	r3, r3, #1
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d01a      	beq.n	8000b52 <Snek_MenuMain+0x16a>
	{
		// move button up
		SNEK.Buttons = (SNEK.Buttons + 3) % 4;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <Snek_MenuMain+0x170>)
 8000b1e:	785b      	ldrb	r3, [r3, #1]
 8000b20:	3303      	adds	r3, #3
 8000b22:	425a      	negs	r2, r3
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	f002 0203 	and.w	r2, r2, #3
 8000b2c:	bf58      	it	pl
 8000b2e:	4253      	negpl	r3, r2
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <Snek_MenuMain+0x170>)
 8000b34:	705a      	strb	r2, [r3, #1]
		SNEK_SET_BIT(SNEK.CR1, SNEK_CR1_DRAW_OLED);
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <Snek_MenuMain+0x170>)
 8000b38:	885b      	ldrh	r3, [r3, #2]
 8000b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <Snek_MenuMain+0x170>)
 8000b42:	805a      	strh	r2, [r3, #2]
		SNEK_RESET_BIT(SNEK.CR1, SNEK_CR1_BUTTON_UP);
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <Snek_MenuMain+0x170>)
 8000b46:	885b      	ldrh	r3, [r3, #2]
 8000b48:	f023 0302 	bic.w	r3, r3, #2
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <Snek_MenuMain+0x170>)
 8000b50:	805a      	strh	r2, [r3, #2]
	}
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000428 	.word	0x20000428
 8000b5c:	080019b8 	.word	0x080019b8
 8000b60:	080019c0 	.word	0x080019c0
 8000b64:	080019cc 	.word	0x080019cc
 8000b68:	080019d8 	.word	0x080019d8

08000b6c <Snek>:

void Snek(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	switch (SNEK.State)
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <Snek+0x40>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b05      	cmp	r3, #5
 8000b76:	d816      	bhi.n	8000ba6 <Snek+0x3a>
 8000b78:	a201      	add	r2, pc, #4	; (adr r2, 8000b80 <Snek+0x14>)
 8000b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7e:	bf00      	nop
 8000b80:	08000b99 	.word	0x08000b99
 8000b84:	08000b9f 	.word	0x08000b9f
 8000b88:	08000ba5 	.word	0x08000ba5
 8000b8c:	08000ba5 	.word	0x08000ba5
 8000b90:	08000ba5 	.word	0x08000ba5
 8000b94:	08000ba5 	.word	0x08000ba5
	{
	case GAMESTATE_INIT:
		Snek_Init();
 8000b98:	f7ff ff08 	bl	80009ac <Snek_Init>
		break;
 8000b9c:	e003      	b.n	8000ba6 <Snek+0x3a>

	case GAMESTATE_MENUMAIN:
		Snek_MenuMain();
 8000b9e:	f7ff ff23 	bl	80009e8 <Snek_MenuMain>
		break;
 8000ba2:	e000      	b.n	8000ba6 <Snek+0x3a>

	case GAMESTATE_MENUSCORES:
		break;
 8000ba4:	bf00      	nop
		break;

	case GAMESTATE_OVER:
		break;
	}
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000428 	.word	0x20000428

08000bb0 <Snek_ButtonCallback>:

void Snek_ButtonCallback(uint8_t GPIO_Pin)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
	if (GPIO_Pin == SNEK_BUTTON_DOWN)
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d110      	bne.n	8000be2 <Snek_ButtonCallback+0x32>
	{
		// chcek if snek is no moving down already
		if (SNEK_CHECK_BIT(SNEK.CR1, SNEK_CR1_SNEKMOVE_DOWN))
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <Snek_ButtonCallback+0x3c>)
 8000bc2:	885b      	ldrh	r3, [r3, #2]
 8000bc4:	091b      	lsrs	r3, r3, #4
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d107      	bne.n	8000be0 <Snek_ButtonCallback+0x30>
		{
			return;
		}

		// set button down bit
		SNEK_SET_BIT(SNEK.CR1, SNEK_CR1_BUTTON_DOWN);
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <Snek_ButtonCallback+0x3c>)
 8000bd2:	885b      	ldrh	r3, [r3, #2]
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <Snek_ButtonCallback+0x3c>)
 8000bdc:	805a      	strh	r2, [r3, #2]
 8000bde:	e000      	b.n	8000be2 <Snek_ButtonCallback+0x32>
			return;
 8000be0:	bf00      	nop

	}
}
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	20000428 	.word	0x20000428

08000bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db0a      	blt.n	8000c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	490c      	ldr	r1, [pc, #48]	; (8000c3c <__NVIC_SetPriority+0x4c>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	440b      	add	r3, r1
 8000c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c18:	e00a      	b.n	8000c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <__NVIC_SetPriority+0x50>)
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 030f 	and.w	r3, r3, #15
 8000c26:	3b04      	subs	r3, #4
 8000c28:	0112      	lsls	r2, r2, #4
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	761a      	strb	r2, [r3, #24]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c54:	d301      	bcc.n	8000c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00f      	b.n	8000c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <SysTick_Config+0x40>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c62:	210f      	movs	r1, #15
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f7ff ffc2 	bl	8000bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SysTick_Config+0x40>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SysTick_Config+0x40>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <main>:
void I2C1Config(I2C_Handle_t *phI2C1);

volatile uint32_t TickS;

int main()
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	I2C_Handle_t hI2C1;

	SysTick_Config(84000000);
 8000c8e:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <main+0x3c>)
 8000c90:	f7ff ffd8 	bl	8000c44 <SysTick_Config>

	// Configure RCC
	SysClockInit();
 8000c94:	f000 f870 	bl	8000d78 <SysClockInit>

	// Configure GPIO pins
	GPIOConfig();
 8000c98:	f000 f892 	bl	8000dc0 <GPIOConfig>

	// Configure I2C peripherals
	I2C1Config(&hI2C1);
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f8be 	bl	8000e20 <I2C1Config>
	SSD1306_Init(&hI2C1);
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fdd4 	bl	8000854 <SSD1306_Init>

	SSD1306_Clear(SSD1306_COLOR_BLACK);
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff fcf5 	bl	800069c <SSD1306_Clear>
	GFX_SetFont(font_8x5);
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <main+0x40>)
 8000cb4:	f7ff fa96 	bl	80001e4 <GFX_SetFont>

	SSD1306_Display();
 8000cb8:	f7ff fdae 	bl	8000818 <SSD1306_Display>



	while(1)
	{
		Snek();
 8000cbc:	f7ff ff56 	bl	8000b6c <Snek>
 8000cc0:	e7fc      	b.n	8000cbc <main+0x34>
 8000cc2:	bf00      	nop
 8000cc4:	0501bd00 	.word	0x0501bd00
 8000cc8:	080019e0 	.word	0x080019e0

08000ccc <EXTI15_10_IRQHandler>:
	}
}

void EXTI15_10_IRQHandler()
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
	uint8_t _tempGPIOPin;
	// if button is clicked
	if (EXTI->PR & (0b1 << SNEK_BUTTON_DOWN))
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <EXTI15_10_IRQHandler+0x8c>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d005      	beq.n	8000cea <EXTI15_10_IRQHandler+0x1e>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_DOWN);
 8000cde:	2002      	movs	r0, #2
 8000ce0:	f000 fad8 	bl	8001294 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_DOWN;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	71fb      	strb	r3, [r7, #7]
 8000ce8:	e02e      	b.n	8000d48 <EXTI15_10_IRQHandler+0x7c>
	}
	else if (EXTI->PR & (0b1 << SNEK_BUTTON_UP))
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <EXTI15_10_IRQHandler+0x8c>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d005      	beq.n	8000d02 <EXTI15_10_IRQHandler+0x36>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_UP);
 8000cf6:	200e      	movs	r0, #14
 8000cf8:	f000 facc 	bl	8001294 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_UP;
 8000cfc:	230e      	movs	r3, #14
 8000cfe:	71fb      	strb	r3, [r7, #7]
 8000d00:	e022      	b.n	8000d48 <EXTI15_10_IRQHandler+0x7c>
	}
	else if (EXTI->PR & (0b1 << SNEK_BUTTON_LEFT))
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <EXTI15_10_IRQHandler+0x8c>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d005      	beq.n	8000d1a <EXTI15_10_IRQHandler+0x4e>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_LEFT);
 8000d0e:	200f      	movs	r0, #15
 8000d10:	f000 fac0 	bl	8001294 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_LEFT;
 8000d14:	230f      	movs	r3, #15
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	e016      	b.n	8000d48 <EXTI15_10_IRQHandler+0x7c>
	}
	else if (EXTI->PR & (0b1 << SNEK_BUTTON_RIGHT))
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <EXTI15_10_IRQHandler+0x8c>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <EXTI15_10_IRQHandler+0x66>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_RIGHT);
 8000d26:	2001      	movs	r0, #1
 8000d28:	f000 fab4 	bl	8001294 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_RIGHT;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	71fb      	strb	r3, [r7, #7]
 8000d30:	e00a      	b.n	8000d48 <EXTI15_10_IRQHandler+0x7c>
	}
	else if (EXTI->PR & (0b1 << SNEK_BUTTON_ENTER))
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <EXTI15_10_IRQHandler+0x8c>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d004      	beq.n	8000d48 <EXTI15_10_IRQHandler+0x7c>
	{
		GPIO_ClearPendingEXTIFlag(SNEK_BUTTON_ENTER);
 8000d3e:	200d      	movs	r0, #13
 8000d40:	f000 faa8 	bl	8001294 <GPIO_ClearPendingEXTIFlag>
		_tempGPIOPin = SNEK_BUTTON_ENTER;
 8000d44:	230d      	movs	r3, #13
 8000d46:	71fb      	strb	r3, [r7, #7]
	}

	Snek_ButtonCallback(_tempGPIOPin);
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff30 	bl	8000bb0 <Snek_ButtonCallback>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40013c00 	.word	0x40013c00

08000d5c <SysTick_Handler>:

void SysTick_Handler()
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
	TickS++;
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <SysTick_Handler+0x18>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3301      	adds	r3, #1
 8000d66:	4a03      	ldr	r2, [pc, #12]	; (8000d74 <SysTick_Handler+0x18>)
 8000d68:	6013      	str	r3, [r2, #0]
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	2000042c 	.word	0x2000042c

08000d78 <SysClockInit>:

// system clock init function
void SysClockInit(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
	RCC_ClockInitTypeDef pClockInit;

	pClockInit.APB1Prescaler = RCC_ABP1_PRESCALER_DIV2;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	713b      	strb	r3, [r7, #4]
	pClockInit.APB2Prescaler = RCC_ABP2_PRESCALER_NODIV;
 8000d82:	2300      	movs	r3, #0
 8000d84:	717b      	strb	r3, [r7, #5]
	pClockInit.FLASHLatency = RCC_FLASHLATENCY_2WS;
 8000d86:	2302      	movs	r3, #2
 8000d88:	70bb      	strb	r3, [r7, #2]
	pClockInit.HPREPrescaler = RCC_HPRE_PRESCALER_NODIV;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	70fb      	strb	r3, [r7, #3]
	pClockInit.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	703b      	strb	r3, [r7, #0]
	pClockInit.VOSScale = RCC_VOS_SCALE2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	707b      	strb	r3, [r7, #1]
	pClockInit.PLL.PLLSource = RCC_PLL_SOURCE_HSI;
 8000d96:	2300      	movs	r3, #0
 8000d98:	71fb      	strb	r3, [r7, #7]
	pClockInit.PLL.PLLState = RCC_PLL_STATE_ENABLE;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	71bb      	strb	r3, [r7, #6]
	pClockInit.PLL.PLLM = 16;
 8000d9e:	2310      	movs	r3, #16
 8000da0:	723b      	strb	r3, [r7, #8]
	pClockInit.PLL.PLLN = 336;
 8000da2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000da6:	817b      	strh	r3, [r7, #10]
	pClockInit.PLL.PLLP = RCC_PLLP_DIV4;
 8000da8:	2301      	movs	r3, #1
 8000daa:	733b      	strb	r3, [r7, #12]
	pClockInit.PLL.PLLQ = 7;
 8000dac:	2307      	movs	r3, #7
 8000dae:	737b      	strb	r3, [r7, #13]

	RCC_InitClock(&pClockInit);
 8000db0:	463b      	mov	r3, r7
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 fc96 	bl	80016e4 <RCC_InitClock>
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <GPIOConfig>:

//configure GPIO used in the project
void GPIOConfig(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOx;
	GPIOx.PinConfig.PinNumber = GPIO_PIN_5;
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_OUTPUT;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	727b      	strb	r3, [r7, #9]
	GPIOx.PinConfig.OutputType = GPIO_PIN_OT_PP;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	72bb      	strb	r3, [r7, #10]
	GPIOx.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	733b      	strb	r3, [r7, #12]
	GPIOx.pGPIOx = GPIOA;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <GPIOConfig+0x58>)
 8000dd8:	607b      	str	r3, [r7, #4]
	GPIO_InitPin(&GPIOx);
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f8cb 	bl	8000f78 <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_13;
 8000de2:	230d      	movs	r3, #13
 8000de4:	723b      	strb	r3, [r7, #8]
	GPIOx.PinConfig.Mode = GPIO_PIN_MODE_EXTI_FT;
 8000de6:	2304      	movs	r3, #4
 8000de8:	727b      	strb	r3, [r7, #9]
	GPIOx.pGPIOx = GPIOB;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <GPIOConfig+0x5c>)
 8000dec:	607b      	str	r3, [r7, #4]
	GPIO_InitPin(&GPIOx);
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f8c1 	bl	8000f78 <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_14;
 8000df6:	230e      	movs	r3, #14
 8000df8:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f8bb 	bl	8000f78 <GPIO_InitPin>

	GPIOx.PinConfig.PinNumber = GPIO_PIN_15;
 8000e02:	230f      	movs	r3, #15
 8000e04:	723b      	strb	r3, [r7, #8]
	GPIO_InitPin(&GPIOx);
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 f8b5 	bl	8000f78 <GPIO_InitPin>
//	GPIO_InitPin(&GPIOx);
//
//	GPIOx.PinConfig.PinNumber = GPIO_PIN_2;
//	GPIO_InitPin(&GPIOx);
	
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	40020400 	.word	0x40020400

08000e20 <I2C1Config>:

void I2C1Config(I2C_Handle_t *phI2C1)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	

	phI2C1->pI2Cx = I2C1;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <I2C1Config+0x28>)
 8000e2c:	601a      	str	r2, [r3, #0]
	phI2C1->I2CConfig.ABP1FrequencyMHz = 42;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	222a      	movs	r2, #42	; 0x2a
 8000e32:	711a      	strb	r2, [r3, #4]
	phI2C1->I2CConfig.Speed = I2C_SPEED_FAST_DUTY0;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2201      	movs	r2, #1
 8000e38:	715a      	strb	r2, [r3, #5]

	I2C_Init(phI2C1);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 faf4 	bl	8001428 <I2C_Init>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40005400 	.word	0x40005400

08000e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e76:	490e      	ldr	r1, [pc, #56]	; (8000eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e8c:	4c0b      	ldr	r4, [pc, #44]	; (8000ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e9a:	f7ff ffd7 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f000 fd53 	bl	8001948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fef1 	bl	8000c88 <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000eb4:	08001bc8 	.word	0x08001bc8
  ldr r2, =_sbss
 8000eb8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000ebc:	20000430 	.word	0x20000430

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>
	...

08000ec4 <GPIO_ClockEnable>:
 *
 * @param[*GPIO] - base address of gpiox peripheral
 * @return - void
 */
static void GPIO_ClockEnable(GPIO_TypeDef *GPIO)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	if (GPIO == GPIOA)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a23      	ldr	r2, [pc, #140]	; (8000f5c <GPIO_ClockEnable+0x98>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d106      	bne.n	8000ee2 <GPIO_ClockEnable+0x1e>
	{
		RCC_CLOCK_GPIOA_ENABLE();
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <GPIO_ClockEnable+0x9c>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	4a21      	ldr	r2, [pc, #132]	; (8000f60 <GPIO_ClockEnable+0x9c>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6313      	str	r3, [r2, #48]	; 0x30
	else if (GPIO == GPIOH)
	{
		RCC_CLOCK_GPIOH_ENABLE();
	}

}
 8000ee0:	e035      	b.n	8000f4e <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOB)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a1f      	ldr	r2, [pc, #124]	; (8000f64 <GPIO_ClockEnable+0xa0>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d106      	bne.n	8000ef8 <GPIO_ClockEnable+0x34>
		RCC_CLOCK_GPIOB_ENABLE();
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <GPIO_ClockEnable+0x9c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <GPIO_ClockEnable+0x9c>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ef6:	e02a      	b.n	8000f4e <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOC)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a1b      	ldr	r2, [pc, #108]	; (8000f68 <GPIO_ClockEnable+0xa4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d106      	bne.n	8000f0e <GPIO_ClockEnable+0x4a>
		RCC_CLOCK_GPIOC_ENABLE();
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <GPIO_ClockEnable+0x9c>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	4a16      	ldr	r2, [pc, #88]	; (8000f60 <GPIO_ClockEnable+0x9c>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f0c:	e01f      	b.n	8000f4e <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOD)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a16      	ldr	r2, [pc, #88]	; (8000f6c <GPIO_ClockEnable+0xa8>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d106      	bne.n	8000f24 <GPIO_ClockEnable+0x60>
		RCC_CLOCK_GPIOD_ENABLE();
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <GPIO_ClockEnable+0x9c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a11      	ldr	r2, [pc, #68]	; (8000f60 <GPIO_ClockEnable+0x9c>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f22:	e014      	b.n	8000f4e <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <GPIO_ClockEnable+0xac>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d106      	bne.n	8000f3a <GPIO_ClockEnable+0x76>
		RCC_CLOCK_GPIOE_ENABLE();
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <GPIO_ClockEnable+0x9c>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <GPIO_ClockEnable+0x9c>)
 8000f32:	f043 0310 	orr.w	r3, r3, #16
 8000f36:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f38:	e009      	b.n	8000f4e <GPIO_ClockEnable+0x8a>
	else if (GPIO == GPIOH)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <GPIO_ClockEnable+0xb0>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d105      	bne.n	8000f4e <GPIO_ClockEnable+0x8a>
		RCC_CLOCK_GPIOH_ENABLE();
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <GPIO_ClockEnable+0x9c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <GPIO_ClockEnable+0x9c>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020400 	.word	0x40020400
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020c00 	.word	0x40020c00
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40021c00 	.word	0x40021c00

08000f78 <GPIO_InitPin>:
 *
 * @param[*hGPIO] - handler to GPIO structure that contains peripheral base address and pin configuration
 * @return - void
 */
void GPIO_InitPin(GPIO_Handle_t *hGPIO)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

	//enable clock
	GPIO_ClockEnable(hGPIO->pGPIOx);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff9d 	bl	8000ec4 <GPIO_ClockEnable>

	// mode selection
	if (hGPIO->PinConfig.Mode < GPIO_PIN_MODE_EXTI_FT)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	795b      	ldrb	r3, [r3, #5]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d81f      	bhi.n	8000fd2 <GPIO_InitPin+0x5a>
	{
		// non IRQ mode
	hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	791b      	ldrb	r3, [r3, #4]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2103      	movs	r1, #3
 8000fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	400a      	ands	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]
	hGPIO->pGPIOx->MODER |= hGPIO->PinConfig.Mode << (hGPIO->PinConfig.PinNumber * 2);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	795b      	ldrb	r3, [r3, #5]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	791b      	ldrb	r3, [r3, #4]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	e0a9      	b.n	8001126 <GPIO_InitPin+0x1ae>
	else
	{
		//IRQ mode

		//set as input
		hGPIO->pGPIOx->MODER &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	791b      	ldrb	r3, [r3, #4]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2103      	movs	r1, #3
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	400a      	ands	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]
		//interrupt mask
		EXTI->IMR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8000ff0:	4b9e      	ldr	r3, [pc, #632]	; (800126c <GPIO_InitPin+0x2f4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	7912      	ldrb	r2, [r2, #4]
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	408a      	lsls	r2, r1
 8000ffe:	4611      	mov	r1, r2
 8001000:	4a9a      	ldr	r2, [pc, #616]	; (800126c <GPIO_InitPin+0x2f4>)
 8001002:	430b      	orrs	r3, r1
 8001004:	6013      	str	r3, [r2, #0]

		//rising/falling trigger
		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	795b      	ldrb	r3, [r3, #5]
 800100a:	2b04      	cmp	r3, #4
 800100c:	d003      	beq.n	8001016 <GPIO_InitPin+0x9e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	795b      	ldrb	r3, [r3, #5]
 8001012:	2b06      	cmp	r3, #6
 8001014:	d10a      	bne.n	800102c <GPIO_InitPin+0xb4>
		{
			EXTI->FTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 8001016:	4b95      	ldr	r3, [pc, #596]	; (800126c <GPIO_InitPin+0x2f4>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	7912      	ldrb	r2, [r2, #4]
 800101e:	4611      	mov	r1, r2
 8001020:	2201      	movs	r2, #1
 8001022:	408a      	lsls	r2, r1
 8001024:	4611      	mov	r1, r2
 8001026:	4a91      	ldr	r2, [pc, #580]	; (800126c <GPIO_InitPin+0x2f4>)
 8001028:	430b      	orrs	r3, r1
 800102a:	60d3      	str	r3, [r2, #12]
		}

		if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_RT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_EXTI_FTRT))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	795b      	ldrb	r3, [r3, #5]
 8001030:	2b05      	cmp	r3, #5
 8001032:	d003      	beq.n	800103c <GPIO_InitPin+0xc4>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	795b      	ldrb	r3, [r3, #5]
 8001038:	2b06      	cmp	r3, #6
 800103a:	d10a      	bne.n	8001052 <GPIO_InitPin+0xda>
		{
			EXTI->RTSR |= (0b1 << hGPIO->PinConfig.PinNumber);
 800103c:	4b8b      	ldr	r3, [pc, #556]	; (800126c <GPIO_InitPin+0x2f4>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	7912      	ldrb	r2, [r2, #4]
 8001044:	4611      	mov	r1, r2
 8001046:	2201      	movs	r2, #1
 8001048:	408a      	lsls	r2, r1
 800104a:	4611      	mov	r1, r2
 800104c:	4a87      	ldr	r2, [pc, #540]	; (800126c <GPIO_InitPin+0x2f4>)
 800104e:	430b      	orrs	r3, r1
 8001050:	6093      	str	r3, [r2, #8]
		}

		//enable NVIC interrupt
		if (hGPIO->PinConfig.PinNumber < GPIO_PIN_5)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	791b      	ldrb	r3, [r3, #4]
 8001056:	2b04      	cmp	r3, #4
 8001058:	d80c      	bhi.n	8001074 <GPIO_InitPin+0xfc>
		{
			// positions for EXTI interrupts in NVIC vector table are 6-10
			NVIC->ISER[0] |= (0b1 << (hGPIO->PinConfig.PinNumber + 6));
 800105a:	4b85      	ldr	r3, [pc, #532]	; (8001270 <GPIO_InitPin+0x2f8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	7912      	ldrb	r2, [r2, #4]
 8001062:	3206      	adds	r2, #6
 8001064:	2101      	movs	r1, #1
 8001066:	fa01 f202 	lsl.w	r2, r1, r2
 800106a:	4611      	mov	r1, r2
 800106c:	4a80      	ldr	r2, [pc, #512]	; (8001270 <GPIO_InitPin+0x2f8>)
 800106e:	430b      	orrs	r3, r1
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e010      	b.n	8001096 <GPIO_InitPin+0x11e>
		}
		else if (hGPIO->PinConfig.PinNumber < GPIO_PIN_10)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	791b      	ldrb	r3, [r3, #4]
 8001078:	2b09      	cmp	r3, #9
 800107a:	d806      	bhi.n	800108a <GPIO_InitPin+0x112>
		{
			// position for EXTI9_5 is 23
			NVIC->ISER[0] |= (0b1 << 23);
 800107c:	4b7c      	ldr	r3, [pc, #496]	; (8001270 <GPIO_InitPin+0x2f8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a7b      	ldr	r2, [pc, #492]	; (8001270 <GPIO_InitPin+0x2f8>)
 8001082:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	e005      	b.n	8001096 <GPIO_InitPin+0x11e>
		}
		else
		{
			// position for EXTI15_10 is 40
			NVIC->ISER[1] |= (0b1 << 8);
 800108a:	4b79      	ldr	r3, [pc, #484]	; (8001270 <GPIO_InitPin+0x2f8>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4a78      	ldr	r2, [pc, #480]	; (8001270 <GPIO_InitPin+0x2f8>)
 8001090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001094:	6053      	str	r3, [r2, #4]
		}

		// set SYSCFG for external IRQ
		// enable clock
		RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001096:	4b77      	ldr	r3, [pc, #476]	; (8001274 <GPIO_InitPin+0x2fc>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a76      	ldr	r2, [pc, #472]	; (8001274 <GPIO_InitPin+0x2fc>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
		// get 4 bits code for certain port
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(hGPIO->pGPIOx);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a74      	ldr	r2, [pc, #464]	; (8001278 <GPIO_InitPin+0x300>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d024      	beq.n	80010f6 <GPIO_InitPin+0x17e>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a72      	ldr	r2, [pc, #456]	; (800127c <GPIO_InitPin+0x304>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01d      	beq.n	80010f2 <GPIO_InitPin+0x17a>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a71      	ldr	r2, [pc, #452]	; (8001280 <GPIO_InitPin+0x308>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d016      	beq.n	80010ee <GPIO_InitPin+0x176>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a6f      	ldr	r2, [pc, #444]	; (8001284 <GPIO_InitPin+0x30c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00f      	beq.n	80010ea <GPIO_InitPin+0x172>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a6e      	ldr	r2, [pc, #440]	; (8001288 <GPIO_InitPin+0x310>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d008      	beq.n	80010e6 <GPIO_InitPin+0x16e>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a6c      	ldr	r2, [pc, #432]	; (800128c <GPIO_InitPin+0x314>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <GPIO_InitPin+0x16a>
 80010de:	2307      	movs	r3, #7
 80010e0:	e00a      	b.n	80010f8 <GPIO_InitPin+0x180>
 80010e2:	2300      	movs	r3, #0
 80010e4:	e008      	b.n	80010f8 <GPIO_InitPin+0x180>
 80010e6:	2304      	movs	r3, #4
 80010e8:	e006      	b.n	80010f8 <GPIO_InitPin+0x180>
 80010ea:	2303      	movs	r3, #3
 80010ec:	e004      	b.n	80010f8 <GPIO_InitPin+0x180>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e002      	b.n	80010f8 <GPIO_InitPin+0x180>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <GPIO_InitPin+0x180>
 80010f6:	2300      	movs	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]
		// put it in syscfg register
		SYSCFG->EXTICR[hGPIO->PinConfig.PinNumber / 4] |= (portcode << ((hGPIO->PinConfig.PinNumber % 4) * 4));
 80010fa:	4a65      	ldr	r2, [pc, #404]	; (8001290 <GPIO_InitPin+0x318>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	791b      	ldrb	r3, [r3, #4]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	b2d8      	uxtb	r0, r3
 8001104:	4603      	mov	r3, r0
 8001106:	3302      	adds	r3, #2
 8001108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110c:	7bf9      	ldrb	r1, [r7, #15]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	7912      	ldrb	r2, [r2, #4]
 8001112:	f002 0203 	and.w	r2, r2, #3
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	fa01 f202 	lsl.w	r2, r1, r2
 800111c:	495c      	ldr	r1, [pc, #368]	; (8001290 <GPIO_InitPin+0x318>)
 800111e:	431a      	orrs	r2, r3
 8001120:	1c83      	adds	r3, r0, #2
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	// set speed and output type for mode output or AF
	if ((hGPIO->PinConfig.Mode == GPIO_PIN_MODE_OUTPUT) || (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	795b      	ldrb	r3, [r3, #5]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d003      	beq.n	8001136 <GPIO_InitPin+0x1be>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	795b      	ldrb	r3, [r3, #5]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d13b      	bne.n	80011ae <GPIO_InitPin+0x236>
	{
		//speed selection
		hGPIO->pGPIOx->OSPEEDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	791b      	ldrb	r3, [r3, #4]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2103      	movs	r1, #3
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	4619      	mov	r1, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	400a      	ands	r2, r1
 8001152:	609a      	str	r2, [r3, #8]
		hGPIO->pGPIOx->OSPEEDR |= hGPIO->PinConfig.OutputSpeed << (hGPIO->PinConfig.PinNumber * 2);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	79db      	ldrb	r3, [r3, #7]
 800115e:	4619      	mov	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	791b      	ldrb	r3, [r3, #4]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	4619      	mov	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	609a      	str	r2, [r3, #8]

		//output type selection
		hGPIO->pGPIOx->OTYPER &= ~(0b1 << (hGPIO->PinConfig.PinNumber));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	791b      	ldrb	r3, [r3, #4]
 800117e:	4619      	mov	r1, r3
 8001180:	2301      	movs	r3, #1
 8001182:	408b      	lsls	r3, r1
 8001184:	43db      	mvns	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	400a      	ands	r2, r1
 800118e:	605a      	str	r2, [r3, #4]
		hGPIO->pGPIOx->OTYPER |= hGPIO->PinConfig.OutputType << (hGPIO->PinConfig.PinNumber);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	799b      	ldrb	r3, [r3, #6]
 800119a:	4619      	mov	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	791b      	ldrb	r3, [r3, #4]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	4619      	mov	r1, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	430a      	orrs	r2, r1
 80011ac:	605a      	str	r2, [r3, #4]
	}

	// set alternate function bits
	if (hGPIO->PinConfig.Mode == GPIO_PIN_MODE_AF)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	795b      	ldrb	r3, [r3, #5]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d137      	bne.n	8001226 <GPIO_InitPin+0x2ae>
	{
		// clear 4 AF bits and set new value
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] &= ~(15UL << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	7912      	ldrb	r2, [r2, #4]
 80011be:	08d2      	lsrs	r2, r2, #3
 80011c0:	b2d0      	uxtb	r0, r2
 80011c2:	4602      	mov	r2, r0
 80011c4:	3208      	adds	r2, #8
 80011c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	791b      	ldrb	r3, [r3, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	220f      	movs	r2, #15
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4011      	ands	r1, r2
 80011e2:	f100 0208 	add.w	r2, r0, #8
 80011e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hGPIO->pGPIOx->AFR[(hGPIO->PinConfig.PinNumber) / 8] |= (hGPIO->PinConfig.AF << ((hGPIO->PinConfig.PinNumber % 8) * 4));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	7912      	ldrb	r2, [r2, #4]
 80011f2:	08d2      	lsrs	r2, r2, #3
 80011f4:	b2d1      	uxtb	r1, r2
 80011f6:	460a      	mov	r2, r1
 80011f8:	3208      	adds	r2, #8
 80011fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7a5b      	ldrb	r3, [r3, #9]
 8001202:	4618      	mov	r0, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	791b      	ldrb	r3, [r3, #4]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	fa00 f303 	lsl.w	r3, r0, r3
 8001212:	461c      	mov	r4, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4608      	mov	r0, r1
 800121a:	ea42 0104 	orr.w	r1, r2, r4
 800121e:	f100 0208 	add.w	r2, r0, #8
 8001222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	// pull ups pull downs
	hGPIO->pGPIOx->PUPDR &= ~(0b11 << (hGPIO->PinConfig.PinNumber * 2));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	791b      	ldrb	r3, [r3, #4]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2103      	movs	r1, #3
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	4619      	mov	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	400a      	ands	r2, r1
 8001242:	60da      	str	r2, [r3, #12]
	hGPIO->pGPIOx->PUPDR |= (hGPIO->PinConfig.PullUpPullDown << (hGPIO->PinConfig.PinNumber * 2));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7a1b      	ldrb	r3, [r3, #8]
 800124e:	4619      	mov	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	791b      	ldrb	r3, [r3, #4]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	4619      	mov	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	60da      	str	r2, [r3, #12]

}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	bd90      	pop	{r4, r7, pc}
 800126c:	40013c00 	.word	0x40013c00
 8001270:	e000e100 	.word	0xe000e100
 8001274:	40023800 	.word	0x40023800
 8001278:	40020000 	.word	0x40020000
 800127c:	40020400 	.word	0x40020400
 8001280:	40020800 	.word	0x40020800
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40021000 	.word	0x40021000
 800128c:	40021c00 	.word	0x40021c00
 8001290:	40013800 	.word	0x40013800

08001294 <GPIO_ClearPendingEXTIFlag>:
 *
 * @param[PinNumber] - GPIO_PIN_x @PinNumber
 * @return - void
 */
void GPIO_ClearPendingEXTIFlag(uint8_t PinNumber)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= (0b1 << PinNumber);
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <GPIO_ClearPendingEXTIFlag+0x2c>)
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	79fa      	ldrb	r2, [r7, #7]
 80012a4:	2101      	movs	r1, #1
 80012a6:	fa01 f202 	lsl.w	r2, r1, r2
 80012aa:	4611      	mov	r1, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <GPIO_ClearPendingEXTIFlag+0x2c>)
 80012ae:	430b      	orrs	r3, r1
 80012b0:	6153      	str	r3, [r2, #20]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40013c00 	.word	0x40013c00

080012c4 <I2C_ClockEnable>:
 *
 * @param[*pI2Cx] - base address of i2c peripheral
 * @return - void
 */
static void I2C_ClockEnable(I2C_TypeDef *pI2Cx)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	if (pI2Cx == I2C1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <I2C_ClockEnable+0x54>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d106      	bne.n	80012e2 <I2C_ClockEnable+0x1e>
	{
		RCC_CLOCK_I2C1_ENABLE();
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <I2C_ClockEnable+0x58>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	4a10      	ldr	r2, [pc, #64]	; (800131c <I2C_ClockEnable+0x58>)
 80012da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012de:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else if (pI2Cx == I2C3)
	{
		RCC_CLOCK_I2C3_ENABLE();
	}
}
 80012e0:	e014      	b.n	800130c <I2C_ClockEnable+0x48>
	else if (pI2Cx == I2C2)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <I2C_ClockEnable+0x5c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d106      	bne.n	80012f8 <I2C_ClockEnable+0x34>
		RCC_CLOCK_I2C2_ENABLE();
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <I2C_ClockEnable+0x58>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <I2C_ClockEnable+0x58>)
 80012f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012f6:	e009      	b.n	800130c <I2C_ClockEnable+0x48>
	else if (pI2Cx == I2C3)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <I2C_ClockEnable+0x60>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d105      	bne.n	800130c <I2C_ClockEnable+0x48>
		RCC_CLOCK_I2C3_ENABLE();
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <I2C_ClockEnable+0x58>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	4a05      	ldr	r2, [pc, #20]	; (800131c <I2C_ClockEnable+0x58>)
 8001306:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40005400 	.word	0x40005400
 800131c:	40023800 	.word	0x40023800
 8001320:	40005800 	.word	0x40005800
 8001324:	40005c00 	.word	0x40005c00

08001328 <I2C_InitGPIOPins>:

static void I2C_InitGPIOPins(I2C_TypeDef *pI2Cx, uint8_t AlternatePosition)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
	GPIO_Handle_t GPIO_SDA, GPIO_SCL;

	if (pI2Cx == I2C1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a35      	ldr	r2, [pc, #212]	; (800140c <I2C_InitGPIOPins+0xe4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d112      	bne.n	8001362 <I2C_InitGPIOPins+0x3a>
	{
		// PB6 SCL
		GPIO_SCL.pGPIOx = GPIOB;
 800133c:	4b34      	ldr	r3, [pc, #208]	; (8001410 <I2C_InitGPIOPins+0xe8>)
 800133e:	60bb      	str	r3, [r7, #8]
		GPIO_SCL.PinConfig.PinNumber = GPIO_PIN_6;
 8001340:	2306      	movs	r3, #6
 8001342:	733b      	strb	r3, [r7, #12]

		// PB7 SDA
		GPIO_SDA.pGPIOx = GPIOB;
 8001344:	4b32      	ldr	r3, [pc, #200]	; (8001410 <I2C_InitGPIOPins+0xe8>)
 8001346:	617b      	str	r3, [r7, #20]
		GPIO_SDA.PinConfig.PinNumber = GPIO_PIN_7;
 8001348:	2307      	movs	r3, #7
 800134a:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		GPIO_SCL.PinConfig.AF = GPIO_PIN_AF_AF4;
 800134c:	2304      	movs	r3, #4
 800134e:	747b      	strb	r3, [r7, #17]
		GPIO_SDA.PinConfig.AF = GPIO_PIN_AF_AF4;
 8001350:	2304      	movs	r3, #4
 8001352:	777b      	strb	r3, [r7, #29]

		if (AlternatePosition == 1)
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d103      	bne.n	8001362 <I2C_InitGPIOPins+0x3a>
		{
			// PB8 SCL
			GPIO_SCL.PinConfig.PinNumber = GPIO_PIN_8;
 800135a:	2308      	movs	r3, #8
 800135c:	733b      	strb	r3, [r7, #12]
			// PB9 SDA
			GPIO_SDA.PinConfig.PinNumber = GPIO_PIN_9;
 800135e:	2309      	movs	r3, #9
 8001360:	763b      	strb	r3, [r7, #24]
		}


	}

	if (pI2Cx == I2C2)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a2b      	ldr	r2, [pc, #172]	; (8001414 <I2C_InitGPIOPins+0xec>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d112      	bne.n	8001390 <I2C_InitGPIOPins+0x68>
	{

		// PB10 SCL
		GPIO_SCL.pGPIOx = GPIOB;
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <I2C_InitGPIOPins+0xe8>)
 800136c:	60bb      	str	r3, [r7, #8]
		GPIO_SCL.PinConfig.PinNumber = GPIO_PIN_10;
 800136e:	230a      	movs	r3, #10
 8001370:	733b      	strb	r3, [r7, #12]

		// PB11 SDA
		GPIO_SDA.pGPIOx = GPIOB;
 8001372:	4b27      	ldr	r3, [pc, #156]	; (8001410 <I2C_InitGPIOPins+0xe8>)
 8001374:	617b      	str	r3, [r7, #20]
		GPIO_SDA.PinConfig.PinNumber = GPIO_PIN_11;
 8001376:	230b      	movs	r3, #11
 8001378:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		GPIO_SCL.PinConfig.AF = GPIO_PIN_AF_AF4;
 800137a:	2304      	movs	r3, #4
 800137c:	747b      	strb	r3, [r7, #17]
		GPIO_SDA.PinConfig.AF = GPIO_PIN_AF_AF4;
 800137e:	2304      	movs	r3, #4
 8001380:	777b      	strb	r3, [r7, #29]


		if (AlternatePosition == 1)
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d103      	bne.n	8001390 <I2C_InitGPIOPins+0x68>
		{
			// PB3 SDA
			GPIO_SDA.PinConfig.PinNumber = GPIO_PIN_3;
 8001388:	2303      	movs	r3, #3
 800138a:	763b      	strb	r3, [r7, #24]
			GPIO_SDA.PinConfig.AF = GPIO_PIN_AF_AF9;
 800138c:	2309      	movs	r3, #9
 800138e:	777b      	strb	r3, [r7, #29]
		}


	}

	if (pI2Cx == I2C3)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a21      	ldr	r2, [pc, #132]	; (8001418 <I2C_InitGPIOPins+0xf0>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d11a      	bne.n	80013ce <I2C_InitGPIOPins+0xa6>
	{

		// PA8 SCL
		GPIO_SCL.pGPIOx = GPIOA;
 8001398:	4b20      	ldr	r3, [pc, #128]	; (800141c <I2C_InitGPIOPins+0xf4>)
 800139a:	60bb      	str	r3, [r7, #8]
		GPIO_SCL.PinConfig.PinNumber = GPIO_PIN_8;
 800139c:	2308      	movs	r3, #8
 800139e:	733b      	strb	r3, [r7, #12]

		// PB9 SDA
		GPIO_SDA.pGPIOx = GPIOB;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <I2C_InitGPIOPins+0xe8>)
 80013a2:	617b      	str	r3, [r7, #20]
		GPIO_SDA.PinConfig.PinNumber = GPIO_PIN_4;
 80013a4:	2304      	movs	r3, #4
 80013a6:	763b      	strb	r3, [r7, #24]

		// Alternate Function
		GPIO_SCL.PinConfig.AF = GPIO_PIN_AF_AF4;
 80013a8:	2304      	movs	r3, #4
 80013aa:	747b      	strb	r3, [r7, #17]
		GPIO_SDA.PinConfig.AF = GPIO_PIN_AF_AF4;
 80013ac:	2304      	movs	r3, #4
 80013ae:	777b      	strb	r3, [r7, #29]

		if (AlternatePosition == 1)
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d10b      	bne.n	80013ce <I2C_InitGPIOPins+0xa6>
		{
			RCC_CLOCK_GPIOC_ENABLE();
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <I2C_InitGPIOPins+0xf8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a19      	ldr	r2, [pc, #100]	; (8001420 <I2C_InitGPIOPins+0xf8>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
			// PC9 SDA
			GPIO_SDA.pGPIOx = GPIOC;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <I2C_InitGPIOPins+0xfc>)
 80013c4:	617b      	str	r3, [r7, #20]
			GPIO_SDA.PinConfig.PinNumber = GPIO_PIN_9;
 80013c6:	2309      	movs	r3, #9
 80013c8:	763b      	strb	r3, [r7, #24]

			// Alternate Function
			GPIO_SDA.PinConfig.AF = GPIO_PIN_AF_AF9;
 80013ca:	2309      	movs	r3, #9
 80013cc:	777b      	strb	r3, [r7, #29]
		}

	}

	// Mode AF
	GPIO_SCL.PinConfig.Mode = GPIO_PIN_MODE_AF;
 80013ce:	2302      	movs	r3, #2
 80013d0:	737b      	strb	r3, [r7, #13]
	GPIO_SDA.PinConfig.Mode = GPIO_PIN_MODE_AF;
 80013d2:	2302      	movs	r3, #2
 80013d4:	767b      	strb	r3, [r7, #25]

	// Output type open drain
	GPIO_SCL.PinConfig.OutputType = GPIO_PIN_OT_OD;
 80013d6:	2301      	movs	r3, #1
 80013d8:	73bb      	strb	r3, [r7, #14]
	GPIO_SDA.PinConfig.OutputType = GPIO_PIN_OT_OD;
 80013da:	2301      	movs	r3, #1
 80013dc:	76bb      	strb	r3, [r7, #26]

	// Output speed very high
	GPIO_SCL.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	73fb      	strb	r3, [r7, #15]
	GPIO_SDA.PinConfig.OutputSpeed = GPIO_PIN_SPEED_VERYHIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	76fb      	strb	r3, [r7, #27]

	// Pull ups
	GPIO_SCL.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	743b      	strb	r3, [r7, #16]
	GPIO_SDA.PinConfig.PullUpPullDown = GPIO_PIN_PUPD_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	773b      	strb	r3, [r7, #28]

	GPIO_InitPin(&GPIO_SDA);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fdc0 	bl	8000f78 <GPIO_InitPin>
	GPIO_InitPin(&GPIO_SCL);
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fdbb 	bl	8000f78 <GPIO_InitPin>

}
 8001402:	bf00      	nop
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40005400 	.word	0x40005400
 8001410:	40020400 	.word	0x40020400
 8001414:	40005800 	.word	0x40005800
 8001418:	40005c00 	.word	0x40005c00
 800141c:	40020000 	.word	0x40020000
 8001420:	40023800 	.word	0x40023800
 8001424:	40020800 	.word	0x40020800

08001428 <I2C_Init>:
 *
 * @param[*phI2C] - handler to i2c structure
 * @return - void
 */
uint8_t I2C_Init(I2C_Handle_t *phI2C)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	// enable peripheral clock
	I2C_ClockEnable(phI2C->pI2Cx);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff45 	bl	80012c4 <I2C_ClockEnable>

	// init GPIO pins
	I2C_InitGPIOPins(phI2C->pI2Cx, 0);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff71 	bl	8001328 <I2C_InitGPIOPins>

	//reset I2C
	phI2C->pI2Cx->CR1 |= I2C_CR1_SWRST;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001454:	601a      	str	r2, [r3, #0]
	phI2C->pI2Cx->CR1 &= ~(I2C_CR1_SWRST);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001464:	601a      	str	r2, [r3, #0]

	// check frequency limits
	if (phI2C->I2CConfig.ABP1FrequencyMHz < I2C_FREQUENCY_MINIMUM || phI2C->I2CConfig.ABP1FrequencyMHz > I2C_FREQUENCY_MAXIMUM)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	791b      	ldrb	r3, [r3, #4]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d903      	bls.n	8001476 <I2C_Init+0x4e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	791b      	ldrb	r3, [r3, #4]
 8001472:	2b32      	cmp	r3, #50	; 0x32
 8001474:	d901      	bls.n	800147a <I2C_Init+0x52>
	{
		return I2C_ERROR_WRONG_FREQUENCY;
 8001476:	2301      	movs	r3, #1
 8001478:	e0af      	b.n	80015da <I2C_Init+0x1b2>
	}

	// set frequency (same as ABP1 frequency)
	phI2C->pI2Cx->CR2 &= ~(I2C_CR2_FREQ);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001488:	605a      	str	r2, [r3, #4]
	phI2C->pI2Cx->CR2 |= (phI2C->I2CConfig.ABP1FrequencyMHz << I2C_CR2_FREQ_Pos);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	791b      	ldrb	r3, [r3, #4]
 8001494:	4619      	mov	r1, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	605a      	str	r2, [r3, #4]

	// set speed
	uint16_t _tempCCR, _tempTRISE;
	// set slow mode, reset DUTY
	phI2C->pI2Cx->CCR &= ~(I2C_CCR_FS);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	69da      	ldr	r2, [r3, #28]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014ac:	61da      	str	r2, [r3, #28]
	phI2C->pI2Cx->CCR &= ~(I2C_CCR_DUTY);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	69da      	ldr	r2, [r3, #28]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014bc:	61da      	str	r2, [r3, #28]


	// CCR calculation for slow mode -> values are coming from RM CCR register and result is in [ns]
	// (Thigh + Tlow) / (CEOFF * PCLK)
	_tempCCR = (I2C_CCR_SM_THIGH + I2C_CCR_SM_TLOW) / (I2C_CCR_SM_COEFF * (1000 / phI2C->I2CConfig.ABP1FrequencyMHz));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	791b      	ldrb	r3, [r3, #4]
 80014c2:	461a      	mov	r2, r3
 80014c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	81fb      	strh	r3, [r7, #14]

	// TRISE calculation for slow mode -> equation is from RM
	_tempTRISE = ((I2C_CCR_SM_TR_SCL * phI2C->I2CConfig.ABP1FrequencyMHz) / 1000) + 1;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	791b      	ldrb	r3, [r3, #4]
 80014dc:	461a      	mov	r2, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e2:	fb03 f302 	mul.w	r3, r3, r2
 80014e6:	4a3f      	ldr	r2, [pc, #252]	; (80015e4 <I2C_Init+0x1bc>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	099b      	lsrs	r3, r3, #6
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	3301      	adds	r3, #1
 80014f2:	81bb      	strh	r3, [r7, #12]

	// fast mode
	if (phI2C->I2CConfig.Speed != I2C_SPEED_SLOW)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	795b      	ldrb	r3, [r3, #5]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d043      	beq.n	8001584 <I2C_Init+0x15c>
	{
		// set fast mode
		phI2C->pI2Cx->CCR |= I2C_CCR_FS;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	69da      	ldr	r2, [r3, #28]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800150a:	61da      	str	r2, [r3, #28]
		// calculate CCR for fast mode with DUTY 0
		_tempCCR = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW) / (I2C_CCR_FM_COEFF_DUTY0 * (1000 / phI2C->I2CConfig.ABP1FrequencyMHz));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	791b      	ldrb	r3, [r3, #4]
 8001510:	461a      	mov	r2, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	fb93 f3f2 	sdiv	r3, r3, r2
 800151a:	461a      	mov	r2, r3
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	81fb      	strh	r3, [r7, #14]
		// calculate TRISE for fast mode
		_tempTRISE = ((I2C_CCR_FM_TR_SCL * phI2C->I2CConfig.ABP1FrequencyMHz) / 1000) + 1;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	791b      	ldrb	r3, [r3, #4]
 8001530:	461a      	mov	r2, r3
 8001532:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001536:	fb03 f302 	mul.w	r3, r3, r2
 800153a:	4a2a      	ldr	r2, [pc, #168]	; (80015e4 <I2C_Init+0x1bc>)
 800153c:	fba2 2303 	umull	r2, r3, r2, r3
 8001540:	099b      	lsrs	r3, r3, #6
 8001542:	b29b      	uxth	r3, r3
 8001544:	3301      	adds	r3, #1
 8001546:	81bb      	strh	r3, [r7, #12]
		if (phI2C->I2CConfig.Speed == I2C_SPEED_FAST_DUTY1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	795b      	ldrb	r3, [r3, #5]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d119      	bne.n	8001584 <I2C_Init+0x15c>
		{
			// set DUTY flag
			phI2C->pI2Cx->CCR |= I2C_CCR_DUTY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	69da      	ldr	r2, [r3, #28]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800155e:	61da      	str	r2, [r3, #28]
			// calculate CCR with fast mode DUTY1
			_tempCCR = (I2C_CCR_FM_THIGH + I2C_CCR_FM_TLOW) / (I2C_CCR_FM_COEFF_DUTY1 * (1000 / phI2C->I2CConfig.ABP1FrequencyMHz));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	791b      	ldrb	r3, [r3, #4]
 8001564:	461a      	mov	r2, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	fb93 f3f2 	sdiv	r3, r3, r2
 800156e:	461a      	mov	r2, r3
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	009a      	lsls	r2, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	81fb      	strh	r3, [r7, #14]
		}
	}
	phI2C->pI2Cx->CCR &= ~(I2C_CCR_CCR);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001592:	f023 030f 	bic.w	r3, r3, #15
 8001596:	61d3      	str	r3, [r2, #28]
	phI2C->pI2Cx->CCR |= (_tempCCR << I2C_CCR_CCR_Pos);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	69d9      	ldr	r1, [r3, #28]
 800159e:	89fa      	ldrh	r2, [r7, #14]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	61da      	str	r2, [r3, #28]

	// write correct TRISE to the register
	phI2C->pI2Cx->TRISE &= ~(I2C_TRISE_TRISE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6a1a      	ldr	r2, [r3, #32]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80015b6:	621a      	str	r2, [r3, #32]
	phI2C->pI2Cx->TRISE |= (_tempTRISE << I2C_TRISE_TRISE_Pos);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6a19      	ldr	r1, [r3, #32]
 80015be:	89ba      	ldrh	r2, [r7, #12]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	621a      	str	r2, [r3, #32]


	// enable I2c
	phI2C->pI2Cx->CR1 |= I2C_CR1_PE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

	return 0;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	10624dd3 	.word	0x10624dd3

080015e8 <I2C_Transmit>:

uint8_t I2C_Transmit(I2C_Handle_t *phI2C, uint8_t SlaveAddres, uint8_t MemAddress, uint8_t *pDataBuffer,uint32_t DataSize)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	72fb      	strb	r3, [r7, #11]
 80015f6:	4613      	mov	r3, r2
 80015f8:	72bb      	strb	r3, [r7, #10]
	uint8_t _temp8reg;
	uint32_t _txDataToSend = DataSize;
 80015fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fc:	61fb      	str	r3, [r7, #28]
	uint32_t _txDataIndex = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
//1.0 Set START BIT
	phI2C->pI2Cx->CR1 |= I2C_CR1_ACK;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001610:	601a      	str	r2, [r3, #0]
	phI2C->pI2Cx->CR1 |= I2C_CR1_START;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001620:	601a      	str	r2, [r3, #0]

//1.1 Wait until SB flag is set
	while (!(I2C_SR1_SB & phI2C->pI2Cx->SR1))
 8001622:	bf00      	nop
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f8      	beq.n	8001624 <I2C_Transmit+0x3c>
		;
//1.2 Clear SB by reading SR1
	_temp8reg = phI2C->pI2Cx->SR1;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	75fb      	strb	r3, [r7, #23]
//2. Put slave address in DR register - If transmitting set slave addres LSB to 0, reciever 1
	phI2C->pI2Cx->DR = (SlaveAddres << 1);
 800163a:	7afb      	ldrb	r3, [r7, #11]
 800163c:	005a      	lsls	r2, r3, #1
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	611a      	str	r2, [r3, #16]
//3. ADDR bit set by hardware

	// wait until ADDR is set
	while (!(I2C_SR1_ADDR & phI2C->pI2Cx->SR1))
 8001644:	bf00      	nop
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f8      	beq.n	8001646 <I2C_Transmit+0x5e>
		;
//4. ADDR is cleared by reading SR1 , Read SR2
	_temp8reg = phI2C->pI2Cx->SR1;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	75fb      	strb	r3, [r7, #23]
	_temp8reg = phI2C->pI2Cx->SR2;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	75fb      	strb	r3, [r7, #23]
//5. TxE bit is set when acknowledge bit is sent
	while (!(phI2C->pI2Cx->SR1 & I2C_SR1_TXE))
 8001664:	bf00      	nop
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f8      	beq.n	8001666 <I2C_Transmit+0x7e>
		;
//6. Write memory address to DR to clear TxE
	phI2C->pI2Cx->DR = MemAddress;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	7aba      	ldrb	r2, [r7, #10]
 800167a:	611a      	str	r2, [r3, #16]

//7. Data transfer
	while(_txDataToSend > 0)
 800167c:	e027      	b.n	80016ce <I2C_Transmit+0xe6>
	{
		// wait until data register is empty
		while (!(phI2C->pI2Cx->SR1 & I2C_SR1_TXE))
 800167e:	bf00      	nop
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f8      	beq.n	8001680 <I2C_Transmit+0x98>
			;

		// put data in data register
		phI2C->pI2Cx->DR = pDataBuffer[_txDataIndex];
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	4413      	add	r3, r2
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	611a      	str	r2, [r3, #16]

		//change counters
		_txDataToSend--;
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	3b01      	subs	r3, #1
 80016a0:	61fb      	str	r3, [r7, #28]
		_txDataIndex++;
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	3301      	adds	r3, #1
 80016a6:	61bb      	str	r3, [r7, #24]


//8. After last bit is written to DR register , Set STOP bit  and interface is going back to slave mode
		if(_txDataToSend == 0)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10f      	bne.n	80016ce <I2C_Transmit+0xe6>
		{
			// check if data transfer is finsihed
			while (!(phI2C->pI2Cx->SR1 & I2C_SR1_BTF))
 80016ae:	bf00      	nop
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f8      	beq.n	80016b0 <I2C_Transmit+0xc8>
				;
			// stop transfer
			phI2C->pI2Cx->CR1 |= I2C_CR1_STOP;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016cc:	601a      	str	r2, [r3, #0]
	while(_txDataToSend > 0)
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1d4      	bne.n	800167e <I2C_Transmit+0x96>
		}

	}


	return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <RCC_InitClock>:
 * 7. Select system clock
 * @param[*GPIO] - base address of gpiox peripheral
 * @return - void
 */
uint8_t RCC_InitClock(RCC_ClockInitTypeDef *pClockInit)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

/* 1. Enable HSI/HSE as main source RCC->CR */

	//enable HSI/HSE
	if (pClockInit->OscillatorType == RCC_OSCILLATORTYPE_HSI)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10d      	bne.n	8001710 <RCC_InitClock+0x2c>
	{
		// set HSI flag
		RCC->CR |= RCC_CR_HSION;
 80016f4:	4b91      	ldr	r3, [pc, #580]	; (800193c <RCC_InitClock+0x258>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a90      	ldr	r2, [pc, #576]	; (800193c <RCC_InitClock+0x258>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6013      	str	r3, [r2, #0]
		// wait until HSI is on
		while (!(RCC->CR & RCC_CR_HSIRDY))
 8001700:	bf00      	nop
 8001702:	4b8e      	ldr	r3, [pc, #568]	; (800193c <RCC_InitClock+0x258>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f9      	beq.n	8001702 <RCC_InitClock+0x1e>
 800170e:	e010      	b.n	8001732 <RCC_InitClock+0x4e>
			;
	}
	else if (pClockInit->OscillatorType == RCC_OSCILLATORTYPE_HSE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d10c      	bne.n	8001732 <RCC_InitClock+0x4e>
	{
		// set HSE flag
		RCC->CR |= RCC_CR_HSEON;
 8001718:	4b88      	ldr	r3, [pc, #544]	; (800193c <RCC_InitClock+0x258>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a87      	ldr	r2, [pc, #540]	; (800193c <RCC_InitClock+0x258>)
 800171e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]
		// wait until HSE is on
		while (!(RCC->CR & RCC_CR_HSERDY))
 8001724:	bf00      	nop
 8001726:	4b85      	ldr	r3, [pc, #532]	; (800193c <RCC_InitClock+0x258>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f9      	beq.n	8001726 <RCC_InitClock+0x42>
			;
	}

/* 2. Set regulator scaling PWR->VOS if necessary before PLL is ON */
	PWR->CR &= ~(PWR_CR_VOS);
 8001732:	4b83      	ldr	r3, [pc, #524]	; (8001940 <RCC_InitClock+0x25c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a82      	ldr	r2, [pc, #520]	; (8001940 <RCC_InitClock+0x25c>)
 8001738:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800173c:	6013      	str	r3, [r2, #0]
	PWR->CR |= (pClockInit->VOSScale << PWR_CR_VOS_Pos);
 800173e:	4b80      	ldr	r3, [pc, #512]	; (8001940 <RCC_InitClock+0x25c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	7852      	ldrb	r2, [r2, #1]
 8001746:	0392      	lsls	r2, r2, #14
 8001748:	4611      	mov	r1, r2
 800174a:	4a7d      	ldr	r2, [pc, #500]	; (8001940 <RCC_InitClock+0x25c>)
 800174c:	430b      	orrs	r3, r1
 800174e:	6013      	str	r3, [r2, #0]

/* 3. Configure Flash and Latency settings */
	// enable data, instruction and prefetch cache
	FLASH->ACR |= (FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN);
 8001750:	4b7c      	ldr	r3, [pc, #496]	; (8001944 <RCC_InitClock+0x260>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a7b      	ldr	r2, [pc, #492]	; (8001944 <RCC_InitClock+0x260>)
 8001756:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800175a:	6013      	str	r3, [r2, #0]
	// to read correct from flash at certain voltage and frequency latency between read has to be set correctly
	// this table can be found in reference manual
	FLASH->ACR &= ~(FLASH_ACR_LATENCY);
 800175c:	4b79      	ldr	r3, [pc, #484]	; (8001944 <RCC_InitClock+0x260>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a78      	ldr	r2, [pc, #480]	; (8001944 <RCC_InitClock+0x260>)
 8001762:	f023 0307 	bic.w	r3, r3, #7
 8001766:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (pClockInit->FLASHLatency << FLASH_ACR_LATENCY_Pos);
 8001768:	4b76      	ldr	r3, [pc, #472]	; (8001944 <RCC_InitClock+0x260>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	7892      	ldrb	r2, [r2, #2]
 8001770:	4611      	mov	r1, r2
 8001772:	4a74      	ldr	r2, [pc, #464]	; (8001944 <RCC_InitClock+0x260>)
 8001774:	430b      	orrs	r3, r1
 8001776:	6013      	str	r3, [r2, #0]

/* 4. Configure HCLK, PCLK1, PCLK2 */
	// configure AHB prescaler
	RCC->CFGR &= ~(RCC_CFGR_HPRE);
 8001778:	4b70      	ldr	r3, [pc, #448]	; (800193c <RCC_InitClock+0x258>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a6f      	ldr	r2, [pc, #444]	; (800193c <RCC_InitClock+0x258>)
 800177e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001782:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (pClockInit->HPREPrescaler << RCC_CFGR_HPRE_Pos);
 8001784:	4b6d      	ldr	r3, [pc, #436]	; (800193c <RCC_InitClock+0x258>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	78d2      	ldrb	r2, [r2, #3]
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	4611      	mov	r1, r2
 8001790:	4a6a      	ldr	r2, [pc, #424]	; (800193c <RCC_InitClock+0x258>)
 8001792:	430b      	orrs	r3, r1
 8001794:	6093      	str	r3, [r2, #8]

	// configure APB1 prescaler
	RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 8001796:	4b69      	ldr	r3, [pc, #420]	; (800193c <RCC_InitClock+0x258>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	4a68      	ldr	r2, [pc, #416]	; (800193c <RCC_InitClock+0x258>)
 800179c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80017a0:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (pClockInit->APB1Prescaler << RCC_CFGR_PPRE1_Pos);
 80017a2:	4b66      	ldr	r3, [pc, #408]	; (800193c <RCC_InitClock+0x258>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	7912      	ldrb	r2, [r2, #4]
 80017aa:	0292      	lsls	r2, r2, #10
 80017ac:	4611      	mov	r1, r2
 80017ae:	4a63      	ldr	r2, [pc, #396]	; (800193c <RCC_InitClock+0x258>)
 80017b0:	430b      	orrs	r3, r1
 80017b2:	6093      	str	r3, [r2, #8]

	// configure APB2 prescaler
	RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 80017b4:	4b61      	ldr	r3, [pc, #388]	; (800193c <RCC_InitClock+0x258>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	4a60      	ldr	r2, [pc, #384]	; (800193c <RCC_InitClock+0x258>)
 80017ba:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80017be:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (pClockInit->APB2Prescaler << RCC_CFGR_PPRE2_Pos);
 80017c0:	4b5e      	ldr	r3, [pc, #376]	; (800193c <RCC_InitClock+0x258>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	7952      	ldrb	r2, [r2, #5]
 80017c8:	0352      	lsls	r2, r2, #13
 80017ca:	4611      	mov	r1, r2
 80017cc:	4a5b      	ldr	r2, [pc, #364]	; (800193c <RCC_InitClock+0x258>)
 80017ce:	430b      	orrs	r3, r1
 80017d0:	6093      	str	r3, [r2, #8]
/* 5. Configure PLL */

			// PLL - phase-locked loop - clock generation engine in the MCU

			// if PLL is enable
			if (pClockInit->PLL.PLLState == RCC_PLL_STATE_ENABLE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	f040 8088 	bne.w	80018ee <RCC_InitClock+0x20a>
			{
				// init PLL source
				RCC->PLLCFGR |= (pClockInit->PLL.PLLSource << RCC_PLLCFGR_PLLSRC_Pos);
 80017de:	4b57      	ldr	r3, [pc, #348]	; (800193c <RCC_InitClock+0x258>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	79d2      	ldrb	r2, [r2, #7]
 80017e6:	0592      	lsls	r2, r2, #22
 80017e8:	4611      	mov	r1, r2
 80017ea:	4a54      	ldr	r2, [pc, #336]	; (800193c <RCC_InitClock+0x258>)
 80017ec:	430b      	orrs	r3, r1
 80017ee:	6053      	str	r3, [r2, #4]

				// PLLM - division factor for the main PLL
				// It is recommended to put source frequency in range of 1 - 2Mhz (2Mhz recommended)
				// Frequency after this division operation is input of VCO (voltage controlled oscillator)

				if (pClockInit->PLL.PLLM < 3 || pClockInit->PLL.PLLM > 63)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7a1b      	ldrb	r3, [r3, #8]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d903      	bls.n	8001800 <RCC_InitClock+0x11c>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7a1b      	ldrb	r3, [r3, #8]
 80017fc:	2b3f      	cmp	r3, #63	; 0x3f
 80017fe:	d901      	bls.n	8001804 <RCC_InitClock+0x120>
				{
					return PLL_CONFIG_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e095      	b.n	8001930 <RCC_InitClock+0x24c>
				}
				RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM);
 8001804:	4b4d      	ldr	r3, [pc, #308]	; (800193c <RCC_InitClock+0x258>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a4c      	ldr	r2, [pc, #304]	; (800193c <RCC_InitClock+0x258>)
 800180a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800180e:	6053      	str	r3, [r2, #4]
				RCC->PLLCFGR |= (pClockInit->PLL.PLLM << RCC_PLLCFGR_PLLM_Pos);
 8001810:	4b4a      	ldr	r3, [pc, #296]	; (800193c <RCC_InitClock+0x258>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	7a12      	ldrb	r2, [r2, #8]
 8001818:	4611      	mov	r1, r2
 800181a:	4a48      	ldr	r2, [pc, #288]	; (800193c <RCC_InitClock+0x258>)
 800181c:	430b      	orrs	r3, r1
 800181e:	6053      	str	r3, [r2, #4]

				// PLLN - multiplication factor for VCO
				// After this operation value should be between 192 and 432 MHz
				// Frequency after this operation is output of VCO

				if (pClockInit->PLL.PLLN < 2 || pClockInit->PLL.PLLM > 432)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	895b      	ldrh	r3, [r3, #10]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d801      	bhi.n	800182c <RCC_InitClock+0x148>
				{
					return PLL_CONFIG_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e081      	b.n	8001930 <RCC_InitClock+0x24c>
				}
				RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN);
 800182c:	4b43      	ldr	r3, [pc, #268]	; (800193c <RCC_InitClock+0x258>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4a42      	ldr	r2, [pc, #264]	; (800193c <RCC_InitClock+0x258>)
 8001832:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800183a:	6053      	str	r3, [r2, #4]
				RCC->PLLCFGR |= (pClockInit->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos);
 800183c:	4b3f      	ldr	r3, [pc, #252]	; (800193c <RCC_InitClock+0x258>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	8952      	ldrh	r2, [r2, #10]
 8001844:	0192      	lsls	r2, r2, #6
 8001846:	4611      	mov	r1, r2
 8001848:	4a3c      	ldr	r2, [pc, #240]	; (800193c <RCC_InitClock+0x258>)
 800184a:	430b      	orrs	r3, r1
 800184c:	6053      	str	r3, [r2, #4]
				// PLLP - division factor for main system clock
				// After this operation values should not exceed 84MHz
				// Frequency after this operation is frequency of main system clock

				// 2 bits register so value can not be more than 3
				if (pClockInit->PLL.PLLP > 3)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	7b1b      	ldrb	r3, [r3, #12]
 8001852:	2b03      	cmp	r3, #3
 8001854:	d901      	bls.n	800185a <RCC_InitClock+0x176>
				{
					return PLL_CONFIG_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e06a      	b.n	8001930 <RCC_InitClock+0x24c>
				}
				RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLP);
 800185a:	4b38      	ldr	r3, [pc, #224]	; (800193c <RCC_InitClock+0x258>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4a37      	ldr	r2, [pc, #220]	; (800193c <RCC_InitClock+0x258>)
 8001860:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001864:	6053      	str	r3, [r2, #4]
				RCC->PLLCFGR |= (pClockInit->PLL.PLLP << RCC_PLLCFGR_PLLP_Pos);
 8001866:	4b35      	ldr	r3, [pc, #212]	; (800193c <RCC_InitClock+0x258>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	7b12      	ldrb	r2, [r2, #12]
 800186e:	0412      	lsls	r2, r2, #16
 8001870:	4611      	mov	r1, r2
 8001872:	4a32      	ldr	r2, [pc, #200]	; (800193c <RCC_InitClock+0x258>)
 8001874:	430b      	orrs	r3, r1
 8001876:	6053      	str	r3, [r2, #4]
				// PLLQ - ) division factor for USB OTG FS, SDIO and random number generator clocks
				// The USB OTG FS requires a 48 MHz clock to work correctly. The SDIO and the
				// random number generator need a frequency lower than or equal to 48 MHz to work
				// correctly

				if (pClockInit->PLL.PLLQ < 2 || pClockInit->PLL.PLLQ > 15)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7b5b      	ldrb	r3, [r3, #13]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d903      	bls.n	8001888 <RCC_InitClock+0x1a4>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7b5b      	ldrb	r3, [r3, #13]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d901      	bls.n	800188c <RCC_InitClock+0x1a8>
				{
					return PLL_CONFIG_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e051      	b.n	8001930 <RCC_InitClock+0x24c>
				}
				RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLQ);
 800188c:	4b2b      	ldr	r3, [pc, #172]	; (800193c <RCC_InitClock+0x258>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4a2a      	ldr	r2, [pc, #168]	; (800193c <RCC_InitClock+0x258>)
 8001892:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001896:	6053      	str	r3, [r2, #4]
				RCC->PLLCFGR |= (pClockInit->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos);
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <RCC_InitClock+0x258>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	7b52      	ldrb	r2, [r2, #13]
 80018a0:	0612      	lsls	r2, r2, #24
 80018a2:	4611      	mov	r1, r2
 80018a4:	4a25      	ldr	r2, [pc, #148]	; (800193c <RCC_InitClock+0x258>)
 80018a6:	430b      	orrs	r3, r1
 80018a8:	6053      	str	r3, [r2, #4]

/* 6. Enable the PLL */
				RCC->CR |= (RCC_PLL_STATE_ENABLE << RCC_CR_PLLON_Pos);
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <RCC_InitClock+0x258>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a23      	ldr	r2, [pc, #140]	; (800193c <RCC_InitClock+0x258>)
 80018b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b4:	6013      	str	r3, [r2, #0]

				// wait until PLL is ready
				while (!(RCC->CR & RCC_CR_PLLRDY))
 80018b6:	bf00      	nop
 80018b8:	4b20      	ldr	r3, [pc, #128]	; (800193c <RCC_InitClock+0x258>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f9      	beq.n	80018b8 <RCC_InitClock+0x1d4>
					;
/* 7. Select system clock switch */
				// set PLL as system clock
				RCC->CFGR &= ~(RCC_CFGR_SW);
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <RCC_InitClock+0x258>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	4a1c      	ldr	r2, [pc, #112]	; (800193c <RCC_InitClock+0x258>)
 80018ca:	f023 0303 	bic.w	r3, r3, #3
 80018ce:	6093      	str	r3, [r2, #8]
				RCC->CFGR |= RCC_CFGR_SW_PLL;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <RCC_InitClock+0x258>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <RCC_InitClock+0x258>)
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	6093      	str	r3, [r2, #8]
				while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80018dc:	bf00      	nop
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <RCC_InitClock+0x258>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d1f9      	bne.n	80018de <RCC_InitClock+0x1fa>

				return 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e020      	b.n	8001930 <RCC_InitClock+0x24c>
			}
			else
			{
/* 6. Disable the PLL */
				RCC->CR = (RCC_PLL_STATE_DISABLE << RCC_CR_PLLON_Pos);
 80018ee:	4b13      	ldr	r3, [pc, #76]	; (800193c <RCC_InitClock+0x258>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

				// wait until PLL is disables
				while (!(RCC->CR & RCC_CR_PLLRDY));
 80018f4:	bf00      	nop
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <RCC_InitClock+0x258>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f9      	beq.n	80018f6 <RCC_InitClock+0x212>
/* 7. Select system clock switch */
				// set HSI or HE as main system clock
				RCC->CFGR &= ~(RCC_CFGR_SW);
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <RCC_InitClock+0x258>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	4a0d      	ldr	r2, [pc, #52]	; (800193c <RCC_InitClock+0x258>)
 8001908:	f023 0303 	bic.w	r3, r3, #3
 800190c:	6093      	str	r3, [r2, #8]
				RCC->CFGR |= (pClockInit->OscillatorType << RCC_CFGR_SW_Pos);
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <RCC_InitClock+0x258>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	7812      	ldrb	r2, [r2, #0]
 8001916:	4611      	mov	r1, r2
 8001918:	4a08      	ldr	r2, [pc, #32]	; (800193c <RCC_InitClock+0x258>)
 800191a:	430b      	orrs	r3, r1
 800191c:	6093      	str	r3, [r2, #8]

				// wait until HSI/HSE is set as a clock source
				while((RCC->CFGR & (pClockInit->OscillatorType << RCC_CFGR_SW_Pos)) != RCC_CFGR_SWS_PLL);
 800191e:	bf00      	nop
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <RCC_InitClock+0x258>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	7812      	ldrb	r2, [r2, #0]
 8001928:	4013      	ands	r3, r2
 800192a:	2b08      	cmp	r3, #8
 800192c:	d1f8      	bne.n	8001920 <RCC_InitClock+0x23c>

			}

	return 0;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40023800 	.word	0x40023800
 8001940:	40007000 	.word	0x40007000
 8001944:	40023c00 	.word	0x40023c00

08001948 <__libc_init_array>:
 8001948:	b570      	push	{r4, r5, r6, lr}
 800194a:	4d0d      	ldr	r5, [pc, #52]	; (8001980 <__libc_init_array+0x38>)
 800194c:	4c0d      	ldr	r4, [pc, #52]	; (8001984 <__libc_init_array+0x3c>)
 800194e:	1b64      	subs	r4, r4, r5
 8001950:	10a4      	asrs	r4, r4, #2
 8001952:	2600      	movs	r6, #0
 8001954:	42a6      	cmp	r6, r4
 8001956:	d109      	bne.n	800196c <__libc_init_array+0x24>
 8001958:	4d0b      	ldr	r5, [pc, #44]	; (8001988 <__libc_init_array+0x40>)
 800195a:	4c0c      	ldr	r4, [pc, #48]	; (800198c <__libc_init_array+0x44>)
 800195c:	f000 f820 	bl	80019a0 <_init>
 8001960:	1b64      	subs	r4, r4, r5
 8001962:	10a4      	asrs	r4, r4, #2
 8001964:	2600      	movs	r6, #0
 8001966:	42a6      	cmp	r6, r4
 8001968:	d105      	bne.n	8001976 <__libc_init_array+0x2e>
 800196a:	bd70      	pop	{r4, r5, r6, pc}
 800196c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001970:	4798      	blx	r3
 8001972:	3601      	adds	r6, #1
 8001974:	e7ee      	b.n	8001954 <__libc_init_array+0xc>
 8001976:	f855 3b04 	ldr.w	r3, [r5], #4
 800197a:	4798      	blx	r3
 800197c:	3601      	adds	r6, #1
 800197e:	e7f2      	b.n	8001966 <__libc_init_array+0x1e>
 8001980:	08001bc0 	.word	0x08001bc0
 8001984:	08001bc0 	.word	0x08001bc0
 8001988:	08001bc0 	.word	0x08001bc0
 800198c:	08001bc4 	.word	0x08001bc4

08001990 <memset>:
 8001990:	4402      	add	r2, r0
 8001992:	4603      	mov	r3, r0
 8001994:	4293      	cmp	r3, r2
 8001996:	d100      	bne.n	800199a <memset+0xa>
 8001998:	4770      	bx	lr
 800199a:	f803 1b01 	strb.w	r1, [r3], #1
 800199e:	e7f9      	b.n	8001994 <memset+0x4>

080019a0 <_init>:
 80019a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a2:	bf00      	nop
 80019a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019a6:	bc08      	pop	{r3}
 80019a8:	469e      	mov	lr, r3
 80019aa:	4770      	bx	lr

080019ac <_fini>:
 80019ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ae:	bf00      	nop
 80019b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019b2:	bc08      	pop	{r3}
 80019b4:	469e      	mov	lr, r3
 80019b6:	4770      	bx	lr
